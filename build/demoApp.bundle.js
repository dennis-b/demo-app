/******/
(function (modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/
	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/
	function __webpack_require__(moduleId) {
		/******/
		/******/ 		// Check if module is in cache
		/******/
		if (installedModules[moduleId])
		/******/            return installedModules[moduleId].exports;
		/******/
		/******/ 		// Create a new module (and put it into the cache)
		/******/
		var module = installedModules[moduleId] = {
			/******/            exports: {},
			/******/            id: moduleId,
			/******/            loaded: false
			/******/
		};
		/******/
		/******/ 		// Execute the module function
		/******/
		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
		/******/
		/******/ 		// Flag the module as loaded
		/******/
		module.loaded = true;
		/******/
		/******/ 		// Return the exports of the module
		/******/
		return module.exports;
		/******/
	}

	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/
	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/
	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/
	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/
	return __webpack_require__(0);
	/******/
})
	/************************************************************************/
	/******/([
	/* 0 */
	/***/ function (module, exports, __webpack_require__) {

		// js vendor files
		'use strict';

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		__webpack_require__(71);

		var _jquery = __webpack_require__(239);

		var _jquery2 = _interopRequireDefault(_jquery);

		var _lodash = __webpack_require__(240);

		var _lodash2 = _interopRequireDefault(_lodash);

		var _angular = __webpack_require__(242);

		var _angular2 = _interopRequireDefault(_angular);

		__webpack_require__(244);

		__webpack_require__(246);

		__webpack_require__(247);

		__webpack_require__(419);

		__webpack_require__(421);

		__webpack_require__(70);

		__webpack_require__(423);

		__webpack_require__(425);

		__webpack_require__(426);

		// style vendor files

		__webpack_require__(428);

		//----------------app files-----------------------------------------------------

		__webpack_require__(450);

		__webpack_require__(454);

		__webpack_require__(461);

		var _mainModule = __webpack_require__(453);

		var _mainModule2 = _interopRequireDefault(_mainModule);

		_angular2['default'].element(document).ready(function () {
			_angular2['default'].bootstrap(document, [_mainModule2['default'].name], {
				strictDi: true
			});
			prettyPrint();
		});

		/***/
	},
	/* 1 */,
	/* 2 */,
	/* 3 */,
	/* 4 */,
	/* 5 */,
	/* 6 */,
	/* 7 */,
	/* 8 */,
	/* 9 */,
	/* 10 */,
	/* 11 */,
	/* 12 */,
	/* 13 */,
	/* 14 */,
	/* 15 */,
	/* 16 */,
	/* 17 */,
	/* 18 */,
	/* 19 */,
	/* 20 */,
	/* 21 */,
	/* 22 */,
	/* 23 */,
	/* 24 */,
	/* 25 */,
	/* 26 */,
	/* 27 */,
	/* 28 */,
	/* 29 */,
	/* 30 */,
	/* 31 */,
	/* 32 */,
	/* 33 */,
	/* 34 */,
	/* 35 */,
	/* 36 */,
	/* 37 */,
	/* 38 */,
	/* 39 */,
	/* 40 */,
	/* 41 */,
	/* 42 */,
	/* 43 */,
	/* 44 */,
	/* 45 */,
	/* 46 */,
	/* 47 */,
	/* 48 */,
	/* 49 */,
	/* 50 */,
	/* 51 */,
	/* 52 */,
	/* 53 */,
	/* 54 */,
	/* 55 */,
	/* 56 */,
	/* 57 */,
	/* 58 */,
	/* 59 */,
	/* 60 */,
	/* 61 */,
	/* 62 */,
	/* 63 */,
	/* 64 */,
	/* 65 */,
	/* 66 */,
	/* 67 */,
	/* 68 */,
	/* 69 */,
	/* 70 */
	/***/ function (module, exports) {

		/**
		 * State-based routing for AngularJS
		 * @version v0.2.15
		 * @link http://angular-ui.github.com/
		 * @license MIT License, http://www.opensource.org/licenses/MIT
		 */

		/* commonjs package manager support (eg componentjs) */
		if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports) {
			module.exports = 'ui.router';
		}

		(function (window, angular, undefined) {
			/*jshint globalstrict:true*/
			/*global angular:false*/
			'use strict';

			var isDefined = angular.isDefined,
				isFunction = angular.isFunction,
				isString = angular.isString,
				isObject = angular.isObject,
				isArray = angular.isArray,
				forEach = angular.forEach,
				extend = angular.extend,
				copy = angular.copy;

			function inherit(parent, extra) {
				return extend(new (extend(function () {
				}, {prototype: parent}))(), extra);
			}

			function merge(dst) {
				forEach(arguments, function (obj) {
					if (obj !== dst) {
						forEach(obj, function (value, key) {
							if (!dst.hasOwnProperty(key)) dst[key] = value;
						});
					}
				});
				return dst;
			}

			/**
			 * Finds the common ancestor path between two states.
	 *
			 * @param {Object} first The first state.
			 * @param {Object} second The second state.
			 * @return {Array} Returns an array of state names in descending order, not including the root.
			 */
			function ancestors(first, second) {
				var path = [];

				for (var n in first.path) {
					if (first.path[n] !== second.path[n]) break;
					path.push(first.path[n]);
				}
				return path;
			}

			/**
			 * IE8-safe wrapper for `Object.keys()`.
	 *
			 * @param {Object} object A JavaScript object.
			 * @return {Array} Returns the keys of the object as an array.
			 */
			function objectKeys(object) {
				if (Object.keys) {
					return Object.keys(object);
				}
				var result = [];

				forEach(object, function (val, key) {
					result.push(key);
				});
				return result;
			}

			/**
			 * IE8-safe wrapper for `Array.prototype.indexOf()`.
	 *
			 * @param {Array} array A JavaScript array.
			 * @param {*} value A value to search the array for.
			 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
			 */
			function indexOf(array, value) {
				if (Array.prototype.indexOf) {
					return array.indexOf(value, Number(arguments[2]) || 0);
				}
				var len = array.length >>> 0, from = Number(arguments[2]) || 0;
				from = (from < 0) ? Math.ceil(from) : Math.floor(from);

				if (from < 0) from += len;

				for (; from < len; from++) {
					if (from in array && array[from] === value) return from;
				}
				return -1;
			}

			/**
			 * Merges a set of parameters with all parameters inherited between the common parents of the
			 * current state and a given destination state.
	 *
			 * @param {Object} currentParams The value of the current state parameters ($stateParams).
			 * @param {Object} newParams The set of parameters which will be composited with inherited params.
			 * @param {Object} $current Internal definition of object representing the current state.
			 * @param {Object} $to Internal definition of object representing state to transition to.
			 */
			function inheritParams(currentParams, newParams, $current, $to) {
				var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

				for (var i in parents) {
					if (!parents[i].params) continue;
					parentParams = objectKeys(parents[i].params);
					if (!parentParams.length) continue;

					for (var j in parentParams) {
						if (indexOf(inheritList, parentParams[j]) >= 0) continue;
						inheritList.push(parentParams[j]);
						inherited[parentParams[j]] = currentParams[parentParams[j]];
					}
				}
				return extend({}, inherited, newParams);
			}

			/**
			 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
	 *
			 * @param {Object} a The first object.
			 * @param {Object} b The second object.
			 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
			 *                     it defaults to the list of keys in `a`.
			 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
			 */
			function equalForKeys(a, b, keys) {
				if (!keys) {
					keys = [];
					for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
				}

				for (var i = 0; i < keys.length; i++) {
					var k = keys[i];
					if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
				}
				return true;
			}

			/**
			 * Returns the subset of an object, based on a list of keys.
			 *
			 * @param {Array} keys
			 * @param {Object} values
			 * @return {Boolean} Returns a subset of `values`.
			 */
			function filterByKeys(keys, values) {
				var filtered = {};

				forEach(keys, function (name) {
					filtered[name] = values[name];
				});
				return filtered;
			}

			// like _.indexBy
			// when you know that your index values will be unique, or you want last-one-in to win
			function indexBy(array, propName) {
				var result = {};
				forEach(array, function (item) {
					result[item[propName]] = item;
				});
				return result;
			}

			// extracted from underscore.js
			// Return a copy of the object only containing the whitelisted properties.
			function pick(obj) {
				var copy = {};
				var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
				forEach(keys, function (key) {
					if (key in obj) copy[key] = obj[key];
				});
				return copy;
			}

			// extracted from underscore.js
			// Return a copy of the object omitting the blacklisted properties.
			function omit(obj) {
				var copy = {};
				var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
				for (var key in obj) {
					if (indexOf(keys, key) == -1) copy[key] = obj[key];
				}
				return copy;
			}

			function pluck(collection, key) {
				var result = isArray(collection) ? [] : {};

				forEach(collection, function (val, i) {
					result[i] = isFunction(key) ? key(val) : val[key];
				});
				return result;
			}

			function filter(collection, callback) {
				var array = isArray(collection);
				var result = array ? [] : {};
				forEach(collection, function (val, i) {
					if (callback(val, i)) {
						result[array ? result.length : i] = val;
					}
				});
				return result;
			}

			function map(collection, callback) {
				var result = isArray(collection) ? [] : {};

				forEach(collection, function (val, i) {
					result[i] = callback(val, i);
				});
				return result;
			}

			/**
			 * @ngdoc overview
			 * @name ui.router.util
			 *
			 * @description
			 * # ui.router.util sub-module
			 *
			 * This module is a dependency of other sub-modules. Do not include this module as a dependency
			 * in your angular app (use {@link ui.router} module instead).
			 *
			 */
			angular.module('ui.router.util', ['ng']);

			/**
			 * @ngdoc overview
			 * @name ui.router.router
			 *
			 * @requires ui.router.util
			 *
			 * @description
			 * # ui.router.router sub-module
			 *
			 * This module is a dependency of other sub-modules. Do not include this module as a dependency
			 * in your angular app (use {@link ui.router} module instead).
			 */
			angular.module('ui.router.router', ['ui.router.util']);

			/**
			 * @ngdoc overview
			 * @name ui.router.state
			 *
			 * @requires ui.router.router
			 * @requires ui.router.util
			 *
			 * @description
			 * # ui.router.state sub-module
			 *
			 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
			 * in your angular app (use {@link ui.router} module instead).
			 *
			 */
			angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

			/**
			 * @ngdoc overview
			 * @name ui.router
			 *
			 * @requires ui.router.state
			 *
			 * @description
			 * # ui.router
			 *
			 * ## The main module for ui.router
			 * There are several sub-modules included with the ui.router module, however only this module is needed
			 * as a dependency within your angular app. The other modules are for organization purposes.
			 *
			 * The modules are:
			 * * ui.router - the main "umbrella" module
			 * * ui.router.router -
			 *
			 * *You'll need to include **only** this module as the dependency within your angular app.*
			 *
			 * <pre>
			 * <!doctype html>
			 * <html ng-app="myApp">
			 * <head>
			 *   <script src="js/angular.js"></script>
			 *   <!-- Include the ui-router script -->
			 *   <script src="js/angular-ui-router.min.js"></script>
			 *   <script>
			 *     // ...and add 'ui.router' as a dependency
			 *     var myApp = angular.module('myApp', ['ui.router']);
			 *   </script>
			 * </head>
			 * <body>
			 * </body>
			 * </html>
			 * </pre>
			 */
			angular.module('ui.router', ['ui.router.state']);

			angular.module('ui.router.compat', ['ui.router']);

			/**
			 * @ngdoc object
			 * @name ui.router.util.$resolve
			 *
			 * @requires $q
			 * @requires $injector
			 *
			 * @description
			 * Manages resolution of (acyclic) graphs of promises.
			 */
			$Resolve.$inject = ['$q', '$injector'];
			function $Resolve($q, $injector) {

				var VISIT_IN_PROGRESS = 1,
					VISIT_DONE = 2,
					NOTHING = {},
					NO_DEPENDENCIES = [],
					NO_LOCALS = NOTHING,
					NO_PARENT = extend($q.when(NOTHING), {$$promises: NOTHING, $$values: NOTHING});


				/**
				 * @ngdoc function
				 * @name ui.router.util.$resolve#study
				 * @methodOf ui.router.util.$resolve
				 *
				 * @description
				 * Studies a set of invocables that are likely to be used multiple times.
				 * <pre>
				 * $resolve.study(invocables)(locals, parent, self)
				 * </pre>
				 * is equivalent to
				 * <pre>
				 * $resolve.resolve(invocables, locals, parent, self)
				 * </pre>
				 * but the former is more efficient (in fact `resolve` just calls `study`
				 * internally).
				 *
				 * @param {object} invocables Invocable objects
				 * @return {function} a function to pass in locals, parent and self
				 */
				this.study = function (invocables) {
					if (!isObject(invocables)) throw new Error("'invocables' must be an object");
					var invocableKeys = objectKeys(invocables || {});

					// Perform a topological sort of invocables to build an ordered plan
					var plan = [], cycle = [], visited = {};

					function visit(value, key) {
						if (visited[key] === VISIT_DONE) return;

						cycle.push(key);
						if (visited[key] === VISIT_IN_PROGRESS) {
							cycle.splice(0, indexOf(cycle, key));
							throw new Error("Cyclic dependency: " + cycle.join(" -> "));
						}
						visited[key] = VISIT_IN_PROGRESS;

						if (isString(value)) {
							plan.push(key, [function () {
								return $injector.get(value);
							}], NO_DEPENDENCIES);
						} else {
							var params = $injector.annotate(value);
							forEach(params, function (param) {
								if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
							});
							plan.push(key, value, params);
						}

						cycle.pop();
						visited[key] = VISIT_DONE;
					}

					forEach(invocables, visit);
					invocables = cycle = visited = null; // plan is all that's required

					function isResolve(value) {
						return isObject(value) && value.then && value.$$promises;
					}

					return function (locals, parent, self) {
						if (isResolve(locals) && self === undefined) {
							self = parent;
							parent = locals;
							locals = null;
						}
						if (!locals) locals = NO_LOCALS;
						else if (!isObject(locals)) {
							throw new Error("'locals' must be an object");
						}
						if (!parent) parent = NO_PARENT;
						else if (!isResolve(parent)) {
							throw new Error("'parent' must be a promise returned by $resolve.resolve()");
						}

						// To complete the overall resolution, we have to wait for the parent
						// promise and for the promise for each invokable in our plan.
						var resolution = $q.defer(),
							result = resolution.promise,
							promises = result.$$promises = {},
							values = extend({}, locals),
							wait = 1 + plan.length / 3,
							merged = false;

						function done() {
							// Merge parent values we haven't got yet and publish our own $$values
							if (!--wait) {
								if (!merged) merge(values, parent.$$values);
								result.$$values = values;
								result.$$promises = result.$$promises || true; // keep for isResolve()
								delete result.$$inheritedValues;
								resolution.resolve(values);
							}
						}

						function fail(reason) {
							result.$$failure = reason;
							resolution.reject(reason);
						}

						// Short-circuit if parent has already failed
						if (isDefined(parent.$$failure)) {
							fail(parent.$$failure);
							return result;
						}

						if (parent.$$inheritedValues) {
							merge(values, omit(parent.$$inheritedValues, invocableKeys));
						}

						// Merge parent values if the parent has already resolved, or merge
						// parent promises and wait if the parent resolve is still in progress.
						extend(promises, parent.$$promises);
						if (parent.$$values) {
							merged = merge(values, omit(parent.$$values, invocableKeys));
							result.$$inheritedValues = omit(parent.$$values, invocableKeys);
							done();
						} else {
							if (parent.$$inheritedValues) {
								result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
							}
							parent.then(done, fail);
						}

						// Process each invocable in the plan, but ignore any where a local of the same name exists.
						for (var i = 0, ii = plan.length; i < ii; i += 3) {
							if (locals.hasOwnProperty(plan[i])) done();
							else invoke(plan[i], plan[i + 1], plan[i + 2]);
						}

						function invoke(key, invocable, params) {
							// Create a deferred for this invocation. Failures will propagate to the resolution as well.
							var invocation = $q.defer(), waitParams = 0;

							function onfailure(reason) {
								invocation.reject(reason);
								fail(reason);
							}

							// Wait for any parameter that we have a promise for (either from parent or from this
							// resolve; in that case study() will have made sure it's ordered before us in the plan).
							forEach(params, function (dep) {
								if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
									waitParams++;
									promises[dep].then(function (result) {
										values[dep] = result;
										if (!(--waitParams)) proceed();
									}, onfailure);
								}
							});
							if (!waitParams) proceed();
							function proceed() {
								if (isDefined(result.$$failure)) return;
								try {
									invocation.resolve($injector.invoke(invocable, self, values));
									invocation.promise.then(function (result) {
										values[key] = result;
										done();
									}, onfailure);
								} catch (e) {
									onfailure(e);
								}
							}

							// Publish promise synchronously; invocations further down in the plan may depend on it.
							promises[key] = invocation.promise;
						}

						return result;
					};
				};

				/**
				 * @ngdoc function
				 * @name ui.router.util.$resolve#resolve
				 * @methodOf ui.router.util.$resolve
				 *
				 * @description
				 * Resolves a set of invocables. An invocable is a function to be invoked via
				 * `$injector.invoke()`, and can have an arbitrary number of dependencies.
				 * An invocable can either return a value directly,
				 * or a `$q` promise. If a promise is returned it will be resolved and the
				 * resulting value will be used instead. Dependencies of invocables are resolved
				 * (in this order of precedence)
				 *
				 * - from the specified `locals`
				 * - from another invocable that is part of this `$resolve` call
				 * - from an invocable that is inherited from a `parent` call to `$resolve`
				 *   (or recursively
				 * - from any ancestor `$resolve` of that parent).
				 *
				 * The return value of `$resolve` is a promise for an object that contains
				 * (in this order of precedence)
				 *
				 * - any `locals` (if specified)
				 * - the resolved return values of all injectables
				 * - any values inherited from a `parent` call to `$resolve` (if specified)
				 *
				 * The promise will resolve after the `parent` promise (if any) and all promises
				 * returned by injectables have been resolved. If any invocable
				 * (or `$injector.invoke`) throws an exception, or if a promise returned by an
				 * invocable is rejected, the `$resolve` promise is immediately rejected with the
				 * same error. A rejection of a `parent` promise (if specified) will likewise be
				 * propagated immediately. Once the `$resolve` promise has been rejected, no
				 * further invocables will be called.
				 *
				 * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
				 * to throw an error. As a special case, an injectable can depend on a parameter
				 * with the same name as the injectable, which will be fulfilled from the `parent`
				 * injectable of the same name. This allows inherited values to be decorated.
				 * Note that in this case any other injectable in the same `$resolve` with the same
				 * dependency would see the decorated value, not the inherited value.
				 *
				 * Note that missing dependencies -- unlike cyclic dependencies -- will cause an
				 * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous)
				 * exception.
				 *
				 * Invocables are invoked eagerly as soon as all dependencies are available.
				 * This is true even for dependencies inherited from a `parent` call to `$resolve`.
				 *
				 * As a special case, an invocable can be a string, in which case it is taken to
				 * be a service name to be passed to `$injector.get()`. This is supported primarily
				 * for backwards-compatibility with the `resolve` property of `$routeProvider`
				 * routes.
				 *
				 * @param {object} invocables functions to invoke or
				 * `$injector` services to fetch.
				 * @param {object} locals  values to make available to the injectables
				 * @param {object} parent  a promise returned by another call to `$resolve`.
				 * @param {object} self  the `this` for the invoked methods
				 * @return {object} Promise for an object that contains the resolved return value
				 * of all invocables, as well as any inherited and local values.
				 */
				this.resolve = function (invocables, locals, parent, self) {
					return this.study(invocables)(locals, parent, self);
				};
			}

			angular.module('ui.router.util').service('$resolve', $Resolve);


			/**
			 * @ngdoc object
			 * @name ui.router.util.$templateFactory
			 *
			 * @requires $http
			 * @requires $templateCache
			 * @requires $injector
			 *
			 * @description
			 * Service. Manages loading of templates.
			 */
			$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
			function $TemplateFactory($http, $templateCache, $injector) {

				/**
				 * @ngdoc function
				 * @name ui.router.util.$templateFactory#fromConfig
				 * @methodOf ui.router.util.$templateFactory
				 *
				 * @description
				 * Creates a template from a configuration object.
				 *
				 * @param {object} config Configuration object for which to load a template.
				 * The following properties are search in the specified order, and the first one
				 * that is defined is used to create the template:
				 *
				 * @param {string|object} config.template html string template or function to
				 * load via {@link ui.router.util.$templateFactory#fromString fromString}.
				 * @param {string|object} config.templateUrl url to load or a function returning
				 * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
				 * @param {Function} config.templateProvider function to invoke via
				 * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
				 * @param {object} params  Parameters to pass to the template function.
				 * @param {object} locals Locals to pass to `invoke` if the template is loaded
				 * via a `templateProvider`. Defaults to `{ params: params }`.
				 *
				 * @return {string|object}  The template html as a string, or a promise for
				 * that string,or `null` if no template is configured.
				 */
				this.fromConfig = function (config, params, locals) {
					return (
						isDefined(config.template) ? this.fromString(config.template, params) :
							isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
								isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
									null
					);
				};

				/**
				 * @ngdoc function
				 * @name ui.router.util.$templateFactory#fromString
				 * @methodOf ui.router.util.$templateFactory
				 *
				 * @description
				 * Creates a template from a string or a function returning a string.
				 *
				 * @param {string|object} template html template as a string or function that
				 * returns an html template as a string.
				 * @param {object} params Parameters to pass to the template function.
				 *
				 * @return {string|object} The template html as a string, or a promise for that
				 * string.
				 */
				this.fromString = function (template, params) {
					return isFunction(template) ? template(params) : template;
				};

				/**
				 * @ngdoc function
				 * @name ui.router.util.$templateFactory#fromUrl
				 * @methodOf ui.router.util.$templateFactory
				 *
				 * @description
				 * Loads a template from the a URL via `$http` and `$templateCache`.
				 *
				 * @param {string|Function} url url of the template to load, or a function
				 * that returns a url.
				 * @param {Object} params Parameters to pass to the url function.
				 * @return {string|Promise.<string>} The template html as a string, or a promise
				 * for that string.
				 */
				this.fromUrl = function (url, params) {
					if (isFunction(url)) url = url(params);
					if (url == null) return null;
					else return $http
						.get(url, {cache: $templateCache, headers: {Accept: 'text/html'}})
						.then(function (response) {
							return response.data;
						});
				};

				/**
				 * @ngdoc function
				 * @name ui.router.util.$templateFactory#fromProvider
				 * @methodOf ui.router.util.$templateFactory
				 *
				 * @description
				 * Creates a template by invoking an injectable provider function.
				 *
				 * @param {Function} provider Function to invoke via `$injector.invoke`
				 * @param {Object} params Parameters for the template.
				 * @param {Object} locals Locals to pass to `invoke`. Defaults to
				 * `{ params: params }`.
				 * @return {string|Promise.<string>} The template html as a string, or a promise
				 * for that string.
				 */
				this.fromProvider = function (provider, params, locals) {
					return $injector.invoke(provider, null, locals || {params: params});
				};
			}

			angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

			var $$UMFP; // reference to $UrlMatcherFactoryProvider

			/**
			 * @ngdoc object
			 * @name ui.router.util.type:UrlMatcher
			 *
			 * @description
			 * Matches URLs against patterns and extracts named parameters from the path or the search
			 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
			 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
			 * do not influence whether or not a URL is matched, but their values are passed through into
			 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
			 *
			 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
			 * syntax, which optionally allows a regular expression for the parameter to be specified:
			 *
			 * * `':'` name - colon placeholder
			 * * `'*'` name - catch-all placeholder
			 * * `'{' name '}'` - curly placeholder
			 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
			 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
			 *
			 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
			 * must be unique within the pattern (across both path and search parameters). For colon
			 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
			 * number of characters other than '/'. For catch-all placeholders the path parameter matches
			 * any number of characters.
			 *
			 * Examples:
			 *
			 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
			 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
			 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
			 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
			 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
			 * * `'/user/{id:[^/]*}'` - Same as the previous example.
			 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
			 *   parameter consists of 1 to 8 hex digits.
			 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
			 *   path into the parameter 'path'.
			 * * `'/files/*path'` - ditto.
			 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
			 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
			 *
			 * @param {string} pattern  The pattern to compile into a matcher.
			 * @param {Object} config  A configuration object hash:
			 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
			 *   an existing UrlMatcher
			 *
			 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
			 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
			 *
			 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
			 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
			 *   non-null) will start with this prefix.
			 *
			 * @property {string} source  The pattern that was passed into the constructor
			 *
			 * @property {string} sourcePath  The path portion of the source property
			 *
			 * @property {string} sourceSearch  The search portion of the source property
			 *
			 * @property {string} regex  The constructed regex that will be used to match against the url when
			 *   it is time to determine which url will match.
			 *
			 * @returns {Object}  New `UrlMatcher` object
			 */
			function UrlMatcher(pattern, config, parentMatcher) {
				config = extend({params: {}}, isObject(config) ? config : {});

				// Find all placeholders and create a compiled pattern, using either classic or curly syntax:
				//   '*' name
				//   ':' name
				//   '{' name '}'
				//   '{' name ':' regexp '}'
				// The regular expression is somewhat complicated due to the need to allow curly braces
				// inside the regular expression. The placeholder regexp breaks down as follows:
				//    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
				//    \{([\w\[\]]+)(?:\:( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
				//    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
				//    [^{}\\]+                       - anything other than curly braces or backslash
				//    \\.                            - a backslash escape
				//    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
				var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
					searchPlaceholder = /([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
					compiled = '^', last = 0, m,
					segments = this.segments = [],
					parentParams = parentMatcher ? parentMatcher.params : {},
					params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
					paramNames = [];

				function addParameter(id, type, config, location) {
					paramNames.push(id);
					if (parentParams[id]) return parentParams[id];
					if (!/^\w+(-+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
					if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
					params[id] = new $$UMFP.Param(id, type, config, location);
					return params[id];
				}

				function quoteRegExp(string, pattern, squash, optional) {
					var surroundPattern = ['', ''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
					if (!pattern) return result;
					switch (squash) {
						case false:
							surroundPattern = ['(', ')' + (optional ? "?" : "")];
							break;
						case true:
							surroundPattern = ['?(', ')?'];
							break;
						default:
							surroundPattern = ['(' + squash + "|", ')?'];
							break;
					}
					return result + surroundPattern[0] + pattern + surroundPattern[1];
				}

				this.source = pattern;

				// Split into static segments separated by path parameter placeholders.
				// The number of segments is always 1 more than the number of parameters.
				function matchDetails(m, isSearch) {
					var id, regexp, segment, type, cfg, arrayMode;
					id = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
					cfg = config.params[id];
					segment = pattern.substring(last, m.index);
					regexp = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
					type = $$UMFP.type(regexp || "string") || inherit($$UMFP.type("string"), {pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined)});
					return {
						id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
					};
				}

				var p, param, segment;
				while ((m = placeholder.exec(pattern))) {
					p = matchDetails(m, false);
					if (p.segment.indexOf('?') >= 0) break; // we're into the search part

					param = addParameter(p.id, p.type, p.cfg, "path");
					compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
					segments.push(p.segment);
					last = placeholder.lastIndex;
				}
				segment = pattern.substring(last);

				// Find any search parameter names and remove them from the last segment
				var i = segment.indexOf('?');

				if (i >= 0) {
					var search = this.sourceSearch = segment.substring(i);
					segment = segment.substring(0, i);
					this.sourcePath = pattern.substring(0, last + i);

					if (search.length > 0) {
						last = 0;
						while ((m = searchPlaceholder.exec(search))) {
							p = matchDetails(m, true);
							param = addParameter(p.id, p.type, p.cfg, "search");
							last = placeholder.lastIndex;
							// check if ?&
						}
					}
				} else {
					this.sourcePath = pattern;
					this.sourceSearch = '';
				}

				compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
				segments.push(segment);

				this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
				this.prefix = segments[0];
				this.$$paramNames = paramNames;
			}

			/**
			 * @ngdoc function
			 * @name ui.router.util.type:UrlMatcher#concat
			 * @methodOf ui.router.util.type:UrlMatcher
			 *
			 * @description
			 * Returns a new matcher for a pattern constructed by appending the path part and adding the
			 * search parameters of the specified pattern to this pattern. The current pattern is not
			 * modified. This can be understood as creating a pattern for URLs that are relative to (or
			 * suffixes of) the current pattern.
			 *
			 * @example
			 * The following two matchers are equivalent:
			 * <pre>
			 * new UrlMatcher('/user/{id}?q').concat('/details?date');
			 * new UrlMatcher('/user/{id}/details?q&date');
			 * </pre>
			 *
			 * @param {string} pattern  The pattern to append.
			 * @param {Object} config  An object hash of the configuration for the matcher.
			 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
			 */
			UrlMatcher.prototype.concat = function (pattern, config) {
				// Because order of search parameters is irrelevant, we can add our own search
				// parameters to the end of the new pattern. Parse the new pattern by itself
				// and then join the bits together, but it's much easier to do this on a string level.
				var defaultConfig = {
					caseInsensitive: $$UMFP.caseInsensitive(),
					strict: $$UMFP.strictMode(),
					squash: $$UMFP.defaultSquashPolicy()
				};
				return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
			};

			UrlMatcher.prototype.toString = function () {
				return this.source;
			};

			/**
			 * @ngdoc function
			 * @name ui.router.util.type:UrlMatcher#exec
			 * @methodOf ui.router.util.type:UrlMatcher
			 *
			 * @description
			 * Tests the specified path against this matcher, and returns an object containing the captured
			 * parameter values, or null if the path does not match. The returned object contains the values
			 * of any search parameters that are mentioned in the pattern, but their value may be null if
			 * they are not present in `searchParams`. This means that search parameters are always treated
			 * as optional.
			 *
			 * @example
			 * <pre>
			 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
	 *   x: '1', q: 'hello'
	 * });
			 * // returns { id: 'bob', q: 'hello', r: null }
			 * </pre>
			 *
			 * @param {string} path  The URL path to match, e.g. `$location.path()`.
			 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
			 * @returns {Object}  The captured parameter values.
			 */
			UrlMatcher.prototype.exec = function (path, searchParams) {
				var m = this.regexp.exec(path);
				if (!m) return null;
				searchParams = searchParams || {};

				var paramNames = this.parameters(), nTotal = paramNames.length,
					nPath = this.segments.length - 1,
					values = {}, i, j, cfg, paramName;

				if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

				function decodePathArray(string) {
					function reverseString(str) {
						return str.split("").reverse().join("");
					}

					function unquoteDashes(str) {
						return str.replace(/\\-/g, "-");
					}

					var split = reverseString(string).split(/-(?!\\)/);
					var allReversed = map(split, reverseString);
					return map(allReversed, unquoteDashes).reverse();
				}

				for (i = 0; i < nPath; i++) {
					paramName = paramNames[i];
					var param = this.params[paramName];
					var paramVal = m[i + 1];
					// if the param value matches a pre-replace pair, replace the value before decoding.
					for (j = 0; j < param.replace; j++) {
						if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
					}
					if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
					values[paramName] = param.value(paramVal);
				}
				for (/**/; i < nTotal; i++) {
					paramName = paramNames[i];
					values[paramName] = this.params[paramName].value(searchParams[paramName]);
				}

				return values;
			};

			/**
			 * @ngdoc function
			 * @name ui.router.util.type:UrlMatcher#parameters
			 * @methodOf ui.router.util.type:UrlMatcher
			 *
			 * @description
			 * Returns the names of all path and search parameters of this pattern in an unspecified order.
			 *
			 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
			 *    pattern has no parameters, an empty array is returned.
			 */
			UrlMatcher.prototype.parameters = function (param) {
				if (!isDefined(param)) return this.$$paramNames;
				return this.params[param] || null;
			};

			/**
			 * @ngdoc function
			 * @name ui.router.util.type:UrlMatcher#validate
			 * @methodOf ui.router.util.type:UrlMatcher
			 *
			 * @description
			 * Checks an object hash of parameters to validate their correctness according to the parameter
			 * types of this `UrlMatcher`.
			 *
			 * @param {Object} params The object hash of parameters to validate.
			 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
			 */
			UrlMatcher.prototype.validates = function (params) {
				return this.params.$$validates(params);
			};

			/**
			 * @ngdoc function
			 * @name ui.router.util.type:UrlMatcher#format
			 * @methodOf ui.router.util.type:UrlMatcher
			 *
			 * @description
			 * Creates a URL that matches this pattern by substituting the specified values
			 * for the path and search parameters. Null values for path parameters are
			 * treated as empty strings.
			 *
			 * @example
			 * <pre>
			 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
			 * // returns '/user/bob?q=yes'
			 * </pre>
			 *
			 * @param {Object} values  the values to substitute for the parameters in this pattern.
			 * @returns {string}  the formatted URL (path and optionally search part).
			 */
			UrlMatcher.prototype.format = function (values) {
				values = values || {};
				var segments = this.segments, params = this.parameters(), paramset = this.params;
				if (!this.validates(values)) return null;

				var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

				function encodeDashes(str) { // Replace dashes with encoded "\-"
					return encodeURIComponent(str).replace(/-/g, function (c) {
						return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase();
					});
				}

				for (i = 0; i < nTotal; i++) {
					var isPathParam = i < nPath;
					var name = params[i], param = paramset[name], value = param.value(values[name]);
					var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
					var squash = isDefaultValue ? param.squash : false;
					var encoded = param.type.encode(value);

					if (isPathParam) {
						var nextSegment = segments[i + 1];
						if (squash === false) {
							if (encoded != null) {
								if (isArray(encoded)) {
									result += map(encoded, encodeDashes).join("-");
								} else {
									result += encodeURIComponent(encoded);
								}
							}
							result += nextSegment;
						} else if (squash === true) {
							var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
							result += nextSegment.match(capture)[1];
						} else if (isString(squash)) {
							result += squash + nextSegment;
						}
					} else {
						if (encoded == null || (isDefaultValue && squash !== false)) continue;
						if (!isArray(encoded)) encoded = [encoded];
						encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
						result += (search ? '&' : '?') + (name + '=' + encoded);
						search = true;
					}
				}

				return result;
			};

			/**
			 * @ngdoc object
			 * @name ui.router.util.type:Type
			 *
			 * @description
			 * Implements an interface to define custom parameter types that can be decoded from and encoded to
			 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
			 * objects when matching or formatting URLs, or comparing or validating parameter values.
			 *
			 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
			 * information on registering custom types.
			 *
			 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
			 *        properties will override the default methods and/or pattern in `Type`'s public interface.
			 * @example
			 * <pre>
			 * {
	 *   decode: function(val) { return parseInt(val, 10); },
	 *   encode: function(val) { return val && val.toString(); },
	 *   equals: function(a, b) { return this.is(a) && a === b; },
	 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
	 *   pattern: /\d+/
	 * }
			 * </pre>
			 *
			 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
			 *           coming from a substring of a URL.
			 *
			 * @returns {Object}  Returns a new `Type` object.
			 */
			function Type(config) {
				extend(this, config);
			}

			/**
			 * @ngdoc function
			 * @name ui.router.util.type:Type#is
			 * @methodOf ui.router.util.type:Type
			 *
			 * @description
			 * Detects whether a value is of a particular type. Accepts a native (decoded) value
			 * and determines whether it matches the current `Type` object.
			 *
			 * @param {*} val  The value to check.
			 * @param {string} key  Optional. If the type check is happening in the context of a specific
			 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
			 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
			 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
			 */
			Type.prototype.is = function (val, key) {
				return true;
			};

			/**
			 * @ngdoc function
			 * @name ui.router.util.type:Type#encode
			 * @methodOf ui.router.util.type:Type
			 *
			 * @description
			 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
			 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
			 * only needs to be a representation of `val` that has been coerced to a string.
			 *
			 * @param {*} val  The value to encode.
			 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
			 *        meta-programming of `Type` objects.
			 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
			 */
			Type.prototype.encode = function (val, key) {
				return val;
			};

			/**
			 * @ngdoc function
			 * @name ui.router.util.type:Type#decode
			 * @methodOf ui.router.util.type:Type
			 *
			 * @description
			 * Converts a parameter value (from URL string or transition param) to a custom/native value.
			 *
			 * @param {string} val  The URL parameter value to decode.
			 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
			 *        meta-programming of `Type` objects.
			 * @returns {*}  Returns a custom representation of the URL parameter value.
			 */
			Type.prototype.decode = function (val, key) {
				return val;
			};

			/**
			 * @ngdoc function
			 * @name ui.router.util.type:Type#equals
			 * @methodOf ui.router.util.type:Type
			 *
			 * @description
			 * Determines whether two decoded values are equivalent.
			 *
			 * @param {*} a  A value to compare against.
			 * @param {*} b  A value to compare against.
			 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
			 */
			Type.prototype.equals = function (a, b) {
				return a == b;
			};

			Type.prototype.$subPattern = function () {
				var sub = this.pattern.toString();
				return sub.substr(1, sub.length - 2);
			};

			Type.prototype.pattern = /.*/;

			Type.prototype.toString = function () {
				return "{Type:" + this.name + "}";
			};

			/** Given an encoded string, or a decoded object, returns a decoded object */
			Type.prototype.$normalize = function (val) {
				return this.is(val) ? val : this.decode(val);
			};

			/*
			 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
			 * e.g.:
			 * - urlmatcher pattern "/path?{queryParam[]:int}"
			 * - url: "/path?queryParam=1&queryParam=2
			 * - $stateParams.queryParam will be [1, 2]
			 * if `mode` is "auto", then
			 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
			 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
			 */
			Type.prototype.$asArray = function (mode, isSearch) {
				if (!mode) return this;
				if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");

				function ArrayType(type, mode) {
					function bindTo(type, callbackName) {
						return function () {
							return type[callbackName].apply(type, arguments);
						};
					}

					// Wrap non-array value as array
					function arrayWrap(val) {
						return isArray(val) ? val : (isDefined(val) ? [val] : []);
					}

					// Unwrap array value for "auto" mode. Return undefined for empty array.
					function arrayUnwrap(val) {
						switch (val.length) {
							case 0:
								return undefined;
							case 1:
								return mode === "auto" ? val[0] : val;
							default:
								return val;
						}
					}

					function falsey(val) {
						return !val;
					}

					// Wraps type (.is/.encode/.decode) functions to operate on each value of an array
					function arrayHandler(callback, allTruthyMode) {
						return function handleArray(val) {
							val = arrayWrap(val);
							var result = map(val, callback);
							if (allTruthyMode === true)
								return filter(result, falsey).length === 0;
							return arrayUnwrap(result);
						};
					}

					// Wraps type (.equals) functions to operate on each value of an array
					function arrayEqualsHandler(callback) {
						return function handleArray(val1, val2) {
							var left = arrayWrap(val1), right = arrayWrap(val2);
							if (left.length !== right.length) return false;
							for (var i = 0; i < left.length; i++) {
								if (!callback(left[i], right[i])) return false;
							}
							return true;
						};
					}

					this.encode = arrayHandler(bindTo(type, 'encode'));
					this.decode = arrayHandler(bindTo(type, 'decode'));
					this.is = arrayHandler(bindTo(type, 'is'), true);
					this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
					this.pattern = type.pattern;
					this.$normalize = arrayHandler(bindTo(type, '$normalize'));
					this.name = type.name;
					this.$arrayMode = mode;
				}

				return new ArrayType(this, mode);
			};


			/**
			 * @ngdoc object
			 * @name ui.router.util.$urlMatcherFactory
			 *
			 * @description
			 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
			 * is also available to providers under the name `$urlMatcherFactoryProvider`.
			 */
			function $UrlMatcherFactory() {
				$$UMFP = this;

				var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

				function valToString(val) {
					return val != null ? val.toString().replace(/\//g, "%2F") : val;
				}

				function valFromString(val) {
					return val != null ? val.toString().replace(/%2F/g, "/") : val;
				}

				var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
					string: {
						encode: valToString,
						decode: valFromString,
						// TODO: in 1.0, make string .is() return false if value is undefined/null by default.
						// In 0.2.x, string params are optional by default for backwards compat
						is: function (val) {
							return val == null || !isDefined(val) || typeof val === "string";
						},
						pattern: /[^/]*/
					},
					int: {
						encode: valToString,
						decode: function (val) {
							return parseInt(val, 10);
						},
						is: function (val) {
							return isDefined(val) && this.decode(val.toString()) === val;
						},
						pattern: /\d+/
					},
					bool: {
						encode: function (val) {
							return val ? 1 : 0;
						},
						decode: function (val) {
							return parseInt(val, 10) !== 0;
						},
						is: function (val) {
							return val === true || val === false;
						},
						pattern: /0|1/
					},
					date: {
						encode: function (val) {
							if (!this.is(val))
								return undefined;
							return [val.getFullYear(),
								('0' + (val.getMonth() + 1)).slice(-2),
								('0' + val.getDate()).slice(-2)
							].join("-");
						},
						decode: function (val) {
							if (this.is(val)) return val;
							var match = this.capture.exec(val);
							return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
						},
						is: function (val) {
							return val instanceof Date && !isNaN(val.valueOf());
						},
						equals: function (a, b) {
							return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
						},
						pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
						capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
					},
					json: {
						encode: angular.toJson,
						decode: angular.fromJson,
						is: angular.isObject,
						equals: angular.equals,
						pattern: /[^/]*/
					},
					any: { // does not encode/decode
						encode: angular.identity,
						decode: angular.identity,
						equals: angular.equals,
						pattern: /.*/
					}
				};

				function getDefaultConfig() {
					return {
						strict: isStrictMode,
						caseInsensitive: isCaseInsensitive
					};
				}

				function isInjectable(value) {
					return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
				}

				/**
				 * [Internal] Get the default value of a parameter, which may be an injectable function.
				 */
				$UrlMatcherFactory.$$getDefaultValue = function (config) {
					if (!isInjectable(config.value)) return config.value;
					if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
					return injector.invoke(config.value);
				};

				/**
				 * @ngdoc function
				 * @name ui.router.util.$urlMatcherFactory#caseInsensitive
				 * @methodOf ui.router.util.$urlMatcherFactory
				 *
				 * @description
				 * Defines whether URL matching should be case sensitive (the default behavior), or not.
				 *
				 * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
				 * @returns {boolean} the current value of caseInsensitive
				 */
				this.caseInsensitive = function (value) {
					if (isDefined(value))
						isCaseInsensitive = value;
					return isCaseInsensitive;
				};

				/**
				 * @ngdoc function
				 * @name ui.router.util.$urlMatcherFactory#strictMode
				 * @methodOf ui.router.util.$urlMatcherFactory
				 *
				 * @description
				 * Defines whether URLs should match trailing slashes, or not (the default behavior).
				 *
				 * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
				 * @returns {boolean} the current value of strictMode
				 */
				this.strictMode = function (value) {
					if (isDefined(value))
						isStrictMode = value;
					return isStrictMode;
				};

				/**
				 * @ngdoc function
				 * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
				 * @methodOf ui.router.util.$urlMatcherFactory
				 *
				 * @description
				 * Sets the default behavior when generating or matching URLs with default parameter values.
				 *
				 * @param {string} value A string that defines the default parameter URL squashing behavior.
				 *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
				 *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
				 *             parameter is surrounded by slashes, squash (remove) one slash from the URL
				 *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
				 *             the parameter value from the URL and replace it with this string.
				 */
				this.defaultSquashPolicy = function (value) {
					if (!isDefined(value)) return defaultSquashPolicy;
					if (value !== true && value !== false && !isString(value))
						throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
					defaultSquashPolicy = value;
					return value;
				};

				/**
				 * @ngdoc function
				 * @name ui.router.util.$urlMatcherFactory#compile
				 * @methodOf ui.router.util.$urlMatcherFactory
				 *
				 * @description
				 * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
				 *
				 * @param {string} pattern  The URL pattern.
				 * @param {Object} config  The config object hash.
				 * @returns {UrlMatcher}  The UrlMatcher.
				 */
				this.compile = function (pattern, config) {
					return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
				};

				/**
				 * @ngdoc function
				 * @name ui.router.util.$urlMatcherFactory#isMatcher
				 * @methodOf ui.router.util.$urlMatcherFactory
				 *
				 * @description
				 * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
				 *
				 * @param {Object} object  The object to perform the type check against.
				 * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
				 *          implementing all the same methods.
				 */
				this.isMatcher = function (o) {
					if (!isObject(o)) return false;
					var result = true;

					forEach(UrlMatcher.prototype, function (val, name) {
						if (isFunction(val)) {
							result = result && (isDefined(o[name]) && isFunction(o[name]));
						}
					});
					return result;
				};

				/**
				 * @ngdoc function
				 * @name ui.router.util.$urlMatcherFactory#type
				 * @methodOf ui.router.util.$urlMatcherFactory
				 *
				 * @description
				 * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
				 * generate URLs with typed parameters.
				 *
				 * @param {string} name  The type name.
				 * @param {Object|Function} definition   The type definition. See
				 *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
				 * @param {Object|Function} definitionFn (optional) A function that is injected before the app
				 *        runtime starts.  The result of this function is merged into the existing `definition`.
				 *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
				 *
				 * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
				 *
				 * @example
				 * This is a simple example of a custom type that encodes and decodes items from an
				 * array, using the array index as the URL-encoded value:
				 *
				 * <pre>
				 * var list = ['John', 'Paul', 'George', 'Ringo'];
				 *
				 * $urlMatcherFactoryProvider.type('listItem', {
	   *   encode: function(item) {
	   *     // Represent the list item in the URL using its corresponding index
	   *     return list.indexOf(item);
	   *   },
	   *   decode: function(item) {
	   *     // Look up the list item by index
	   *     return list[parseInt(item, 10)];
	   *   },
	   *   is: function(item) {
	   *     // Ensure the item is valid by checking to see that it appears
	   *     // in the list
	   *     return list.indexOf(item) > -1;
	   *   }
	   * });
				 *
				 * $stateProvider.state('list', {
	   *   url: "/list/{item:listItem}",
	   *   controller: function($scope, $stateParams) {
	   *     console.log($stateParams.item);
	   *   }
	   * });
				 *
				 * // ...
				 *
				 * // Changes URL to '/list/3', logs "Ringo" to the console
				 * $state.go('list', { item: "Ringo" });
				 * </pre>
				 *
				 * This is a more complex example of a type that relies on dependency injection to
				 * interact with services, and uses the parameter name from the URL to infer how to
				 * handle encoding and decoding parameter values:
				 *
				 * <pre>
				 * // Defines a custom type that gets a value from a service,
				 * // where each service gets different types of values from
				 * // a backend API:
				 * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
	   *
	   *   // Matches up services to URL parameter names
	   *   var services = {
	   *     user: Users,
	   *     post: Posts
	   *   };
	   *
	   *   return {
	   *     encode: function(object) {
	   *       // Represent the object in the URL using its unique ID
	   *       return object.id;
	   *     },
	   *     decode: function(value, key) {
	   *       // Look up the object by ID, using the parameter
	   *       // name (key) to call the correct service
	   *       return services[key].findById(value);
	   *     },
	   *     is: function(object, key) {
	   *       // Check that object is a valid dbObject
	   *       return angular.isObject(object) && object.id && services[key];
	   *     }
	   *     equals: function(a, b) {
	   *       // Check the equality of decoded objects by comparing
	   *       // their unique IDs
	   *       return a.id === b.id;
	   *     }
	   *   };
	   * });
				 *
				 * // In a config() block, you can then attach URLs with
				 * // type-annotated parameters:
				 * $stateProvider.state('users', {
	   *   url: "/users",
	   *   // ...
	   * }).state('users.item', {
	   *   url: "/{user:dbObject}",
	   *   controller: function($scope, $stateParams) {
	   *     // $stateParams.user will now be an object returned from
	   *     // the Users service
	   *   },
	   *   // ...
	   * });
				 * </pre>
				 */
				this.type = function (name, definition, definitionFn) {
					if (!isDefined(definition)) return $types[name];
					if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

					$types[name] = new Type(extend({name: name}, definition));
					if (definitionFn) {
						typeQueue.push({name: name, def: definitionFn});
						if (!enqueue) flushTypeQueue();
					}
					return this;
				};

				// `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
				function flushTypeQueue() {
					while (typeQueue.length) {
						var type = typeQueue.shift();
						if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
						angular.extend($types[type.name], injector.invoke(type.def));
					}
				}

				// Register default types. Store them in the prototype of $types.
				forEach(defaultTypes, function (type, name) {
					$types[name] = new Type(extend({name: name}, type));
				});
				$types = inherit($types, {});

				/* No need to document $get, since it returns this */
				this.$get = ['$injector', function ($injector) {
					injector = $injector;
					enqueue = false;
					flushTypeQueue();

					forEach(defaultTypes, function (type, name) {
						if (!$types[name]) $types[name] = new Type(type);
					});
					return this;
				}];

				this.Param = function Param(id, type, config, location) {
					var self = this;
					config = unwrapShorthand(config);
					type = getType(config, type, location);
					var arrayMode = getArrayMode();
					type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
					if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
						config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
					var isOptional = config.value !== undefined;
					var squash = getSquashPolicy(config, isOptional);
					var replace = getReplace(config, arrayMode, isOptional, squash);

					function unwrapShorthand(config) {
						var keys = isObject(config) ? objectKeys(config) : [];
						var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
							indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
						if (isShorthand) config = {value: config};
						config.$$fn = isInjectable(config.value) ? config.value : function () {
							return config.value;
						};
						return config;
					}

					function getType(config, urlType, location) {
						if (config.type && urlType) throw new Error("Param '" + id + "' has two type configurations.");
						if (urlType) return urlType;
						if (!config.type) return (location === "config" ? $types.any : $types.string);
						return config.type instanceof Type ? config.type : new Type(config.type);
					}

					// array config: param name (param[]) overrides default settings.  explicit config overrides param name.
					function getArrayMode() {
						var arrayDefaults = {array: (location === "search" ? "auto" : false)};
						var arrayParamNomenclature = id.match(/\[\]$/) ? {array: true} : {};
						return extend(arrayDefaults, arrayParamNomenclature, config).array;
					}

					/**
					 * returns false, true, or the squash value to indicate the "default parameter url squash policy".
					 */
					function getSquashPolicy(config, isOptional) {
						var squash = config.squash;
						if (!isOptional || squash === false) return false;
						if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
						if (squash === true || isString(squash)) return squash;
						throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
					}

					function getReplace(config, arrayMode, isOptional, squash) {
						var replace, configuredKeys, defaultPolicy = [
							{from: "", to: (isOptional || arrayMode ? undefined : "")},
							{from: null, to: (isOptional || arrayMode ? undefined : "")}
						];
						replace = isArray(config.replace) ? config.replace : [];
						if (isString(squash))
							replace.push({from: squash, to: undefined});
						configuredKeys = map(replace, function (item) {
							return item.from;
						});
						return filter(defaultPolicy, function (item) {
							return indexOf(configuredKeys, item.from) === -1;
						}).concat(replace);
					}

					/**
					 * [Internal] Get the default value of a parameter, which may be an injectable function.
					 */
					function $$getDefaultValue() {
						if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
						var defaultValue = injector.invoke(config.$$fn);
						if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
							throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
						return defaultValue;
					}

					/**
					 * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
					 * default value, which may be the result of an injectable function.
					 */
					function $value(value) {
						function hasReplaceVal(val) {
							return function (obj) {
								return obj.from === val;
							};
						}

						function $replace(value) {
							var replacement = map(filter(self.replace, hasReplaceVal(value)), function (obj) {
								return obj.to;
							});
							return replacement.length ? replacement[0] : value;
						}

						value = $replace(value);
						return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
					}

					function toString() {
						return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}";
					}

					extend(this, {
						id: id,
						type: type,
						location: location,
						array: arrayMode,
						squash: squash,
						replace: replace,
						isOptional: isOptional,
						value: $value,
						dynamic: undefined,
						config: config,
						toString: toString
					});
				};

				function ParamSet(params) {
					extend(this, params || {});
				}

				ParamSet.prototype = {
					$$new: function () {
						return inherit(this, extend(new ParamSet(), {$$parent: this}));
					},
					$$keys: function () {
						var keys = [], chain = [], parent = this,
							ignore = objectKeys(ParamSet.prototype);
						while (parent) {
							chain.push(parent);
							parent = parent.$$parent;
						}
						chain.reverse();
						forEach(chain, function (paramset) {
							forEach(objectKeys(paramset), function (key) {
								if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
							});
						});
						return keys;
					},
					$$values: function (paramValues) {
						var values = {}, self = this;
						forEach(self.$$keys(), function (key) {
							values[key] = self[key].value(paramValues && paramValues[key]);
						});
						return values;
					},
					$$equals: function (paramValues1, paramValues2) {
						var equal = true, self = this;
						forEach(self.$$keys(), function (key) {
							var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
							if (!self[key].type.equals(left, right)) equal = false;
						});
						return equal;
					},
					$$validates: function $$validate(paramValues) {
						var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
						for (i = 0; i < keys.length; i++) {
							param = this[keys[i]];
							rawVal = paramValues[keys[i]];
							if ((rawVal === undefined || rawVal === null) && param.isOptional)
								break; // There was no parameter value, but the param is optional
							normalized = param.type.$normalize(rawVal);
							if (!param.type.is(normalized))
								return false; // The value was not of the correct Type, and could not be decoded to the correct Type
							encoded = param.type.encode(normalized);
							if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
								return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
						}
						return true;
					},
					$$parent: undefined
				};

				this.ParamSet = ParamSet;
			}

			// Register as a provider so it's available to other providers
			angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
			angular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) {
			}]);

			/**
			 * @ngdoc object
			 * @name ui.router.router.$urlRouterProvider
			 *
			 * @requires ui.router.util.$urlMatcherFactoryProvider
			 * @requires $locationProvider
			 *
			 * @description
			 * `$urlRouterProvider` has the responsibility of watching `$location`.
			 * When `$location` changes it runs through a list of rules one by one until a
			 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify
			 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
			 *
			 * There are several methods on `$urlRouterProvider` that make it useful to use directly
			 * in your module config.
			 */
			$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
			function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
				var rules = [], otherwise = null, interceptDeferred = false, listener;

				// Returns a string that is a prefix of all strings matching the RegExp
				function regExpPrefix(re) {
					var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
					return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
				}

				// Interpolates matched values into a String.replace()-style pattern
				function interpolate(pattern, match) {
					return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
						return match[what === '$' ? 0 : Number(what)];
					});
				}

				/**
				 * @ngdoc function
				 * @name ui.router.router.$urlRouterProvider#rule
				 * @methodOf ui.router.router.$urlRouterProvider
				 *
				 * @description
				 * Defines rules that are used by `$urlRouterProvider` to find matches for
				 * specific URLs.
				 *
				 * @example
				 * <pre>
				 * var app = angular.module('app', ['ui.router.router']);
				 *
				 * app.config(function ($urlRouterProvider) {
	   *   // Here's an example of how you might allow case insensitive urls
	   *   $urlRouterProvider.rule(function ($injector, $location) {
	   *     var path = $location.path(),
	   *         normalized = path.toLowerCase();
	   *
	   *     if (path !== normalized) {
	   *       return normalized;
	   *     }
	   *   });
	   * });
				 * </pre>
				 *
				 * @param {object} rule Handler function that takes `$injector` and `$location`
				 * services as arguments. You can use them to return a valid path as a string.
				 *
				 * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
				 */
				this.rule = function (rule) {
					if (!isFunction(rule)) throw new Error("'rule' must be a function");
					rules.push(rule);
					return this;
				};

				/**
				 * @ngdoc object
				 * @name ui.router.router.$urlRouterProvider#otherwise
				 * @methodOf ui.router.router.$urlRouterProvider
				 *
				 * @description
				 * Defines a path that is used when an invalid route is requested.
				 *
				 * @example
				 * <pre>
				 * var app = angular.module('app', ['ui.router.router']);
				 *
				 * app.config(function ($urlRouterProvider) {
	   *   // if the path doesn't match any of the urls you configured
	   *   // otherwise will take care of routing the user to the
	   *   // specified url
	   *   $urlRouterProvider.otherwise('/index');
	   *
	   *   // Example of using function rule as param
	   *   $urlRouterProvider.otherwise(function ($injector, $location) {
	   *     return '/a/valid/url';
	   *   });
	   * });
				 * </pre>
				 *
				 * @param {string|object} rule The url path you want to redirect to or a function
				 * rule that returns the url path. The function version is passed two params:
				 * `$injector` and `$location` services, and must return a url string.
				 *
				 * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
				 */
				this.otherwise = function (rule) {
					if (isString(rule)) {
						var redirect = rule;
						rule = function () {
							return redirect;
						};
					}
					else if (!isFunction(rule)) throw new Error("'rule' must be a function");
					otherwise = rule;
					return this;
				};


				function handleIfMatch($injector, handler, match) {
					if (!match) return false;
					var result = $injector.invoke(handler, handler, {$match: match});
					return isDefined(result) ? result : true;
				}

				/**
				 * @ngdoc function
				 * @name ui.router.router.$urlRouterProvider#when
				 * @methodOf ui.router.router.$urlRouterProvider
				 *
				 * @description
				 * Registers a handler for a given url matching. if handle is a string, it is
				 * treated as a redirect, and is interpolated according to the syntax of match
				 * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
				 *
				 * If the handler is a function, it is injectable. It gets invoked if `$location`
				 * matches. You have the option of inject the match object as `$match`.
				 *
				 * The handler can return
				 *
				 * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
				 *   will continue trying to find another one that matches.
				 * - **string** which is treated as a redirect and passed to `$location.url()`
				 * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
				 *
				 * @example
				 * <pre>
				 * var app = angular.module('app', ['ui.router.router']);
				 *
				 * app.config(function ($urlRouterProvider) {
	   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
	   *     if ($state.$current.navigable !== state ||
	   *         !equalForKeys($match, $stateParams) {
	   *      $state.transitionTo(state, $match, false);
	   *     }
	   *   });
	   * });
				 * </pre>
				 *
				 * @param {string|object} what The incoming path that you want to redirect.
				 * @param {string|object} handler The path you want to redirect your user to.
				 */
				this.when = function (what, handler) {
					var redirect, handlerIsString = isString(handler);
					if (isString(what)) what = $urlMatcherFactory.compile(what);

					if (!handlerIsString && !isFunction(handler) && !isArray(handler))
						throw new Error("invalid 'handler' in when()");

					var strategies = {
						matcher: function (what, handler) {
							if (handlerIsString) {
								redirect = $urlMatcherFactory.compile(handler);
								handler = ['$match', function ($match) {
									return redirect.format($match);
								}];
							}
							return extend(function ($injector, $location) {
								return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
							}, {
								prefix: isString(what.prefix) ? what.prefix : ''
							});
						},
						regex: function (what, handler) {
							if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

							if (handlerIsString) {
								redirect = handler;
								handler = ['$match', function ($match) {
									return interpolate(redirect, $match);
								}];
							}
							return extend(function ($injector, $location) {
								return handleIfMatch($injector, handler, what.exec($location.path()));
							}, {
								prefix: regExpPrefix(what)
							});
						}
					};

					var check = {matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp};

					for (var n in check) {
						if (check[n]) return this.rule(strategies[n](what, handler));
					}

					throw new Error("invalid 'what' in when()");
				};

				/**
				 * @ngdoc function
				 * @name ui.router.router.$urlRouterProvider#deferIntercept
				 * @methodOf ui.router.router.$urlRouterProvider
				 *
				 * @description
				 * Disables (or enables) deferring location change interception.
				 *
				 * If you wish to customize the behavior of syncing the URL (for example, if you wish to
				 * defer a transition but maintain the current URL), call this method at configuration time.
				 * Then, at run time, call `$urlRouter.listen()` after you have configured your own
				 * `$locationChangeSuccess` event handler.
				 *
				 * @example
				 * <pre>
				 * var app = angular.module('app', ['ui.router.router']);
				 *
				 * app.config(function ($urlRouterProvider) {
	   *
	   *   // Prevent $urlRouter from automatically intercepting URL changes;
	   *   // this allows you to configure custom behavior in between
	   *   // location changes and route synchronization:
	   *   $urlRouterProvider.deferIntercept();
	   *
	   * }).run(function ($rootScope, $urlRouter, UserService) {
	   *
	   *   $rootScope.$on('$locationChangeSuccess', function(e) {
	   *     // UserService is an example service for managing user state
	   *     if (UserService.isLoggedIn()) return;
	   *
	   *     // Prevent $urlRouter's default handler from firing
	   *     e.preventDefault();
	   *
	   *     UserService.handleLogin().then(function() {
	   *       // Once the user has logged in, sync the current URL
	   *       // to the router:
	   *       $urlRouter.sync();
	   *     });
	   *   });
	   *
	   *   // Configures $urlRouter's listener *after* your custom listener
	   *   $urlRouter.listen();
	   * });
				 * </pre>
				 *
				 * @param {boolean} defer Indicates whether to defer location change interception. Passing
				 no parameter is equivalent to `true`.
				 */
				this.deferIntercept = function (defer) {
					if (defer === undefined) defer = true;
					interceptDeferred = defer;
				};

				/**
				 * @ngdoc object
				 * @name ui.router.router.$urlRouter
				 *
				 * @requires $location
				 * @requires $rootScope
				 * @requires $injector
				 * @requires $browser
				 *
				 * @description
				 *
				 */
				this.$get = $get;
				$get.$inject = ['$location', '$rootScope', '$injector', '$browser'];
				function $get($location, $rootScope, $injector, $browser) {

					var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

					function appendBasePath(url, isHtml5, absolute) {
						if (baseHref === '/') return url;
						if (isHtml5) return baseHref.slice(0, -1) + url;
						if (absolute) return baseHref.slice(1) + url;
						return url;
					}

					// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
					function update(evt) {
						if (evt && evt.defaultPrevented) return;
						var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
						lastPushedUrl = undefined;
						// TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
						//if (ignoreUpdate) return true;

						function check(rule) {
							var handled = rule($injector, $location);

							if (!handled) return false;
							if (isString(handled)) $location.replace().url(handled);
							return true;
						}

						var n = rules.length, i;

						for (i = 0; i < n; i++) {
							if (check(rules[i])) return;
						}
						// always check otherwise last to allow dynamic updates to the set of rules
						if (otherwise) check(otherwise);
					}

					function listen() {
						listener = listener || $rootScope.$on('$locationChangeSuccess', update);
						return listener;
					}

					if (!interceptDeferred) listen();

					return {
						/**
						 * @ngdoc function
						 * @name ui.router.router.$urlRouter#sync
						 * @methodOf ui.router.router.$urlRouter
						 *
						 * @description
						 * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
						 * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
						 * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
						 * with the transition by calling `$urlRouter.sync()`.
						 *
						 * @example
						 * <pre>
						 * angular.module('app', ['ui.router'])
						 *   .run(function($rootScope, $urlRouter) {
	       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
	       *       // Halt state change from even starting
	       *       evt.preventDefault();
	       *       // Perform custom logic
	       *       var meetsRequirement = ...
	       *       // Continue with the update and state transition if logic allows
	       *       if (meetsRequirement) $urlRouter.sync();
	       *     });
	       * });
						 * </pre>
						 */
						sync: function () {
							update();
						},

						listen: function () {
							return listen();
						},

						update: function (read) {
							if (read) {
								location = $location.url();
								return;
							}
							if ($location.url() === location) return;

							$location.url(location);
							$location.replace();
						},

						push: function (urlMatcher, params, options) {
							var url = urlMatcher.format(params || {});

							// Handle the special hash param, if needed
							if (url !== null && params && params['#']) {
								url += '#' + params['#'];
							}

							$location.url(url);
							lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
							if (options && options.replace) $location.replace();
						},

						/**
						 * @ngdoc function
						 * @name ui.router.router.$urlRouter#href
						 * @methodOf ui.router.router.$urlRouter
						 *
						 * @description
						 * A URL generation method that returns the compiled URL for a given
						 * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
						 *
						 * @example
						 * <pre>
						 * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
	       *   person: "bob"
	       * });
						 * // $bob == "/about/bob";
						 * </pre>
						 *
						 * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
						 * @param {object=} params An object of parameter values to fill the matcher's required parameters.
						 * @param {object=} options Options object. The options are:
						 *
						 * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
						 *
						 * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
						 */
						href: function (urlMatcher, params, options) {
							if (!urlMatcher.validates(params)) return null;

							var isHtml5 = $locationProvider.html5Mode();
							if (angular.isObject(isHtml5)) {
								isHtml5 = isHtml5.enabled;
							}

							var url = urlMatcher.format(params);
							options = options || {};

							if (!isHtml5 && url !== null) {
								url = "#" + $locationProvider.hashPrefix() + url;
							}

							// Handle special hash param, if needed
							if (url !== null && params && params['#']) {
								url += '#' + params['#'];
							}

							url = appendBasePath(url, isHtml5, options.absolute);

							if (!options.absolute || !url) {
								return url;
							}

							var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
							port = (port === 80 || port === 443 ? '' : ':' + port);

							return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
						}
					};
				}
			}

			angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

			/**
			 * @ngdoc object
			 * @name ui.router.state.$stateProvider
			 *
			 * @requires ui.router.router.$urlRouterProvider
			 * @requires ui.router.util.$urlMatcherFactoryProvider
			 *
			 * @description
			 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
			 * on state.
			 *
			 * A state corresponds to a "place" in the application in terms of the overall UI and
			 * navigation. A state describes (via the controller / template / view properties) what
			 * the UI looks like and does at that place.
			 *
			 * States often have things in common, and the primary way of factoring out these
			 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
			 * nested states.
			 *
			 * The `$stateProvider` provides interfaces to declare these states for your app.
			 */
			$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
			function $StateProvider($urlRouterProvider, $urlMatcherFactory) {

				var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

				// Builds state properties from definition passed to registerState()
				var stateBuilder = {

					// Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
					// state.children = [];
					// if (parent) parent.children.push(state);
					parent: function (state) {
						if (isDefined(state.parent) && state.parent) return findState(state.parent);
						// regex matches any valid composite state name
						// would match "contact.list" but not "contacts"
						var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
						return compositeName ? findState(compositeName[1]) : root;
					},

					// inherit 'data' from parent and override by own values (if any)
					data: function (state) {
						if (state.parent && state.parent.data) {
							state.data = state.self.data = extend({}, state.parent.data, state.data);
						}
						return state.data;
					},

					// Build a URLMatcher if necessary, either via a relative or absolute URL
					url: function (state) {
						var url = state.url, config = {params: state.params || {}};

						if (isString(url)) {
							if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
							return (state.parent.navigable || root).url.concat(url, config);
						}

						if (!url || $urlMatcherFactory.isMatcher(url)) return url;
						throw new Error("Invalid url '" + url + "' in state '" + state + "'");
					},

					// Keep track of the closest ancestor state that has a URL (i.e. is navigable)
					navigable: function (state) {
						return state.url ? state : (state.parent ? state.parent.navigable : null);
					},

					// Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
					ownParams: function (state) {
						var params = state.url && state.url.params || new $$UMFP.ParamSet();
						forEach(state.params || {}, function (config, id) {
							if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
						});
						return params;
					},

					// Derive parameters for this state and ensure they're a super-set of parent's parameters
					params: function (state) {
						return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();
					},

					// If there is no explicit multi-view configuration, make one up so we don't have
					// to handle both cases in the view directive later. Note that having an explicit
					// 'views' property will mean the default unnamed view properties are ignored. This
					// is also a good time to resolve view names to absolute names, so everything is a
					// straight lookup at link time.
					views: function (state) {
						var views = {};

						forEach(isDefined(state.views) ? state.views : {'': state}, function (view, name) {
							if (name.indexOf('@') < 0) name += '@' + state.parent.name;
							views[name] = view;
						});
						return views;
					},

					// Keep a full path from the root down to this state as this is needed for state activation.
					path: function (state) {
						return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
					},

					// Speed up $state.contains() as it's used a lot
					includes: function (state) {
						var includes = state.parent ? extend({}, state.parent.includes) : {};
						includes[state.name] = true;
						return includes;
					},

					$delegates: {}
				};

				function isRelative(stateName) {
					return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
				}

				function findState(stateOrName, base) {
					if (!stateOrName) return undefined;

					var isStr = isString(stateOrName),
						name = isStr ? stateOrName : stateOrName.name,
						path = isRelative(name);

					if (path) {
						if (!base) throw new Error("No reference point given for path '" + name + "'");
						base = findState(base);

						var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

						for (; i < pathLength; i++) {
							if (rel[i] === "" && i === 0) {
								current = base;
								continue;
							}
							if (rel[i] === "^") {
								if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
								current = current.parent;
								continue;
							}
							break;
						}
						rel = rel.slice(i).join(".");
						name = current.name + (current.name && rel ? "." : "") + rel;
					}
					var state = states[name];

					if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
						return state;
					}
					return undefined;
				}

				function queueState(parentName, state) {
					if (!queue[parentName]) {
						queue[parentName] = [];
					}
					queue[parentName].push(state);
				}

				function flushQueuedChildren(parentName) {
					var queued = queue[parentName] || [];
					while (queued.length) {
						registerState(queued.shift());
					}
				}

				function registerState(state) {
					// Wrap a new object around the state so we can store our private details easily.
					state = inherit(state, {
						self: state,
						resolve: state.resolve || {},
						toString: function () {
							return this.name;
						}
					});

					var name = state.name;
					if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
					if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

					// Get parent name
					var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
						: (isString(state.parent)) ? state.parent
						: (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
						: '';

					// If parent is not registered yet, add state to queue and register later
					if (parentName && !states[parentName]) {
						return queueState(parentName, state.self);
					}

					for (var key in stateBuilder) {
						if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
					}
					states[name] = state;

					// Register the state in the global state list and with $urlRouter if necessary.
					if (!state[abstractKey] && state.url) {
						$urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
							if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
								$state.transitionTo(state, $match, {inherit: true, location: false});
							}
						}]);
					}

					// Register any queued children
					flushQueuedChildren(name);

					return state;
				}

				// Checks text to see if it looks like a glob.
				function isGlob(text) {
					return text.indexOf('*') > -1;
				}

				// Returns true if glob matches current $state name.
				function doesStateMatchGlob(glob) {
					var globSegments = glob.split('.'),
						segments = $state.$current.name.split('.');

					//match single stars
					for (var i = 0, l = globSegments.length; i < l; i++) {
						if (globSegments[i] === '*') {
							segments[i] = '*';
						}
					}

					//match greedy starts
					if (globSegments[0] === '**') {
						segments = segments.slice(indexOf(segments, globSegments[1]));
						segments.unshift('**');
					}
					//match greedy ends
					if (globSegments[globSegments.length - 1] === '**') {
						segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
						segments.push('**');
					}

					if (globSegments.length != segments.length) {
						return false;
					}

					return segments.join('') === globSegments.join('');
				}


				// Implicit root state that is always active
				root = registerState({
					name: '',
					url: '^',
					views: null,
					'abstract': true
				});
				root.navigable = null;


				/**
				 * @ngdoc function
				 * @name ui.router.state.$stateProvider#decorator
				 * @methodOf ui.router.state.$stateProvider
				 *
				 * @description
				 * Allows you to extend (carefully) or override (at your own peril) the
				 * `stateBuilder` object used internally by `$stateProvider`. This can be used
				 * to add custom functionality to ui-router, for example inferring templateUrl
				 * based on the state name.
				 *
				 * When passing only a name, it returns the current (original or decorated) builder
				 * function that matches `name`.
				 *
				 * The builder functions that can be decorated are listed below. Though not all
				 * necessarily have a good use case for decoration, that is up to you to decide.
				 *
				 * In addition, users can attach custom decorators, which will generate new
				 * properties within the state's internal definition. There is currently no clear
				 * use-case for this beyond accessing internal states (i.e. $state.$current),
				 * however, expect this to become increasingly relevant as we introduce additional
				 * meta-programming features.
				 *
				 * **Warning**: Decorators should not be interdependent because the order of
				 * execution of the builder functions in non-deterministic. Builder functions
				 * should only be dependent on the state definition object and super function.
				 *
				 *
				 * Existing builder functions and current return values:
				 *
				 * - **parent** `{object}` - returns the parent state object.
				 * - **data** `{object}` - returns state data, including any inherited data that is not
				 *   overridden by own values (if any).
				 * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
				 *   or `null`.
				 * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is
				 *   navigable).
				 * - **params** `{object}` - returns an array of state params that are ensured to
				 *   be a super-set of parent's params.
				 * - **views** `{object}` - returns a views object where each key is an absolute view
				 *   name (i.e. "viewName@stateName") and each value is the config object
				 *   (template, controller) for the view. Even when you don't use the views object
				 *   explicitly on a state config, one is still created for you internally.
				 *   So by decorating this builder function you have access to decorating template
				 *   and controller properties.
				 * - **ownParams** `{object}` - returns an array of params that belong to the state,
				 *   not including any params defined by ancestor states.
				 * - **path** `{string}` - returns the full path from the root down to this state.
				 *   Needed for state activation.
				 * - **includes** `{object}` - returns an object that includes every state that
				 *   would pass a `$state.includes()` test.
				 *
				 * @example
				 * <pre>
				 * // Override the internal 'views' builder with a function that takes the state
				 * // definition, and a reference to the internal function being overridden:
				 * $stateProvider.decorator('views', function (state, parent) {
	   *   var result = {},
	   *       views = parent(state);
	   *
	   *   angular.forEach(views, function (config, name) {
	   *     var autoName = (state.name + '.' + name).replace('.', '/');
	   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
	   *     result[name] = config;
	   *   });
	   *   return result;
	   * });
				 *
				 * $stateProvider.state('home', {
	   *   views: {
	   *     'contact.list': { controller: 'ListController' },
	   *     'contact.item': { controller: 'ItemController' }
	   *   }
	   * });
				 *
				 * // ...
				 *
				 * $state.go('home');
				 * // Auto-populates list and item views with /partials/home/contact/list.html,
				 * // and /partials/home/contact/item.html, respectively.
				 * </pre>
				 *
				 * @param {string} name The name of the builder function to decorate.
				 * @param {object} func A function that is responsible for decorating the original
				 * builder function. The function receives two parameters:
				 *
				 *   - `{object}` - state - The state config object.
				 *   - `{object}` - super - The original builder function.
				 *
				 * @return {object} $stateProvider - $stateProvider instance
				 */
				this.decorator = decorator;
				function decorator(name, func) {
					/*jshint validthis: true */
					if (isString(name) && !isDefined(func)) {
						return stateBuilder[name];
					}
					if (!isFunction(func) || !isString(name)) {
						return this;
					}
					if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
						stateBuilder.$delegates[name] = stateBuilder[name];
					}
					stateBuilder[name] = func;
					return this;
				}

				/**
				 * @ngdoc function
				 * @name ui.router.state.$stateProvider#state
				 * @methodOf ui.router.state.$stateProvider
				 *
				 * @description
				 * Registers a state configuration under a given state name. The stateConfig object
				 * has the following acceptable properties.
				 *
				 * @param {string} name A unique state name, e.g. "home", "about", "contacts".
				 * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
				 * @param {object} stateConfig State configuration object.
				 * @param {string|function=} stateConfig.template
				 * <a id='template'></a>
				 *   html template as a string or a function that returns
				 *   an html template as a string which should be used by the uiView directives. This property
				 *   takes precedence over templateUrl.
				 *
				 *   If `template` is a function, it will be called with the following parameters:
				 *
				 *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
				 *     applying the current state
				 *
				 * <pre>template:
				 *   "<h1>inline template definition</h1>" +
				 *   "<div ui-view></div>"</pre>
				 * <pre>template: function(params) {
	   *       return "<h1>generated template</h1>"; }</pre>
				 * </div>
				 *
				 * @param {string|function=} stateConfig.templateUrl
				 * <a id='templateUrl'></a>
				 *
				 *   path or function that returns a path to an html
				 *   template that should be used by uiView.
				 *
				 *   If `templateUrl` is a function, it will be called with the following parameters:
				 *
				 *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
				 *     applying the current state
				 *
				 * <pre>templateUrl: "home.html"</pre>
				 * <pre>templateUrl: function(params) {
	   *     return myTemplates[params.pageId]; }</pre>
				 *
				 * @param {function=} stateConfig.templateProvider
				 * <a id='templateProvider'></a>
				 *    Provider function that returns HTML content string.
				 * <pre> templateProvider:
				 *       function(MyTemplateService, params) {
	   *         return MyTemplateService.getTemplate(params.pageId);
	   *       }</pre>
				 *
				 * @param {string|function=} stateConfig.controller
				 * <a id='controller'></a>
				 *
				 *  Controller fn that should be associated with newly
				 *   related scope or the name of a registered controller if passed as a string.
				 *   Optionally, the ControllerAs may be declared here.
				 * <pre>controller: "MyRegisteredController"</pre>
				 * <pre>controller:
				 *     "MyRegisteredController as fooCtrl"}</pre>
				 * <pre>controller: function($scope, MyService) {
	   *     $scope.data = MyService.getData(); }</pre>
				 *
				 * @param {function=} stateConfig.controllerProvider
				 * <a id='controllerProvider'></a>
				 *
				 * Injectable provider function that returns the actual controller or string.
				 * <pre>controllerProvider:
				 *   function(MyResolveData) {
	   *     if (MyResolveData.foo)
	   *       return "FooCtrl"
	   *     else if (MyResolveData.bar)
	   *       return "BarCtrl";
	   *     else return function($scope) {
	   *       $scope.baz = "Qux";
	   *     }
	   *   }</pre>
				 *
				 * @param {string=} stateConfig.controllerAs
				 * <a id='controllerAs'></a>
				 *
				 * A controller alias name. If present the controller will be
				 *   published to scope under the controllerAs name.
				 * <pre>controllerAs: "myCtrl"</pre>
				 *
				 * @param {string|object=} stateConfig.parent
				 * <a id='parent'></a>
				 * Optionally specifies the parent state of this state.
				 *
				 * <pre>parent: 'parentState'</pre>
				 * <pre>parent: parentState // JS variable</pre>
				 *
				 * @param {object=} stateConfig.resolve
				 * <a id='resolve'></a>
				 *
				 * An optional map&lt;string, function&gt; of dependencies which
				 *   should be injected into the controller. If any of these dependencies are promises,
				 *   the router will wait for them all to be resolved before the controller is instantiated.
				 *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
				 *   and the values of the resolved promises are injected into any controllers that reference them.
				 *   If any  of the promises are rejected the $stateChangeError event is fired.
				 *
				 *   The map object is:
				 *
				 *   - key - {string}: name of dependency to be injected into controller
				 *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,
				 *     it is injected and return value it treated as dependency. If result is a promise, it is
				 *     resolved before its value is injected into controller.
				 *
				 * <pre>resolve: {
	   *     myResolve1:
	   *       function($http, $stateParams) {
	   *         return $http.get("/api/foos/"+stateParams.fooID);
	   *       }
	   *     }</pre>
				 *
				 * @param {string=} stateConfig.url
				 * <a id='url'></a>
				 *
				 *   A url fragment with optional parameters. When a state is navigated or
				 *   transitioned to, the `$stateParams` service will be populated with any
				 *   parameters that were passed.
				 *
				 *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
				 *   more details on acceptable patterns )
				 *
				 * examples:
				 * <pre>url: "/home"
				 * url: "/users/:userid"
				 * url: "/books/{bookid:[a-zA-Z_-]}"
				 * url: "/books/{categoryid:int}"
				 * url: "/books/{publishername:string}/{categoryid:int}"
				 * url: "/messages?before&after"
				 * url: "/messages?{before:date}&{after:date}"
				 * url: "/messages/:mailboxid?{before:date}&{after:date}"
				 * </pre>
				 *
				 * @param {object=} stateConfig.views
				 * <a id='views'></a>
				 * an optional map&lt;string, object&gt; which defined multiple views, or targets views
				 * manually/explicitly.
				 *
				 * Examples:
				 *
				 * Targets three named `ui-view`s in the parent state's template
				 * <pre>views: {
	   *     header: {
	   *       controller: "headerCtrl",
	   *       templateUrl: "header.html"
	   *     }, body: {
	   *       controller: "bodyCtrl",
	   *       templateUrl: "body.html"
	   *     }, footer: {
	   *       controller: "footCtrl",
	   *       templateUrl: "footer.html"
	   *     }
	   *   }</pre>
				 *
				 * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
				 * <pre>views: {
	   *     'header@top': {
	   *       controller: "msgHeaderCtrl",
	   *       templateUrl: "msgHeader.html"
	   *     }, 'body': {
	   *       controller: "messagesCtrl",
	   *       templateUrl: "messages.html"
	   *     }
	   *   }</pre>
				 *
				 * @param {boolean=} [stateConfig.abstract=false]
				 * <a id='abstract'></a>
				 * An abstract state will never be directly activated,
				 *   but can provide inherited properties to its common children states.
				 * <pre>abstract: true</pre>
				 *
				 * @param {function=} stateConfig.onEnter
				 * <a id='onEnter'></a>
				 *
				 * Callback function for when a state is entered. Good way
				 *   to trigger an action or dispatch an event, such as opening a dialog.
				 * If minifying your scripts, make sure to explictly annotate this function,
				 * because it won't be automatically annotated by your build tools.
				 *
				 * <pre>onEnter: function(MyService, $stateParams) {
	   *     MyService.foo($stateParams.myParam);
	   * }</pre>
				 *
				 * @param {function=} stateConfig.onExit
				 * <a id='onExit'></a>
				 *
				 * Callback function for when a state is exited. Good way to
				 *   trigger an action or dispatch an event, such as opening a dialog.
				 * If minifying your scripts, make sure to explictly annotate this function,
				 * because it won't be automatically annotated by your build tools.
				 *
				 * <pre>onExit: function(MyService, $stateParams) {
	   *     MyService.cleanup($stateParams.myParam);
	   * }</pre>
				 *
				 * @param {boolean=} [stateConfig.reloadOnSearch=true]
				 * <a id='reloadOnSearch'></a>
				 *
				 * If `false`, will not retrigger the same state
				 *   just because a search/query parameter has changed (via $location.search() or $location.hash()).
				 *   Useful for when you'd like to modify $location.search() without triggering a reload.
				 * <pre>reloadOnSearch: false</pre>
				 *
				 * @param {object=} stateConfig.data
				 * <a id='data'></a>
				 *
				 * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
				 *   prototypally inherited.  In other words, adding a data property to a state adds it to
				 *   the entire subtree via prototypal inheritance.
				 *
				 * <pre>data: {
	   *     requiredRole: 'foo'
	   * } </pre>
				 *
				 * @param {object=} stateConfig.params
				 * <a id='params'></a>
				 *
				 * A map which optionally configures parameters declared in the `url`, or
				 *   defines additional non-url parameters.  For each parameter being
				 *   configured, add a configuration object keyed to the name of the parameter.
				 *
				 *   Each parameter configuration object may contain the following properties:
				 *
				 *   - ** value ** - {object|function=}: specifies the default value for this
				 *     parameter.  This implicitly sets this parameter as optional.
				 *
				 *     When UI-Router routes to a state and no value is
				 *     specified for this parameter in the URL or transition, the
				 *     default value will be used instead.  If `value` is a function,
				 *     it will be injected and invoked, and the return value used.
				 *
				 *     *Note*: `undefined` is treated as "no default value" while `null`
				 *     is treated as "the default value is `null`".
				 *
				 *     *Shorthand*: If you only need to configure the default value of the
				 *     parameter, you may use a shorthand syntax.   In the **`params`**
				 *     map, instead mapping the param name to a full parameter configuration
				 *     object, simply set map it to the default parameter value, e.g.:
				 *
				 * <pre>// define a parameter's default value
				 * params: {
	   *     param1: { value: "defaultValue" }
	   * }
				 * // shorthand default values
				 * params: {
	   *     param1: "defaultValue",
	   *     param2: "param2Default"
	   * }</pre>
				 *
				 *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
				 *     treated as an array of values.  If you specified a Type, the value will be
				 *     treated as an array of the specified Type.  Note: query parameter values
				 *     default to a special `"auto"` mode.
				 *
				 *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
				 *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
				 *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
				 *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
				 *     value (e.g.: `{ foo: '1' }`).
				 *
				 * <pre>params: {
	   *     param1: { array: true }
	   * }</pre>
				 *
				 *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
				 *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
				 *     configured default squash policy.
				 *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
				 *
				 *   There are three squash settings:
				 *
				 *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
				 *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
				 *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
				 *       This can allow for cleaner looking URLs.
				 *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
				 *
				 * <pre>params: {
	   *     param1: {
	   *       value: "defaultId",
	   *       squash: true
	   * } }
				 * // squash "defaultValue" to "~"
				 * params: {
	   *     param1: {
	   *       value: "defaultValue",
	   *       squash: "~"
	   * } }
				 * </pre>
				 *
				 *
				 * @example
				 * <pre>
				 * // Some state name examples
				 *
				 * // stateName can be a single top-level name (must be unique).
				 * $stateProvider.state("home", {});
				 *
				 * // Or it can be a nested state name. This state is a child of the
				 * // above "home" state.
				 * $stateProvider.state("home.newest", {});
				 *
				 * // Nest states as deeply as needed.
				 * $stateProvider.state("home.newest.abc.xyz.inception", {});
				 *
				 * // state() returns $stateProvider, so you can chain state declarations.
				 * $stateProvider
				 *   .state("home", {})
				 *   .state("about", {})
				 *   .state("contacts", {});
				 * </pre>
				 *
				 */
				this.state = state;
				function state(name, definition) {
					/*jshint validthis: true */
					if (isObject(name)) definition = name;
					else definition.name = name;
					registerState(definition);
					return this;
				}

				/**
				 * @ngdoc object
				 * @name ui.router.state.$state
				 *
				 * @requires $rootScope
				 * @requires $q
				 * @requires ui.router.state.$view
				 * @requires $injector
				 * @requires ui.router.util.$resolve
				 * @requires ui.router.state.$stateParams
				 * @requires ui.router.router.$urlRouter
				 *
				 * @property {object} params A param object, e.g. {sectionId: section.id)}, that
				 * you'd like to test against the current active state.
				 * @property {object} current A reference to the state's config object. However
				 * you passed it in. Useful for accessing custom data.
				 * @property {object} transition Currently pending transition. A promise that'll
				 * resolve or reject.
				 *
				 * @description
				 * `$state` service is responsible for representing states as well as transitioning
				 * between them. It also provides interfaces to ask for current state or even states
				 * you're coming from.
				 */
				this.$get = $get;
				$get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
				function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {

					var TransitionSuperseded = $q.reject(new Error('transition superseded'));
					var TransitionPrevented = $q.reject(new Error('transition prevented'));
					var TransitionAborted = $q.reject(new Error('transition aborted'));
					var TransitionFailed = $q.reject(new Error('transition failed'));

					// Handles the case where a state which is the target of a transition is not found, and the user
					// can optionally retry or defer the transition
					function handleRedirect(redirect, state, params, options) {
						/**
						 * @ngdoc event
						 * @name ui.router.state.$state#$stateNotFound
						 * @eventOf ui.router.state.$state
						 * @eventType broadcast on root scope
						 * @description
						 * Fired when a requested state **cannot be found** using the provided state name during transition.
						 * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
						 * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
						 * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
						 * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
						 *
						 * @param {Object} event Event object.
						 * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
						 * @param {State} fromState Current state object.
						 * @param {Object} fromParams Current state params.
						 *
						 * @example
						 *
						 * <pre>
						 * // somewhere, assume lazy.state has not been defined
						 * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
						 *
						 * // somewhere else
						 * $scope.$on('$stateNotFound',
						 * function(event, unfoundState, fromState, fromParams){
	       *     console.log(unfoundState.to); // "lazy.state"
	       *     console.log(unfoundState.toParams); // {a:1, b:2}
	       *     console.log(unfoundState.options); // {inherit:false} + default options
	       * })
						 * </pre>
						 */
						var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

						if (evt.defaultPrevented) {
							$urlRouter.update();
							return TransitionAborted;
						}

						if (!evt.retry) {
							return null;
						}

						// Allow the handler to return a promise to defer state lookup retry
						if (options.$retry) {
							$urlRouter.update();
							return TransitionFailed;
						}
						var retryTransition = $state.transition = $q.when(evt.retry);

						retryTransition.then(function () {
							if (retryTransition !== $state.transition) return TransitionSuperseded;
							redirect.options.$retry = true;
							return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
						}, function () {
							return TransitionAborted;
						});
						$urlRouter.update();

						return retryTransition;
					}

					root.locals = {resolve: null, globals: {$stateParams: {}}};

					$state = {
						params: {},
						current: root.self,
						$current: root,
						transition: null
					};

					/**
					 * @ngdoc function
					 * @name ui.router.state.$state#reload
					 * @methodOf ui.router.state.$state
					 *
					 * @description
					 * A method that force reloads the current state. All resolves are re-resolved,
					 * controllers reinstantiated, and events re-fired.
					 *
					 * @example
					 * <pre>
					 * var app angular.module('app', ['ui.router']);
					 *
					 * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.reload = function(){
	     *     $state.reload();
	     *   }
	     * });
					 * </pre>
					 *
					 * `reload()` is just an alias for:
					 * <pre>
					 * $state.transitionTo($state.current, $stateParams, { 
	     *   reload: true, inherit: false, notify: true
	     * });
					 * </pre>
					 *
					 * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
					 * @example
					 * <pre>
					 * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'
					 * //and current state is 'contacts.detail.item'
					 * var app angular.module('app', ['ui.router']);
					 *
					 * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.reload = function(){
	     *     //will reload 'contact.detail' and 'contact.detail.item' states
	     *     $state.reload('contact.detail');
	     *   }
	     * });
					 * </pre>
					 *
					 * `reload()` is just an alias for:
					 * <pre>
					 * $state.transitionTo($state.current, $stateParams, { 
	     *   reload: true, inherit: false, notify: true
	     * });
					 * </pre>

					 * @returns {promise} A promise representing the state of the new transition. See
					 * {@link ui.router.state.$state#methods_go $state.go}.
					 */
					$state.reload = function reload(state) {
						return $state.transitionTo($state.current, $stateParams, {
							reload: state || true,
							inherit: false,
							notify: true
						});
					};

					/**
					 * @ngdoc function
					 * @name ui.router.state.$state#go
					 * @methodOf ui.router.state.$state
					 *
					 * @description
					 * Convenience method for transitioning to a new state. `$state.go` calls
					 * `$state.transitionTo` internally but automatically sets options to
					 * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.
					 * This allows you to easily use an absolute or relative to path and specify
					 * only the parameters you'd like to update (while letting unspecified parameters
					 * inherit from the currently active ancestor states).
					 *
					 * @example
					 * <pre>
					 * var app = angular.module('app', ['ui.router']);
					 *
					 * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.changeState = function () {
	     *     $state.go('contact.detail');
	     *   };
	     * });
					 * </pre>
					 * <img src='../ngdoc_assets/StateGoExamples.png'/>
					 *
					 * @param {string} to Absolute state name or relative state path. Some examples:
					 *
					 * - `$state.go('contact.detail')` - will go to the `contact.detail` state
					 * - `$state.go('^')` - will go to a parent state
					 * - `$state.go('^.sibling')` - will go to a sibling state
					 * - `$state.go('.child.grandchild')` - will go to grandchild state
					 *
					 * @param {object=} params A map of the parameters that will be sent to the state,
					 * will populate $stateParams. Any parameters that are not specified will be inherited from currently
					 * defined parameters. This allows, for example, going to a sibling state that shares parameters
					 * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
					 * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
					 * will get you all current parameters, etc.
					 * @param {object=} options Options object. The options are:
					 *
					 * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
					 *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
					 * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
					 * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
					 *    defines which state to be relative from.
					 * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
					 * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
					 *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
					 *    use this when you want to force a reload when *everything* is the same, including search params.
					 *
					 * @returns {promise} A promise representing the state of the new transition.
					 *
					 * Possible success values:
					 *
					 * - $state.current
					 *
					 * <br/>Possible rejection values:
					 *
					 * - 'transition superseded' - when a newer transition has been started after this one
					 * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
					 * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
					 *   when a `$stateNotFound` `event.retry` promise errors.
					 * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
					 * - *resolve error* - when an error has occurred with a `resolve`
					 *
					 */
					$state.go = function go(to, params, options) {
						return $state.transitionTo(to, params, extend({
							inherit: true,
							relative: $state.$current
						}, options));
					};

					/**
					 * @ngdoc function
					 * @name ui.router.state.$state#transitionTo
					 * @methodOf ui.router.state.$state
					 *
					 * @description
					 * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
					 * uses `transitionTo` internally. `$state.go` is recommended in most situations.
					 *
					 * @example
					 * <pre>
					 * var app = angular.module('app', ['ui.router']);
					 *
					 * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.changeState = function () {
	     *     $state.transitionTo('contact.detail');
	     *   };
	     * });
					 * </pre>
					 *
					 * @param {string} to State name.
					 * @param {object=} toParams A map of the parameters that will be sent to the state,
					 * will populate $stateParams.
					 * @param {object=} options Options object. The options are:
					 *
					 * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
					 *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
					 * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
					 * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),
					 *    defines which state to be relative from.
					 * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
					 * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params
					 *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
					 *    use this when you want to force a reload when *everything* is the same, including search params.
					 *    if String, then will reload the state with the name given in reload, and any children.
					 *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
					 *
					 * @returns {promise} A promise representing the state of the new transition. See
					 * {@link ui.router.state.$state#methods_go $state.go}.
					 */
					$state.transitionTo = function transitionTo(to, toParams, options) {
						toParams = toParams || {};
						options = extend({
							location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
						}, options || {});

						var from = $state.$current, fromParams = $state.params, fromPath = from.path;
						var evt, toState = findState(to, options.relative);

						// Store the hash param for later (since it will be stripped out by various methods)
						var hash = toParams['#'];

						if (!isDefined(toState)) {
							var redirect = {to: to, toParams: toParams, options: options};
							var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

							if (redirectResult) {
								return redirectResult;
							}

							// Always retry once if the $stateNotFound was not prevented
							// (handles either redirect changed or state lazy-definition)
							to = redirect.to;
							toParams = redirect.toParams;
							options = redirect.options;
							toState = findState(to, options.relative);

							if (!isDefined(toState)) {
								if (!options.relative) throw new Error("No such state '" + to + "'");
								throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
							}
						}
						if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
						if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
						if (!toState.params.$$validates(toParams)) return TransitionFailed;

						toParams = toState.params.$$values(toParams);
						to = toState;

						var toPath = to.path;

						// Starting from the root of the path, keep all levels that haven't changed
						var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

						if (!options.reload) {
							while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
								locals = toLocals[keep] = state.locals;
								keep++;
								state = toPath[keep];
							}
						} else if (isString(options.reload) || isObject(options.reload)) {
							if (isObject(options.reload) && !options.reload.name) {
								throw new Error('Invalid reload state object');
							}

							var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
							if (options.reload && !reloadState) {
								throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
							}

							while (state && state === fromPath[keep] && state !== reloadState) {
								locals = toLocals[keep] = state.locals;
								keep++;
								state = toPath[keep];
							}
						}

						// If we're going to the same state and all locals are kept, we've got nothing to do.
						// But clear 'transition', as we still want to cancel any other pending transitions.
						// TODO: We may not want to bump 'transition' if we're called from a location change
						// that we've initiated ourselves, because we might accidentally abort a legitimate
						// transition initiated from code?
						if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
							if (hash) toParams['#'] = hash;
							$state.params = toParams;
							copy($state.params, $stateParams);
							if (options.location && to.navigable && to.navigable.url) {
								$urlRouter.push(to.navigable.url, toParams, {
									$$avoidResync: true, replace: options.location === 'replace'
								});
								$urlRouter.update(true);
							}
							$state.transition = null;
							return $q.when($state.current);
						}

						// Filter parameters before we pass them to event handlers etc.
						toParams = filterByKeys(to.params.$$keys(), toParams || {});

						// Broadcast start event and cancel the transition if requested
						if (options.notify) {
							/**
							 * @ngdoc event
							 * @name ui.router.state.$state#$stateChangeStart
							 * @eventOf ui.router.state.$state
							 * @eventType broadcast on root scope
							 * @description
							 * Fired when the state transition **begins**. You can use `event.preventDefault()`
							 * to prevent the transition from happening and then the transition promise will be
							 * rejected with a `'transition prevented'` value.
							 *
							 * @param {Object} event Event object.
							 * @param {State} toState The state being transitioned to.
							 * @param {Object} toParams The params supplied to the `toState`.
							 * @param {State} fromState The current state, pre-transition.
							 * @param {Object} fromParams The params supplied to the `fromState`.
							 *
							 * @example
							 *
							 * <pre>
							 * $rootScope.$on('$stateChangeStart',
							 * function(event, toState, toParams, fromState, fromParams){
	         *     event.preventDefault();
	         *     // transitionTo() promise will be rejected with
	         *     // a 'transition prevented' error
	         * })
							 * </pre>
							 */
							if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {
								$rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
								$urlRouter.update();
								return TransitionPrevented;
							}
						}

						// Resolve locals for the remaining states, but don't update any global state just
						// yet -- if anything fails to resolve the current state needs to remain untouched.
						// We also set up an inheritance chain for the locals here. This allows the view directive
						// to quickly look up the correct definition for each view in the current state. Even
						// though we create the locals object itself outside resolveState(), it is initially
						// empty and gets filled asynchronously. We need to keep track of the promise for the
						// (fully resolved) current locals, and pass this down the chain.
						var resolved = $q.when(locals);

						for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
							locals = toLocals[l] = inherit(locals);
							resolved = resolveState(state, toParams, state === to, resolved, locals, options);
						}

						// Once everything is resolved, we are ready to perform the actual transition
						// and return a promise for the new state. We also keep track of what the
						// current promise is, so that we can detect overlapping transitions and
						// keep only the outcome of the last transition.
						var transition = $state.transition = resolved.then(function () {
							var l, entering, exiting;

							if ($state.transition !== transition) return TransitionSuperseded;

							// Exit 'from' states not kept
							for (l = fromPath.length - 1; l >= keep; l--) {
								exiting = fromPath[l];
								if (exiting.self.onExit) {
									$injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
								}
								exiting.locals = null;
							}

							// Enter 'to' states not kept
							for (l = keep; l < toPath.length; l++) {
								entering = toPath[l];
								entering.locals = toLocals[l];
								if (entering.self.onEnter) {
									$injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
								}
							}

							// Re-add the saved hash before we start returning things
							if (hash) toParams['#'] = hash;

							// Run it again, to catch any transitions in callbacks
							if ($state.transition !== transition) return TransitionSuperseded;

							// Update globals in $state
							$state.$current = to;
							$state.current = to.self;
							$state.params = toParams;
							copy($state.params, $stateParams);
							$state.transition = null;

							if (options.location && to.navigable) {
								$urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
									$$avoidResync: true, replace: options.location === 'replace'
								});
							}

							if (options.notify) {
								/**
								 * @ngdoc event
								 * @name ui.router.state.$state#$stateChangeSuccess
								 * @eventOf ui.router.state.$state
								 * @eventType broadcast on root scope
								 * @description
								 * Fired once the state transition is **complete**.
								 *
								 * @param {Object} event Event object.
								 * @param {State} toState The state being transitioned to.
								 * @param {Object} toParams The params supplied to the `toState`.
								 * @param {State} fromState The current state, pre-transition.
								 * @param {Object} fromParams The params supplied to the `fromState`.
								 */
								$rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
							}
							$urlRouter.update(true);

							return $state.current;
						}, function (error) {
							if ($state.transition !== transition) return TransitionSuperseded;

							$state.transition = null;
							/**
							 * @ngdoc event
							 * @name ui.router.state.$state#$stateChangeError
							 * @eventOf ui.router.state.$state
							 * @eventType broadcast on root scope
							 * @description
							 * Fired when an **error occurs** during transition. It's important to note that if you
							 * have any errors in your resolve functions (javascript errors, non-existent services, etc)
							 * they will not throw traditionally. You must listen for this $stateChangeError event to
							 * catch **ALL** errors.
							 *
							 * @param {Object} event Event object.
							 * @param {State} toState The state being transitioned to.
							 * @param {Object} toParams The params supplied to the `toState`.
							 * @param {State} fromState The current state, pre-transition.
							 * @param {Object} fromParams The params supplied to the `fromState`.
							 * @param {Error} error The resolve error object.
							 */
							evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

							if (!evt.defaultPrevented) {
								$urlRouter.update();
							}

							return $q.reject(error);
						});

						return transition;
					};

					/**
					 * @ngdoc function
					 * @name ui.router.state.$state#is
					 * @methodOf ui.router.state.$state
					 *
					 * @description
					 * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
					 * but only checks for the full state name. If params is supplied then it will be
					 * tested for strict equality against the current active params object, so all params
					 * must match with none missing and no extras.
					 *
					 * @example
					 * <pre>
					 * $state.$current.name = 'contacts.details.item';
					 *
					 * // absolute name
					 * $state.is('contact.details.item'); // returns true
					 * $state.is(contactDetailItemStateObject); // returns true
					 *
					 * // relative name (. and ^), typically from a template
					 * // E.g. from the 'contacts.details' template
					 * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
					 * </pre>
					 *
					 * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
					 * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
					 * to test against the current active state.
					 * @param {object=} options An options object.  The options are:
					 *
					 * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
					 * test relative to `options.relative` state (or name).
					 *
					 * @returns {boolean} Returns true if it is the state.
					 */
					$state.is = function is(stateOrName, params, options) {
						options = extend({relative: $state.$current}, options || {});
						var state = findState(stateOrName, options.relative);

						if (!isDefined(state)) {
							return undefined;
						}
						if ($state.$current !== state) {
							return false;
						}
						return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
					};

					/**
					 * @ngdoc function
					 * @name ui.router.state.$state#includes
					 * @methodOf ui.router.state.$state
					 *
					 * @description
					 * A method to determine if the current active state is equal to or is the child of the
					 * state stateName. If any params are passed then they will be tested for a match as well.
					 * Not all the parameters need to be passed, just the ones you'd like to test for equality.
					 *
					 * @example
					 * Partial and relative names
					 * <pre>
					 * $state.$current.name = 'contacts.details.item';
					 *
					 * // Using partial names
					 * $state.includes("contacts"); // returns true
					 * $state.includes("contacts.details"); // returns true
					 * $state.includes("contacts.details.item"); // returns true
					 * $state.includes("contacts.list"); // returns false
					 * $state.includes("about"); // returns false
					 *
					 * // Using relative names (. and ^), typically from a template
					 * // E.g. from the 'contacts.details' template
					 * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
					 * </pre>
					 *
					 * Basic globbing patterns
					 * <pre>
					 * $state.$current.name = 'contacts.details.item.url';
					 *
					 * $state.includes("*.details.*.*"); // returns true
					 * $state.includes("*.details.**"); // returns true
					 * $state.includes("**.item.**"); // returns true
					 * $state.includes("*.details.item.url"); // returns true
					 * $state.includes("*.details.*.url"); // returns true
					 * $state.includes("*.details.*"); // returns false
					 * $state.includes("item.**"); // returns false
					 * </pre>
					 *
					 * @param {string} stateOrName A partial name, relative name, or glob pattern
					 * to be searched for within the current state name.
					 * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
					 * that you'd like to test against the current active state.
					 * @param {object=} options An options object.  The options are:
					 *
					 * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
					 * .includes will test relative to `options.relative` state (or name).
					 *
					 * @returns {boolean} Returns true if it does include the state
					 */
					$state.includes = function includes(stateOrName, params, options) {
						options = extend({relative: $state.$current}, options || {});
						if (isString(stateOrName) && isGlob(stateOrName)) {
							if (!doesStateMatchGlob(stateOrName)) {
								return false;
							}
							stateOrName = $state.$current.name;
						}

						var state = findState(stateOrName, options.relative);
						if (!isDefined(state)) {
							return undefined;
						}
						if (!isDefined($state.$current.includes[state.name])) {
							return false;
						}
						return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
					};


					/**
					 * @ngdoc function
					 * @name ui.router.state.$state#href
					 * @methodOf ui.router.state.$state
					 *
					 * @description
					 * A url generation method that returns the compiled url for the given state populated with the given params.
					 *
					 * @example
					 * <pre>
					 * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
					 * </pre>
					 *
					 * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
					 * @param {object=} params An object of parameter values to fill the state's required parameters.
					 * @param {object=} options Options object. The options are:
					 *
					 * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
					 *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
					 *    ancestor with a valid url).
					 * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
					 * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
					 *    defines which state to be relative from.
					 * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
					 *
					 * @returns {string} compiled state url
					 */
					$state.href = function href(stateOrName, params, options) {
						options = extend({
							lossy: true,
							inherit: true,
							absolute: false,
							relative: $state.$current
						}, options || {});

						var state = findState(stateOrName, options.relative);

						if (!isDefined(state)) return null;
						if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);

						var nav = (state && options.lossy) ? state.navigable : state;

						if (!nav || nav.url === undefined || nav.url === null) {
							return null;
						}
						return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
							absolute: options.absolute
						});
					};

					/**
					 * @ngdoc function
					 * @name ui.router.state.$state#get
					 * @methodOf ui.router.state.$state
					 *
					 * @description
					 * Returns the state configuration object for any specific state or all states.
					 *
					 * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
					 * the requested state. If not provided, returns an array of ALL state configs.
					 * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
					 * @returns {Object|Array} State configuration object or array of all objects.
					 */
					$state.get = function (stateOrName, context) {
						if (arguments.length === 0) return map(objectKeys(states), function (name) {
							return states[name].self;
						});
						var state = findState(stateOrName, context || $state.$current);
						return (state && state.self) ? state.self : null;
					};

					function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
						// Make a restricted $stateParams with only the parameters that apply to this state if
						// necessary. In addition to being available to the controller and onEnter/onExit callbacks,
						// we also need $stateParams to be available for any $injector calls we make during the
						// dependency resolution process.
						var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
						var locals = {$stateParams: $stateParams};

						// Resolve 'global' dependencies for the state, i.e. those not specific to a view.
						// We're also including $stateParams in this; that way the parameters are restricted
						// to the set that should be visible to the state, and are independent of when we update
						// the global $state and $stateParams values.
						dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
						var promises = [dst.resolve.then(function (globals) {
							dst.globals = globals;
						})];
						if (inherited) promises.push(inherited);

						function resolveViews() {
							var viewsPromises = [];

							// Resolve template and dependencies for all views.
							forEach(state.views, function (view, name) {
								var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
								injectables.$template = [function () {
									return $view.load(name, {
											view: view,
											locals: dst.globals,
											params: $stateParams,
											notify: options.notify
										}) || '';
								}];

								viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
									// References to the controller (only instantiated at link time)
									if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
										var injectLocals = angular.extend({}, injectables, dst.globals);
										result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
									} else {
										result.$$controller = view.controller;
									}
									// Provide access to the state itself for internal use
									result.$$state = state;
									result.$$controllerAs = view.controllerAs;
									dst[name] = result;
								}));
							});

							return $q.all(viewsPromises).then(function () {
								return dst.globals;
							});
						}

						// Wait for all the promises and then return the activation object
						return $q.all(promises).then(resolveViews).then(function (values) {
							return dst;
						});
					}

					return $state;
				}

				function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
					// Return true if there are no differences in non-search (path/object) params, false if there are differences
					function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
						// Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
						function notSearchParam(key) {
							return fromAndToState.params[key].location != "search";
						}

						var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
						var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
						var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
						return nonQueryParamSet.$$equals(fromParams, toParams);
					}

					// If reload was not explicitly requested
					// and we're transitioning to the same state we're already in
					// and    the locals didn't change
					//     or they changed in a way that doesn't merit reloading
					//        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
					// Then return true.
					if (!options.reload && to === from &&
						(locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {
						return true;
					}
				}
			}

			angular.module('ui.router.state')
				.value('$stateParams', {})
				.provider('$state', $StateProvider);


			$ViewProvider.$inject = [];
			function $ViewProvider() {

				this.$get = $get;
				/**
				 * @ngdoc object
				 * @name ui.router.state.$view
				 *
				 * @requires ui.router.util.$templateFactory
				 * @requires $rootScope
				 *
				 * @description
				 *
				 */
				$get.$inject = ['$rootScope', '$templateFactory'];
				function $get($rootScope, $templateFactory) {
					return {
						// $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
						/**
						 * @ngdoc function
						 * @name ui.router.state.$view#load
						 * @methodOf ui.router.state.$view
						 *
						 * @description
						 *
						 * @param {string} name name
						 * @param {object} options option object.
						 */
						load: function load(name, options) {
							var result, defaults = {
								template: null,
								controller: null,
								view: null,
								locals: null,
								notify: true,
								async: true,
								params: {}
							};
							options = extend(defaults, options);

							if (options.view) {
								result = $templateFactory.fromConfig(options.view, options.params, options.locals);
							}
							if (result && options.notify) {
								/**
								 * @ngdoc event
								 * @name ui.router.state.$state#$viewContentLoading
								 * @eventOf ui.router.state.$view
								 * @eventType broadcast on root scope
								 * @description
								 *
								 * Fired once the view **begins loading**, *before* the DOM is rendered.
								 *
								 * @param {Object} event Event object.
								 * @param {Object} viewConfig The view config properties (template, controller, etc).
								 *
								 * @example
								 *
								 * <pre>
								 * $scope.$on('$viewContentLoading',
								 * function(event, viewConfig){
	         *     // Access to all the view config properties.
	         *     // and one special property 'targetView'
	         *     // viewConfig.targetView
	         * });
								 * </pre>
								 */
								$rootScope.$broadcast('$viewContentLoading', options);
							}
							return result;
						}
					};
				}
			}

			angular.module('ui.router.state').provider('$view', $ViewProvider);

			/**
			 * @ngdoc object
			 * @name ui.router.state.$uiViewScrollProvider
			 *
			 * @description
			 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
			 */
			function $ViewScrollProvider() {

				var useAnchorScroll = false;

				/**
				 * @ngdoc function
				 * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
				 * @methodOf ui.router.state.$uiViewScrollProvider
				 *
				 * @description
				 * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
				 * scrolling based on the url anchor.
				 */
				this.useAnchorScroll = function () {
					useAnchorScroll = true;
				};

				/**
				 * @ngdoc object
				 * @name ui.router.state.$uiViewScroll
				 *
				 * @requires $anchorScroll
				 * @requires $timeout
				 *
				 * @description
				 * When called with a jqLite element, it scrolls the element into view (after a
				 * `$timeout` so the DOM has time to refresh).
				 *
				 * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
				 * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
				 */
				this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
					if (useAnchorScroll) {
						return $anchorScroll;
					}

					return function ($element) {
						return $timeout(function () {
							$element[0].scrollIntoView();
						}, 0, false);
					};
				}];
			}

			angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

			/**
			 * @ngdoc directive
			 * @name ui.router.state.directive:ui-view
			 *
			 * @requires ui.router.state.$state
			 * @requires $compile
			 * @requires $controller
			 * @requires $injector
			 * @requires ui.router.state.$uiViewScroll
			 * @requires $document
			 *
			 * @restrict ECA
			 *
			 * @description
			 * The ui-view directive tells $state where to place your templates.
			 *
			 * @param {string=} name A view name. The name should be unique amongst the other views in the
			 * same state. You can have views of the same name that live in different states.
			 *
			 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
			 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
			 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
			 * scroll ui-view elements into view when they are populated during a state activation.
			 *
			 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
			 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
			 *
			 * @param {string=} onload Expression to evaluate whenever the view updates.
			 *
			 * @example
			 * A view can be unnamed or named.
			 * <pre>
			 * <!-- Unnamed -->
			 * <div ui-view></div>
			 *
			 * <!-- Named -->
			 * <div ui-view="viewName"></div>
			 * </pre>
			 *
			 * You can only have one unnamed view within any template (or root html). If you are only using a
			 * single view and it is unnamed then you can populate it like so:
			 * <pre>
			 * <div ui-view></div>
			 * $stateProvider.state("home", {
	 *   template: "<h1>HELLO!</h1>"
	 * })
			 * </pre>
			 *
			 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
			 * config property, by name, in this case an empty name:
			 * <pre>
			 * $stateProvider.state("home", {
	 *   views: {
	 *     "": {
	 *       template: "<h1>HELLO!</h1>"
	 *     }
	 *   }    
	 * })
			 * </pre>
			 *
			 * But typically you'll only use the views property if you name your view or have more than one view
			 * in the same template. There's not really a compelling reason to name a view if its the only one,
			 * but you could if you wanted, like so:
			 * <pre>
			 * <div ui-view="main"></div>
			 * </pre>
			 * <pre>
			 * $stateProvider.state("home", {
	 *   views: {
	 *     "main": {
	 *       template: "<h1>HELLO!</h1>"
	 *     }
	 *   }    
	 * })
			 * </pre>
			 *
			 * Really though, you'll use views to set up multiple views:
			 * <pre>
			 * <div ui-view></div>
			 * <div ui-view="chart"></div>
			 * <div ui-view="data"></div>
			 * </pre>
			 *
			 * <pre>
			 * $stateProvider.state("home", {
	 *   views: {
	 *     "": {
	 *       template: "<h1>HELLO!</h1>"
	 *     },
	 *     "chart": {
	 *       template: "<chart_thing/>"
	 *     },
	 *     "data": {
	 *       template: "<data_thing/>"
	 *     }
	 *   }    
	 * })
			 * </pre>
			 *
			 * Examples for `autoscroll`:
			 *
			 * <pre>
			 * <!-- If autoscroll present with no expression,
			 *      then scroll ui-view into view -->
			 * <ui-view autoscroll/>
			 *
			 * <!-- If autoscroll present with valid expression,
			 *      then scroll ui-view into view if expression evaluates to true -->
			 * <ui-view autoscroll='true'/>
			 * <ui-view autoscroll='false'/>
			 * <ui-view autoscroll='scopeVariable'/>
			 * </pre>
			 */
			$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];
			function $ViewDirective($state, $injector, $uiViewScroll, $interpolate) {

				function getService() {
					return ($injector.has) ? function (service) {
						return $injector.has(service) ? $injector.get(service) : null;
					} : function (service) {
						try {
							return $injector.get(service);
						} catch (e) {
							return null;
						}
					};
				}

				var service = getService(),
					$animator = service('$animator'),
					$animate = service('$animate');

				// Returns a set of DOM manipulation functions based on which Angular version
				// it should use
				function getRenderer(attrs, scope) {
					var statics = function () {
						return {
							enter: function (element, target, cb) {
								target.after(element);
								cb();
							},
							leave: function (element, cb) {
								element.remove();
								cb();
							}
						};
					};

					if ($animate) {
						return {
							enter: function (element, target, cb) {
								var promise = $animate.enter(element, null, target, cb);
								if (promise && promise.then) promise.then(cb);
							},
							leave: function (element, cb) {
								var promise = $animate.leave(element, cb);
								if (promise && promise.then) promise.then(cb);
							}
						};
					}

					if ($animator) {
						var animate = $animator && $animator(scope, attrs);

						return {
							enter: function (element, target, cb) {
								animate.enter(element, null, target);
								cb();
							},
							leave: function (element, cb) {
								animate.leave(element);
								cb();
							}
						};
					}

					return statics();
				}

				var directive = {
					restrict: 'ECA',
					terminal: true,
					priority: 400,
					transclude: 'element',
					compile: function (tElement, tAttrs, $transclude) {
						return function (scope, $element, attrs) {
							var previousEl, currentEl, currentScope, latestLocals,
								onloadExp = attrs.onload || '',
								autoScrollExp = attrs.autoscroll,
								renderer = getRenderer(attrs, scope);

							scope.$on('$stateChangeSuccess', function () {
								updateView(false);
							});
							scope.$on('$viewContentLoading', function () {
								updateView(false);
							});

							updateView(true);

							function cleanupLastView() {
								if (previousEl) {
									previousEl.remove();
									previousEl = null;
								}

								if (currentScope) {
									currentScope.$destroy();
									currentScope = null;
								}

								if (currentEl) {
									renderer.leave(currentEl, function () {
										previousEl = null;
									});

									previousEl = currentEl;
									currentEl = null;
								}
							}

							function updateView(firstTime) {
								var newScope,
									name = getUiViewName(scope, attrs, $element, $interpolate),
									previousLocals = name && $state.$current && $state.$current.locals[name];

								if (!firstTime && previousLocals === latestLocals) return; // nothing to do
								newScope = scope.$new();
								latestLocals = $state.$current.locals[name];

								var clone = $transclude(newScope, function (clone) {
									renderer.enter(clone, $element, function onUiViewEnter() {
										if (currentScope) {
											currentScope.$emit('$viewContentAnimationEnded');
										}

										if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
											$uiViewScroll(clone);
										}
									});
									cleanupLastView();
								});

								currentEl = clone;
								currentScope = newScope;
								/**
								 * @ngdoc event
								 * @name ui.router.state.directive:ui-view#$viewContentLoaded
								 * @eventOf ui.router.state.directive:ui-view
								 * @eventType emits on ui-view directive scope
								 * @description           *
								 * Fired once the view is **loaded**, *after* the DOM is rendered.
								 *
								 * @param {Object} event Event object.
								 */
								currentScope.$emit('$viewContentLoaded');
								currentScope.$eval(onloadExp);
							}
						};
					}
				};

				return directive;
			}

			$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
			function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
				return {
					restrict: 'ECA',
					priority: -400,
					compile: function (tElement) {
						var initial = tElement.html();
						return function (scope, $element, attrs) {
							var current = $state.$current,
								name = getUiViewName(scope, attrs, $element, $interpolate),
								locals = current && current.locals[name];

							if (!locals) {
								return;
							}

							$element.data('$uiView', {name: name, state: locals.$$state});
							$element.html(locals.$template ? locals.$template : initial);

							var link = $compile($element.contents());

							if (locals.$$controller) {
								locals.$scope = scope;
								locals.$element = $element;
								var controller = $controller(locals.$$controller, locals);
								if (locals.$$controllerAs) {
									scope[locals.$$controllerAs] = controller;
								}
								$element.data('$ngControllerController', controller);
								$element.children().data('$ngControllerController', controller);
							}

							link(scope);
						};
					}
				};
			}

			/**
			 * Shared ui-view code for both directives:
			 * Given scope, element, and its attributes, return the view's name
			 */
			function getUiViewName(scope, attrs, element, $interpolate) {
				var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
				var inherited = element.inheritedData('$uiView');
				return name.indexOf('@') >= 0 ? name : (name + '@' + (inherited ? inherited.state.name : ''));
			}

			angular.module('ui.router.state').directive('uiView', $ViewDirective);
			angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

			function parseStateRef(ref, current) {
				var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
				if (preparsed) ref = current + '(' + preparsed[1] + ')';
				parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
				if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
				return {state: parsed[1], paramExpr: parsed[3] || null};
			}

			function stateContext(el) {
				var stateData = el.parent().inheritedData('$uiView');

				if (stateData && stateData.state && stateData.state.name) {
					return stateData.state;
				}
			}

			/**
			 * @ngdoc directive
			 * @name ui.router.state.directive:ui-sref
			 *
			 * @requires ui.router.state.$state
			 * @requires $timeout
			 *
			 * @restrict A
			 *
			 * @description
			 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
			 * URL, the directive will automatically generate & update the `href` attribute via
			 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
			 * the link will trigger a state transition with optional parameters.
			 *
			 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
			 * handled natively by the browser.
			 *
			 * You can also use relative state paths within ui-sref, just like the relative
			 * paths passed to `$state.go()`. You just need to be aware that the path is relative
			 * to the state that the link lives in, in other words the state that loaded the
			 * template containing the link.
			 *
			 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
			 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
			 * and `reload`.
			 *
			 * @example
			 * Here's an example of how you'd use ui-sref and how it would compile. If you have the
			 * following template:
			 * <pre>
			 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
			 *
			 * <ul>
			 *     <li ng-repeat="contact in contacts">
			 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
			 *     </li>
			 * </ul>
			 * </pre>
			 *
			 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
			 * <pre>
			 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
			 *
			 * <ul>
			 *     <li ng-repeat="contact in contacts">
			 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
			 *     </li>
			 *     <li ng-repeat="contact in contacts">
			 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
			 *     </li>
			 *     <li ng-repeat="contact in contacts">
			 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
			 *     </li>
			 * </ul>
			 *
			 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
			 * </pre>
			 *
			 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
			 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
			 */
			$StateRefDirective.$inject = ['$state', '$timeout'];
			function $StateRefDirective($state, $timeout) {
				var allowedOptions = ['location', 'inherit', 'reload', 'absolute'];

				return {
					restrict: 'A',
					require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
					link: function (scope, element, attrs, uiSrefActive) {
						var ref = parseStateRef(attrs.uiSref, $state.current.name);
						var params = null, url = null, base = stateContext(element) || $state.$current;
						// SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
						var hrefKind = Object.prototype.toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
							'xlink:href' : 'href';
						var newHref = null, isAnchor = element.prop("tagName").toUpperCase() === "A";
						var isForm = element[0].nodeName === "FORM";
						var attr = isForm ? "action" : hrefKind, nav = true;

						var options = {relative: base, inherit: true};
						var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};

						angular.forEach(allowedOptions, function (option) {
							if (option in optionsOverride) {
								options[option] = optionsOverride[option];
							}
						});

						var update = function (newVal) {
							if (newVal) params = angular.copy(newVal);
							if (!nav) return;

							newHref = $state.href(ref.state, params, options);

							var activeDirective = uiSrefActive[1] || uiSrefActive[0];
							if (activeDirective) {
								activeDirective.$$addStateInfo(ref.state, params);
							}
							if (newHref === null) {
								nav = false;
								return false;
							}
							attrs.$set(attr, newHref);
						};

						if (ref.paramExpr) {
							scope.$watch(ref.paramExpr, function (newVal, oldVal) {
								if (newVal !== params) update(newVal);
							}, true);
							params = angular.copy(scope.$eval(ref.paramExpr));
						}
						update();

						if (isForm) return;

						element.bind("click", function (e) {
							var button = e.which || e.button;
							if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target'))) {
								// HACK: This is to allow ng-clicks to be processed before the transition is initiated:
								var transition = $timeout(function () {
									$state.go(ref.state, params, options);
								});
								e.preventDefault();

								// if the state has no URL, ignore one preventDefault from the <a> directive.
								var ignorePreventDefaultCount = isAnchor && !newHref ? 1 : 0;
								e.preventDefault = function () {
									if (ignorePreventDefaultCount-- <= 0)
										$timeout.cancel(transition);
								};
							}
						});
					}
				};
			}

			/**
			 * @ngdoc directive
			 * @name ui.router.state.directive:ui-sref-active
			 *
			 * @requires ui.router.state.$state
			 * @requires ui.router.state.$stateParams
			 * @requires $interpolate
			 *
			 * @restrict A
			 *
			 * @description
			 * A directive working alongside ui-sref to add classes to an element when the
			 * related ui-sref directive's state is active, and removing them when it is inactive.
			 * The primary use-case is to simplify the special appearance of navigation menus
			 * relying on `ui-sref`, by having the "active" state's menu button appear different,
			 * distinguishing it from the inactive menu items.
			 *
			 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
			 * ui-sref-active found at the same level or above the ui-sref will be used.
			 *
			 * Will activate when the ui-sref's target state or any child state is active. If you
			 * need to activate only when the ui-sref target state is active and *not* any of
			 * it's children, then you will use
			 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
			 *
			 * @example
			 * Given the following template:
			 * <pre>
			 * <ul>
			 *   <li ui-sref-active="active" class="item">
			 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
			 *   </li>
			 * </ul>
			 * </pre>
			 *
			 *
			 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
			 * the resulting HTML will appear as (note the 'active' class):
			 * <pre>
			 * <ul>
			 *   <li ui-sref-active="active" class="item active">
			 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
			 *   </li>
			 * </ul>
			 * </pre>
			 *
			 * The class name is interpolated **once** during the directives link time (any further changes to the
			 * interpolated value are ignored).
			 *
			 * Multiple classes may be specified in a space-separated format:
			 * <pre>
			 * <ul>
			 *   <li ui-sref-active='class1 class2 class3'>
			 *     <a ui-sref="app.user">link</a>
			 *   </li>
			 * </ul>
			 * </pre>
			 */

			/**
			 * @ngdoc directive
			 * @name ui.router.state.directive:ui-sref-active-eq
			 *
			 * @requires ui.router.state.$state
			 * @requires ui.router.state.$stateParams
			 * @requires $interpolate
			 *
			 * @restrict A
			 *
			 * @description
			 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
			 * when the exact target state used in the `ui-sref` is active; no child states.
			 *
			 */
			$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
			function $StateRefActiveDirective($state, $stateParams, $interpolate) {
				return {
					restrict: "A",
					controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
						var states = [], activeClass;

						// There probably isn't much point in $observing this
						// uiSrefActive and uiSrefActiveEq share the same directive object with some
						// slight difference in logic routing
						activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);

						// Allow uiSref to communicate with uiSrefActive[Equals]
						this.$$addStateInfo = function (newState, newParams) {
							var state = $state.get(newState, stateContext($element));

							states.push({
								state: state || {name: newState},
								params: newParams
							});

							update();
						};

						$scope.$on('$stateChangeSuccess', update);

						// Update route state
						function update() {
							if (anyMatch()) {
								$element.addClass(activeClass);
							} else {
								$element.removeClass(activeClass);
							}
						}

						function anyMatch() {
							for (var i = 0; i < states.length; i++) {
								if (isMatch(states[i].state, states[i].params)) {
									return true;
								}
							}
							return false;
						}

						function isMatch(state, params) {
							if (typeof $attrs.uiSrefActiveEq !== 'undefined') {
								return $state.is(state.name, params);
							} else {
								return $state.includes(state.name, params);
							}
						}
					}]
				};
			}

			angular.module('ui.router.state')
				.directive('uiSref', $StateRefDirective)
				.directive('uiSrefActive', $StateRefActiveDirective)
				.directive('uiSrefActiveEq', $StateRefActiveDirective);

			/**
			 * @ngdoc filter
			 * @name ui.router.state.filter:isState
			 *
			 * @requires ui.router.state.$state
			 *
			 * @description
			 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
			 */
			$IsStateFilter.$inject = ['$state'];
			function $IsStateFilter($state) {
				var isFilter = function (state) {
					return $state.is(state);
				};
				isFilter.$stateful = true;
				return isFilter;
			}

			/**
			 * @ngdoc filter
			 * @name ui.router.state.filter:includedByState
			 *
			 * @requires ui.router.state.$state
			 *
			 * @description
			 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
			 */
			$IncludedByStateFilter.$inject = ['$state'];
			function $IncludedByStateFilter($state) {
				var includesFilter = function (state) {
					return $state.includes(state);
				};
				includesFilter.$stateful = true;
				return includesFilter;
			}

			angular.module('ui.router.state')
				.filter('isState', $IsStateFilter)
				.filter('includedByState', $IncludedByStateFilter);
		})(window, window.angular);

		/***/
	},
	/* 71 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(72);


		/***/
	},
	/* 72 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(73);


		/***/
	},
	/* 73 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (global) {
			"use strict";

			__webpack_require__(74);

			__webpack_require__(237);

			if (global._babelPolyfill) {
				throw new Error("only one instance of babel/polyfill is allowed");
			}
			global._babelPolyfill = true;
			/* WEBPACK VAR INJECTION */
		}.call(exports, (function () {
				return this;
			}())))

		/***/
	},
	/* 74 */
	/***/ function (module, exports, __webpack_require__) {

		__webpack_require__(100);
		__webpack_require__(115);
		__webpack_require__(119);
		__webpack_require__(121);
		__webpack_require__(123);
		__webpack_require__(125);
		__webpack_require__(127);
		__webpack_require__(128);
		__webpack_require__(129);
		__webpack_require__(130);
		__webpack_require__(131);
		__webpack_require__(132);
		__webpack_require__(133);
		__webpack_require__(135);
		__webpack_require__(136);
		__webpack_require__(137);
		__webpack_require__(138);
		__webpack_require__(139);
		__webpack_require__(140);
		__webpack_require__(141);
		__webpack_require__(142);
		__webpack_require__(143);
		__webpack_require__(144);
		__webpack_require__(146);
		__webpack_require__(147);
		__webpack_require__(148);
		__webpack_require__(150);
		__webpack_require__(151);
		__webpack_require__(152);
		__webpack_require__(153);
		__webpack_require__(154);
		__webpack_require__(155);
		__webpack_require__(156);
		__webpack_require__(157);
		__webpack_require__(158);
		__webpack_require__(159);
		__webpack_require__(160);
		__webpack_require__(161);
		__webpack_require__(162);
		__webpack_require__(164);
		__webpack_require__(165);
		__webpack_require__(167);
		__webpack_require__(168);
		__webpack_require__(170);
		__webpack_require__(171);
		__webpack_require__(176);
		__webpack_require__(75);
		__webpack_require__(177);
		__webpack_require__(179);
		__webpack_require__(180);
		__webpack_require__(181);
		__webpack_require__(182);
		__webpack_require__(183);
		__webpack_require__(185);
		__webpack_require__(186);
		__webpack_require__(188);
		__webpack_require__(189);
		__webpack_require__(190);
		__webpack_require__(191);
		__webpack_require__(196);
		__webpack_require__(199);
		__webpack_require__(200);
		__webpack_require__(202);
		__webpack_require__(203);
		__webpack_require__(204);
		__webpack_require__(205);
		__webpack_require__(206);
		__webpack_require__(207);
		__webpack_require__(208);
		__webpack_require__(209);
		__webpack_require__(210);
		__webpack_require__(211);
		__webpack_require__(212);
		__webpack_require__(213);
		__webpack_require__(215);
		__webpack_require__(216);
		__webpack_require__(217);
		__webpack_require__(218);
		__webpack_require__(219);
		__webpack_require__(220);
		__webpack_require__(222);
		__webpack_require__(223);
		__webpack_require__(224);
		__webpack_require__(225);
		__webpack_require__(227);
		__webpack_require__(228);
		__webpack_require__(230);
		__webpack_require__(231);
		__webpack_require__(232);
		__webpack_require__(235);
		__webpack_require__(236);
		module.exports = __webpack_require__(94);

		/***/
	},
	/* 75 */
	/***/ function (module, exports, __webpack_require__) {

		var setUnscope = __webpack_require__(76)
			, step = __webpack_require__(85)
			, Iterators = __webpack_require__(86)
			, toObject = __webpack_require__(87);

		// 22.1.3.4 Array.prototype.entries()
		// 22.1.3.13 Array.prototype.keys()
		// 22.1.3.29 Array.prototype.values()
		// 22.1.3.30 Array.prototype[@@iterator]()
		__webpack_require__(91)(Array, 'Array', function (iterated, kind) {
			this._t = toObject(iterated); // target
			this._i = 0;                  // next index
			this._k = kind;               // kind
			// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
		}, function () {
			var O = this._t
				, kind = this._k
				, index = this._i++;
			if (!O || index >= O.length) {
				this._t = undefined;
				return step(1);
			}
			if (kind == 'keys')return step(0, index);
			if (kind == 'values')return step(0, O[index]);
			return step(0, [index, O[index]]);
		}, 'values');

		// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
		Iterators.Arguments = Iterators.Array;

		setUnscope('keys');
		setUnscope('values');
		setUnscope('entries');

		/***/
	},
	/* 76 */
	/***/ function (module, exports, __webpack_require__) {

		// 22.1.3.31 Array.prototype[@@unscopables]
		var UNSCOPABLES = __webpack_require__(77)('unscopables');
		if (!(UNSCOPABLES in []))__webpack_require__(81)(Array.prototype, UNSCOPABLES, {});
		module.exports = function (key) {
			[][UNSCOPABLES][key] = true;
		};

		/***/
	},
	/* 77 */
	/***/ function (module, exports, __webpack_require__) {

		var store = __webpack_require__(78)('wks')
			, Symbol = __webpack_require__(79).Symbol;
		module.exports = function (name) {
			return store[name] || (store[name] =
					Symbol && Symbol[name] || (Symbol || __webpack_require__(80))('Symbol.' + name));
		};

		/***/
	},
	/* 78 */
	/***/ function (module, exports, __webpack_require__) {

		var global = __webpack_require__(79)
			, SHARED = '__core-js_shared__'
			, store = global[SHARED] || (global[SHARED] = {});
		module.exports = function (key) {
			return store[key] || (store[key] = {});
		};

		/***/
	},
	/* 79 */
	/***/ function (module, exports) {

		var global = typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
		module.exports = global;
		if (typeof __g == 'number')__g = global; // eslint-disable-line no-undef

		/***/
	},
	/* 80 */
	/***/ function (module, exports) {

		var id = 0
			, px = Math.random();
		module.exports = function (key) {
			return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
		};

		/***/
	},
	/* 81 */
	/***/ function (module, exports, __webpack_require__) {

		var $ = __webpack_require__(82)
			, createDesc = __webpack_require__(83);
		module.exports = __webpack_require__(84) ? function (object, key, value) {
			return $.setDesc(object, key, createDesc(1, value));
		} : function (object, key, value) {
			object[key] = value;
			return object;
		};

		/***/
	},
	/* 82 */
	/***/ function (module, exports) {

		var $Object = Object;
		module.exports = {
			create: $Object.create,
			getProto: $Object.getPrototypeOf,
			isEnum: {}.propertyIsEnumerable,
			getDesc: $Object.getOwnPropertyDescriptor,
			setDesc: $Object.defineProperty,
			setDescs: $Object.defineProperties,
			getKeys: $Object.keys,
			getNames: $Object.getOwnPropertyNames,
			getSymbols: $Object.getOwnPropertySymbols,
			each: [].forEach
		};

		/***/
	},
	/* 83 */
	/***/ function (module, exports) {

		module.exports = function (bitmap, value) {
			return {
				enumerable: !(bitmap & 1),
				configurable: !(bitmap & 2),
				writable: !(bitmap & 4),
				value: value
			};
		};

		/***/
	},
	/* 84 */
	/***/ function (module, exports) {

		// Thank's IE8 for his funny defineProperty
		module.exports = !!function () {
			try {
				return Object.defineProperty({}, 'a', {
						get: function () {
							return 2;
						}
					}).a == 2;
			} catch (e) { /* empty */
			}
		}();

		/***/
	},
	/* 85 */
	/***/ function (module, exports) {

		module.exports = function (done, value) {
			return {value: value, done: !!done};
		};

		/***/
	},
	/* 86 */
	/***/ function (module, exports) {

		module.exports = {};

		/***/
	},
	/* 87 */
	/***/ function (module, exports, __webpack_require__) {

		var ES5Object = __webpack_require__(88)
			, defined = __webpack_require__(90);
		module.exports = function (it, realString) {
			return (realString ? Object : ES5Object)(defined(it));
		};

		/***/
	},
	/* 88 */
	/***/ function (module, exports, __webpack_require__) {

		// fallback for not array-like ES3 strings
		var cof = __webpack_require__(89)
			, $Object = Object;
		module.exports = 0 in $Object('z') ? $Object : function (it) {
			return cof(it) == 'String' ? it.split('') : $Object(it);
		};

		/***/
	},
	/* 89 */
	/***/ function (module, exports) {

		var toString = {}.toString;

		module.exports = function (it) {
			return toString.call(it).slice(8, -1);
		};

		/***/
	},
	/* 90 */
	/***/ function (module, exports) {

		module.exports = function (it) {
			if (it == undefined)throw TypeError("Can't call method on  " + it);
			return it;
		};

		/***/
	},
	/* 91 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var LIBRARY = __webpack_require__(92)
			, $def = __webpack_require__(93)
			, $redef = __webpack_require__(95)
			, hide = __webpack_require__(81)
			, has = __webpack_require__(96)
			, SYMBOL_ITERATOR = __webpack_require__(77)('iterator')
			, Iterators = __webpack_require__(86)
			, FF_ITERATOR = '@@iterator'
			, KEYS = 'keys'
			, VALUES = 'values';

		function returnThis() {
			return this;
		}

		module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE) {
			__webpack_require__(97)(Constructor, NAME, next);
			function createMethod(kind) {
				switch (kind) {
					case KEYS:
						return function keys() {
							return new Constructor(this, kind);
						};
					case VALUES:
						return function values() {
							return new Constructor(this, kind);
						};
				}
				return function entries() {
					return new Constructor(this, kind);
				};
			}

			var TAG = NAME + ' Iterator'
				, proto = Base.prototype
				, _native = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
				, _default = _native || createMethod(DEFAULT)
				, methods, key;
			// Fix native
			if (_native) {
				var IteratorPrototype = __webpack_require__(82).getProto(_default.call(new Base));
				// Set @@toStringTag to native iterators
				__webpack_require__(98)(IteratorPrototype, TAG, true);
				// FF fix
				if (!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, SYMBOL_ITERATOR, returnThis);
			}
			// Define iterator
			if (!LIBRARY || FORCE)hide(proto, SYMBOL_ITERATOR, _default);
			// Plug for library
			Iterators[NAME] = _default;
			Iterators[TAG] = returnThis;
			if (DEFAULT) {
				methods = {
					keys: IS_SET ? _default : createMethod(KEYS),
					values: DEFAULT == VALUES ? _default : createMethod(VALUES),
					entries: DEFAULT != VALUES ? _default : createMethod('entries')
				};
				if (FORCE)for (key in methods) {
					if (!(key in proto))$redef(proto, key, methods[key]);
				} else $def($def.P + $def.F * __webpack_require__(99), NAME, methods);
			}
		};

		/***/
	},
	/* 92 */
	/***/ function (module, exports) {

		module.exports = false;

		/***/
	},
	/* 93 */
	/***/ function (module, exports, __webpack_require__) {

		var global = __webpack_require__(79)
			, core = __webpack_require__(94)
			, hide = __webpack_require__(81)
			, $redef = __webpack_require__(95)
			, PROTOTYPE = 'prototype';

		function ctx(fn, that) {
			return function () {
				return fn.apply(that, arguments);
			};
		}

		global.core = core;
		// type bitmap
		$def.F = 1;  // forced
		$def.G = 2;  // global
		$def.S = 4;  // static
		$def.P = 8;  // proto
		$def.B = 16; // bind
		$def.W = 32; // wrap
		function $def(type, name, source) {
			var key, own, out, exp
				, isGlobal = type & $def.G
				, isProto = type & $def.P
				, target = isGlobal ? global : type & $def.S
					? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
				, exports = isGlobal ? core : core[name] || (core[name] = {});
			if (isGlobal)source = name;
			for (key in source) {
				// contains in native
				own = !(type & $def.F) && target && key in target;
				// export native or passed
				out = (own ? target : source)[key];
				// bind timers to global for call from export context
				if (type & $def.B && own)exp = ctx(out, global);
				else exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;
				// extend global
				if (target && !own)$redef(target, key, out);
				// export
				if (exports[key] != out)hide(exports, key, exp);
				if (isProto)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
			}
		}

		module.exports = $def;

		/***/
	},
	/* 94 */
	/***/ function (module, exports) {

		var core = module.exports = {};
		if (typeof __e == 'number')__e = core; // eslint-disable-line no-undef

		/***/
	},
	/* 95 */
	/***/ function (module, exports, __webpack_require__) {

		var global = __webpack_require__(79)
			, has = __webpack_require__(96)
			, hide = __webpack_require__(81)
			, tpl = String({}.hasOwnProperty)
			, SRC = __webpack_require__(80)('src')
			, _toString = Function.toString;

		function $redef(O, key, val, safe) {
			if (typeof val == 'function') {
				var base = O[key];
				hide(val, SRC, base ? String(base) : tpl.replace(/hasOwnProperty/, String(key)));
				if (!('name' in val))val.name = key;
			}
			if (O === global) {
				O[key] = val;
			} else {
				if (!safe)delete O[key];
				hide(O, key, val);
			}
		}

		// add fake Function#toString for correct work wrapped methods / constructors
		// with methods similar to LoDash isNative
		$redef(Function.prototype, 'toString', function toString() {
			return has(this, SRC) ? this[SRC] : _toString.call(this);
		});

		__webpack_require__(94).inspectSource = function (it) {
			return _toString.call(it);
		};

		module.exports = $redef;

		/***/
	},
	/* 96 */
	/***/ function (module, exports) {

		var hasOwnProperty = {}.hasOwnProperty;
		module.exports = function (it, key) {
			return hasOwnProperty.call(it, key);
		};

		/***/
	},
	/* 97 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $ = __webpack_require__(82)
			, IteratorPrototype = {};

		// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
		__webpack_require__(81)(IteratorPrototype, __webpack_require__(77)('iterator'), function () {
			return this;
		});

		module.exports = function (Constructor, NAME, next) {
			Constructor.prototype = $.create(IteratorPrototype, {next: __webpack_require__(83)(1, next)});
			__webpack_require__(98)(Constructor, NAME + ' Iterator');
		};

		/***/
	},
	/* 98 */
	/***/ function (module, exports, __webpack_require__) {

		var has = __webpack_require__(96)
			, hide = __webpack_require__(81)
			, TAG = __webpack_require__(77)('toStringTag');

		module.exports = function (it, tag, stat) {
			if (it && !has(it = stat ? it : it.prototype, TAG))hide(it, TAG, tag);
		};

		/***/
	},
	/* 99 */
	/***/ function (module, exports) {

		// Safari has buggy iterators w/o `next`
		module.exports = 'keys' in [] && !('next' in [].keys());

		/***/
	},
	/* 100 */
	/***/ function (module, exports, __webpack_require__) {

		var $ = __webpack_require__(82)
			, SUPPORT_DESC = __webpack_require__(84)
			, createDesc = __webpack_require__(83)
			, html = __webpack_require__(102)
			, cel = __webpack_require__(103)
			, has = __webpack_require__(96)
			, cof = __webpack_require__(89)
			, $def = __webpack_require__(93)
			, invoke = __webpack_require__(104)
			, arrayMethod = __webpack_require__(105)
			, IE_PROTO = __webpack_require__(80)('__proto__')
			, isObject = __webpack_require__(101)
			, anObject = __webpack_require__(110)
			, aFunction = __webpack_require__(107)
			, toObject = __webpack_require__(87)
			, toInteger = __webpack_require__(109)
			, toIndex = __webpack_require__(111)
			, toLength = __webpack_require__(108)
			, ES5Object = __webpack_require__(88)
			, ObjectProto = Object.prototype
			, A = []
			, _slice = A.slice
			, _join = A.join
			, defineProperty = $.setDesc
			, getOwnDescriptor = $.getDesc
			, defineProperties = $.setDescs
			, IE8_DOM_DEFINE = false
			, $indexOf = __webpack_require__(112)(false)
			, $forEach = arrayMethod(0)
			, $map = arrayMethod(1)
			, $filter = arrayMethod(2)
			, $some = arrayMethod(3)
			, $every = arrayMethod(4)
			, factories = {}
			, $trim = __webpack_require__(113)(/^\s*([\s\S]*\S)?\s*$/, '$1');

		if (!SUPPORT_DESC) {
			try {
				IE8_DOM_DEFINE = defineProperty(cel('div'), 'x',
						{
							get: function () {
								return 8;
							}
						}
					).x == 8;
			} catch (e) { /* empty */
			}
			$.setDesc = function (O, P, Attributes) {
				if (IE8_DOM_DEFINE)try {
					return defineProperty(O, P, Attributes);
				} catch (e) { /* empty */
				}
				if ('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
				if ('value' in Attributes)anObject(O)[P] = Attributes.value;
				return O;
			};
			$.getDesc = function (O, P) {
				if (IE8_DOM_DEFINE)try {
					return getOwnDescriptor(O, P);
				} catch (e) { /* empty */
				}
				if (has(O, P))return createDesc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
			};
			$.setDescs = defineProperties = function (O, Properties) {
				anObject(O);
				var keys = $.getKeys(Properties)
					, length = keys.length
					, i = 0
					, P;
				while (length > i)$.setDesc(O, P = keys[i++], Properties[P]);
				return O;
			};
		}
		$def($def.S + $def.F * !SUPPORT_DESC, 'Object', {
			// 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
			getOwnPropertyDescriptor: $.getDesc,
			// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
			defineProperty: $.setDesc,
			// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
			defineProperties: defineProperties
		});

		// IE 8- don't enum bug keys
		var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' +
			'toLocaleString,toString,valueOf').split(',')
		// Additional keys for getOwnPropertyNames
			, keys2 = keys1.concat('length', 'prototype')
			, keysLen1 = keys1.length;

		// Create object with `null` prototype: use iframe Object with cleared prototype
		var createDict = function () {
			// Thrash, waste and sodomy: IE GC bug
			var iframe = cel('iframe')
				, i = keysLen1
				, gt = '>'
				, iframeDocument;
			iframe.style.display = 'none';
			html.appendChild(iframe);
			iframe.src = 'javascript:'; // eslint-disable-line no-script-url
			// createDict = iframe.contentWindow.Object;
			// html.removeChild(iframe);
			iframeDocument = iframe.contentWindow.document;
			iframeDocument.open();
			iframeDocument.write('<script>document.F=Object</script' + gt);
			iframeDocument.close();
			createDict = iframeDocument.F;
			while (i--)delete createDict.prototype[keys1[i]];
			return createDict();
		};

		function createGetKeys(names, length) {
			return function (object) {
				var O = toObject(object)
					, i = 0
					, result = []
					, key;
				for (key in O)if (key != IE_PROTO)has(O, key) && result.push(key);
				// Don't enum bug & hidden keys
				while (length > i)if (has(O, key = names[i++])) {
					~$indexOf(result, key) || result.push(key);
				}
				return result;
			};
		}

		function Empty() {
		}

		$def($def.S, 'Object', {
			// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
			getPrototypeOf: $.getProto = $.getProto || function (O) {
					O = toObject(O, true);
					if (has(O, IE_PROTO))return O[IE_PROTO];
					if (typeof O.constructor == 'function' && O instanceof O.constructor) {
						return O.constructor.prototype;
					}
					return O instanceof Object ? ObjectProto : null;
				},
			// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
			getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
			// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
			create: $.create = $.create || function (O, /*?*/Properties) {
					var result;
					if (O !== null) {
						Empty.prototype = anObject(O);
						result = new Empty();
						Empty.prototype = null;
						// add "__proto__" for Object.getPrototypeOf shim
						result[IE_PROTO] = O;
					} else result = createDict();
					return Properties === undefined ? result : defineProperties(result, Properties);
				},
			// 19.1.2.14 / 15.2.3.14 Object.keys(O)
			keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false),
			// 19.1.2.17 / 15.2.3.8 Object.seal(O)
			seal: function seal(it) {
				return it; // <- cap
			},
			// 19.1.2.5 / 15.2.3.9 Object.freeze(O)
			freeze: function freeze(it) {
				return it; // <- cap
			},
			// 19.1.2.15 / 15.2.3.10 Object.preventExtensions(O)
			preventExtensions: function preventExtensions(it) {
				return it; // <- cap
			},
			// 19.1.2.13 / 15.2.3.11 Object.isSealed(O)
			isSealed: function isSealed(it) {
				return !isObject(it); // <- cap
			},
			// 19.1.2.12 / 15.2.3.12 Object.isFrozen(O)
			isFrozen: function isFrozen(it) {
				return !isObject(it); // <- cap
			},
			// 19.1.2.11 / 15.2.3.13 Object.isExtensible(O)
			isExtensible: function isExtensible(it) {
				return isObject(it); // <- cap
			}
		});

		function construct(F, len, args) {
			if (!(len in factories)) {
				for (var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
				factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
			}
			return factories[len](F, args);
		}

		// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
		$def($def.P, 'Function', {
			bind: function (that /*, args... */) {
				var fn = aFunction(this)
					, partArgs = _slice.call(arguments, 1);

				function bound(/* args... */) {
					var args = partArgs.concat(_slice.call(arguments));
					return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
				}

				if (isObject(fn.prototype))bound.prototype = fn.prototype;
				return bound;
			}
		});

		// fallback for not array-like ES3 strings and DOM objects
		var buggySlice = true;
		try {
			if (html)_slice.call(html);
			buggySlice = false;
		} catch (e) { /* empty */
		}

		$def($def.P + $def.F * buggySlice, 'Array', {
			slice: function slice(begin, end) {
				var len = toLength(this.length)
					, klass = cof(this);
				end = end === undefined ? len : end;
				if (klass == 'Array')return _slice.call(this, begin, end);
				var start = toIndex(begin, len)
					, upTo = toIndex(end, len)
					, size = toLength(upTo - start)
					, cloned = Array(size)
					, i = 0;
				for (; i < size; i++)cloned[i] = klass == 'String'
					? this.charAt(start + i)
					: this[start + i];
				return cloned;
			}
		});
		$def($def.P + $def.F * (ES5Object != Object), 'Array', {
			join: function join() {
				return _join.apply(ES5Object(this), arguments);
			}
		});

		// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
		$def($def.S, 'Array', {
			isArray: function (arg) {
				return cof(arg) == 'Array';
			}
		});

		function createArrayReduce(isRight) {
			return function (callbackfn, memo) {
				aFunction(callbackfn);
				var O = toObject(this)
					, length = toLength(O.length)
					, index = isRight ? length - 1 : 0
					, i = isRight ? -1 : 1;
				if (arguments.length < 2)for (; ;) {
					if (index in O) {
						memo = O[index];
						index += i;
						break;
					}
					index += i;
					if (isRight ? index < 0 : length <= index) {
						throw TypeError('Reduce of empty array with no initial value');
					}
				}
				for (; isRight ? index >= 0 : length > index; index += i)if (index in O) {
					memo = callbackfn(memo, O[index], index, this);
				}
				return memo;
			};
		}

		$def($def.P, 'Array', {
			// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
			forEach: $.each = $.each || function forEach(callbackfn/*, that = undefined */) {
					return $forEach(this, callbackfn, arguments[1]);
				},
			// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
			map: function map(callbackfn/*, that = undefined */) {
				return $map(this, callbackfn, arguments[1]);
			},
			// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
			filter: function filter(callbackfn/*, that = undefined */) {
				return $filter(this, callbackfn, arguments[1]);
			},
			// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
			some: function some(callbackfn/*, that = undefined */) {
				return $some(this, callbackfn, arguments[1]);
			},
			// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
			every: function every(callbackfn/*, that = undefined */) {
				return $every(this, callbackfn, arguments[1]);
			},
			// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
			reduce: createArrayReduce(false),
			// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
			reduceRight: createArrayReduce(true),
			// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
			indexOf: function indexOf(el /*, fromIndex = 0 */) {
				return $indexOf(this, el, arguments[1]);
			},
			// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
			lastIndexOf: function lastIndexOf(el, fromIndex /* = @[*-1] */) {
				var O = toObject(this)
					, length = toLength(O.length)
					, index = length - 1;
				if (arguments.length > 1)index = Math.min(index, toInteger(fromIndex));
				if (index < 0)index = toLength(length + index);
				for (; index >= 0; index--)if (index in O)if (O[index] === el)return index;
				return -1;
			}
		});

		// 21.1.3.25 / 15.5.4.20 String.prototype.trim()
		$def($def.P, 'String', {
			trim: function trim() {
				return $trim(this);
			}
		});

		// 20.3.3.1 / 15.9.4.4 Date.now()
		$def($def.S, 'Date', {
			now: function now() {
				return +new Date;
			}
		});

		function lz(num) {
			return num > 9 ? num : '0' + num;
		}

		// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
		// PhantomJS and old webkit had a broken Date implementation.
		var date = new Date(-5e13 - 1)
			, brokenDate = !(date.toISOString && date.toISOString() == '0385-07-25T07:06:39.999Z'
			&& __webpack_require__(114)(function () {
				new Date(NaN).toISOString();
			}));
		$def($def.P + $def.F * brokenDate, 'Date', {
			toISOString: function toISOString() {
				if (!isFinite(this))throw RangeError('Invalid time value');
				var d = this
					, y = d.getUTCFullYear()
					, m = d.getUTCMilliseconds()
					, s = y < 0 ? '-' : y > 9999 ? '+' : '';
				return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
					'-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
					'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
					':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
			}
		});

		/***/
	},
	/* 101 */
	/***/ function (module, exports) {

		// http://jsperf.com/core-js-isobject
		module.exports = function (it) {
			return it !== null && (typeof it == 'object' || typeof it == 'function');
		};

		/***/
	},
	/* 102 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(79).document && document.documentElement;

		/***/
	},
	/* 103 */
	/***/ function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(101)
			, document = __webpack_require__(79).document
		// in old IE typeof document.createElement is 'object'
			, is = isObject(document) && isObject(document.createElement);
		module.exports = function (it) {
			return is ? document.createElement(it) : {};
		};

		/***/
	},
	/* 104 */
	/***/ function (module, exports) {

		// Fast apply
		// http://jsperf.lnkit.com/fast-apply/5
		module.exports = function (fn, args, that) {
			var un = that === undefined;
			switch (args.length) {
				case 0:
					return un ? fn()
						: fn.call(that);
				case 1:
					return un ? fn(args[0])
						: fn.call(that, args[0]);
				case 2:
					return un ? fn(args[0], args[1])
						: fn.call(that, args[0], args[1]);
				case 3:
					return un ? fn(args[0], args[1], args[2])
						: fn.call(that, args[0], args[1], args[2]);
				case 4:
					return un ? fn(args[0], args[1], args[2], args[3])
						: fn.call(that, args[0], args[1], args[2], args[3]);
				case 5:
					return un ? fn(args[0], args[1], args[2], args[3], args[4])
						: fn.call(that, args[0], args[1], args[2], args[3], args[4]);
			}
			return fn.apply(that, args);
		};

		/***/
	},
	/* 105 */
	/***/ function (module, exports, __webpack_require__) {

		// 0 -> Array#forEach
		// 1 -> Array#map
		// 2 -> Array#filter
		// 3 -> Array#some
		// 4 -> Array#every
		// 5 -> Array#find
		// 6 -> Array#findIndex
		var toObject = __webpack_require__(87)
			, ES5Object = __webpack_require__(88)
			, ctx = __webpack_require__(106)
			, toLength = __webpack_require__(108);
		module.exports = function (TYPE) {
			var IS_MAP = TYPE == 1
				, IS_FILTER = TYPE == 2
				, IS_SOME = TYPE == 3
				, IS_EVERY = TYPE == 4
				, IS_FIND_INDEX = TYPE == 6
				, NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
			return function ($this, callbackfn, that) {
				var O = toObject($this, true)
					, self = ES5Object(O)
					, f = ctx(callbackfn, that, 3)
					, length = toLength(self.length)
					, index = 0
					, result = IS_MAP ? Array(length) : IS_FILTER ? [] : undefined
					, val, res;
				for (; length > index; index++)if (NO_HOLES || index in self) {
					val = self[index];
					res = f(val, index, O);
					if (TYPE) {
						if (IS_MAP)result[index] = res;            // map
						else if (res)switch (TYPE) {
							case 3:
								return true;                    // some
							case 5:
								return val;                     // find
							case 6:
								return index;                   // findIndex
							case 2:
								result.push(val);               // filter
						} else if (IS_EVERY)return false;          // every
					}
				}
				return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
			};
		};

		/***/
	},
	/* 106 */
	/***/ function (module, exports, __webpack_require__) {

		// Optional / simple context binding
		var aFunction = __webpack_require__(107);
		module.exports = function (fn, that, length) {
			aFunction(fn);
			if (~length && that === undefined)return fn;
			switch (length) {
				case 1:
					return function (a) {
						return fn.call(that, a);
					};
				case 2:
					return function (a, b) {
						return fn.call(that, a, b);
					};
				case 3:
					return function (a, b, c) {
						return fn.call(that, a, b, c);
					};
			}
			return function (/* ...args */) {
				return fn.apply(that, arguments);
			};
		};

		/***/
	},
	/* 107 */
	/***/ function (module, exports) {

		module.exports = function (it) {
			if (typeof it != 'function')throw TypeError(it + ' is not a function!');
			return it;
		};

		/***/
	},
	/* 108 */
	/***/ function (module, exports, __webpack_require__) {

		// 7.1.15 ToLength
		var toInteger = __webpack_require__(109)
			, min = Math.min;
		module.exports = function (it) {
			return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
		};

		/***/
	},
	/* 109 */
	/***/ function (module, exports) {

		// 7.1.4 ToInteger
		var ceil = Math.ceil
			, floor = Math.floor;
		module.exports = function (it) {
			return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
		};

		/***/
	},
	/* 110 */
	/***/ function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(101);
		module.exports = function (it) {
			if (!isObject(it))throw TypeError(it + ' is not an object!');
			return it;
		};

		/***/
	},
	/* 111 */
	/***/ function (module, exports, __webpack_require__) {

		var toInteger = __webpack_require__(109)
			, max = Math.max
			, min = Math.min;
		module.exports = function (index, length) {
			index = toInteger(index);
			return index < 0 ? max(index + length, 0) : min(index, length);
		};

		/***/
	},
	/* 112 */
	/***/ function (module, exports, __webpack_require__) {

		// false -> Array#indexOf
		// true  -> Array#includes
		var toObject = __webpack_require__(87)
			, toLength = __webpack_require__(108)
			, toIndex = __webpack_require__(111);
		module.exports = function (IS_INCLUDES) {
			return function ($this, el, fromIndex) {
				var O = toObject($this)
					, length = toLength(O.length)
					, index = toIndex(fromIndex, length)
					, value;
				if (IS_INCLUDES && el != el)while (length > index) {
					value = O[index++];
					if (value != value)return true;
				} else for (; length > index; index++)if (IS_INCLUDES || index in O) {
					if (O[index] === el)return IS_INCLUDES || index;
				}
				return !IS_INCLUDES && -1;
			};
		};

		/***/
	},
	/* 113 */
	/***/ function (module, exports) {

		module.exports = function (regExp, replace) {
			var replacer = replace === Object(replace) ? function (part) {
				return replace[part];
			} : replace;
			return function (it) {
				return String(it).replace(regExp, replacer);
			};
		};

		/***/
	},
	/* 114 */
	/***/ function (module, exports) {

		module.exports = function (exec) {
			try {
				exec();
				return false;
			} catch (e) {
				return true;
			}
		};

		/***/
	},
	/* 115 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		// ECMAScript 6 symbols shim
		var $ = __webpack_require__(82)
			, global = __webpack_require__(79)
			, has = __webpack_require__(96)
			, SUPPORT_DESC = __webpack_require__(84)
			, $def = __webpack_require__(93)
			, $redef = __webpack_require__(95)
			, shared = __webpack_require__(78)
			, setTag = __webpack_require__(98)
			, uid = __webpack_require__(80)
			, wks = __webpack_require__(77)
			, keyOf = __webpack_require__(116)
			, $names = __webpack_require__(117)
			, enumKeys = __webpack_require__(118)
			, anObject = __webpack_require__(110)
			, toObject = __webpack_require__(87)
			, createDesc = __webpack_require__(83)
			, getDesc = $.getDesc
			, setDesc = $.setDesc
			, $create = $.create
			, getNames = $names.get
			, $Symbol = global.Symbol
			, setter = false
			, HIDDEN = wks('_hidden')
			, isEnum = $.isEnum
			, SymbolRegistry = shared('symbol-registry')
			, AllSymbols = shared('symbols')
			, useNative = typeof $Symbol == 'function'
			, ObjectProto = Object.prototype;

		var setSymbolDesc = SUPPORT_DESC ? function () { // fallback for old Android
			try {
				return $create(setDesc({}, HIDDEN, {
						get: function () {
							return setDesc(this, HIDDEN, {value: false})[HIDDEN];
						}
					}))[HIDDEN] || setDesc;
			} catch (e) {
				return function (it, key, D) {
					var protoDesc = getDesc(ObjectProto, key);
					if (protoDesc)delete ObjectProto[key];
					setDesc(it, key, D);
					if (protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
				};
			}
		}() : setDesc;

		function wrap(tag) {
			var sym = AllSymbols[tag] = $create($Symbol.prototype);
			sym._k = tag;
			SUPPORT_DESC && setter && setSymbolDesc(ObjectProto, tag, {
				configurable: true,
				set: function (value) {
					if (has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
					setSymbolDesc(this, tag, createDesc(1, value));
				}
			});
			return sym;
		}

		function defineProperty(it, key, D) {
			if (D && has(AllSymbols, key)) {
				if (!D.enumerable) {
					if (!has(it, HIDDEN))setDesc(it, HIDDEN, createDesc(1, {}));
					it[HIDDEN][key] = true;
				} else {
					if (has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
					D = $create(D, {enumerable: createDesc(0, false)});
				}
				return setSymbolDesc(it, key, D);
			}
			return setDesc(it, key, D);
		}

		function defineProperties(it, P) {
			anObject(it);
			var keys = enumKeys(P = toObject(P))
				, i = 0
				, l = keys.length
				, key;
			while (l > i)defineProperty(it, key = keys[i++], P[key]);
			return it;
		}

		function create(it, P) {
			return P === undefined ? $create(it) : defineProperties($create(it), P);
		}

		function propertyIsEnumerable(key) {
			var E = isEnum.call(this, key);
			return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
				? E : true;
		}

		function getOwnPropertyDescriptor(it, key) {
			var D = getDesc(it = toObject(it), key);
			if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
			return D;
		}

		function getOwnPropertyNames(it) {
			var names = getNames(toObject(it))
				, result = []
				, i = 0
				, key;
			while (names.length > i)if (!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
			return result;
		}

		function getOwnPropertySymbols(it) {
			var names = getNames(toObject(it))
				, result = []
				, i = 0
				, key;
			while (names.length > i)if (has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
			return result;
		}

		// 19.4.1.1 Symbol([description])
		if (!useNative) {
			$Symbol = function Symbol() {
				if (this instanceof $Symbol)throw TypeError('Symbol is not a constructor');
				return wrap(uid(arguments[0]));
			};
			$redef($Symbol.prototype, 'toString', function () {
				return this._k;
			});

			$.create = create;
			$.isEnum = propertyIsEnumerable;
			$.getDesc = getOwnPropertyDescriptor;
			$.setDesc = defineProperty;
			$.setDescs = defineProperties;
			$.getNames = $names.get = getOwnPropertyNames;
			$.getSymbols = getOwnPropertySymbols;

			if (SUPPORT_DESC && !__webpack_require__(92)) {
				$redef(ObjectProto, 'propertyIsEnumerable', propertyIsEnumerable, true);
			}
		}

		var symbolStatics = {
			// 19.4.2.1 Symbol.for(key)
			'for': function (key) {
				return has(SymbolRegistry, key += '')
					? SymbolRegistry[key]
					: SymbolRegistry[key] = $Symbol(key);
			},
			// 19.4.2.5 Symbol.keyFor(sym)
			keyFor: function keyFor(key) {
				return keyOf(SymbolRegistry, key);
			},
			useSetter: function () {
				setter = true;
			},
			useSimple: function () {
				setter = false;
			}
		};
		// 19.4.2.2 Symbol.hasInstance
		// 19.4.2.3 Symbol.isConcatSpreadable
		// 19.4.2.4 Symbol.iterator
		// 19.4.2.6 Symbol.match
		// 19.4.2.8 Symbol.replace
		// 19.4.2.9 Symbol.search
		// 19.4.2.10 Symbol.species
		// 19.4.2.11 Symbol.split
		// 19.4.2.12 Symbol.toPrimitive
		// 19.4.2.13 Symbol.toStringTag
		// 19.4.2.14 Symbol.unscopables
		$.each.call((
				'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
				'species,split,toPrimitive,toStringTag,unscopables'
			).split(','), function (it) {
				var sym = wks(it);
				symbolStatics[it] = useNative ? sym : wrap(sym);
			}
		);

		setter = true;

		$def($def.G + $def.W, {Symbol: $Symbol});

		$def($def.S, 'Symbol', symbolStatics);

		$def($def.S + $def.F * !useNative, 'Object', {
			// 19.1.2.2 Object.create(O [, Properties])
			create: create,
			// 19.1.2.4 Object.defineProperty(O, P, Attributes)
			defineProperty: defineProperty,
			// 19.1.2.3 Object.defineProperties(O, Properties)
			defineProperties: defineProperties,
			// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
			getOwnPropertyDescriptor: getOwnPropertyDescriptor,
			// 19.1.2.7 Object.getOwnPropertyNames(O)
			getOwnPropertyNames: getOwnPropertyNames,
			// 19.1.2.8 Object.getOwnPropertySymbols(O)
			getOwnPropertySymbols: getOwnPropertySymbols
		});

		// 19.4.3.5 Symbol.prototype[@@toStringTag]
		setTag($Symbol, 'Symbol');
		// 20.2.1.9 Math[@@toStringTag]
		setTag(Math, 'Math', true);
		// 24.3.3 JSON[@@toStringTag]
		setTag(global.JSON, 'JSON', true);

		/***/
	},
	/* 116 */
	/***/ function (module, exports, __webpack_require__) {

		var $ = __webpack_require__(82)
			, toObject = __webpack_require__(87);
		module.exports = function (object, el) {
			var O = toObject(object)
				, keys = $.getKeys(O)
				, length = keys.length
				, index = 0
				, key;
			while (length > index)if (O[key = keys[index++]] === el)return key;
		};

		/***/
	},
	/* 117 */
	/***/ function (module, exports, __webpack_require__) {

		// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
		var toString = {}.toString
			, toObject = __webpack_require__(87)
			, getNames = __webpack_require__(82).getNames;

		var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
			? Object.getOwnPropertyNames(window) : [];

		function getWindowNames(it) {
			try {
				return getNames(it);
			} catch (e) {
				return windowNames.slice();
			}
		}

		module.exports.get = function getOwnPropertyNames(it) {
			if (windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
			return getNames(toObject(it));
		};

		/***/
	},
	/* 118 */
	/***/ function (module, exports, __webpack_require__) {

		var $ = __webpack_require__(82);
		module.exports = function (it) {
			var keys = $.getKeys(it)
				, isEnum = $.isEnum
				, getSymbols = $.getSymbols;
			if (getSymbols)for (var symbols = getSymbols(it), i = 0, key; symbols.length > i;) {
				if (isEnum.call(it, key = symbols[i++]))keys.push(key);
			}
			return keys;
		};

		/***/
	},
	/* 119 */
	/***/ function (module, exports, __webpack_require__) {

		// 19.1.3.1 Object.assign(target, source)
		var $def = __webpack_require__(93);
		$def($def.S, 'Object', {assign: __webpack_require__(120)});

		/***/
	},
	/* 120 */
	/***/ function (module, exports, __webpack_require__) {

		var toObject = __webpack_require__(87)
			, ES5Object = __webpack_require__(88)
			, enumKeys = __webpack_require__(118);
		// 19.1.2.1 Object.assign(target, source, ...)
		/* eslint-disable no-unused-vars */
		module.exports = Object.assign || function assign(target, source) {
				/* eslint-enable no-unused-vars */
				var T = toObject(target, true)
					, l = arguments.length
					, i = 1;
				while (l > i) {
					var S = ES5Object(arguments[i++])
						, keys = enumKeys(S)
						, length = keys.length
						, j = 0
						, key;
					while (length > j)T[key = keys[j++]] = S[key];
				}
				return T;
			};

		/***/
	},
	/* 121 */
	/***/ function (module, exports, __webpack_require__) {

		// 19.1.3.10 Object.is(value1, value2)
		var $def = __webpack_require__(93);
		$def($def.S, 'Object', {
			is: __webpack_require__(122)
		});

		/***/
	},
	/* 122 */
	/***/ function (module, exports) {

		module.exports = Object.is || function is(x, y) {
				return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
			};

		/***/
	},
	/* 123 */
	/***/ function (module, exports, __webpack_require__) {

		// 19.1.3.19 Object.setPrototypeOf(O, proto)
		var $def = __webpack_require__(93);
		$def($def.S, 'Object', {setPrototypeOf: __webpack_require__(124).set});

		/***/
	},
	/* 124 */
	/***/ function (module, exports, __webpack_require__) {

		// Works with __proto__ only. Old v8 can't work with null proto objects.
		/* eslint-disable no-proto */
		var getDesc = __webpack_require__(82).getDesc
			, isObject = __webpack_require__(101)
			, anObject = __webpack_require__(110);

		function check(O, proto) {
			anObject(O);
			if (!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
		}

		module.exports = {
			set: Object.setPrototypeOf || ('__proto__' in {} // eslint-disable-line
				? function (buggy, set) {
				try {
					set = __webpack_require__(106)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
					set({}, []);
				} catch (e) {
					buggy = true;
				}
				return function setPrototypeOf(O, proto) {
					check(O, proto);
					if (buggy)O.__proto__ = proto;
					else set(O, proto);
					return O;
				};
			}()
				: undefined),
			check: check
		};

		/***/
	},
	/* 125 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		// 19.1.3.6 Object.prototype.toString()
		var classof = __webpack_require__(126)
			, test = {};
		test[__webpack_require__(77)('toStringTag')] = 'z';
		if (test + '' != '[object z]') {
			__webpack_require__(95)(Object.prototype, 'toString', function toString() {
				return '[object ' + classof(this) + ']';
			}, true);
		}

		/***/
	},
	/* 126 */
	/***/ function (module, exports, __webpack_require__) {

		var cof = __webpack_require__(89)
			, TAG = __webpack_require__(77)('toStringTag')
		// ES3 wrong here
			, ARG = cof(function () {
					return arguments;
				}()) == 'Arguments';

		module.exports = function (it) {
			var O, T, B;
			return it === undefined ? 'Undefined' : it === null ? 'Null'
				// @@toStringTag case
				: typeof (T = (O = Object(it))[TAG]) == 'string' ? T
				// builtinTag case
				: ARG ? cof(O)
				// ES3 arguments fallback
				: (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
		};

		/***/
	},
	/* 127 */
	/***/ function (module, exports, __webpack_require__) {

		var $ = __webpack_require__(82)
			, core = __webpack_require__(94)
			, $def = __webpack_require__(93)
			, toObject = __webpack_require__(87)
			, isObject = __webpack_require__(101);
		$.each.call(('freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,' +
			'getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames').split(',')
			, function (KEY, ID) {
				var fn = (core.Object || {})[KEY] || Object[KEY]
					, forced = 0
					, method = {};
				method[KEY] = ID == 0 ? function freeze(it) {
					return isObject(it) ? fn(it) : it;
				} : ID == 1 ? function seal(it) {
					return isObject(it) ? fn(it) : it;
				} : ID == 2 ? function preventExtensions(it) {
					return isObject(it) ? fn(it) : it;
				} : ID == 3 ? function isFrozen(it) {
					return isObject(it) ? fn(it) : true;
				} : ID == 4 ? function isSealed(it) {
					return isObject(it) ? fn(it) : true;
				} : ID == 5 ? function isExtensible(it) {
					return isObject(it) ? fn(it) : false;
				} : ID == 6 ? function getOwnPropertyDescriptor(it, key) {
					return fn(toObject(it), key);
				} : ID == 7 ? function getPrototypeOf(it) {
					return fn(toObject(it, true));
				} : ID == 8 ? function keys(it) {
					return fn(toObject(it));
				} : __webpack_require__(117).get;
				try {
					fn('z');
				} catch (e) {
					forced = 1;
				}
				$def($def.S + $def.F * forced, 'Object', method);
			});

		/***/
	},
	/* 128 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $ = __webpack_require__(82)
			, has = __webpack_require__(96)
			, createDesc = __webpack_require__(83)
			, setDesc = $.setDesc
			, FunctionProto = Function.prototype
			, NAME = 'name';
		// 19.2.4.2 name
		NAME in FunctionProto || __webpack_require__(84) && setDesc(FunctionProto, NAME, {
			configurable: true,
			get: function () {
				var match = String(this).match(/^\s*function ([^ (]*)/)
					, name = match ? match[1] : '';
				has(this, NAME) || setDesc(this, NAME, createDesc(5, name));
				return name;
			},
			set: function (value) {
				has(this, NAME) || setDesc(this, NAME, createDesc(0, value));
			}
		});

		/***/
	},
	/* 129 */
	/***/ function (module, exports, __webpack_require__) {

		var $ = __webpack_require__(82)
			, isObject = __webpack_require__(101)
			, HAS_INSTANCE = __webpack_require__(77)('hasInstance')
			, FunctionProto = Function.prototype;
		// 19.2.3.6 Function.prototype[@@hasInstance](V)
		if (!(HAS_INSTANCE in FunctionProto))$.setDesc(FunctionProto, HAS_INSTANCE, {
			value: function (O) {
				if (typeof this != 'function' || !isObject(O))return false;
				if (!isObject(this.prototype))return O instanceof this;
				// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
				while (O = $.getProto(O))if (this.prototype === O)return true;
				return false;
			}
		});

		/***/
	},
	/* 130 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $ = __webpack_require__(82)
			, global = __webpack_require__(79)
			, has = __webpack_require__(96)
			, cof = __webpack_require__(89)
			, isObject = __webpack_require__(101)
			, NUMBER = 'Number'
			, $Number = global[NUMBER]
			, Base = $Number
			, proto = $Number.prototype
		// Opera ~12 has broken Object#toString
			, fakeNumber = cof($.create(proto)) == NUMBER
				? function (it) {
				try {
					proto.valueOf.call(it);
					return false;
				} catch (e) {
					return true;
				}
			}
				: function (it) {
				return cof(it) != NUMBER;
			};

		function toPrimitive(it) {
			var fn, val;
			if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
			if (typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
			throw TypeError("Can't convert object to number");
		}

		function toNumber(it) {
			if (isObject(it))it = toPrimitive(it);
			if (typeof it == 'string' && it.length > 2 && it.charCodeAt(0) == 48) {
				var binary = false;
				switch (it.charCodeAt(1)) {
					case 66 :
					case 98  :
						binary = true;
					case 79 :
					case 111 :
						return parseInt(it.slice(2), binary ? 2 : 8);
				}
			}
			return +it;
		}

		if (!($Number('0o1') && $Number('0b1'))) {
			$Number = function Number(it) {
				return this instanceof $Number && fakeNumber(this) ? new Base(toNumber(it)) : toNumber(it);
			};
			$.each.call(__webpack_require__(84) ? $.getNames(Base) : (
					// ES3:
					'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
						// ES6 (in case, if modules with ES6 Number statics required before):
					'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
					'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
				).split(','), function (key) {
					if (has(Base, key) && !has($Number, key)) {
						$.setDesc($Number, key, $.getDesc(Base, key));
					}
				}
			);
			$Number.prototype = proto;
			proto.constructor = $Number;
			__webpack_require__(95)(global, NUMBER, $Number);
		}

		/***/
	},
	/* 131 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.1.2.1 Number.EPSILON
		var $def = __webpack_require__(93);

		$def($def.S, 'Number', {EPSILON: Math.pow(2, -52)});

		/***/
	},
	/* 132 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.1.2.2 Number.isFinite(number)
		var $def = __webpack_require__(93)
			, _isFinite = __webpack_require__(79).isFinite;

		$def($def.S, 'Number', {
			isFinite: function isFinite(it) {
				return typeof it == 'number' && _isFinite(it);
			}
		});

		/***/
	},
	/* 133 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.1.2.3 Number.isInteger(number)
		var $def = __webpack_require__(93);

		$def($def.S, 'Number', {isInteger: __webpack_require__(134)});

		/***/
	},
	/* 134 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.1.2.3 Number.isInteger(number)
		var isObject = __webpack_require__(101)
			, floor = Math.floor;
		module.exports = function isInteger(it) {
			return !isObject(it) && isFinite(it) && floor(it) === it;
		};

		/***/
	},
	/* 135 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.1.2.4 Number.isNaN(number)
		var $def = __webpack_require__(93);

		$def($def.S, 'Number', {
			isNaN: function isNaN(number) {
				return number != number;
			}
		});

		/***/
	},
	/* 136 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.1.2.5 Number.isSafeInteger(number)
		var $def = __webpack_require__(93)
			, isInteger = __webpack_require__(134)
			, abs = Math.abs;

		$def($def.S, 'Number', {
			isSafeInteger: function isSafeInteger(number) {
				return isInteger(number) && abs(number) <= 0x1fffffffffffff;
			}
		});

		/***/
	},
	/* 137 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.1.2.6 Number.MAX_SAFE_INTEGER
		var $def = __webpack_require__(93);

		$def($def.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

		/***/
	},
	/* 138 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.1.2.10 Number.MIN_SAFE_INTEGER
		var $def = __webpack_require__(93);

		$def($def.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

		/***/
	},
	/* 139 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.1.2.12 Number.parseFloat(string)
		var $def = __webpack_require__(93);

		$def($def.S, 'Number', {parseFloat: parseFloat});

		/***/
	},
	/* 140 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.1.2.13 Number.parseInt(string, radix)
		var $def = __webpack_require__(93);

		$def($def.S, 'Number', {parseInt: parseInt});

		/***/
	},
	/* 141 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.3 Math.acosh(x)
		var $def = __webpack_require__(93)
			, E = Math.E
			, sqrt = Math.sqrt;

		$def($def.S, 'Math', {
			acosh: function acosh(x) {
				return (x = +x) < 1 ? NaN : isFinite(x)
					? Math.log(x / E + sqrt(x + 1) * sqrt(x - 1) / E) + 1 : x;
			}
		});

		/***/
	},
	/* 142 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.5 Math.asinh(x)
		var $def = __webpack_require__(93);

		function asinh(x) {
			return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
		}

		$def($def.S, 'Math', {asinh: asinh});

		/***/
	},
	/* 143 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.7 Math.atanh(x)
		var $def = __webpack_require__(93);

		$def($def.S, 'Math', {
			atanh: function atanh(x) {
				return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
			}
		});

		/***/
	},
	/* 144 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.9 Math.cbrt(x)
		var $def = __webpack_require__(93)
			, sign = __webpack_require__(145);

		$def($def.S, 'Math', {
			cbrt: function cbrt(x) {
				return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
			}
		});

		/***/
	},
	/* 145 */
	/***/ function (module, exports) {

		// 20.2.2.28 Math.sign(x)
		module.exports = Math.sign || function sign(x) {
				return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
			};

		/***/
	},
	/* 146 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.11 Math.clz32(x)
		var $def = __webpack_require__(93);

		$def($def.S, 'Math', {
			clz32: function clz32(x) {
				return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
			}
		});

		/***/
	},
	/* 147 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.12 Math.cosh(x)
		var $def = __webpack_require__(93)
			, exp = Math.exp;

		$def($def.S, 'Math', {
			cosh: function cosh(x) {
				return (exp(x = +x) + exp(-x)) / 2;
			}
		});

		/***/
	},
	/* 148 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.14 Math.expm1(x)
		var $def = __webpack_require__(93);

		$def($def.S, 'Math', {expm1: __webpack_require__(149)});

		/***/
	},
	/* 149 */
	/***/ function (module, exports) {

		// 20.2.2.14 Math.expm1(x)
		module.exports = Math.expm1 || function expm1(x) {
				return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
			};

		/***/
	},
	/* 150 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.16 Math.fround(x)
		var $def = __webpack_require__(93)
			, sign = __webpack_require__(145)
			, pow = Math.pow
			, EPSILON = pow(2, -52)
			, EPSILON32 = pow(2, -23)
			, MAX32 = pow(2, 127) * (2 - EPSILON32)
			, MIN32 = pow(2, -126);

		function roundTiesToEven(n) {
			return n + 1 / EPSILON - 1 / EPSILON;
		}


		$def($def.S, 'Math', {
			fround: function fround(x) {
				var $abs = Math.abs(x)
					, $sign = sign(x)
					, a, result;
				if ($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
				a = (1 + EPSILON32 / EPSILON) * $abs;
				result = a - (a - $abs);
				if (result > MAX32 || result != result)return $sign * Infinity;
				return $sign * result;
			}
		});

		/***/
	},
	/* 151 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
		var $def = __webpack_require__(93)
			, abs = Math.abs;

		$def($def.S, 'Math', {
			hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
				var sum = 0
					, i = 0
					, len = arguments.length
					, larg = 0
					, arg, div;
				while (i < len) {
					arg = abs(arguments[i++]);
					if (larg < arg) {
						div = larg / arg;
						sum = sum * div * div + 1;
						larg = arg;
					} else if (arg > 0) {
						div = arg / larg;
						sum += div * div;
					} else sum += arg;
				}
				return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
			}
		});

		/***/
	},
	/* 152 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.18 Math.imul(x, y)
		var $def = __webpack_require__(93);

		$def($def.S, 'Math', {
			imul: function imul(x, y) {
				var UINT16 = 0xffff
					, xn = +x
					, yn = +y
					, xl = UINT16 & xn
					, yl = UINT16 & yn;
				return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
			}
		});

		/***/
	},
	/* 153 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.21 Math.log10(x)
		var $def = __webpack_require__(93);

		$def($def.S, 'Math', {
			log10: function log10(x) {
				return Math.log(x) / Math.LN10;
			}
		});

		/***/
	},
	/* 154 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.20 Math.log1p(x)
		var $def = __webpack_require__(93);

		$def($def.S, 'Math', {
			log1p: function log1p(x) {
				return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
			}
		});

		/***/
	},
	/* 155 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.22 Math.log2(x)
		var $def = __webpack_require__(93);

		$def($def.S, 'Math', {
			log2: function log2(x) {
				return Math.log(x) / Math.LN2;
			}
		});

		/***/
	},
	/* 156 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.28 Math.sign(x)
		var $def = __webpack_require__(93);

		$def($def.S, 'Math', {sign: __webpack_require__(145)});

		/***/
	},
	/* 157 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.30 Math.sinh(x)
		var $def = __webpack_require__(93)
			, expm1 = __webpack_require__(149)
			, exp = Math.exp;

		$def($def.S, 'Math', {
			sinh: function sinh(x) {
				return Math.abs(x = +x) < 1
					? (expm1(x) - expm1(-x)) / 2
					: (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
			}
		});

		/***/
	},
	/* 158 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.33 Math.tanh(x)
		var $def = __webpack_require__(93)
			, expm1 = __webpack_require__(149)
			, exp = Math.exp;

		$def($def.S, 'Math', {
			tanh: function tanh(x) {
				var a = expm1(x = +x)
					, b = expm1(-x);
				return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
			}
		});

		/***/
	},
	/* 159 */
	/***/ function (module, exports, __webpack_require__) {

		// 20.2.2.34 Math.trunc(x)
		var $def = __webpack_require__(93);

		$def($def.S, 'Math', {
			trunc: function trunc(it) {
				return (it > 0 ? Math.floor : Math.ceil)(it);
			}
		});

		/***/
	},
	/* 160 */
	/***/ function (module, exports, __webpack_require__) {

		var $def = __webpack_require__(93)
			, toIndex = __webpack_require__(111)
			, fromCharCode = String.fromCharCode
			, $fromCodePoint = String.fromCodePoint;

		// length should be 1, old FF problem
		$def($def.S + $def.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
			// 21.1.2.2 String.fromCodePoint(...codePoints)
			fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
				var res = []
					, len = arguments.length
					, i = 0
					, code;
				while (len > i) {
					code = +arguments[i++];
					if (toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
					res.push(code < 0x10000
							? fromCharCode(code)
							: fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
					);
				}
				return res.join('');
			}
		});

		/***/
	},
	/* 161 */
	/***/ function (module, exports, __webpack_require__) {

		var $def = __webpack_require__(93)
			, toObject = __webpack_require__(87)
			, toLength = __webpack_require__(108);

		$def($def.S, 'String', {
			// 21.1.2.4 String.raw(callSite, ...substitutions)
			raw: function raw(callSite) {
				var tpl = toObject(callSite.raw)
					, len = toLength(tpl.length)
					, sln = arguments.length
					, res = []
					, i = 0;
				while (len > i) {
					res.push(String(tpl[i++]));
					if (i < sln)res.push(String(arguments[i]));
				}
				return res.join('');
			}
		});

		/***/
	},
	/* 162 */
	/***/ function (module, exports, __webpack_require__) {

		var $at = __webpack_require__(163)(true);

		// 21.1.3.27 String.prototype[@@iterator]()
		__webpack_require__(91)(String, 'String', function (iterated) {
			this._t = String(iterated); // target
			this._i = 0;                // next index
			// 21.1.5.2.1 %StringIteratorPrototype%.next()
		}, function () {
			var O = this._t
				, index = this._i
				, point;
			if (index >= O.length)return {value: undefined, done: true};
			point = $at(O, index);
			this._i += point.length;
			return {value: point, done: false};
		});

		/***/
	},
	/* 163 */
	/***/ function (module, exports, __webpack_require__) {

		// true  -> String#at
		// false -> String#codePointAt
		var toInteger = __webpack_require__(109)
			, defined = __webpack_require__(90);
		module.exports = function (TO_STRING) {
			return function (that, pos) {
				var s = String(defined(that))
					, i = toInteger(pos)
					, l = s.length
					, a, b;
				if (i < 0 || i >= l)return TO_STRING ? '' : undefined;
				a = s.charCodeAt(i);
				return a < 0xd800 || a > 0xdbff || i + 1 === l
				|| (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
					? TO_STRING ? s.charAt(i) : a
					: TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
			};
		};

		/***/
	},
	/* 164 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $def = __webpack_require__(93)
			, $at = __webpack_require__(163)(false);
		$def($def.P, 'String', {
			// 21.1.3.3 String.prototype.codePointAt(pos)
			codePointAt: function codePointAt(pos) {
				return $at(this, pos);
			}
		});

		/***/
	},
	/* 165 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $def = __webpack_require__(93)
			, toLength = __webpack_require__(108)
			, context = __webpack_require__(166);

		// should throw error on regex
		$def($def.P + $def.F * !__webpack_require__(114)(function () {
				'q'.endsWith(/./);
			}), 'String', {
			// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
			endsWith: function endsWith(searchString /*, endPosition = @length */) {
				var that = context(this, searchString, 'endsWith')
					, endPosition = arguments[1]
					, len = toLength(that.length)
					, end = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
					, search = String(searchString);
				return that.slice(end - search.length, end) === search;
			}
		});

		/***/
	},
	/* 166 */
	/***/ function (module, exports, __webpack_require__) {

		// helper for String#{startsWith, endsWith, includes}
		var defined = __webpack_require__(90)
			, cof = __webpack_require__(89);

		module.exports = function (that, searchString, NAME) {
			if (cof(searchString) == 'RegExp')throw TypeError('String#' + NAME + " doesn't accept regex!");
			return String(defined(that));
		};

		/***/
	},
	/* 167 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $def = __webpack_require__(93)
			, context = __webpack_require__(166);

		$def($def.P, 'String', {
			// 21.1.3.7 String.prototype.includes(searchString, position = 0)
			includes: function includes(searchString /*, position = 0 */) {
				return !!~context(this, searchString, 'includes').indexOf(searchString, arguments[1]);
			}
		});

		/***/
	},
	/* 168 */
	/***/ function (module, exports, __webpack_require__) {

		var $def = __webpack_require__(93);

		$def($def.P, 'String', {
			// 21.1.3.13 String.prototype.repeat(count)
			repeat: __webpack_require__(169)
		});

		/***/
	},
	/* 169 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var toInteger = __webpack_require__(109)
			, defined = __webpack_require__(90);

		module.exports = function repeat(count) {
			var str = String(defined(this))
				, res = ''
				, n = toInteger(count);
			if (n < 0 || n == Infinity)throw RangeError("Count can't be negative");
			for (; n > 0; (n >>>= 1) && (str += str))if (n & 1)res += str;
			return res;
		};

		/***/
	},
	/* 170 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $def = __webpack_require__(93)
			, toLength = __webpack_require__(108)
			, context = __webpack_require__(166);

		// should throw error on regex
		$def($def.P + $def.F * !__webpack_require__(114)(function () {
				'q'.startsWith(/./);
			}), 'String', {
			// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
			startsWith: function startsWith(searchString /*, position = 0 */) {
				var that = context(this, searchString, 'startsWith')
					, index = toLength(Math.min(arguments[1], that.length))
					, search = String(searchString);
				return that.slice(index, index + search.length) === search;
			}
		});

		/***/
	},
	/* 171 */
	/***/ function (module, exports, __webpack_require__) {

		var ctx = __webpack_require__(106)
			, $def = __webpack_require__(93)
			, toObject = __webpack_require__(87)
			, call = __webpack_require__(173)
			, isArrayIter = __webpack_require__(172)
			, toLength = __webpack_require__(108)
			, getIterFn = __webpack_require__(174);
		$def($def.S + $def.F * !__webpack_require__(175)(function (iter) {
				Array.from(iter);
			}), 'Array', {
			// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
			from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/) {
				var O = toObject(arrayLike, true)
					, C = typeof this == 'function' ? this : Array
					, mapfn = arguments[1]
					, mapping = mapfn !== undefined
					, index = 0
					, iterFn = getIterFn(O)
					, length, result, step, iterator;
				if (mapping)mapfn = ctx(mapfn, arguments[2], 2);
				// if object isn't iterable or it's array with default iterator - use simple case
				if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
					for (iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++) {
						result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
					}
				} else {
					for (result = new C(length = toLength(O.length)); length > index; index++) {
						result[index] = mapping ? mapfn(O[index], index) : O[index];
					}
				}
				result.length = index;
				return result;
			}
		});

		/***/
	},
	/* 172 */
	/***/ function (module, exports, __webpack_require__) {

		var Iterators = __webpack_require__(86)
			, ITERATOR = __webpack_require__(77)('iterator');
		module.exports = function (it) {
			return ('Array' in Iterators ? Iterators.Array : Array.prototype[ITERATOR]) === it;
		};

		/***/
	},
	/* 173 */
	/***/ function (module, exports, __webpack_require__) {

		var anObject = __webpack_require__(110);

		function close(iterator) {
			var ret = iterator['return'];
			if (ret !== undefined)anObject(ret.call(iterator));
		}

		module.exports = function (iterator, fn, value, entries) {
			try {
				return entries ? fn(anObject(value)[0], value[1]) : fn(value);
			} catch (e) {
				close(iterator);
				throw e;
			}
		};

		/***/
	},
	/* 174 */
	/***/ function (module, exports, __webpack_require__) {

		var global = __webpack_require__(79)
			, classof = __webpack_require__(126)
			, ITERATOR = __webpack_require__(77)('iterator')
			, Iterators = __webpack_require__(86);
		module.exports = __webpack_require__(94).getIteratorMethod = function (it) {
			var Symbol = global.Symbol;
			if (it != undefined) {
				return it[Symbol && Symbol.iterator || '@@iterator']
					|| it[ITERATOR]
					|| Iterators[classof(it)];
			}
		};

		/***/
	},
	/* 175 */
	/***/ function (module, exports, __webpack_require__) {

		var SYMBOL_ITERATOR = __webpack_require__(77)('iterator')
			, SAFE_CLOSING = false;
		try {
			var riter = [7][SYMBOL_ITERATOR]();
			riter['return'] = function () {
				SAFE_CLOSING = true;
			};
			Array.from(riter, function () {
				throw 2;
			});
		} catch (e) { /* empty */
		}
		module.exports = function (exec) {
			if (!SAFE_CLOSING)return false;
			var safe = false;
			try {
				var arr = [7]
					, iter = arr[SYMBOL_ITERATOR]();
				iter.next = function () {
					safe = true;
				};
				arr[SYMBOL_ITERATOR] = function () {
					return iter;
				};
				exec(arr);
			} catch (e) { /* empty */
			}
			return safe;
		};

		/***/
	},
	/* 176 */
	/***/ function (module, exports, __webpack_require__) {

		var $def = __webpack_require__(93);
		$def($def.S, 'Array', {
			// 22.1.2.3 Array.of( ...items)
			of: function of(/* ...args */) {
				var index = 0
					, length = arguments.length
					, result = new (typeof this == 'function' ? this : Array)(length);
				while (length > index)result[index] = arguments[index++];
				result.length = length;
				return result;
			}
		});

		/***/
	},
	/* 177 */
	/***/ function (module, exports, __webpack_require__) {

		__webpack_require__(178)(Array);

		/***/
	},
	/* 178 */
	/***/ function (module, exports, __webpack_require__) {

		var $ = __webpack_require__(82)
			, SPECIES = __webpack_require__(77)('species');
		module.exports = function (C) {
			if (__webpack_require__(84) && !(SPECIES in C))$.setDesc(C, SPECIES, {
				configurable: true,
				get: function () {
					return this;
				}
			});
		};

		/***/
	},
	/* 179 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $def = __webpack_require__(93)
			, toObject = __webpack_require__(87)
			, toIndex = __webpack_require__(111)
			, toLength = __webpack_require__(108);
		$def($def.P, 'Array', {
			// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
			copyWithin: function copyWithin(target/* = 0 */, start /* = 0, end = @length */) {
				var O = toObject(this, true)
					, len = toLength(O.length)
					, to = toIndex(target, len)
					, from = toIndex(start, len)
					, end = arguments[2]
					, fin = end === undefined ? len : toIndex(end, len)
					, count = Math.min(fin - from, len - to)
					, inc = 1;
				if (from < to && to < from + count) {
					inc = -1;
					from = from + count - 1;
					to = to + count - 1;
				}
				while (count-- > 0) {
					if (from in O)O[to] = O[from];
					else delete O[to];
					to += inc;
					from += inc;
				}
				return O;
			}
		});
		__webpack_require__(76)('copyWithin');

		/***/
	},
	/* 180 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $def = __webpack_require__(93)
			, toObject = __webpack_require__(87)
			, toIndex = __webpack_require__(111)
			, toLength = __webpack_require__(108);
		$def($def.P, 'Array', {
			// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
			fill: function fill(value /*, start = 0, end = @length */) {
				var O = toObject(this, true)
					, length = toLength(O.length)
					, index = toIndex(arguments[1], length)
					, end = arguments[2]
					, endPos = end === undefined ? length : toIndex(end, length);
				while (endPos > index)O[index++] = value;
				return O;
			}
		});
		__webpack_require__(76)('fill');

		/***/
	},
	/* 181 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
		var KEY = 'find'
			, $def = __webpack_require__(93)
			, forced = true
			, $find = __webpack_require__(105)(5);
		// Shouldn't skip holes
		if (KEY in [])Array(1)[KEY](function () {
			forced = false;
		});
		$def($def.P + $def.F * forced, 'Array', {
			find: function find(callbackfn/*, that = undefined */) {
				return $find(this, callbackfn, arguments[1]);
			}
		});
		__webpack_require__(76)(KEY);

		/***/
	},
	/* 182 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
		var KEY = 'findIndex'
			, $def = __webpack_require__(93)
			, forced = true
			, $find = __webpack_require__(105)(6);
		// Shouldn't skip holes
		if (KEY in [])Array(1)[KEY](function () {
			forced = false;
		});
		$def($def.P + $def.F * forced, 'Array', {
			findIndex: function findIndex(callbackfn/*, that = undefined */) {
				return $find(this, callbackfn, arguments[1]);
			}
		});
		__webpack_require__(76)(KEY);

		/***/
	},
	/* 183 */
	/***/ function (module, exports, __webpack_require__) {

		var $ = __webpack_require__(82)
			, global = __webpack_require__(79)
			, cof = __webpack_require__(89)
			, $flags = __webpack_require__(184)
			, $RegExp = global.RegExp
			, Base = $RegExp
			, proto = $RegExp.prototype
			, re = /a/g
		// "new" creates a new object
			, CORRECT_NEW = new $RegExp(re) !== re
		// RegExp allows a regex with flags as the pattern
			, ALLOWS_RE_WITH_FLAGS = function () {
				try {
					return $RegExp(re, 'i') == '/a/i';
				} catch (e) { /* empty */
				}
			}();

		if (__webpack_require__(84)) {
			if (!CORRECT_NEW || !ALLOWS_RE_WITH_FLAGS) {
				$RegExp = function RegExp(pattern, flags) {
					var patternIsRegExp = cof(pattern) == 'RegExp'
						, flagsIsUndefined = flags === undefined;
					if (!(this instanceof $RegExp) && patternIsRegExp && flagsIsUndefined)return pattern;
					return CORRECT_NEW
						? new Base(patternIsRegExp && !flagsIsUndefined ? pattern.source : pattern, flags)
						: new Base(patternIsRegExp ? pattern.source : pattern
						, patternIsRegExp && flagsIsUndefined ? $flags.call(pattern) : flags);
				};
				$.each.call($.getNames(Base), function (key) {
					key in $RegExp || $.setDesc($RegExp, key, {
						configurable: true,
						get: function () {
							return Base[key];
						},
						set: function (it) {
							Base[key] = it;
						}
					});
				});
				proto.constructor = $RegExp;
				$RegExp.prototype = proto;
				__webpack_require__(95)(global, 'RegExp', $RegExp);
			}
		}

		__webpack_require__(178)($RegExp);

		/***/
	},
	/* 184 */
	/***/ function (module, exports, __webpack_require__) {

		var anObject = __webpack_require__(110);
		module.exports = function flags() {
			var that = anObject(this)
				, result = '';
			if (that.global)result += 'g';
			if (that.ignoreCase)result += 'i';
			if (that.multiline)result += 'm';
			if (that.unicode)result += 'u';
			if (that.sticky)result += 'y';
			return result;
		};

		/***/
	},
	/* 185 */
	/***/ function (module, exports, __webpack_require__) {

		// 21.2.5.3 get RegExp.prototype.flags()
		var $ = __webpack_require__(82);
		if (__webpack_require__(84) && /./g.flags != 'g')$.setDesc(RegExp.prototype, 'flags', {
			configurable: true,
			get: __webpack_require__(184)
		});

		/***/
	},
	/* 186 */
	/***/ function (module, exports, __webpack_require__) {

		// @@match logic
		__webpack_require__(187)('match', 1, function (MATCH) {
			// 21.1.3.11 String.prototype.match(regexp)
			return function match(regexp) {
				'use strict';
				var str = String(this)
					, fn = regexp == undefined ? undefined : regexp[MATCH];
				return fn !== undefined ? fn.call(regexp, str) : new RegExp(regexp)[MATCH](str);
			};
		});

		/***/
	},
	/* 187 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		module.exports = function (KEY, length, exec) {
			var SYMBOL = __webpack_require__(77)(KEY)
				, original = ''[KEY];
			if (function () {
					try {
						var O = {};
						O[SYMBOL] = function () {
							return 7;
						};
						return ''[KEY](O) != 7;
					} catch (e) {
						return true;
					}
				}()) {
				__webpack_require__(95)(String.prototype, KEY, exec(SYMBOL, original));
				__webpack_require__(81)(RegExp.prototype, SYMBOL, length == 2
						// 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
						// 21.2.5.11 RegExp.prototype[@@split](string, limit)
						? function (string, arg) {
						return original.call(string, this, arg);
					}
						// 21.2.5.6 RegExp.prototype[@@match](string)
						// 21.2.5.9 RegExp.prototype[@@search](string)
						: function (string) {
						return original.call(string, this);
					}
				);
			}
		};

		/***/
	},
	/* 188 */
	/***/ function (module, exports, __webpack_require__) {

		// @@replace logic
		__webpack_require__(187)('replace', 2, function (REPLACE, $replace) {
			// 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
			return function replace(searchValue, replaceValue) {
				'use strict';
				var str = String(this)
					, fn = searchValue == undefined ? undefined : searchValue[REPLACE];
				return fn !== undefined
					? fn.call(searchValue, str, replaceValue)
					: $replace.call(str, searchValue, replaceValue);
			};
		});

		/***/
	},
	/* 189 */
	/***/ function (module, exports, __webpack_require__) {

		// @@search logic
		__webpack_require__(187)('search', 1, function (SEARCH) {
			// 21.1.3.15 String.prototype.search(regexp)
			return function search(regexp) {
				'use strict';
				var str = String(this)
					, fn = regexp == undefined ? undefined : regexp[SEARCH];
				return fn !== undefined ? fn.call(regexp, str) : new RegExp(regexp)[SEARCH](str);
			};
		});

		/***/
	},
	/* 190 */
	/***/ function (module, exports, __webpack_require__) {

		// @@split logic
		__webpack_require__(187)('split', 2, function (SPLIT, $split) {
			// 21.1.3.17 String.prototype.split(separator, limit)
			return function split(separator, limit) {
				'use strict';
				var str = String(this)
					, fn = separator == undefined ? undefined : separator[SPLIT];
				return fn !== undefined ? fn.call(separator, str, limit) : $split.call(str, separator, limit);
			};
		});

		/***/
	},
	/* 191 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $ = __webpack_require__(82)
			, LIBRARY = __webpack_require__(92)
			, global = __webpack_require__(79)
			, ctx = __webpack_require__(106)
			, classof = __webpack_require__(126)
			, $def = __webpack_require__(93)
			, isObject = __webpack_require__(101)
			, anObject = __webpack_require__(110)
			, aFunction = __webpack_require__(107)
			, strictNew = __webpack_require__(192)
			, forOf = __webpack_require__(193)
			, setProto = __webpack_require__(124).set
			, same = __webpack_require__(122)
			, species = __webpack_require__(178)
			, SPECIES = __webpack_require__(77)('species')
			, RECORD = __webpack_require__(80)('record')
			, PROMISE = 'Promise'
			, process = global.process
			, isNode = classof(process) == 'process'
			, asap = process && process.nextTick || __webpack_require__(194).set
			, P = global[PROMISE]
			, Wrapper;

		function testResolve(sub) {
			var test = new P(function () {
			});
			if (sub)test.constructor = Object;
			return P.resolve(test) === test;
		}

		var useNative = function () {
			var works = false;

			function P2(x) {
				var self = new P(x);
				setProto(self, P2.prototype);
				return self;
			}

			try {
				works = P && P.resolve && testResolve();
				setProto(P2, P);
				P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
				// actual Firefox has broken subclass support, test that
				if (!(P2.resolve(5).then(function () {
					}) instanceof P2)) {
					works = false;
				}
				// actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
				if (works && __webpack_require__(84)) {
					var thenableThenGotten = false;
					P.resolve($.setDesc({}, 'then', {
						get: function () {
							thenableThenGotten = true;
						}
					}));
					works = thenableThenGotten;
				}
			} catch (e) {
				works = false;
			}
			return works;
		}();

		// helpers
		function isPromise(it) {
			return isObject(it) && (useNative ? classof(it) == 'Promise' : RECORD in it);
		}

		function sameConstructor(a, b) {
			// library wrapper special case
			if (LIBRARY && a === P && b === Wrapper)return true;
			return same(a, b);
		}

		function getConstructor(C) {
			var S = anObject(C)[SPECIES];
			return S != undefined ? S : C;
		}

		function isThenable(it) {
			var then;
			return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
		}

		function notify(record, isReject) {
			if (record.n)return;
			record.n = true;
			var chain = record.c;
			// strange IE + webpack dev server bug - use .call(global)
			asap.call(global, function () {
				var value = record.v
					, ok = record.s == 1
					, i = 0;

				function run(react) {
					var cb = ok ? react.ok : react.fail
						, ret, then;
					try {
						if (cb) {
							if (!ok)record.h = true;
							ret = cb === true ? value : cb(value);
							if (ret === react.P) {
								react.rej(TypeError('Promise-chain cycle'));
							} else if (then = isThenable(ret)) {
								then.call(ret, react.res, react.rej);
							} else react.res(ret);
						} else react.rej(value);
					} catch (err) {
						react.rej(err);
					}
				}

				while (chain.length > i)run(chain[i++]); // variable length - can't use forEach
				chain.length = 0;
				record.n = false;
				if (isReject)setTimeout(function () {
					// strange IE + webpack dev server bug - use .call(global)
					asap.call(global, function () {
						if (isUnhandled(record.p)) {
							if (isNode) {
								process.emit('unhandledRejection', value, record.p);
							} else if (global.console && console.error) {
								console.error('Unhandled promise rejection', value);
							}
						}
						record.a = undefined;
					});
				}, 1);
			});
		}

		function isUnhandled(promise) {
			var record = promise[RECORD]
				, chain = record.a || record.c
				, i = 0
				, react;
			if (record.h)return false;
			while (chain.length > i) {
				react = chain[i++];
				if (react.fail || !isUnhandled(react.P))return false;
			}
			return true;
		}

		function $reject(value) {
			var record = this;
			if (record.d)return;
			record.d = true;
			record = record.r || record; // unwrap
			record.v = value;
			record.s = 2;
			record.a = record.c.slice();
			notify(record, true);
		}

		function $resolve(value) {
			var record = this
				, then;
			if (record.d)return;
			record.d = true;
			record = record.r || record; // unwrap
			try {
				if (then = isThenable(value)) {
					// strange IE + webpack dev server bug - use .call(global)
					asap.call(global, function () {
						var wrapper = {r: record, d: false}; // wrap
						try {
							then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
						} catch (e) {
							$reject.call(wrapper, e);
						}
					});
				} else {
					record.v = value;
					record.s = 1;
					notify(record, false);
				}
			} catch (e) {
				$reject.call({r: record, d: false}, e); // wrap
			}
		}

		// constructor polyfill
		if (!useNative) {
			// 25.4.3.1 Promise(executor)
			P = function Promise(executor) {
				aFunction(executor);
				var record = {
					p: strictNew(this, P, PROMISE),         // <- promise
					c: [],                                  // <- awaiting reactions
					a: undefined,                           // <- checked in isUnhandled reactions
					s: 0,                                   // <- state
					d: false,                               // <- done
					v: undefined,                           // <- value
					h: false,                               // <- handled rejection
					n: false                                // <- notify
				};
				this[RECORD] = record;
				try {
					executor(ctx($resolve, record, 1), ctx($reject, record, 1));
				} catch (err) {
					$reject.call(record, err);
				}
			};
			__webpack_require__(195)(P.prototype, {
				// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
				then: function then(onFulfilled, onRejected) {
					var S = anObject(anObject(this).constructor)[SPECIES];
					var react = {
						ok: typeof onFulfilled == 'function' ? onFulfilled : true,
						fail: typeof onRejected == 'function' ? onRejected : false
					};
					var promise = react.P = new (S != undefined ? S : P)(function (res, rej) {
						react.res = aFunction(res);
						react.rej = aFunction(rej);
					});
					var record = this[RECORD];
					record.c.push(react);
					if (record.a)record.a.push(react);
					if (record.s)notify(record, false);
					return promise;
				},
				// 25.4.5.1 Promise.prototype.catch(onRejected)
				'catch': function (onRejected) {
					return this.then(undefined, onRejected);
				}
			});
		}

		// export
		$def($def.G + $def.W + $def.F * !useNative, {Promise: P});
		__webpack_require__(98)(P, PROMISE);
		species(P);
		species(Wrapper = __webpack_require__(94)[PROMISE]);

		// statics
		$def($def.S + $def.F * !useNative, PROMISE, {
			// 25.4.4.5 Promise.reject(r)
			reject: function reject(r) {
				return new this(function (res, rej) {
					rej(r);
				});
			}
		});
		$def($def.S + $def.F * (!useNative || testResolve(true)), PROMISE, {
			// 25.4.4.6 Promise.resolve(x)
			resolve: function resolve(x) {
				return isPromise(x) && sameConstructor(x.constructor, this)
					? x : new this(function (res) {
					res(x);
				});
			}
		});
		$def($def.S + $def.F * !(useNative && __webpack_require__(175)(function (iter) {
				P.all(iter)['catch'](function () {
				});
			})), PROMISE, {
			// 25.4.4.1 Promise.all(iterable)
			all: function all(iterable) {
				var C = getConstructor(this)
					, values = [];
				return new C(function (res, rej) {
					forOf(iterable, false, values.push, values);
					var remaining = values.length
						, results = Array(remaining);
					if (remaining)$.each.call(values, function (promise, index) {
						C.resolve(promise).then(function (value) {
							results[index] = value;
							--remaining || res(results);
						}, rej);
					});
					else res(results);
				});
			},
			// 25.4.4.4 Promise.race(iterable)
			race: function race(iterable) {
				var C = getConstructor(this);
				return new C(function (res, rej) {
					forOf(iterable, false, function (promise) {
						C.resolve(promise).then(res, rej);
					});
				});
			}
		});

		/***/
	},
	/* 192 */
	/***/ function (module, exports) {

		module.exports = function (it, Constructor, name) {
			if (!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
			return it;
		};

		/***/
	},
	/* 193 */
	/***/ function (module, exports, __webpack_require__) {

		var ctx = __webpack_require__(106)
			, call = __webpack_require__(173)
			, isArrayIter = __webpack_require__(172)
			, anObject = __webpack_require__(110)
			, toLength = __webpack_require__(108)
			, getIterFn = __webpack_require__(174);
		module.exports = function (iterable, entries, fn, that) {
			var iterFn = getIterFn(iterable)
				, f = ctx(fn, that, entries ? 2 : 1)
				, index = 0
				, length, step, iterator;
			if (typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
			// fast case for arrays with default iterator
			if (isArrayIter(iterFn))for (length = toLength(iterable.length); length > index; index++) {
				entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
			} else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
				call(iterator, f, step.value, entries);
			}
		};

		/***/
	},
	/* 194 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var ctx = __webpack_require__(106)
			, invoke = __webpack_require__(104)
			, html = __webpack_require__(102)
			, cel = __webpack_require__(103)
			, global = __webpack_require__(79)
			, process = global.process
			, setTask = global.setImmediate
			, clearTask = global.clearImmediate
			, MessageChannel = global.MessageChannel
			, counter = 0
			, queue = {}
			, ONREADYSTATECHANGE = 'onreadystatechange'
			, defer, channel, port;

		function run() {
			var id = +this;
			if (queue.hasOwnProperty(id)) {
				var fn = queue[id];
				delete queue[id];
				fn();
			}
		}

		function listner(event) {
			run.call(event.data);
		}

		// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
		if (!setTask || !clearTask) {
			setTask = function setImmediate(fn) {
				var args = [], i = 1;
				while (arguments.length > i)args.push(arguments[i++]);
				queue[++counter] = function () {
					invoke(typeof fn == 'function' ? fn : Function(fn), args);
				};
				defer(counter);
				return counter;
			};
			clearTask = function clearImmediate(id) {
				delete queue[id];
			};
			// Node.js 0.8-
			if (__webpack_require__(89)(process) == 'process') {
				defer = function (id) {
					process.nextTick(ctx(run, id, 1));
				};
				// Modern browsers, skip implementation for WebWorkers
				// IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
			} else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
				defer = function (id) {
					global.postMessage(id, '*');
				};
				global.addEventListener('message', listner, false);
				// WebWorkers
			} else if (MessageChannel) {
				channel = new MessageChannel;
				port = channel.port2;
				channel.port1.onmessage = listner;
				defer = ctx(port.postMessage, port, 1);
				// IE8-
			} else if (ONREADYSTATECHANGE in cel('script')) {
				defer = function (id) {
					html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
						html.removeChild(this);
						run.call(id);
					};
				};
				// Rest old browsers
			} else {
				defer = function (id) {
					setTimeout(ctx(run, id, 1), 0);
				};
			}
		}
		module.exports = {
			set: setTask,
			clear: clearTask
		};

		/***/
	},
	/* 195 */
	/***/ function (module, exports, __webpack_require__) {

		var $redef = __webpack_require__(95);
		module.exports = function (target, src) {
			for (var key in src)$redef(target, key, src[key]);
			return target;
		};

		/***/
	},
	/* 196 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var strong = __webpack_require__(197);

		// 23.1 Map Objects
		__webpack_require__(198)('Map', function (get) {
			return function Map() {
				return get(this, arguments[0]);
			};
		}, {
			// 23.1.3.6 Map.prototype.get(key)
			get: function get(key) {
				var entry = strong.getEntry(this, key);
				return entry && entry.v;
			},
			// 23.1.3.9 Map.prototype.set(key, value)
			set: function set(key, value) {
				return strong.def(this, key === 0 ? 0 : key, value);
			}
		}, strong, true);

		/***/
	},
	/* 197 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $ = __webpack_require__(82)
			, hide = __webpack_require__(81)
			, ctx = __webpack_require__(106)
			, species = __webpack_require__(178)
			, strictNew = __webpack_require__(192)
			, defined = __webpack_require__(90)
			, forOf = __webpack_require__(193)
			, step = __webpack_require__(85)
			, ID = __webpack_require__(80)('id')
			, $has = __webpack_require__(96)
			, isObject = __webpack_require__(101)
			, isExtensible = Object.isExtensible || isObject
			, SUPPORT_DESC = __webpack_require__(84)
			, SIZE = SUPPORT_DESC ? '_s' : 'size'
			, id = 0;

		function fastKey(it, create) {
			// return primitive with prefix
			if (!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
			if (!$has(it, ID)) {
				// can't set id to frozen object
				if (!isExtensible(it))return 'F';
				// not necessary to add id
				if (!create)return 'E';
				// add missing object id
				hide(it, ID, ++id);
				// return object id with prefix
			}
			return 'O' + it[ID];
		}

		function getEntry(that, key) {
			// fast case
			var index = fastKey(key), entry;
			if (index !== 'F')return that._i[index];
			// frozen object case
			for (entry = that._f; entry; entry = entry.n) {
				if (entry.k == key)return entry;
			}
		}

		module.exports = {
			getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
				var C = wrapper(function (that, iterable) {
					strictNew(that, C, NAME);
					that._i = $.create(null); // index
					that._f = undefined;      // first entry
					that._l = undefined;      // last entry
					that[SIZE] = 0;           // size
					if (iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
				});
				__webpack_require__(195)(C.prototype, {
					// 23.1.3.1 Map.prototype.clear()
					// 23.2.3.2 Set.prototype.clear()
					clear: function clear() {
						for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {
							entry.r = true;
							if (entry.p)entry.p = entry.p.n = undefined;
							delete data[entry.i];
						}
						that._f = that._l = undefined;
						that[SIZE] = 0;
					},
					// 23.1.3.3 Map.prototype.delete(key)
					// 23.2.3.4 Set.prototype.delete(value)
					'delete': function (key) {
						var that = this
							, entry = getEntry(that, key);
						if (entry) {
							var next = entry.n
								, prev = entry.p;
							delete that._i[entry.i];
							entry.r = true;
							if (prev)prev.n = next;
							if (next)next.p = prev;
							if (that._f == entry)that._f = next;
							if (that._l == entry)that._l = prev;
							that[SIZE]--;
						}
						return !!entry;
					},
					// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
					// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
					forEach: function forEach(callbackfn /*, that = undefined */) {
						var f = ctx(callbackfn, arguments[1], 3)
							, entry;
						while (entry = entry ? entry.n : this._f) {
							f(entry.v, entry.k, this);
							// revert to the last existing entry
							while (entry && entry.r)entry = entry.p;
						}
					},
					// 23.1.3.7 Map.prototype.has(key)
					// 23.2.3.7 Set.prototype.has(value)
					has: function has(key) {
						return !!getEntry(this, key);
					}
				});
				if (SUPPORT_DESC)$.setDesc(C.prototype, 'size', {
					get: function () {
						return defined(this[SIZE]);
					}
				});
				return C;
			},
			def: function (that, key, value) {
				var entry = getEntry(that, key)
					, prev, index;
				// change existing entry
				if (entry) {
					entry.v = value;
					// create new entry
				} else {
					that._l = entry = {
						i: index = fastKey(key, true), // <- index
						k: key,                        // <- key
						v: value,                      // <- value
						p: prev = that._l,             // <- previous entry
						n: undefined,                  // <- next entry
						r: false                       // <- removed
					};
					if (!that._f)that._f = entry;
					if (prev)prev.n = entry;
					that[SIZE]++;
					// add to index
					if (index !== 'F')that._i[index] = entry;
				}
				return that;
			},
			getEntry: getEntry,
			setStrong: function (C, NAME, IS_MAP) {
				// add .keys, .values, .entries, [@@iterator]
				// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
				__webpack_require__(91)(C, NAME, function (iterated, kind) {
					this._t = iterated;  // target
					this._k = kind;      // kind
					this._l = undefined; // previous
				}, function () {
					var that = this
						, kind = that._k
						, entry = that._l;
					// revert to the last existing entry
					while (entry && entry.r)entry = entry.p;
					// get next entry
					if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
						// or finish the iteration
						that._t = undefined;
						return step(1);
					}
					// return step by kind
					if (kind == 'keys')return step(0, entry.k);
					if (kind == 'values')return step(0, entry.v);
					return step(0, [entry.k, entry.v]);
				}, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

				// add [@@species], 23.1.2.2, 23.2.2.2
				species(C);
				species(__webpack_require__(94)[NAME]); // for wrapper
			}
		};

		/***/
	},
	/* 198 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var global = __webpack_require__(79)
			, $def = __webpack_require__(93)
			, BUGGY = __webpack_require__(99)
			, forOf = __webpack_require__(193)
			, strictNew = __webpack_require__(192);

		module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
			var Base = global[NAME]
				, C = Base
				, ADDER = IS_MAP ? 'set' : 'add'
				, proto = C && C.prototype
				, O = {};

			function fixMethod(KEY) {
				var fn = proto[KEY];
				__webpack_require__(95)(proto, KEY,
					KEY == 'delete' ? function (a) {
						return fn.call(this, a === 0 ? 0 : a);
					}
						: KEY == 'has' ? function has(a) {
						return fn.call(this, a === 0 ? 0 : a);
					}
						: KEY == 'get' ? function get(a) {
						return fn.call(this, a === 0 ? 0 : a);
					}
						: KEY == 'add' ? function add(a) {
						fn.call(this, a === 0 ? 0 : a);
						return this;
					}
						: function set(a, b) {
						fn.call(this, a === 0 ? 0 : a, b);
						return this;
					}
				);
			}

			if (typeof C != 'function' || !(IS_WEAK || !BUGGY && proto.forEach && proto.entries)) {
				// create collection constructor
				C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
				__webpack_require__(195)(C.prototype, methods);
			} else {
				var inst = new C
					, chain = inst[ADDER](IS_WEAK ? {} : -0, 1)
					, buggyZero;
				// wrap for init collections from iterable
				if (!__webpack_require__(175)(function (iter) {
						new C(iter);
					})) { // eslint-disable-line no-new
					C = wrapper(function (target, iterable) {
						strictNew(target, C, NAME);
						var that = new Base;
						if (iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
						return that;
					});
					C.prototype = proto;
					proto.constructor = C;
				}
				IS_WEAK || inst.forEach(function (val, key) {
					buggyZero = 1 / key === -Infinity;
				});
				// fix converting -0 key to +0
				if (buggyZero) {
					fixMethod('delete');
					fixMethod('has');
					IS_MAP && fixMethod('get');
				}
				// + fix .add & .set for chaining
				if (buggyZero || chain !== inst)fixMethod(ADDER);
				// weak collections should not contains .clear method
				if (IS_WEAK && proto.clear)delete proto.clear;
			}

			__webpack_require__(98)(C, NAME);

			O[NAME] = C;
			$def($def.G + $def.W + $def.F * (C != Base), O);

			if (!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

			return C;
		};

		/***/
	},
	/* 199 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var strong = __webpack_require__(197);

		// 23.2 Set Objects
		__webpack_require__(198)('Set', function (get) {
			return function Set() {
				return get(this, arguments[0]);
			};
		}, {
			// 23.2.3.1 Set.prototype.add(value)
			add: function add(value) {
				return strong.def(this, value = value === 0 ? 0 : value, value);
			}
		}, strong);

		/***/
	},
	/* 200 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $ = __webpack_require__(82)
			, weak = __webpack_require__(201)
			, isObject = __webpack_require__(101)
			, has = __webpack_require__(96)
			, frozenStore = weak.frozenStore
			, WEAK = weak.WEAK
			, isExtensible = Object.isExtensible || isObject
			, tmp = {};

		// 23.3 WeakMap Objects
		var $WeakMap = __webpack_require__(198)('WeakMap', function (get) {
			return function WeakMap() {
				return get(this, arguments[0]);
			};
		}, {
			// 23.3.3.3 WeakMap.prototype.get(key)
			get: function get(key) {
				if (isObject(key)) {
					if (!isExtensible(key))return frozenStore(this).get(key);
					if (has(key, WEAK))return key[WEAK][this._i];
				}
			},
			// 23.3.3.5 WeakMap.prototype.set(key, value)
			set: function set(key, value) {
				return weak.def(this, key, value);
			}
		}, weak, true, true);

		// IE11 WeakMap frozen keys fix
		if (new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
			$.each.call(['delete', 'has', 'get', 'set'], function (key) {
				var proto = $WeakMap.prototype
					, method = proto[key];
				__webpack_require__(95)(proto, key, function (a, b) {
					// store frozen objects on leaky map
					if (isObject(a) && !isExtensible(a)) {
						var result = frozenStore(this)[key](a, b);
						return key == 'set' ? this : result;
						// store all the rest on native weakmap
					}
					return method.call(this, a, b);
				});
			});
		}

		/***/
	},
	/* 201 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var hide = __webpack_require__(81)
			, anObject = __webpack_require__(110)
			, strictNew = __webpack_require__(192)
			, forOf = __webpack_require__(193)
			, method = __webpack_require__(105)
			, WEAK = __webpack_require__(80)('weak')
			, isObject = __webpack_require__(101)
			, $has = __webpack_require__(96)
			, isExtensible = Object.isExtensible || isObject
			, find = method(5)
			, findIndex = method(6)
			, id = 0;

		// fallback for frozen keys
		function frozenStore(that) {
			return that._l || (that._l = new FrozenStore);
		}

		function FrozenStore() {
			this.a = [];
		}

		FrozenStore.prototype = {
			get: function (key) {
				var entry = findFrozen(this, key);
				if (entry)return entry[1];
			},
			has: function (key) {
				return !!findFrozen(this, key);
			},
			set: function (key, value) {
				var entry = findFrozen(this, key);
				if (entry)entry[1] = value;
				else this.a.push([key, value]);
			},
			'delete': function (key) {
				var index = findIndex(this.a, function (it) {
					return it[0] === key;
				});
				if (~index)this.a.splice(index, 1);
				return !!~index;
			}
		};
		function findFrozen(store, key) {
			return find(store.a, function (it) {
				return it[0] === key;
			});
		}

		module.exports = {
			getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
				var C = wrapper(function (that, iterable) {
					strictNew(that, C, NAME);
					that._i = id++;      // collection id
					that._l = undefined; // leak store for frozen objects
					if (iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
				});
				__webpack_require__(195)(C.prototype, {
					// 23.3.3.2 WeakMap.prototype.delete(key)
					// 23.4.3.3 WeakSet.prototype.delete(value)
					'delete': function (key) {
						if (!isObject(key))return false;
						if (!isExtensible(key))return frozenStore(this)['delete'](key);
						return $has(key, WEAK) && $has(key[WEAK], this._i) && delete key[WEAK][this._i];
					},
					// 23.3.3.4 WeakMap.prototype.has(key)
					// 23.4.3.4 WeakSet.prototype.has(value)
					has: function has(key) {
						if (!isObject(key))return false;
						if (!isExtensible(key))return frozenStore(this).has(key);
						return $has(key, WEAK) && $has(key[WEAK], this._i);
					}
				});
				return C;
			},
			def: function (that, key, value) {
				if (!isExtensible(anObject(key))) {
					frozenStore(that).set(key, value);
				} else {
					$has(key, WEAK) || hide(key, WEAK, {});
					key[WEAK][that._i] = value;
				}
				return that;
			},
			frozenStore: frozenStore,
			WEAK: WEAK
		};

		/***/
	},
	/* 202 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var weak = __webpack_require__(201);

		// 23.4 WeakSet Objects
		__webpack_require__(198)('WeakSet', function (get) {
			return function WeakSet() {
				return get(this, arguments[0]);
			};
		}, {
			// 23.4.3.1 WeakSet.prototype.add(value)
			add: function add(value) {
				return weak.def(this, value, true);
			}
		}, weak, false, true);

		/***/
	},
	/* 203 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
		var $def = __webpack_require__(93)
			, _apply = Function.apply;

		$def($def.S, 'Reflect', {
			apply: function apply(target, thisArgument, argumentsList) {
				return _apply.call(target, thisArgument, argumentsList);
			}
		});

		/***/
	},
	/* 204 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
		var $ = __webpack_require__(82)
			, $def = __webpack_require__(93)
			, aFunction = __webpack_require__(107)
			, isObject = __webpack_require__(101)
			, apply = Function.apply
			, bind = Function.bind || __webpack_require__(94).Function.prototype.bind;

		$def($def.S, 'Reflect', {
			construct: function construct(target, argumentsList /*, newTarget*/) {
				if (arguments.length < 3)return new (bind.apply(target, [null].concat(argumentsList)))();
				var proto = aFunction(arguments[2]).prototype
					, instance = $.create(isObject(proto) ? proto : Object.prototype)
					, result = apply.call(target, instance, argumentsList);
				return isObject(result) ? result : instance;
			}
		});

		/***/
	},
	/* 205 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
		var $ = __webpack_require__(82)
			, $def = __webpack_require__(93)
			, anObject = __webpack_require__(110);

		// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
		$def($def.S + $def.F * __webpack_require__(114)(function () {
				Reflect.defineProperty($.setDesc({}, 1, {value: 1}), 1, {value: 2});
			}), 'Reflect', {
			defineProperty: function defineProperty(target, propertyKey, attributes) {
				anObject(target);
				try {
					$.setDesc(target, propertyKey, attributes);
					return true;
				} catch (e) {
					return false;
				}
			}
		});

		/***/
	},
	/* 206 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.4 Reflect.deleteProperty(target, propertyKey)
		var $def = __webpack_require__(93)
			, getDesc = __webpack_require__(82).getDesc
			, anObject = __webpack_require__(110);

		$def($def.S, 'Reflect', {
			deleteProperty: function deleteProperty(target, propertyKey) {
				var desc = getDesc(anObject(target), propertyKey);
				return desc && !desc.configurable ? false : delete target[propertyKey];
			}
		});

		/***/
	},
	/* 207 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.5 Reflect.enumerate(target)
		var $def = __webpack_require__(93)
			, anObject = __webpack_require__(110);

		function Enumerate(iterated) {
			this._t = anObject(iterated); // target
			this._k = undefined;          // keys
			this._i = 0;                  // next index
		}

		__webpack_require__(97)(Enumerate, 'Object', function () {
			var that = this
				, keys = that._k
				, key;
			if (keys == undefined) {
				that._k = keys = [];
				for (key in that._t)keys.push(key);
			}
			do {
				if (that._i >= keys.length)return {value: undefined, done: true};
			} while (!((key = keys[that._i++]) in that._t));
			return {value: key, done: false};
		});

		$def($def.S, 'Reflect', {
			enumerate: function enumerate(target) {
				return new Enumerate(target);
			}
		});

		/***/
	},
	/* 208 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.6 Reflect.get(target, propertyKey [, receiver])
		var $ = __webpack_require__(82)
			, has = __webpack_require__(96)
			, $def = __webpack_require__(93)
			, isObject = __webpack_require__(101)
			, anObject = __webpack_require__(110);

		function get(target, propertyKey/*, receiver*/) {
			var receiver = arguments.length < 3 ? target : arguments[2]
				, desc, proto;
			if (anObject(target) === receiver)return target[propertyKey];
			if (desc = $.getDesc(target, propertyKey))return has(desc, 'value')
				? desc.value
				: desc.get !== undefined
				? desc.get.call(receiver)
				: undefined;
			if (isObject(proto = $.getProto(target)))return get(proto, propertyKey, receiver);
		}

		$def($def.S, 'Reflect', {get: get});

		/***/
	},
	/* 209 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
		var $ = __webpack_require__(82)
			, $def = __webpack_require__(93)
			, anObject = __webpack_require__(110);

		$def($def.S, 'Reflect', {
			getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
				return $.getDesc(anObject(target), propertyKey);
			}
		});

		/***/
	},
	/* 210 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.8 Reflect.getPrototypeOf(target)
		var $def = __webpack_require__(93)
			, getProto = __webpack_require__(82).getProto
			, anObject = __webpack_require__(110);

		$def($def.S, 'Reflect', {
			getPrototypeOf: function getPrototypeOf(target) {
				return getProto(anObject(target));
			}
		});

		/***/
	},
	/* 211 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.9 Reflect.has(target, propertyKey)
		var $def = __webpack_require__(93);

		$def($def.S, 'Reflect', {
			has: function has(target, propertyKey) {
				return propertyKey in target;
			}
		});

		/***/
	},
	/* 212 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.10 Reflect.isExtensible(target)
		var $def = __webpack_require__(93)
			, anObject = __webpack_require__(110)
			, _isExtensible = Object.isExtensible || __webpack_require__(101);

		$def($def.S, 'Reflect', {
			isExtensible: function isExtensible(target) {
				return _isExtensible(anObject(target));
			}
		});

		/***/
	},
	/* 213 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.11 Reflect.ownKeys(target)
		var $def = __webpack_require__(93);

		$def($def.S, 'Reflect', {ownKeys: __webpack_require__(214)});

		/***/
	},
	/* 214 */
	/***/ function (module, exports, __webpack_require__) {

		var $ = __webpack_require__(82)
			, anObject = __webpack_require__(110);
		module.exports = function ownKeys(it) {
			var keys = $.getNames(anObject(it))
				, getSymbols = $.getSymbols;
			return getSymbols ? keys.concat(getSymbols(it)) : keys;
		};

		/***/
	},
	/* 215 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.12 Reflect.preventExtensions(target)
		var $def = __webpack_require__(93)
			, anObject = __webpack_require__(110)
			, _preventExtensions = Object.preventExtensions;

		$def($def.S, 'Reflect', {
			preventExtensions: function preventExtensions(target) {
				anObject(target);
				try {
					if (_preventExtensions)_preventExtensions(target);
					return true;
				} catch (e) {
					return false;
				}
			}
		});

		/***/
	},
	/* 216 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
		var $ = __webpack_require__(82)
			, has = __webpack_require__(96)
			, $def = __webpack_require__(93)
			, createDesc = __webpack_require__(83)
			, anObject = __webpack_require__(110)
			, isObject = __webpack_require__(101);

		function set(target, propertyKey, V/*, receiver*/) {
			var receiver = arguments.length < 4 ? target : arguments[3]
				, ownDesc = $.getDesc(anObject(target), propertyKey)
				, existingDescriptor, proto;
			if (!ownDesc) {
				if (isObject(proto = $.getProto(target))) {
					return set(proto, propertyKey, V, receiver);
				}
				ownDesc = createDesc(0);
			}
			if (has(ownDesc, 'value')) {
				if (ownDesc.writable === false || !isObject(receiver))return false;
				existingDescriptor = $.getDesc(receiver, propertyKey) || createDesc(0);
				existingDescriptor.value = V;
				$.setDesc(receiver, propertyKey, existingDescriptor);
				return true;
			}
			return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
		}

		$def($def.S, 'Reflect', {set: set});

		/***/
	},
	/* 217 */
	/***/ function (module, exports, __webpack_require__) {

		// 26.1.14 Reflect.setPrototypeOf(target, proto)
		var $def = __webpack_require__(93)
			, setProto = __webpack_require__(124);

		if (setProto)$def($def.S, 'Reflect', {
			setPrototypeOf: function setPrototypeOf(target, proto) {
				setProto.check(target, proto);
				try {
					setProto.set(target, proto);
					return true;
				} catch (e) {
					return false;
				}
			}
		});

		/***/
	},
	/* 218 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $def = __webpack_require__(93)
			, $includes = __webpack_require__(112)(true);
		$def($def.P, 'Array', {
			// https://github.com/domenic/Array.prototype.includes
			includes: function includes(el /*, fromIndex = 0 */) {
				return $includes(this, el, arguments[1]);
			}
		});
		__webpack_require__(76)('includes');

		/***/
	},
	/* 219 */
	/***/ function (module, exports, __webpack_require__) {

		// https://github.com/mathiasbynens/String.prototype.at
		'use strict';
		var $def = __webpack_require__(93)
			, $at = __webpack_require__(163)(true);
		$def($def.P, 'String', {
			at: function at(pos) {
				return $at(this, pos);
			}
		});

		/***/
	},
	/* 220 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $def = __webpack_require__(93)
			, $pad = __webpack_require__(221);
		$def($def.P, 'String', {
			lpad: function lpad(n) {
				return $pad(this, n, arguments[1], true);
			}
		});

		/***/
	},
	/* 221 */
	/***/ function (module, exports, __webpack_require__) {

		// http://wiki.ecmascript.org/doku.php?id=strawman:string_padding
		var toInteger = __webpack_require__(109)
			, repeat = __webpack_require__(169)
			, defined = __webpack_require__(90);

		module.exports = function (that, minLength, fillChar, left) {
			// 1. Let O be CheckObjectCoercible(this value).
			// 2. Let S be ToString(O).
			var S = String(defined(that));
			// 4. If intMinLength is undefined, return S.
			if (minLength === undefined)return S;
			// 4. Let intMinLength be ToInteger(minLength).
			var intMinLength = toInteger(minLength);
			// 5. Let fillLen be the number of characters in S minus intMinLength.
			var fillLen = intMinLength - S.length;
			// 6. If fillLen < 0, then throw a RangeError exception.
			// 7. If fillLen is +∞, then throw a RangeError exception.
			if (fillLen < 0 || fillLen === Infinity) {
				throw new RangeError('Cannot satisfy string length ' + minLength + ' for string: ' + S);
			}
			// 8. Let sFillStr be the string represented by fillStr.
			// 9. If sFillStr is undefined, let sFillStr be a space character.
			var sFillStr = fillChar === undefined ? ' ' : String(fillChar);
			// 10. Let sFillVal be a String made of sFillStr, repeated until fillLen is met.
			var sFillVal = repeat.call(sFillStr, Math.ceil(fillLen / sFillStr.length));
			// truncate if we overflowed
			if (sFillVal.length > fillLen)sFillVal = left
				? sFillVal.slice(sFillVal.length - fillLen)
				: sFillVal.slice(0, fillLen);
			// 11. Return a string made from sFillVal, followed by S.
			// 11. Return a String made from S, followed by sFillVal.
			return left ? sFillVal.concat(S) : S.concat(sFillVal);
		};

		/***/
	},
	/* 222 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var $def = __webpack_require__(93)
			, $pad = __webpack_require__(221);
		$def($def.P, 'String', {
			rpad: function rpad(n) {
				return $pad(this, n, arguments[1], false);
			}
		});

		/***/
	},
	/* 223 */
	/***/ function (module, exports, __webpack_require__) {

		// https://github.com/benjamingr/RexExp.escape
		var $def = __webpack_require__(93)
			, $re = __webpack_require__(113)(/[\\^$*+?.()|[\]{}]/g, '\\$&');
		$def($def.S, 'RegExp', {
			escape: function escape(it) {
				return $re(it);
			}
		});


		/***/
	},
	/* 224 */
	/***/ function (module, exports, __webpack_require__) {

		// https://gist.github.com/WebReflection/9353781
		var $ = __webpack_require__(82)
			, $def = __webpack_require__(93)
			, ownKeys = __webpack_require__(214)
			, toObject = __webpack_require__(87)
			, createDesc = __webpack_require__(83);

		$def($def.S, 'Object', {
			getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
				var O = toObject(object)
					, setDesc = $.setDesc
					, getDesc = $.getDesc
					, keys = ownKeys(O)
					, result = {}
					, i = 0
					, key, D;
				while (keys.length > i) {
					D = getDesc(O, key = keys[i++]);
					if (key in result)setDesc(result, key, createDesc(0, D));
					else result[key] = D;
				}
				return result;
			}
		});

		/***/
	},
	/* 225 */
	/***/ function (module, exports, __webpack_require__) {

		// http://goo.gl/XkBrjD
		var $def = __webpack_require__(93)
			, $values = __webpack_require__(226)(false);

		$def($def.S, 'Object', {
			values: function values(it) {
				return $values(it);
			}
		});

		/***/
	},
	/* 226 */
	/***/ function (module, exports, __webpack_require__) {

		var $ = __webpack_require__(82)
			, toObject = __webpack_require__(87);
		module.exports = function (isEntries) {
			return function (it) {
				var O = toObject(it)
					, keys = $.getKeys(O)
					, length = keys.length
					, i = 0
					, result = Array(length)
					, key;
				if (isEntries)while (length > i)result[i] = [key = keys[i++], O[key]];
				else while (length > i)result[i] = O[keys[i++]];
				return result;
			};
		};

		/***/
	},
	/* 227 */
	/***/ function (module, exports, __webpack_require__) {

		// http://goo.gl/XkBrjD
		var $def = __webpack_require__(93)
			, $entries = __webpack_require__(226)(true);

		$def($def.S, 'Object', {
			entries: function entries(it) {
				return $entries(it);
			}
		});

		/***/
	},
	/* 228 */
	/***/ function (module, exports, __webpack_require__) {

		// https://github.com/DavidBruant/Map-Set.prototype.toJSON
		var $def = __webpack_require__(93);

		$def($def.P, 'Map', {toJSON: __webpack_require__(229)('Map')});

		/***/
	},
	/* 229 */
	/***/ function (module, exports, __webpack_require__) {

		// https://github.com/DavidBruant/Map-Set.prototype.toJSON
		var forOf = __webpack_require__(193)
			, classof = __webpack_require__(126);
		module.exports = function (NAME) {
			return function toJSON() {
				if (classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
				var arr = [];
				forOf(this, false, arr.push, arr);
				return arr;
			};
		};

		/***/
	},
	/* 230 */
	/***/ function (module, exports, __webpack_require__) {

		// https://github.com/DavidBruant/Map-Set.prototype.toJSON
		var $def = __webpack_require__(93);

		$def($def.P, 'Set', {toJSON: __webpack_require__(229)('Set')});

		/***/
	},
	/* 231 */
	/***/ function (module, exports, __webpack_require__) {

		// JavaScript 1.6 / Strawman array statics shim
		var $ = __webpack_require__(82)
			, $def = __webpack_require__(93)
			, $Array = __webpack_require__(94).Array || Array
			, statics = {};

		function setStatics(keys, length) {
			$.each.call(keys.split(','), function (key) {
				if (length == undefined && key in $Array)statics[key] = $Array[key];
				else if (key in [])statics[key] = __webpack_require__(106)(Function.call, [][key], length);
			});
		}

		setStatics('pop,reverse,shift,keys,values,entries', 1);
		setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
		setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' +
			'reduce,reduceRight,copyWithin,fill');
		$def($def.S, 'Array', statics);

		/***/
	},
	/* 232 */
	/***/ function (module, exports, __webpack_require__) {

		// ie9- setTimeout & setInterval additional parameters fix
		var global = __webpack_require__(79)
			, $def = __webpack_require__(93)
			, invoke = __webpack_require__(104)
			, partial = __webpack_require__(233)
			, navigator = global.navigator
			, MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
		function wrap(set) {
			return MSIE ? function (fn, time /*, ...args */) {
				return set(invoke(
					partial,
					[].slice.call(arguments, 2),
					typeof fn == 'function' ? fn : Function(fn)
				), time);
			} : set;
		}

		$def($def.G + $def.B + $def.F * MSIE, {
			setTimeout: wrap(global.setTimeout),
			setInterval: wrap(global.setInterval)
		});

		/***/
	},
	/* 233 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';
		var path = __webpack_require__(234)
			, invoke = __webpack_require__(104)
			, aFunction = __webpack_require__(107);
		module.exports = function (/* ...pargs */) {
			var fn = aFunction(this)
				, length = arguments.length
				, pargs = Array(length)
				, i = 0
				, _ = path._
				, holder = false;
			while (length > i)if ((pargs[i] = arguments[i++]) === _)holder = true;
			return function (/* ...args */) {
				var that = this
					, _length = arguments.length
					, j = 0, k = 0, args;
				if (!holder && !_length)return invoke(fn, pargs, that);
				args = pargs.slice();
				if (holder)for (; length > j; j++)if (args[j] === _)args[j] = arguments[k++];
				while (_length > k)args.push(arguments[k++]);
				return invoke(fn, args, that);
			};
		};

		/***/
	},
	/* 234 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(79);

		/***/
	},
	/* 235 */
	/***/ function (module, exports, __webpack_require__) {

		var $def = __webpack_require__(93)
			, $task = __webpack_require__(194);
		$def($def.G + $def.B, {
			setImmediate: $task.set,
			clearImmediate: $task.clear
		});

		/***/
	},
	/* 236 */
	/***/ function (module, exports, __webpack_require__) {

		__webpack_require__(75);
		var global = __webpack_require__(79)
			, hide = __webpack_require__(81)
			, Iterators = __webpack_require__(86)
			, ITERATOR = __webpack_require__(77)('iterator')
			, NL = global.NodeList
			, HTC = global.HTMLCollection
			, NLProto = NL && NL.prototype
			, HTCProto = HTC && HTC.prototype
			, ArrayValues = Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
		if (NL && !(ITERATOR in NLProto))hide(NLProto, ITERATOR, ArrayValues);
		if (HTC && !(ITERATOR in HTCProto))hide(HTCProto, ITERATOR, ArrayValues);

		/***/
	},
	/* 237 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (global, process) {
			/**
			 * Copyright (c) 2014, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
			 * additional grant of patent rights can be found in the PATENTS file in
			 * the same directory.
			 */

			!(function (global) {
				"use strict";

				var hasOwn = Object.prototype.hasOwnProperty;
				var undefined; // More compressible than void 0.
				var iteratorSymbol =
					typeof Symbol === "function" && Symbol.iterator || "@@iterator";

				var inModule = typeof module === "object";
				var runtime = global.regeneratorRuntime;
				if (runtime) {
					if (inModule) {
						// If regeneratorRuntime is defined globally and we're in a module,
						// make the exports object identical to regeneratorRuntime.
						module.exports = runtime;
					}
					// Don't bother evaluating the rest of this file if the runtime was
					// already defined globally.
					return;
				}

				// Define the runtime globally (as expected by generated code) as either
				// module.exports (if we're in a module) or a new, empty object.
				runtime = global.regeneratorRuntime = inModule ? module.exports : {};

				function wrap(innerFn, outerFn, self, tryLocsList) {
					// If outerFn provided, then outerFn.prototype instanceof Generator.
					var generator = Object.create((outerFn || Generator).prototype);

					generator._invoke = makeInvokeMethod(
						innerFn, self || null,
						new Context(tryLocsList || [])
					);

					return generator;
				}

				runtime.wrap = wrap;

				// Try/catch helper to minimize deoptimizations. Returns a completion
				// record like context.tryEntries[i].completion. This interface could
				// have been (and was previously) designed to take a closure to be
				// invoked without arguments, but in all the cases we care about we
				// already have an existing method we want to call, so there's no need
				// to create a new function object. We can even get away with assuming
				// the method takes exactly one argument, since that happens to be true
				// in every case, so we don't have to touch the arguments object. The
				// only additional allocation required is the completion record, which
				// has a stable shape and so hopefully should be cheap to allocate.
				function tryCatch(fn, obj, arg) {
					try {
						return {type: "normal", arg: fn.call(obj, arg)};
					} catch (err) {
						return {type: "throw", arg: err};
					}
				}

				var GenStateSuspendedStart = "suspendedStart";
				var GenStateSuspendedYield = "suspendedYield";
				var GenStateExecuting = "executing";
				var GenStateCompleted = "completed";

				// Returning this object from the innerFn has the same effect as
				// breaking out of the dispatch switch statement.
				var ContinueSentinel = {};

				// Dummy constructor functions that we use as the .constructor and
				// .constructor.prototype properties for functions that return Generator
				// objects. For full spec compliance, you may wish to configure your
				// minifier not to mangle the names of these two functions.
				function Generator() {
				}

				function GeneratorFunction() {
				}

				function GeneratorFunctionPrototype() {
				}

				var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
				GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
				GeneratorFunctionPrototype.constructor = GeneratorFunction;
				GeneratorFunction.displayName = "GeneratorFunction";

				// Helper for defining the .next, .throw, and .return methods of the
				// Iterator interface in terms of a single ._invoke method.
				function defineIteratorMethods(prototype) {
					["next", "throw", "return"].forEach(function (method) {
						prototype[method] = function (arg) {
							return this._invoke(method, arg);
						};
					});
				}

				runtime.isGeneratorFunction = function (genFun) {
					var ctor = typeof genFun === "function" && genFun.constructor;
					return ctor
						? ctor === GeneratorFunction ||
						// For the native GeneratorFunction constructor, the best we can
						// do is to check its .name property.
					(ctor.displayName || ctor.name) === "GeneratorFunction"
						: false;
				};

				runtime.mark = function (genFun) {
					genFun.__proto__ = GeneratorFunctionPrototype;
					genFun.prototype = Object.create(Gp);
					return genFun;
				};

				// Within the body of any async function, `await x` is transformed to
				// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
				// `value instanceof AwaitArgument` to determine if the yielded value is
				// meant to be awaited. Some may consider the name of this method too
				// cutesy, but they are curmudgeons.
				runtime.awrap = function (arg) {
					return new AwaitArgument(arg);
				};

				function AwaitArgument(arg) {
					this.arg = arg;
				}

				function AsyncIterator(generator) {
					// This invoke function is written in a style that assumes some
					// calling function (or Promise) will handle exceptions.
					function invoke(method, arg) {
						var result = generator[method](arg);
						var value = result.value;
						return value instanceof AwaitArgument
							? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
							: Promise.resolve(value).then(function (unwrapped) {
							// When a yielded Promise is resolved, its final value becomes
							// the .value of the Promise<{value,done}> result for the
							// current iteration. If the Promise is rejected, however, the
							// result for this iteration will be rejected with the same
							// reason. Note that rejections of yielded Promises are not
							// thrown back into the generator function, as is the case
							// when an awaited Promise is rejected. This difference in
							// behavior between yield and await is important, because it
							// allows the consumer to decide what to do with the yielded
							// rejection (swallow it and continue, manually .throw it back
							// into the generator, abandon iteration, whatever). With
							// await, by contrast, there is no opportunity to examine the
							// rejection reason outside the generator function, so the
							// only option is to throw it from the await expression, and
							// let the generator function handle the exception.
							result.value = unwrapped;
							return result;
						});
					}

					if (typeof process === "object" && process.domain) {
						invoke = process.domain.bind(invoke);
					}

					var invokeNext = invoke.bind(generator, "next");
					var invokeThrow = invoke.bind(generator, "throw");
					var invokeReturn = invoke.bind(generator, "return");
					var previousPromise;

					function enqueue(method, arg) {
						var enqueueResult =
							// If enqueue has been called before, then we want to wait until
							// all previous Promises have been resolved before calling invoke,
							// so that results are always delivered in the correct order. If
							// enqueue has not been called before, then it is important to
							// call invoke immediately, without waiting on a callback to fire,
							// so that the async generator function has the opportunity to do
							// any necessary setup in a predictable way. This predictability
							// is why the Promise constructor synchronously invokes its
							// executor callback, and why async functions synchronously
							// execute code before the first await. Since we implement simple
							// async functions in terms of async generators, it is especially
							// important to get this right, even though it requires care.
							previousPromise ? previousPromise.then(function () {
								return invoke(method, arg);
							}) : new Promise(function (resolve) {
								resolve(invoke(method, arg));
							});

						// Avoid propagating enqueueResult failures to Promises returned by
						// later invocations of the iterator.
						previousPromise = enqueueResult["catch"](function (ignored) {
						});

						return enqueueResult;
					}

					// Define the unified helper method that is used to implement .next,
					// .throw, and .return (see defineIteratorMethods).
					this._invoke = enqueue;
				}

				defineIteratorMethods(AsyncIterator.prototype);

				// Note that simple async functions are implemented on top of
				// AsyncIterator objects; they just return a Promise for the value of
				// the final result produced by the iterator.
				runtime.async = function (innerFn, outerFn, self, tryLocsList) {
					var iter = new AsyncIterator(
						wrap(innerFn, outerFn, self, tryLocsList)
					);

					return runtime.isGeneratorFunction(outerFn)
						? iter // If outerFn is a generator, return the full iterator.
						: iter.next().then(function (result) {
						return result.done ? result.value : iter.next();
					});
				};

				function makeInvokeMethod(innerFn, self, context) {
					var state = GenStateSuspendedStart;

					return function invoke(method, arg) {
						if (state === GenStateExecuting) {
							throw new Error("Generator is already running");
						}

						if (state === GenStateCompleted) {
							if (method === "throw") {
								throw arg;
							}

							// Be forgiving, per 25.3.3.3.3 of the spec:
							// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
							return doneResult();
						}

						while (true) {
							var delegate = context.delegate;
							if (delegate) {
								if (method === "return" ||
									(method === "throw" && delegate.iterator[method] === undefined)) {
									// A return or throw (when the delegate iterator has no throw
									// method) always terminates the yield* loop.
									context.delegate = null;

									// If the delegate iterator has a return method, give it a
									// chance to clean up.
									var returnMethod = delegate.iterator["return"];
									if (returnMethod) {
										var record = tryCatch(returnMethod, delegate.iterator, arg);
										if (record.type === "throw") {
											// If the return method threw an exception, let that
											// exception prevail over the original return or throw.
											method = "throw";
											arg = record.arg;
											continue;
										}
									}

									if (method === "return") {
										// Continue with the outer return, now that the delegate
										// iterator has been terminated.
										continue;
									}
								}

								var record = tryCatch(
									delegate.iterator[method],
									delegate.iterator,
									arg
								);

								if (record.type === "throw") {
									context.delegate = null;

									// Like returning generator.throw(uncaught), but without the
									// overhead of an extra function call.
									method = "throw";
									arg = record.arg;
									continue;
								}

								// Delegate generator ran and handled its own exceptions so
								// regardless of what the method was, we continue as if it is
								// "next" with an undefined arg.
								method = "next";
								arg = undefined;

								var info = record.arg;
								if (info.done) {
									context[delegate.resultName] = info.value;
									context.next = delegate.nextLoc;
								} else {
									state = GenStateSuspendedYield;
									return info;
								}

								context.delegate = null;
							}

							if (method === "next") {
								if (state === GenStateSuspendedYield) {
									context.sent = arg;
								} else {
									context.sent = undefined;
								}

							} else if (method === "throw") {
								if (state === GenStateSuspendedStart) {
									state = GenStateCompleted;
									throw arg;
								}

								if (context.dispatchException(arg)) {
									// If the dispatched exception was caught by a catch block,
									// then let that catch block handle the exception normally.
									method = "next";
									arg = undefined;
								}

							} else if (method === "return") {
								context.abrupt("return", arg);
							}

							state = GenStateExecuting;

							var record = tryCatch(innerFn, self, context);
							if (record.type === "normal") {
								// If an exception is thrown from innerFn, we leave state ===
								// GenStateExecuting and loop back for another invocation.
								state = context.done
									? GenStateCompleted
									: GenStateSuspendedYield;

								var info = {
									value: record.arg,
									done: context.done
								};

								if (record.arg === ContinueSentinel) {
									if (context.delegate && method === "next") {
										// Deliberately forget the last sent value so that we don't
										// accidentally pass it on to the delegate.
										arg = undefined;
									}
								} else {
									return info;
								}

							} else if (record.type === "throw") {
								state = GenStateCompleted;
								// Dispatch the exception by looping back around to the
								// context.dispatchException(arg) call above.
								method = "throw";
								arg = record.arg;
							}
						}
					};
				}

				// Define Generator.prototype.{next,throw,return} in terms of the
				// unified ._invoke helper method.
				defineIteratorMethods(Gp);

				Gp[iteratorSymbol] = function () {
					return this;
				};

				Gp.toString = function () {
					return "[object Generator]";
				};

				function pushTryEntry(locs) {
					var entry = {tryLoc: locs[0]};

					if (1 in locs) {
						entry.catchLoc = locs[1];
					}

					if (2 in locs) {
						entry.finallyLoc = locs[2];
						entry.afterLoc = locs[3];
					}

					this.tryEntries.push(entry);
				}

				function resetTryEntry(entry) {
					var record = entry.completion || {};
					record.type = "normal";
					delete record.arg;
					entry.completion = record;
				}

				function Context(tryLocsList) {
					// The root entry object (effectively a try statement without a catch
					// or a finally block) gives us a place to store values thrown from
					// locations where there is no enclosing try statement.
					this.tryEntries = [{tryLoc: "root"}];
					tryLocsList.forEach(pushTryEntry, this);
					this.reset(true);
				}

				runtime.keys = function (object) {
					var keys = [];
					for (var key in object) {
						keys.push(key);
					}
					keys.reverse();

					// Rather than returning an object with a next method, we keep
					// things simple and return the next function itself.
					return function next() {
						while (keys.length) {
							var key = keys.pop();
							if (key in object) {
								next.value = key;
								next.done = false;
								return next;
							}
						}

						// To avoid creating an additional object, we just hang the .value
						// and .done properties off the next function object itself. This
						// also ensures that the minifier will not anonymize the function.
						next.done = true;
						return next;
					};
				};

				function values(iterable) {
					if (iterable) {
						var iteratorMethod = iterable[iteratorSymbol];
						if (iteratorMethod) {
							return iteratorMethod.call(iterable);
						}

						if (typeof iterable.next === "function") {
							return iterable;
						}

						if (!isNaN(iterable.length)) {
							var i = -1, next = function next() {
								while (++i < iterable.length) {
									if (hasOwn.call(iterable, i)) {
										next.value = iterable[i];
										next.done = false;
										return next;
									}
								}

								next.value = undefined;
								next.done = true;

								return next;
							};

							return next.next = next;
						}
					}

					// Return an iterator with no values.
					return {next: doneResult};
				}

				runtime.values = values;

				function doneResult() {
					return {value: undefined, done: true};
				}

				Context.prototype = {
					constructor: Context,

					reset: function (skipTempReset) {
						this.prev = 0;
						this.next = 0;
						this.sent = undefined;
						this.done = false;
						this.delegate = null;

						this.tryEntries.forEach(resetTryEntry);

						if (!skipTempReset) {
							for (var name in this) {
								// Not sure about the optimal order of these conditions:
								if (name.charAt(0) === "t" &&
									hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
									this[name] = undefined;
								}
							}
						}
					},

					stop: function () {
						this.done = true;

						var rootEntry = this.tryEntries[0];
						var rootRecord = rootEntry.completion;
						if (rootRecord.type === "throw") {
							throw rootRecord.arg;
						}

						return this.rval;
					},

					dispatchException: function (exception) {
						if (this.done) {
							throw exception;
						}

						var context = this;

						function handle(loc, caught) {
							record.type = "throw";
							record.arg = exception;
							context.next = loc;
							return !!caught;
						}

						for (var i = this.tryEntries.length - 1; i >= 0; --i) {
							var entry = this.tryEntries[i];
							var record = entry.completion;

							if (entry.tryLoc === "root") {
								// Exception thrown outside of any try block that could handle
								// it, so set the completion value of the entire function to
								// throw the exception.
								return handle("end");
							}

							if (entry.tryLoc <= this.prev) {
								var hasCatch = hasOwn.call(entry, "catchLoc");
								var hasFinally = hasOwn.call(entry, "finallyLoc");

								if (hasCatch && hasFinally) {
									if (this.prev < entry.catchLoc) {
										return handle(entry.catchLoc, true);
									} else if (this.prev < entry.finallyLoc) {
										return handle(entry.finallyLoc);
									}

								} else if (hasCatch) {
									if (this.prev < entry.catchLoc) {
										return handle(entry.catchLoc, true);
									}

								} else if (hasFinally) {
									if (this.prev < entry.finallyLoc) {
										return handle(entry.finallyLoc);
									}

								} else {
									throw new Error("try statement without catch or finally");
								}
							}
						}
					},

					abrupt: function (type, arg) {
						for (var i = this.tryEntries.length - 1; i >= 0; --i) {
							var entry = this.tryEntries[i];
							if (entry.tryLoc <= this.prev &&
								hasOwn.call(entry, "finallyLoc") &&
								this.prev < entry.finallyLoc) {
								var finallyEntry = entry;
								break;
							}
						}

						if (finallyEntry &&
							(type === "break" ||
							type === "continue") &&
							finallyEntry.tryLoc <= arg &&
							arg <= finallyEntry.finallyLoc) {
							// Ignore the finally entry if control is not jumping to a
							// location outside the try/catch block.
							finallyEntry = null;
						}

						var record = finallyEntry ? finallyEntry.completion : {};
						record.type = type;
						record.arg = arg;

						if (finallyEntry) {
							this.next = finallyEntry.finallyLoc;
						} else {
							this.complete(record);
						}

						return ContinueSentinel;
					},

					complete: function (record, afterLoc) {
						if (record.type === "throw") {
							throw record.arg;
						}

						if (record.type === "break" ||
							record.type === "continue") {
							this.next = record.arg;
						} else if (record.type === "return") {
							this.rval = record.arg;
							this.next = "end";
						} else if (record.type === "normal" && afterLoc) {
							this.next = afterLoc;
						}
					},

					finish: function (finallyLoc) {
						for (var i = this.tryEntries.length - 1; i >= 0; --i) {
							var entry = this.tryEntries[i];
							if (entry.finallyLoc === finallyLoc) {
								this.complete(entry.completion, entry.afterLoc);
								resetTryEntry(entry);
								return ContinueSentinel;
							}
						}
					},

					"catch": function (tryLoc) {
						for (var i = this.tryEntries.length - 1; i >= 0; --i) {
							var entry = this.tryEntries[i];
							if (entry.tryLoc === tryLoc) {
								var record = entry.completion;
								if (record.type === "throw") {
									var thrown = record.arg;
									resetTryEntry(entry);
								}
								return thrown;
							}
						}

						// The context.catch method must only be called with a location
						// argument that corresponds to a known catch block.
						throw new Error("illegal catch attempt");
					},

					delegateYield: function (iterable, resultName, nextLoc) {
						this.delegate = {
							iterator: values(iterable),
							resultName: resultName,
							nextLoc: nextLoc
						};

						return ContinueSentinel;
					}
				};
			})(
				// Among the various tricks for obtaining a reference to the global
				// object, this seems to be the most reliable technique that does not
				// use indirect eval (which violates Content Security Policy).
				typeof global === "object" ? global :
					typeof window === "object" ? window :
						typeof self === "object" ? self : this
			);

			/* WEBPACK VAR INJECTION */
		}.call(exports, (function () {
				return this;
			}()), __webpack_require__(238)))

		/***/
	},
	/* 238 */
	/***/ function (module, exports) {

		// shim for using process in browser

		var process = module.exports = {};
		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;

		function cleanUpNextTick() {
			draining = false;
			if (currentQueue.length) {
				queue = currentQueue.concat(queue);
			} else {
				queueIndex = -1;
			}
			if (queue.length) {
				drainQueue();
			}
		}

		function drainQueue() {
			if (draining) {
				return;
			}
			var timeout = setTimeout(cleanUpNextTick);
			draining = true;

			var len = queue.length;
			while (len) {
				currentQueue = queue;
				queue = [];
				while (++queueIndex < len) {
					currentQueue[queueIndex].run();
				}
				queueIndex = -1;
				len = queue.length;
			}
			currentQueue = null;
			draining = false;
			clearTimeout(timeout);
		}

		process.nextTick = function (fun) {
			var args = new Array(arguments.length - 1);
			if (arguments.length > 1) {
				for (var i = 1; i < arguments.length; i++) {
					args[i - 1] = arguments[i];
				}
			}
			queue.push(new Item(fun, args));
			if (queue.length === 1 && !draining) {
				setTimeout(drainQueue, 0);
			}
		};

		// v8 likes predictible objects
		function Item(fun, array) {
			this.fun = fun;
			this.array = array;
		}

		Item.prototype.run = function () {
			this.fun.apply(null, this.array);
		};
		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = ''; // empty string to avoid regexp issues
		process.versions = {};

		function noop() {
		}

		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;

		process.binding = function (name) {
			throw new Error('process.binding is not supported');
		};

		// TODO(shtylman)
		process.cwd = function () {
			return '/'
		};
		process.chdir = function (dir) {
			throw new Error('process.chdir is not supported');
		};
		process.umask = function () {
			return 0;
		};


		/***/
	},
	/* 239 */
	/***/ function (module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
		/*!
		 * jQuery JavaScript Library v2.1.4
		 * http://jquery.com/
		 *
		 * Includes Sizzle.js
		 * http://sizzlejs.com/
		 *
		 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
		 * Released under the MIT license
		 * http://jquery.org/license
		 *
		 * Date: 2015-04-28T16:01Z
		 */

		(function (global, factory) {

			if (typeof module === "object" && typeof module.exports === "object") {
				// For CommonJS and CommonJS-like environments where a proper `window`
				// is present, execute the factory and get jQuery.
				// For environments that do not have a `window` with a `document`
				// (such as Node.js), expose a factory as module.exports.
				// This accentuates the need for the creation of a real `window`.
				// e.g. var jQuery = require("jquery")(window);
				// See ticket #14549 for more info.
				module.exports = global.document ?
					factory(global, true) :
					function (w) {
						if (!w.document) {
							throw new Error("jQuery requires a window with a document");
						}
						return factory(w);
					};
			} else {
				factory(global);
			}

			// Pass this if window is not defined yet
		}(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

			// Support: Firefox 18+
			// Can't be in strict mode, several libs including ASP.NET trace
			// the stack via arguments.caller.callee and Firefox dies if
			// you try to trace through "use strict" call chains. (#13335)
			//

			var arr = [];

			var slice = arr.slice;

			var concat = arr.concat;

			var push = arr.push;

			var indexOf = arr.indexOf;

			var class2type = {};

			var toString = class2type.toString;

			var hasOwn = class2type.hasOwnProperty;

			var support = {};


			var
			// Use the correct document accordingly with window argument (sandbox)
				document = window.document,

				version = "2.1.4",

			// Define a local copy of jQuery
				jQuery = function (selector, context) {
					// The jQuery object is actually just the init constructor 'enhanced'
					// Need init if jQuery is called (just allow error to be thrown if not included)
					return new jQuery.fn.init(selector, context);
				},

			// Support: Android<4.1
			// Make sure we trim BOM and NBSP
				rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

			// Matches dashed string for camelizing
				rmsPrefix = /^-ms-/,
				rdashAlpha = /-([\da-z])/gi,

			// Used by jQuery.camelCase as callback to replace()
				fcamelCase = function (all, letter) {
					return letter.toUpperCase();
				};

			jQuery.fn = jQuery.prototype = {
				// The current version of jQuery being used
				jquery: version,

				constructor: jQuery,

				// Start with an empty selector
				selector: "",

				// The default length of a jQuery object is 0
				length: 0,

				toArray: function () {
					return slice.call(this);
				},

				// Get the Nth element in the matched element set OR
				// Get the whole matched element set as a clean array
				get: function (num) {
					return num != null ?

						// Return just the one element from the set
						( num < 0 ? this[num + this.length] : this[num] ) :

						// Return all the elements in a clean array
						slice.call(this);
				},

				// Take an array of elements and push it onto the stack
				// (returning the new matched element set)
				pushStack: function (elems) {

					// Build a new jQuery matched element set
					var ret = jQuery.merge(this.constructor(), elems);

					// Add the old object onto the stack (as a reference)
					ret.prevObject = this;
					ret.context = this.context;

					// Return the newly-formed element set
					return ret;
				},

				// Execute a callback for every element in the matched set.
				// (You can seed the arguments with an array of args, but this is
				// only used internally.)
				each: function (callback, args) {
					return jQuery.each(this, callback, args);
				},

				map: function (callback) {
					return this.pushStack(jQuery.map(this, function (elem, i) {
						return callback.call(elem, i, elem);
					}));
				},

				slice: function () {
					return this.pushStack(slice.apply(this, arguments));
				},

				first: function () {
					return this.eq(0);
				},

				last: function () {
					return this.eq(-1);
				},

				eq: function (i) {
					var len = this.length,
						j = +i + ( i < 0 ? len : 0 );
					return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
				},

				end: function () {
					return this.prevObject || this.constructor(null);
				},

				// For internal use only.
				// Behaves like an Array's method, not like a jQuery method.
				push: push,
				sort: arr.sort,
				splice: arr.splice
			};

			jQuery.extend = jQuery.fn.extend = function () {
				var options, name, src, copy, copyIsArray, clone,
					target = arguments[0] || {},
					i = 1,
					length = arguments.length,
					deep = false;

				// Handle a deep copy situation
				if (typeof target === "boolean") {
					deep = target;

					// Skip the boolean and the target
					target = arguments[i] || {};
					i++;
				}

				// Handle case when target is a string or something (possible in deep copy)
				if (typeof target !== "object" && !jQuery.isFunction(target)) {
					target = {};
				}

				// Extend jQuery itself if only one argument is passed
				if (i === length) {
					target = this;
					i--;
				}

				for (; i < length; i++) {
					// Only deal with non-null/undefined values
					if ((options = arguments[i]) != null) {
						// Extend the base object
						for (name in options) {
							src = target[name];
							copy = options[name];

							// Prevent never-ending loop
							if (target === copy) {
								continue;
							}

							// Recurse if we're merging plain objects or arrays
							if (deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) )) {
								if (copyIsArray) {
									copyIsArray = false;
									clone = src && jQuery.isArray(src) ? src : [];

								} else {
									clone = src && jQuery.isPlainObject(src) ? src : {};
								}

								// Never move original objects, clone them
								target[name] = jQuery.extend(deep, clone, copy);

								// Don't bring in undefined values
							} else if (copy !== undefined) {
								target[name] = copy;
							}
						}
					}
				}

				// Return the modified object
				return target;
			};

			jQuery.extend({
				// Unique for each copy of jQuery on the page
				expando: "jQuery" + ( version + Math.random() ).replace(/\D/g, ""),

				// Assume jQuery is ready without the ready module
				isReady: true,

				error: function (msg) {
					throw new Error(msg);
				},

				noop: function () {
				},

				isFunction: function (obj) {
					return jQuery.type(obj) === "function";
				},

				isArray: Array.isArray,

				isWindow: function (obj) {
					return obj != null && obj === obj.window;
				},

				isNumeric: function (obj) {
					// parseFloat NaNs numeric-cast false positives (null|true|false|"")
					// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
					// subtraction forces infinities to NaN
					// adding 1 corrects loss of precision from parseFloat (#15100)
					return !jQuery.isArray(obj) && (obj - parseFloat(obj) + 1) >= 0;
				},

				isPlainObject: function (obj) {
					// Not plain objects:
					// - Any object or value whose internal [[Class]] property is not "[object Object]"
					// - DOM nodes
					// - window
					if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
						return false;
					}

					if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
						return false;
					}

					// If the function hasn't returned already, we're confident that
					// |obj| is a plain object, created by {} or constructed with new Object
					return true;
				},

				isEmptyObject: function (obj) {
					var name;
					for (name in obj) {
						return false;
					}
					return true;
				},

				type: function (obj) {
					if (obj == null) {
						return obj + "";
					}
					// Support: Android<4.0, iOS<6 (functionish RegExp)
					return typeof obj === "object" || typeof obj === "function" ?
					class2type[toString.call(obj)] || "object" :
						typeof obj;
				},

				// Evaluates a script in a global context
				globalEval: function (code) {
					var script,
						indirect = eval;

					code = jQuery.trim(code);

					if (code) {
						// If the code includes a valid, prologue position
						// strict mode pragma, execute code by injecting a
						// script tag into the document.
						if (code.indexOf("use strict") === 1) {
							script = document.createElement("script");
							script.text = code;
							document.head.appendChild(script).parentNode.removeChild(script);
						} else {
							// Otherwise, avoid the DOM node creation, insertion
							// and removal by using an indirect global eval
							indirect(code);
						}
					}
				},

				// Convert dashed to camelCase; used by the css and data modules
				// Support: IE9-11+
				// Microsoft forgot to hump their vendor prefix (#9572)
				camelCase: function (string) {
					return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
				},

				nodeName: function (elem, name) {
					return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
				},

				// args is for internal usage only
				each: function (obj, callback, args) {
					var value,
						i = 0,
						length = obj.length,
						isArray = isArraylike(obj);

					if (args) {
						if (isArray) {
							for (; i < length; i++) {
								value = callback.apply(obj[i], args);

								if (value === false) {
									break;
								}
							}
						} else {
							for (i in obj) {
								value = callback.apply(obj[i], args);

								if (value === false) {
									break;
								}
							}
						}

						// A special, fast, case for the most common use of each
					} else {
						if (isArray) {
							for (; i < length; i++) {
								value = callback.call(obj[i], i, obj[i]);

								if (value === false) {
									break;
								}
							}
						} else {
							for (i in obj) {
								value = callback.call(obj[i], i, obj[i]);

								if (value === false) {
									break;
								}
							}
						}
					}

					return obj;
				},

				// Support: Android<4.1
				trim: function (text) {
					return text == null ?
						"" :
						( text + "" ).replace(rtrim, "");
				},

				// results is for internal usage only
				makeArray: function (arr, results) {
					var ret = results || [];

					if (arr != null) {
						if (isArraylike(Object(arr))) {
							jQuery.merge(ret,
								typeof arr === "string" ?
									[arr] : arr
							);
						} else {
							push.call(ret, arr);
						}
					}

					return ret;
				},

				inArray: function (elem, arr, i) {
					return arr == null ? -1 : indexOf.call(arr, elem, i);
				},

				merge: function (first, second) {
					var len = +second.length,
						j = 0,
						i = first.length;

					for (; j < len; j++) {
						first[i++] = second[j];
					}

					first.length = i;

					return first;
				},

				grep: function (elems, callback, invert) {
					var callbackInverse,
						matches = [],
						i = 0,
						length = elems.length,
						callbackExpect = !invert;

					// Go through the array, only saving the items
					// that pass the validator function
					for (; i < length; i++) {
						callbackInverse = !callback(elems[i], i);
						if (callbackInverse !== callbackExpect) {
							matches.push(elems[i]);
						}
					}

					return matches;
				},

				// arg is for internal usage only
				map: function (elems, callback, arg) {
					var value,
						i = 0,
						length = elems.length,
						isArray = isArraylike(elems),
						ret = [];

					// Go through the array, translating each of the items to their new values
					if (isArray) {
						for (; i < length; i++) {
							value = callback(elems[i], i, arg);

							if (value != null) {
								ret.push(value);
							}
						}

						// Go through every key on the object,
					} else {
						for (i in elems) {
							value = callback(elems[i], i, arg);

							if (value != null) {
								ret.push(value);
							}
						}
					}

					// Flatten any nested arrays
					return concat.apply([], ret);
				},

				// A global GUID counter for objects
				guid: 1,

				// Bind a function to a context, optionally partially applying any
				// arguments.
				proxy: function (fn, context) {
					var tmp, args, proxy;

					if (typeof context === "string") {
						tmp = fn[context];
						context = fn;
						fn = tmp;
					}

					// Quick check to determine if target is callable, in the spec
					// this throws a TypeError, but we will just return undefined.
					if (!jQuery.isFunction(fn)) {
						return undefined;
					}

					// Simulated bind
					args = slice.call(arguments, 2);
					proxy = function () {
						return fn.apply(context || this, args.concat(slice.call(arguments)));
					};

					// Set the guid of unique handler to the same of original handler, so it can be removed
					proxy.guid = fn.guid = fn.guid || jQuery.guid++;

					return proxy;
				},

				now: Date.now,

				// jQuery.support is not used in Core but other projects attach their
				// properties to it so it needs to exist.
				support: support
			});

			// Populate the class2type map
			jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
				class2type["[object " + name + "]"] = name.toLowerCase();
			});

			function isArraylike(obj) {

				// Support: iOS 8.2 (not reproducible in simulator)
				// `in` check used to prevent JIT error (gh-2145)
				// hasOwn isn't used here due to false negatives
				// regarding Nodelist length in IE
				var length = "length" in obj && obj.length,
					type = jQuery.type(obj);

				if (type === "function" || jQuery.isWindow(obj)) {
					return false;
				}

				if (obj.nodeType === 1 && length) {
					return true;
				}

				return type === "array" || length === 0 ||
					typeof length === "number" && length > 0 && ( length - 1 ) in obj;
			}

			var Sizzle =
				/*!
				 * Sizzle CSS Selector Engine v2.2.0-pre
				 * http://sizzlejs.com/
				 *
				 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
				 * Released under the MIT license
				 * http://jquery.org/license
				 *
				 * Date: 2014-12-16
				 */
				(function (window) {

					var i,
						support,
						Expr,
						getText,
						isXML,
						tokenize,
						compile,
						select,
						outermostContext,
						sortInput,
						hasDuplicate,

					// Local document vars
						setDocument,
						document,
						docElem,
						documentIsHTML,
						rbuggyQSA,
						rbuggyMatches,
						matches,
						contains,

					// Instance-specific data
						expando = "sizzle" + 1 * new Date(),
						preferredDoc = window.document,
						dirruns = 0,
						done = 0,
						classCache = createCache(),
						tokenCache = createCache(),
						compilerCache = createCache(),
						sortOrder = function (a, b) {
							if (a === b) {
								hasDuplicate = true;
							}
							return 0;
						},

					// General-purpose constants
						MAX_NEGATIVE = 1 << 31,

					// Instance methods
						hasOwn = ({}).hasOwnProperty,
						arr = [],
						pop = arr.pop,
						push_native = arr.push,
						push = arr.push,
						slice = arr.slice,
					// Use a stripped-down indexOf as it's faster than native
					// http://jsperf.com/thor-indexof-vs-for/5
						indexOf = function (list, elem) {
							var i = 0,
								len = list.length;
							for (; i < len; i++) {
								if (list[i] === elem) {
									return i;
								}
							}
							return -1;
						},

						booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

					// Regular expressions

					// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
						whitespace = "[\\x20\\t\\r\\n\\f]",
					// http://www.w3.org/TR/css3-syntax/#characters
						characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

					// Loosely modeled on CSS identifier characters
					// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
					// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
						identifier = characterEncoding.replace("w", "w#"),

					// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
						attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
								// Operator (capture 2)
							"*([*^$|!~]?=)" + whitespace +
								// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
							"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
							"*\\]",

						pseudos = ":(" + characterEncoding + ")(?:\\((" +
								// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
								// 1. quoted (capture 3; capture 4 or capture 5)
							"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
								// 2. simple (capture 6)
							"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
								// 3. anything else (capture 2)
							".*" +
							")\\)|)",

					// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
						rwhitespace = new RegExp(whitespace + "+", "g"),
						rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

						rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
						rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),

						rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),

						rpseudo = new RegExp(pseudos),
						ridentifier = new RegExp("^" + identifier + "$"),

						matchExpr = {
							"ID": new RegExp("^#(" + characterEncoding + ")"),
							"CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
							"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
							"ATTR": new RegExp("^" + attributes),
							"PSEUDO": new RegExp("^" + pseudos),
							"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
								"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
								"*(\\d+)|))" + whitespace + "*\\)|)", "i"),
							"bool": new RegExp("^(?:" + booleans + ")$", "i"),
							// For use in libraries implementing .is()
							// We use this for POS matching in `select`
							"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
								whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
						},

						rinputs = /^(?:input|select|textarea|button)$/i,
						rheader = /^h\d$/i,

						rnative = /^[^{]+\{\s*\[native \w/,

					// Easily-parseable/retrievable ID or TAG or CLASS selectors
						rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

						rsibling = /[+~]/,
						rescape = /'|\\/g,

					// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
						runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
						funescape = function (_, escaped, escapedWhitespace) {
							var high = "0x" + escaped - 0x10000;
							// NaN means non-codepoint
							// Support: Firefox<24
							// Workaround erroneous numeric interpretation of +"0x"
							return high !== high || escapedWhitespace ?
								escaped :
								high < 0 ?
									// BMP codepoint
									String.fromCharCode(high + 0x10000) :
									// Supplemental Plane codepoint (surrogate pair)
									String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
						},

					// Used for iframes
					// See setDocument()
					// Removing the function wrapper causes a "Permission Denied"
					// error in IE
						unloadHandler = function () {
							setDocument();
						};

					// Optimize for push.apply( _, NodeList )
					try {
						push.apply(
							(arr = slice.call(preferredDoc.childNodes)),
							preferredDoc.childNodes
						);
						// Support: Android<4.0
						// Detect silently failing push.apply
						arr[preferredDoc.childNodes.length].nodeType;
					} catch (e) {
						push = {
							apply: arr.length ?

								// Leverage slice if possible
								function (target, els) {
									push_native.apply(target, slice.call(els));
								} :

								// Support: IE<9
								// Otherwise append directly
								function (target, els) {
									var j = target.length,
										i = 0;
									// Can't trust NodeList.length
									while ((target[j++] = els[i++])) {
									}
									target.length = j - 1;
								}
						};
					}

					function Sizzle(selector, context, results, seed) {
						var match, elem, m, nodeType,
						// QSA vars
							i, groups, old, nid, newContext, newSelector;

						if (( context ? context.ownerDocument || context : preferredDoc ) !== document) {
							setDocument(context);
						}

						context = context || document;
						results = results || [];
						nodeType = context.nodeType;

						if (typeof selector !== "string" || !selector ||
							nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

							return results;
						}

						if (!seed && documentIsHTML) {

							// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
							if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
								// Speed-up: Sizzle("#ID")
								if ((m = match[1])) {
									if (nodeType === 9) {
										elem = context.getElementById(m);
										// Check parentNode to catch when Blackberry 4.6 returns
										// nodes that are no longer in the document (jQuery #6963)
										if (elem && elem.parentNode) {
											// Handle the case where IE, Opera, and Webkit return items
											// by name instead of ID
											if (elem.id === m) {
												results.push(elem);
												return results;
											}
										} else {
											return results;
										}
									} else {
										// Context is not a document
										if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) &&
											contains(context, elem) && elem.id === m) {
											results.push(elem);
											return results;
										}
									}

									// Speed-up: Sizzle("TAG")
								} else if (match[2]) {
									push.apply(results, context.getElementsByTagName(selector));
									return results;

									// Speed-up: Sizzle(".CLASS")
								} else if ((m = match[3]) && support.getElementsByClassName) {
									push.apply(results, context.getElementsByClassName(m));
									return results;
								}
							}

							// QSA path
							if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
								nid = old = expando;
								newContext = context;
								newSelector = nodeType !== 1 && selector;

								// qSA works strangely on Element-rooted queries
								// We can work around this by specifying an extra ID on the root
								// and working up from there (Thanks to Andrew Dupont for the technique)
								// IE 8 doesn't work on object elements
								if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
									groups = tokenize(selector);

									if ((old = context.getAttribute("id"))) {
										nid = old.replace(rescape, "\\$&");
									} else {
										context.setAttribute("id", nid);
									}
									nid = "[id='" + nid + "'] ";

									i = groups.length;
									while (i--) {
										groups[i] = nid + toSelector(groups[i]);
									}
									newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
									newSelector = groups.join(",");
								}

								if (newSelector) {
									try {
										push.apply(results,
											newContext.querySelectorAll(newSelector)
										);
										return results;
									} catch (qsaError) {
									} finally {
										if (!old) {
											context.removeAttribute("id");
										}
									}
								}
							}
						}

						// All others
						return select(selector.replace(rtrim, "$1"), context, results, seed);
					}

					/**
					 * Create key-value caches of limited size
					 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
					 *    property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
					 *    deleting the oldest entry
					 */
					function createCache() {
						var keys = [];

						function cache(key, value) {
							// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
							if (keys.push(key + " ") > Expr.cacheLength) {
								// Only keep the most recent entries
								delete cache[keys.shift()];
							}
							return (cache[key + " "] = value);
						}

						return cache;
					}

					/**
					 * Mark a function for special use by Sizzle
					 * @param {Function} fn The function to mark
					 */
					function markFunction(fn) {
						fn[expando] = true;
						return fn;
					}

					/**
					 * Support testing using an element
					 * @param {Function} fn Passed the created div and expects a boolean result
					 */
					function assert(fn) {
						var div = document.createElement("div");

						try {
							return !!fn(div);
						} catch (e) {
							return false;
						} finally {
							// Remove from its parent by default
							if (div.parentNode) {
								div.parentNode.removeChild(div);
							}
							// release memory in IE
							div = null;
						}
					}

					/**
					 * Adds the same handler for all of the specified attrs
					 * @param {String} attrs Pipe-separated list of attributes
					 * @param {Function} handler The method that will be applied
					 */
					function addHandle(attrs, handler) {
						var arr = attrs.split("|"),
							i = attrs.length;

						while (i--) {
							Expr.attrHandle[arr[i]] = handler;
						}
					}

					/**
					 * Checks document order of two siblings
					 * @param {Element} a
					 * @param {Element} b
					 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
					 */
					function siblingCheck(a, b) {
						var cur = b && a,
							diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
								( ~b.sourceIndex || MAX_NEGATIVE ) -
								( ~a.sourceIndex || MAX_NEGATIVE );

						// Use IE sourceIndex if available on both nodes
						if (diff) {
							return diff;
						}

						// Check if b follows a
						if (cur) {
							while ((cur = cur.nextSibling)) {
								if (cur === b) {
									return -1;
								}
							}
						}

						return a ? 1 : -1;
					}

					/**
					 * Returns a function to use in pseudos for input types
					 * @param {String} type
					 */
					function createInputPseudo(type) {
						return function (elem) {
							var name = elem.nodeName.toLowerCase();
							return name === "input" && elem.type === type;
						};
					}

					/**
					 * Returns a function to use in pseudos for buttons
					 * @param {String} type
					 */
					function createButtonPseudo(type) {
						return function (elem) {
							var name = elem.nodeName.toLowerCase();
							return (name === "input" || name === "button") && elem.type === type;
						};
					}

					/**
					 * Returns a function to use in pseudos for positionals
					 * @param {Function} fn
					 */
					function createPositionalPseudo(fn) {
						return markFunction(function (argument) {
							argument = +argument;
							return markFunction(function (seed, matches) {
								var j,
									matchIndexes = fn([], seed.length, argument),
									i = matchIndexes.length;

								// Match elements found at the specified indexes
								while (i--) {
									if (seed[(j = matchIndexes[i])]) {
										seed[j] = !(matches[j] = seed[j]);
									}
								}
							});
						});
					}

					/**
					 * Checks a node for validity as a Sizzle context
					 * @param {Element|Object=} context
					 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
					 */
					function testContext(context) {
						return context && typeof context.getElementsByTagName !== "undefined" && context;
					}

					// Expose support vars for convenience
					support = Sizzle.support = {};

					/**
					 * Detects XML nodes
					 * @param {Element|Object} elem An element or a document
					 * @returns {Boolean} True iff elem is a non-HTML XML node
					 */
					isXML = Sizzle.isXML = function (elem) {
						// documentElement is verified for cases where it doesn't yet exist
						// (such as loading iframes in IE - #4833)
						var documentElement = elem && (elem.ownerDocument || elem).documentElement;
						return documentElement ? documentElement.nodeName !== "HTML" : false;
					};

					/**
					 * Sets document-related variables once based on the current document
					 * @param {Element|Object} [doc] An element or document object to use to set the document
					 * @returns {Object} Returns the current document
					 */
					setDocument = Sizzle.setDocument = function (node) {
						var hasCompare, parent,
							doc = node ? node.ownerDocument || node : preferredDoc;

						// If no document and documentElement is available, return
						if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
							return document;
						}

						// Set our document
						document = doc;
						docElem = doc.documentElement;
						parent = doc.defaultView;

						// Support: IE>8
						// If iframe document is assigned to "document" variable and if iframe has been reloaded,
						// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
						// IE6-8 do not support the defaultView property so parent will be undefined
						if (parent && parent !== parent.top) {
							// IE11 does not have attachEvent, so all must suffer
							if (parent.addEventListener) {
								parent.addEventListener("unload", unloadHandler, false);
							} else if (parent.attachEvent) {
								parent.attachEvent("onunload", unloadHandler);
							}
						}

						/* Support tests
						 ---------------------------------------------------------------------- */
						documentIsHTML = !isXML(doc);

						/* Attributes
						 ---------------------------------------------------------------------- */

						// Support: IE<8
						// Verify that getAttribute really returns attributes and not properties
						// (excepting IE8 booleans)
						support.attributes = assert(function (div) {
							div.className = "i";
							return !div.getAttribute("className");
						});

						/* getElement(s)By*
						 ---------------------------------------------------------------------- */

						// Check if getElementsByTagName("*") returns only elements
						support.getElementsByTagName = assert(function (div) {
							div.appendChild(doc.createComment(""));
							return !div.getElementsByTagName("*").length;
						});

						// Support: IE<9
						support.getElementsByClassName = rnative.test(doc.getElementsByClassName);

						// Support: IE<10
						// Check if getElementById returns elements by name
						// The broken getElementById methods don't pick up programatically-set names,
						// so use a roundabout getElementsByName test
						support.getById = assert(function (div) {
							docElem.appendChild(div).id = expando;
							return !doc.getElementsByName || !doc.getElementsByName(expando).length;
						});

						// ID find and filter
						if (support.getById) {
							Expr.find["ID"] = function (id, context) {
								if (typeof context.getElementById !== "undefined" && documentIsHTML) {
									var m = context.getElementById(id);
									// Check parentNode to catch when Blackberry 4.6 returns
									// nodes that are no longer in the document #6963
									return m && m.parentNode ? [m] : [];
								}
							};
							Expr.filter["ID"] = function (id) {
								var attrId = id.replace(runescape, funescape);
								return function (elem) {
									return elem.getAttribute("id") === attrId;
								};
							};
						} else {
							// Support: IE6/7
							// getElementById is not reliable as a find shortcut
							delete Expr.find["ID"];

							Expr.filter["ID"] = function (id) {
								var attrId = id.replace(runescape, funescape);
								return function (elem) {
									var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
									return node && node.value === attrId;
								};
							};
						}

						// Tag
						Expr.find["TAG"] = support.getElementsByTagName ?
							function (tag, context) {
								if (typeof context.getElementsByTagName !== "undefined") {
									return context.getElementsByTagName(tag);

									// DocumentFragment nodes don't have gEBTN
								} else if (support.qsa) {
									return context.querySelectorAll(tag);
								}
							} :

							function (tag, context) {
								var elem,
									tmp = [],
									i = 0,
								// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
									results = context.getElementsByTagName(tag);

								// Filter out possible comments
								if (tag === "*") {
									while ((elem = results[i++])) {
										if (elem.nodeType === 1) {
											tmp.push(elem);
										}
									}

									return tmp;
								}
								return results;
							};

						// Class
						Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
								if (documentIsHTML) {
									return context.getElementsByClassName(className);
								}
							};

						/* QSA/matchesSelector
						 ---------------------------------------------------------------------- */

						// QSA and matchesSelector support

						// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
						rbuggyMatches = [];

						// qSa(:focus) reports false when true (Chrome 21)
						// We allow this because of a bug in IE8/9 that throws an error
						// whenever `document.activeElement` is accessed on an iframe
						// So, we allow :focus to pass through QSA all the time to avoid the IE error
						// See http://bugs.jquery.com/ticket/13378
						rbuggyQSA = [];

						if ((support.qsa = rnative.test(doc.querySelectorAll))) {
							// Build QSA regex
							// Regex strategy adopted from Diego Perini
							assert(function (div) {
								// Select is set to empty string on purpose
								// This is to test IE's treatment of not explicitly
								// setting a boolean content attribute,
								// since its presence should be enough
								// http://bugs.jquery.com/ticket/12359
								docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" +
									"<select id='" + expando + "-\f]' msallowcapture=''>" +
									"<option selected=''></option></select>";

								// Support: IE8, Opera 11-12.16
								// Nothing should be selected when empty strings follow ^= or $= or *=
								// The test attribute must be unknown in Opera but "safe" for WinRT
								// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
								if (div.querySelectorAll("[msallowcapture^='']").length) {
									rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
								}

								// Support: IE8
								// Boolean attributes and "value" are not treated correctly
								if (!div.querySelectorAll("[selected]").length) {
									rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
								}

								// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
								if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
									rbuggyQSA.push("~=");
								}

								// Webkit/Opera - :checked should return selected option elements
								// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
								// IE8 throws error here and will not see later tests
								if (!div.querySelectorAll(":checked").length) {
									rbuggyQSA.push(":checked");
								}

								// Support: Safari 8+, iOS 8+
								// https://bugs.webkit.org/show_bug.cgi?id=136851
								// In-page `selector#id sibing-combinator selector` fails
								if (!div.querySelectorAll("a#" + expando + "+*").length) {
									rbuggyQSA.push(".#.+[+~]");
								}
							});

							assert(function (div) {
								// Support: Windows 8 Native Apps
								// The type and name attributes are restricted during .innerHTML assignment
								var input = doc.createElement("input");
								input.setAttribute("type", "hidden");
								div.appendChild(input).setAttribute("name", "D");

								// Support: IE8
								// Enforce case-sensitivity of name attribute
								if (div.querySelectorAll("[name=d]").length) {
									rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
								}

								// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
								// IE8 throws error here and will not see later tests
								if (!div.querySelectorAll(":enabled").length) {
									rbuggyQSA.push(":enabled", ":disabled");
								}

								// Opera 10-11 does not throw on post-comma invalid pseudos
								div.querySelectorAll("*,:x");
								rbuggyQSA.push(",.*:");
							});
						}

						if ((support.matchesSelector = rnative.test((matches = docElem.matches ||
								docElem.webkitMatchesSelector ||
								docElem.mozMatchesSelector ||
								docElem.oMatchesSelector ||
								docElem.msMatchesSelector)))) {

							assert(function (div) {
								// Check to see if it's possible to do matchesSelector
								// on a disconnected node (IE 9)
								support.disconnectedMatch = matches.call(div, "div");

								// This should fail with an exception
								// Gecko does not error, returns false instead
								matches.call(div, "[s!='']:x");
								rbuggyMatches.push("!=", pseudos);
							});
						}

						rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
						rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

						/* Contains
						 ---------------------------------------------------------------------- */
						hasCompare = rnative.test(docElem.compareDocumentPosition);

						// Element contains another
						// Purposefully does not implement inclusive descendent
						// As in, an element does not contain itself
						contains = hasCompare || rnative.test(docElem.contains) ?
							function (a, b) {
								var adown = a.nodeType === 9 ? a.documentElement : a,
									bup = b && b.parentNode;
								return a === bup || !!( bup && bup.nodeType === 1 && (
										adown.contains ?
											adown.contains(bup) :
										a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
									));
							} :
							function (a, b) {
								if (b) {
									while ((b = b.parentNode)) {
										if (b === a) {
											return true;
										}
									}
								}
								return false;
							};

						/* Sorting
						 ---------------------------------------------------------------------- */

						// Document order sorting
						sortOrder = hasCompare ?
							function (a, b) {

								// Flag for duplicate removal
								if (a === b) {
									hasDuplicate = true;
									return 0;
								}

								// Sort on method existence if only one input has compareDocumentPosition
								var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
								if (compare) {
									return compare;
								}

								// Calculate position if both inputs belong to the same document
								compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
									a.compareDocumentPosition(b) :

									// Otherwise we know they are disconnected
									1;

								// Disconnected nodes
								if (compare & 1 ||
									(!support.sortDetached && b.compareDocumentPosition(a) === compare)) {

									// Choose the first element that is related to our preferred document
									if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
										return -1;
									}
									if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
										return 1;
									}

									// Maintain original order
									return sortInput ?
										( indexOf(sortInput, a) - indexOf(sortInput, b) ) :
										0;
								}

								return compare & 4 ? -1 : 1;
							} :
							function (a, b) {
								// Exit early if the nodes are identical
								if (a === b) {
									hasDuplicate = true;
									return 0;
								}

								var cur,
									i = 0,
									aup = a.parentNode,
									bup = b.parentNode,
									ap = [a],
									bp = [b];

								// Parentless nodes are either documents or disconnected
								if (!aup || !bup) {
									return a === doc ? -1 :
										b === doc ? 1 :
											aup ? -1 :
												bup ? 1 :
													sortInput ?
														( indexOf(sortInput, a) - indexOf(sortInput, b) ) :
														0;

									// If the nodes are siblings, we can do a quick check
								} else if (aup === bup) {
									return siblingCheck(a, b);
								}

								// Otherwise we need full lists of their ancestors for comparison
								cur = a;
								while ((cur = cur.parentNode)) {
									ap.unshift(cur);
								}
								cur = b;
								while ((cur = cur.parentNode)) {
									bp.unshift(cur);
								}

								// Walk down the tree looking for a discrepancy
								while (ap[i] === bp[i]) {
									i++;
								}

								return i ?
									// Do a sibling check if the nodes have a common ancestor
									siblingCheck(ap[i], bp[i]) :

									// Otherwise nodes in our document sort first
									ap[i] === preferredDoc ? -1 :
										bp[i] === preferredDoc ? 1 :
											0;
							};

						return doc;
					};

					Sizzle.matches = function (expr, elements) {
						return Sizzle(expr, null, null, elements);
					};

					Sizzle.matchesSelector = function (elem, expr) {
						// Set document vars if needed
						if (( elem.ownerDocument || elem ) !== document) {
							setDocument(elem);
						}

						// Make sure that attribute selectors are quoted
						expr = expr.replace(rattributeQuotes, "='$1']");

						if (support.matchesSelector && documentIsHTML &&
							( !rbuggyMatches || !rbuggyMatches.test(expr) ) &&
							( !rbuggyQSA || !rbuggyQSA.test(expr) )) {

							try {
								var ret = matches.call(elem, expr);

								// IE 9's matchesSelector returns false on disconnected nodes
								if (ret || support.disconnectedMatch ||
										// As well, disconnected nodes are said to be in a document
										// fragment in IE 9
									elem.document && elem.document.nodeType !== 11) {
									return ret;
								}
							} catch (e) {
							}
						}

						return Sizzle(expr, document, null, [elem]).length > 0;
					};

					Sizzle.contains = function (context, elem) {
						// Set document vars if needed
						if (( context.ownerDocument || context ) !== document) {
							setDocument(context);
						}
						return contains(context, elem);
					};

					Sizzle.attr = function (elem, name) {
						// Set document vars if needed
						if (( elem.ownerDocument || elem ) !== document) {
							setDocument(elem);
						}

						var fn = Expr.attrHandle[name.toLowerCase()],
						// Don't get fooled by Object.prototype properties (jQuery #13807)
							val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ?
								fn(elem, name, !documentIsHTML) :
								undefined;

						return val !== undefined ?
							val :
							support.attributes || !documentIsHTML ?
								elem.getAttribute(name) :
								(val = elem.getAttributeNode(name)) && val.specified ?
									val.value :
									null;
					};

					Sizzle.error = function (msg) {
						throw new Error("Syntax error, unrecognized expression: " + msg);
					};

					/**
					 * Document sorting and removing duplicates
					 * @param {ArrayLike} results
					 */
					Sizzle.uniqueSort = function (results) {
						var elem,
							duplicates = [],
							j = 0,
							i = 0;

						// Unless we *know* we can detect duplicates, assume their presence
						hasDuplicate = !support.detectDuplicates;
						sortInput = !support.sortStable && results.slice(0);
						results.sort(sortOrder);

						if (hasDuplicate) {
							while ((elem = results[i++])) {
								if (elem === results[i]) {
									j = duplicates.push(i);
								}
							}
							while (j--) {
								results.splice(duplicates[j], 1);
							}
						}

						// Clear input after sorting to release objects
						// See https://github.com/jquery/sizzle/pull/225
						sortInput = null;

						return results;
					};

					/**
					 * Utility function for retrieving the text value of an array of DOM nodes
					 * @param {Array|Element} elem
					 */
					getText = Sizzle.getText = function (elem) {
						var node,
							ret = "",
							i = 0,
							nodeType = elem.nodeType;

						if (!nodeType) {
							// If no nodeType, this is expected to be an array
							while ((node = elem[i++])) {
								// Do not traverse comment nodes
								ret += getText(node);
							}
						} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
							// Use textContent for elements
							// innerText usage removed for consistency of new lines (jQuery #11153)
							if (typeof elem.textContent === "string") {
								return elem.textContent;
							} else {
								// Traverse its children
								for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
									ret += getText(elem);
								}
							}
						} else if (nodeType === 3 || nodeType === 4) {
							return elem.nodeValue;
						}
						// Do not include comment or processing instruction nodes

						return ret;
					};

					Expr = Sizzle.selectors = {

						// Can be adjusted by the user
						cacheLength: 50,

						createPseudo: markFunction,

						match: matchExpr,

						attrHandle: {},

						find: {},

						relative: {
							">": {dir: "parentNode", first: true},
							" ": {dir: "parentNode"},
							"+": {dir: "previousSibling", first: true},
							"~": {dir: "previousSibling"}
						},

						preFilter: {
							"ATTR": function (match) {
								match[1] = match[1].replace(runescape, funescape);

								// Move the given value to match[3] whether quoted or unquoted
								match[3] = ( match[3] || match[4] || match[5] || "" ).replace(runescape, funescape);

								if (match[2] === "~=") {
									match[3] = " " + match[3] + " ";
								}

								return match.slice(0, 4);
							},

							"CHILD": function (match) {
								/* matches from matchExpr["CHILD"]
								 1 type (only|nth|...)
								 2 what (child|of-type)
								 3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
								 4 xn-component of xn+y argument ([+-]?\d*n|)
								 5 sign of xn-component
								 6 x of xn-component
								 7 sign of y-component
								 8 y of y-component
								 */
								match[1] = match[1].toLowerCase();

								if (match[1].slice(0, 3) === "nth") {
									// nth-* requires argument
									if (!match[3]) {
										Sizzle.error(match[0]);
									}

									// numeric x and y parameters for Expr.filter.CHILD
									// remember that false/true cast respectively to 0/1
									match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
									match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

									// other types prohibit arguments
								} else if (match[3]) {
									Sizzle.error(match[0]);
								}

								return match;
							},

							"PSEUDO": function (match) {
								var excess,
									unquoted = !match[6] && match[2];

								if (matchExpr["CHILD"].test(match[0])) {
									return null;
								}

								// Accept quoted arguments as-is
								if (match[3]) {
									match[2] = match[4] || match[5] || "";

									// Strip excess characters from unquoted arguments
								} else if (unquoted && rpseudo.test(unquoted) &&
										// Get excess from tokenize (recursively)
									(excess = tokenize(unquoted, true)) &&
										// advance to the next closing parenthesis
									(excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

									// excess is a negative index
									match[0] = match[0].slice(0, excess);
									match[2] = unquoted.slice(0, excess);
								}

								// Return only captures needed by the pseudo filter method (type and argument)
								return match.slice(0, 3);
							}
						},

						filter: {

							"TAG": function (nodeNameSelector) {
								var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
								return nodeNameSelector === "*" ?
									function () {
										return true;
									} :
									function (elem) {
										return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
									};
							},

							"CLASS": function (className) {
								var pattern = classCache[className + " "];

								return pattern ||
									(pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
									classCache(className, function (elem) {
										return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
									});
							},

							"ATTR": function (name, operator, check) {
								return function (elem) {
									var result = Sizzle.attr(elem, name);

									if (result == null) {
										return operator === "!=";
									}
									if (!operator) {
										return true;
									}

									result += "";

									return operator === "=" ? result === check :
										operator === "!=" ? result !== check :
											operator === "^=" ? check && result.indexOf(check) === 0 :
												operator === "*=" ? check && result.indexOf(check) > -1 :
													operator === "$=" ? check && result.slice(-check.length) === check :
														operator === "~=" ? ( " " + result.replace(rwhitespace, " ") + " " ).indexOf(check) > -1 :
															operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
																false;
								};
							},

							"CHILD": function (type, what, argument, first, last) {
								var simple = type.slice(0, 3) !== "nth",
									forward = type.slice(-4) !== "last",
									ofType = what === "of-type";

								return first === 1 && last === 0 ?

									// Shortcut for :nth-*(n)
									function (elem) {
										return !!elem.parentNode;
									} :

									function (elem, context, xml) {
										var cache, outerCache, node, diff, nodeIndex, start,
											dir = simple !== forward ? "nextSibling" : "previousSibling",
											parent = elem.parentNode,
											name = ofType && elem.nodeName.toLowerCase(),
											useCache = !xml && !ofType;

										if (parent) {

											// :(first|last|only)-(child|of-type)
											if (simple) {
												while (dir) {
													node = elem;
													while ((node = node[dir])) {
														if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
															return false;
														}
													}
													// Reverse direction for :only-* (if we haven't yet done so)
													start = dir = type === "only" && !start && "nextSibling";
												}
												return true;
											}

											start = [forward ? parent.firstChild : parent.lastChild];

											// non-xml :nth-child(...) stores cache data on `parent`
											if (forward && useCache) {
												// Seek `elem` from a previously-cached index
												outerCache = parent[expando] || (parent[expando] = {});
												cache = outerCache[type] || [];
												nodeIndex = cache[0] === dirruns && cache[1];
												diff = cache[0] === dirruns && cache[2];
												node = nodeIndex && parent.childNodes[nodeIndex];

												while ((node = ++nodeIndex && node && node[dir] ||

														// Fallback to seeking `elem` from the start
													(diff = nodeIndex = 0) || start.pop())) {

													// When found, cache indexes on `parent` and break
													if (node.nodeType === 1 && ++diff && node === elem) {
														outerCache[type] = [dirruns, nodeIndex, diff];
														break;
													}
												}

												// Use previously-cached element index if available
											} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
												diff = cache[1];

												// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
											} else {
												// Use the same loop as above to seek `elem` from the start
												while ((node = ++nodeIndex && node && node[dir] ||
													(diff = nodeIndex = 0) || start.pop())) {

													if (( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff) {
														// Cache the index of each encountered element
														if (useCache) {
															(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
														}

														if (node === elem) {
															break;
														}
													}
												}
											}

											// Incorporate the offset, then check against cycle size
											diff -= last;
											return diff === first || ( diff % first === 0 && diff / first >= 0 );
										}
									};
							},

							"PSEUDO": function (pseudo, argument) {
								// pseudo-class names are case-insensitive
								// http://www.w3.org/TR/selectors/#pseudo-classes
								// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
								// Remember that setFilters inherits from pseudos
								var args,
									fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
										Sizzle.error("unsupported pseudo: " + pseudo);

								// The user may use createPseudo to indicate that
								// arguments are needed to create the filter function
								// just as Sizzle does
								if (fn[expando]) {
									return fn(argument);
								}

								// But maintain support for old signatures
								if (fn.length > 1) {
									args = [pseudo, pseudo, "", argument];
									return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
										markFunction(function (seed, matches) {
											var idx,
												matched = fn(seed, argument),
												i = matched.length;
											while (i--) {
												idx = indexOf(seed, matched[i]);
												seed[idx] = !( matches[idx] = matched[i] );
											}
										}) :
										function (elem) {
											return fn(elem, 0, args);
										};
								}

								return fn;
							}
						},

						pseudos: {
							// Potentially complex pseudos
							"not": markFunction(function (selector) {
								// Trim the selector passed to compile
								// to avoid treating leading and trailing
								// spaces as combinators
								var input = [],
									results = [],
									matcher = compile(selector.replace(rtrim, "$1"));

								return matcher[expando] ?
									markFunction(function (seed, matches, context, xml) {
										var elem,
											unmatched = matcher(seed, null, xml, []),
											i = seed.length;

										// Match elements unmatched by `matcher`
										while (i--) {
											if ((elem = unmatched[i])) {
												seed[i] = !(matches[i] = elem);
											}
										}
									}) :
									function (elem, context, xml) {
										input[0] = elem;
										matcher(input, null, xml, results);
										// Don't keep the element (issue #299)
										input[0] = null;
										return !results.pop();
									};
							}),

							"has": markFunction(function (selector) {
								return function (elem) {
									return Sizzle(selector, elem).length > 0;
								};
							}),

							"contains": markFunction(function (text) {
								text = text.replace(runescape, funescape);
								return function (elem) {
									return ( elem.textContent || elem.innerText || getText(elem) ).indexOf(text) > -1;
								};
							}),

							// "Whether an element is represented by a :lang() selector
							// is based solely on the element's language value
							// being equal to the identifier C,
							// or beginning with the identifier C immediately followed by "-".
							// The matching of C against the element's language value is performed case-insensitively.
							// The identifier C does not have to be a valid language name."
							// http://www.w3.org/TR/selectors/#lang-pseudo
							"lang": markFunction(function (lang) {
								// lang value must be a valid identifier
								if (!ridentifier.test(lang || "")) {
									Sizzle.error("unsupported lang: " + lang);
								}
								lang = lang.replace(runescape, funescape).toLowerCase();
								return function (elem) {
									var elemLang;
									do {
										if ((elemLang = documentIsHTML ?
												elem.lang :
											elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {

											elemLang = elemLang.toLowerCase();
											return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
										}
									} while ((elem = elem.parentNode) && elem.nodeType === 1);
									return false;
								};
							}),

							// Miscellaneous
							"target": function (elem) {
								var hash = window.location && window.location.hash;
								return hash && hash.slice(1) === elem.id;
							},

							"root": function (elem) {
								return elem === docElem;
							},

							"focus": function (elem) {
								return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
							},

							// Boolean properties
							"enabled": function (elem) {
								return elem.disabled === false;
							},

							"disabled": function (elem) {
								return elem.disabled === true;
							},

							"checked": function (elem) {
								// In CSS3, :checked should return both checked and selected elements
								// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
								var nodeName = elem.nodeName.toLowerCase();
								return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
							},

							"selected": function (elem) {
								// Accessing this property makes selected-by-default
								// options in Safari work properly
								if (elem.parentNode) {
									elem.parentNode.selectedIndex;
								}

								return elem.selected === true;
							},

							// Contents
							"empty": function (elem) {
								// http://www.w3.org/TR/selectors/#empty-pseudo
								// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
								//   but not by others (comment: 8; processing instruction: 7; etc.)
								// nodeType < 6 works because attributes (2) do not appear as children
								for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
									if (elem.nodeType < 6) {
										return false;
									}
								}
								return true;
							},

							"parent": function (elem) {
								return !Expr.pseudos["empty"](elem);
							},

							// Element/input types
							"header": function (elem) {
								return rheader.test(elem.nodeName);
							},

							"input": function (elem) {
								return rinputs.test(elem.nodeName);
							},

							"button": function (elem) {
								var name = elem.nodeName.toLowerCase();
								return name === "input" && elem.type === "button" || name === "button";
							},

							"text": function (elem) {
								var attr;
								return elem.nodeName.toLowerCase() === "input" &&
									elem.type === "text" &&

										// Support: IE<8
										// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
									( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
							},

							// Position-in-collection
							"first": createPositionalPseudo(function () {
								return [0];
							}),

							"last": createPositionalPseudo(function (matchIndexes, length) {
								return [length - 1];
							}),

							"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
								return [argument < 0 ? argument + length : argument];
							}),

							"even": createPositionalPseudo(function (matchIndexes, length) {
								var i = 0;
								for (; i < length; i += 2) {
									matchIndexes.push(i);
								}
								return matchIndexes;
							}),

							"odd": createPositionalPseudo(function (matchIndexes, length) {
								var i = 1;
								for (; i < length; i += 2) {
									matchIndexes.push(i);
								}
								return matchIndexes;
							}),

							"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
								var i = argument < 0 ? argument + length : argument;
								for (; --i >= 0;) {
									matchIndexes.push(i);
								}
								return matchIndexes;
							}),

							"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
								var i = argument < 0 ? argument + length : argument;
								for (; ++i < length;) {
									matchIndexes.push(i);
								}
								return matchIndexes;
							})
						}
					};

					Expr.pseudos["nth"] = Expr.pseudos["eq"];

					// Add button/input type pseudos
					for (i in {radio: true, checkbox: true, file: true, password: true, image: true}) {
						Expr.pseudos[i] = createInputPseudo(i);
					}
					for (i in {submit: true, reset: true}) {
						Expr.pseudos[i] = createButtonPseudo(i);
					}

					// Easy API for creating new setFilters
					function setFilters() {
					}

					setFilters.prototype = Expr.filters = Expr.pseudos;
					Expr.setFilters = new setFilters();

					tokenize = Sizzle.tokenize = function (selector, parseOnly) {
						var matched, match, tokens, type,
							soFar, groups, preFilters,
							cached = tokenCache[selector + " "];

						if (cached) {
							return parseOnly ? 0 : cached.slice(0);
						}

						soFar = selector;
						groups = [];
						preFilters = Expr.preFilter;

						while (soFar) {

							// Comma and first run
							if (!matched || (match = rcomma.exec(soFar))) {
								if (match) {
									// Don't consume trailing commas as valid
									soFar = soFar.slice(match[0].length) || soFar;
								}
								groups.push((tokens = []));
							}

							matched = false;

							// Combinators
							if ((match = rcombinators.exec(soFar))) {
								matched = match.shift();
								tokens.push({
									value: matched,
									// Cast descendant combinators to space
									type: match[0].replace(rtrim, " ")
								});
								soFar = soFar.slice(matched.length);
							}

							// Filters
							for (type in Expr.filter) {
								if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
									(match = preFilters[type](match)))) {
									matched = match.shift();
									tokens.push({
										value: matched,
										type: type,
										matches: match
									});
									soFar = soFar.slice(matched.length);
								}
							}

							if (!matched) {
								break;
							}
						}

						// Return the length of the invalid excess
						// if we're just parsing
						// Otherwise, throw an error or return tokens
						return parseOnly ?
							soFar.length :
							soFar ?
								Sizzle.error(selector) :
								// Cache the tokens
								tokenCache(selector, groups).slice(0);
					};

					function toSelector(tokens) {
						var i = 0,
							len = tokens.length,
							selector = "";
						for (; i < len; i++) {
							selector += tokens[i].value;
						}
						return selector;
					}

					function addCombinator(matcher, combinator, base) {
						var dir = combinator.dir,
							checkNonElements = base && dir === "parentNode",
							doneName = done++;

						return combinator.first ?
							// Check against closest ancestor/preceding element
							function (elem, context, xml) {
								while ((elem = elem[dir])) {
									if (elem.nodeType === 1 || checkNonElements) {
										return matcher(elem, context, xml);
									}
								}
							} :

							// Check against all ancestor/preceding elements
							function (elem, context, xml) {
								var oldCache, outerCache,
									newCache = [dirruns, doneName];

								// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
								if (xml) {
									while ((elem = elem[dir])) {
										if (elem.nodeType === 1 || checkNonElements) {
											if (matcher(elem, context, xml)) {
												return true;
											}
										}
									}
								} else {
									while ((elem = elem[dir])) {
										if (elem.nodeType === 1 || checkNonElements) {
											outerCache = elem[expando] || (elem[expando] = {});
											if ((oldCache = outerCache[dir]) &&
												oldCache[0] === dirruns && oldCache[1] === doneName) {

												// Assign to newCache so results back-propagate to previous elements
												return (newCache[2] = oldCache[2]);
											} else {
												// Reuse newcache so results back-propagate to previous elements
												outerCache[dir] = newCache;

												// A match means we're done; a fail means we have to keep checking
												if ((newCache[2] = matcher(elem, context, xml))) {
													return true;
												}
											}
										}
									}
								}
							};
					}

					function elementMatcher(matchers) {
						return matchers.length > 1 ?
							function (elem, context, xml) {
								var i = matchers.length;
								while (i--) {
									if (!matchers[i](elem, context, xml)) {
										return false;
									}
								}
								return true;
							} :
							matchers[0];
					}

					function multipleContexts(selector, contexts, results) {
						var i = 0,
							len = contexts.length;
						for (; i < len; i++) {
							Sizzle(selector, contexts[i], results);
						}
						return results;
					}

					function condense(unmatched, map, filter, context, xml) {
						var elem,
							newUnmatched = [],
							i = 0,
							len = unmatched.length,
							mapped = map != null;

						for (; i < len; i++) {
							if ((elem = unmatched[i])) {
								if (!filter || filter(elem, context, xml)) {
									newUnmatched.push(elem);
									if (mapped) {
										map.push(i);
									}
								}
							}
						}

						return newUnmatched;
					}

					function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
						if (postFilter && !postFilter[expando]) {
							postFilter = setMatcher(postFilter);
						}
						if (postFinder && !postFinder[expando]) {
							postFinder = setMatcher(postFinder, postSelector);
						}
						return markFunction(function (seed, results, context, xml) {
							var temp, i, elem,
								preMap = [],
								postMap = [],
								preexisting = results.length,

							// Get initial elements from seed or context
								elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

							// Prefilter to get matcher input, preserving a map for seed-results synchronization
								matcherIn = preFilter && ( seed || !selector ) ?
									condense(elems, preMap, preFilter, context, xml) :
									elems,

								matcherOut = matcher ?
									// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
									postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

										// ...intermediate processing is necessary
										[] :

										// ...otherwise use results directly
										results :
									matcherIn;

							// Find primary matches
							if (matcher) {
								matcher(matcherIn, matcherOut, context, xml);
							}

							// Apply postFilter
							if (postFilter) {
								temp = condense(matcherOut, postMap);
								postFilter(temp, [], context, xml);

								// Un-match failing elements by moving them back to matcherIn
								i = temp.length;
								while (i--) {
									if ((elem = temp[i])) {
										matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
									}
								}
							}

							if (seed) {
								if (postFinder || preFilter) {
									if (postFinder) {
										// Get the final matcherOut by condensing this intermediate into postFinder contexts
										temp = [];
										i = matcherOut.length;
										while (i--) {
											if ((elem = matcherOut[i])) {
												// Restore matcherIn since elem is not yet a final match
												temp.push((matcherIn[i] = elem));
											}
										}
										postFinder(null, (matcherOut = []), temp, xml);
									}

									// Move matched elements from seed to results to keep them synchronized
									i = matcherOut.length;
									while (i--) {
										if ((elem = matcherOut[i]) &&
											(temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

											seed[temp] = !(results[temp] = elem);
										}
									}
								}

								// Add elements to results, through postFinder if defined
							} else {
								matcherOut = condense(
									matcherOut === results ?
										matcherOut.splice(preexisting, matcherOut.length) :
										matcherOut
								);
								if (postFinder) {
									postFinder(null, results, matcherOut, xml);
								} else {
									push.apply(results, matcherOut);
								}
							}
						});
					}

					function matcherFromTokens(tokens) {
						var checkContext, matcher, j,
							len = tokens.length,
							leadingRelative = Expr.relative[tokens[0].type],
							implicitRelative = leadingRelative || Expr.relative[" "],
							i = leadingRelative ? 1 : 0,

						// The foundational matcher ensures that elements are reachable from top-level context(s)
							matchContext = addCombinator(function (elem) {
								return elem === checkContext;
							}, implicitRelative, true),
							matchAnyContext = addCombinator(function (elem) {
								return indexOf(checkContext, elem) > -1;
							}, implicitRelative, true),
							matchers = [function (elem, context, xml) {
								var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
										(checkContext = context).nodeType ?
											matchContext(elem, context, xml) :
											matchAnyContext(elem, context, xml) );
								// Avoid hanging onto element (issue #299)
								checkContext = null;
								return ret;
							}];

						for (; i < len; i++) {
							if ((matcher = Expr.relative[tokens[i].type])) {
								matchers = [addCombinator(elementMatcher(matchers), matcher)];
							} else {
								matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

								// Return special upon seeing a positional matcher
								if (matcher[expando]) {
									// Find the next relative operator (if any) for proper handling
									j = ++i;
									for (; j < len; j++) {
										if (Expr.relative[tokens[j].type]) {
											break;
										}
									}
									return setMatcher(
										i > 1 && elementMatcher(matchers),
										i > 1 && toSelector(
											// If the preceding token was a descendant combinator, insert an implicit any-element `*`
											tokens.slice(0, i - 1).concat({value: tokens[i - 2].type === " " ? "*" : ""})
										).replace(rtrim, "$1"),
										matcher,
										i < j && matcherFromTokens(tokens.slice(i, j)),
										j < len && matcherFromTokens((tokens = tokens.slice(j))),
										j < len && toSelector(tokens)
									);
								}
								matchers.push(matcher);
							}
						}

						return elementMatcher(matchers);
					}

					function matcherFromGroupMatchers(elementMatchers, setMatchers) {
						var bySet = setMatchers.length > 0,
							byElement = elementMatchers.length > 0,
							superMatcher = function (seed, context, xml, results, outermost) {
								var elem, j, matcher,
									matchedCount = 0,
									i = "0",
									unmatched = seed && [],
									setMatched = [],
									contextBackup = outermostContext,
								// We must always have either seed elements or outermost context
									elems = seed || byElement && Expr.find["TAG"]("*", outermost),
								// Use integer dirruns iff this is the outermost matcher
									dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
									len = elems.length;

								if (outermost) {
									outermostContext = context !== document && context;
								}

								// Add elements passing elementMatchers directly to results
								// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
								// Support: IE<9, Safari
								// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
								for (; i !== len && (elem = elems[i]) != null; i++) {
									if (byElement && elem) {
										j = 0;
										while ((matcher = elementMatchers[j++])) {
											if (matcher(elem, context, xml)) {
												results.push(elem);
												break;
											}
										}
										if (outermost) {
											dirruns = dirrunsUnique;
										}
									}

									// Track unmatched elements for set filters
									if (bySet) {
										// They will have gone through all possible matchers
										if ((elem = !matcher && elem)) {
											matchedCount--;
										}

										// Lengthen the array for every element, matched or not
										if (seed) {
											unmatched.push(elem);
										}
									}
								}

								// Apply set filters to unmatched elements
								matchedCount += i;
								if (bySet && i !== matchedCount) {
									j = 0;
									while ((matcher = setMatchers[j++])) {
										matcher(unmatched, setMatched, context, xml);
									}

									if (seed) {
										// Reintegrate element matches to eliminate the need for sorting
										if (matchedCount > 0) {
											while (i--) {
												if (!(unmatched[i] || setMatched[i])) {
													setMatched[i] = pop.call(results);
												}
											}
										}

										// Discard index placeholder values to get only actual matches
										setMatched = condense(setMatched);
									}

									// Add matches to results
									push.apply(results, setMatched);

									// Seedless set matches succeeding multiple successful matchers stipulate sorting
									if (outermost && !seed && setMatched.length > 0 &&
										( matchedCount + setMatchers.length ) > 1) {

										Sizzle.uniqueSort(results);
									}
								}

								// Override manipulation of globals by nested matchers
								if (outermost) {
									dirruns = dirrunsUnique;
									outermostContext = contextBackup;
								}

								return unmatched;
							};

						return bySet ?
							markFunction(superMatcher) :
							superMatcher;
					}

					compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
						var i,
							setMatchers = [],
							elementMatchers = [],
							cached = compilerCache[selector + " "];

						if (!cached) {
							// Generate a function of recursive functions that can be used to check each element
							if (!match) {
								match = tokenize(selector);
							}
							i = match.length;
							while (i--) {
								cached = matcherFromTokens(match[i]);
								if (cached[expando]) {
									setMatchers.push(cached);
								} else {
									elementMatchers.push(cached);
								}
							}

							// Cache the compiled function
							cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

							// Save selector and tokenization
							cached.selector = selector;
						}
						return cached;
					};

					/**
					 * A low-level selection function that works with Sizzle's compiled
					 *  selector functions
					 * @param {String|Function} selector A selector or a pre-compiled
					 *  selector function built with Sizzle.compile
					 * @param {Element} context
					 * @param {Array} [results]
					 * @param {Array} [seed] A set of elements to match against
					 */
					select = Sizzle.select = function (selector, context, results, seed) {
						var i, tokens, token, type, find,
							compiled = typeof selector === "function" && selector,
							match = !seed && tokenize((selector = compiled.selector || selector));

						results = results || [];

						// Try to minimize operations if there is no seed and only one group
						if (match.length === 1) {

							// Take a shortcut and set the context if the root selector is an ID
							tokens = match[0] = match[0].slice(0);
							if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
								support.getById && context.nodeType === 9 && documentIsHTML &&
								Expr.relative[tokens[1].type]) {

								context = ( Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [] )[0];
								if (!context) {
									return results;

									// Precompiled matchers will still verify ancestry, so step up a level
								} else if (compiled) {
									context = context.parentNode;
								}

								selector = selector.slice(tokens.shift().value.length);
							}

							// Fetch a seed set for right-to-left matching
							i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
							while (i--) {
								token = tokens[i];

								// Abort if we hit a combinator
								if (Expr.relative[(type = token.type)]) {
									break;
								}
								if ((find = Expr.find[type])) {
									// Search, expanding context for leading sibling combinators
									if ((seed = find(
											token.matches[0].replace(runescape, funescape),
											rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
										))) {

										// If seed is empty or no tokens remain, we can return early
										tokens.splice(i, 1);
										selector = seed.length && toSelector(tokens);
										if (!selector) {
											push.apply(results, seed);
											return results;
										}

										break;
									}
								}
							}
						}

						// Compile and execute a filtering function if one is not provided
						// Provide `match` to avoid retokenization if we modified the selector above
						( compiled || compile(selector, match) )(
							seed,
							context,
							!documentIsHTML,
							results,
							rsibling.test(selector) && testContext(context.parentNode) || context
						);
						return results;
					};

					// One-time assignments

					// Sort stability
					support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

					// Support: Chrome 14-35+
					// Always assume duplicates if they aren't passed to the comparison function
					support.detectDuplicates = !!hasDuplicate;

					// Initialize against the default document
					setDocument();

					// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
					// Detached nodes confoundingly follow *each other*
					support.sortDetached = assert(function (div1) {
						// Should return 1, but returns 4 (following)
						return div1.compareDocumentPosition(document.createElement("div")) & 1;
					});

					// Support: IE<8
					// Prevent attribute/property "interpolation"
					// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
					if (!assert(function (div) {
							div.innerHTML = "<a href='#'></a>";
							return div.firstChild.getAttribute("href") === "#";
						})) {
						addHandle("type|href|height|width", function (elem, name, isXML) {
							if (!isXML) {
								return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
							}
						});
					}

					// Support: IE<9
					// Use defaultValue in place of getAttribute("value")
					if (!support.attributes || !assert(function (div) {
							div.innerHTML = "<input/>";
							div.firstChild.setAttribute("value", "");
							return div.firstChild.getAttribute("value") === "";
						})) {
						addHandle("value", function (elem, name, isXML) {
							if (!isXML && elem.nodeName.toLowerCase() === "input") {
								return elem.defaultValue;
							}
						});
					}

					// Support: IE<9
					// Use getAttributeNode to fetch booleans when getAttribute lies
					if (!assert(function (div) {
							return div.getAttribute("disabled") == null;
						})) {
						addHandle(booleans, function (elem, name, isXML) {
							var val;
							if (!isXML) {
								return elem[name] === true ? name.toLowerCase() :
									(val = elem.getAttributeNode(name)) && val.specified ?
										val.value :
										null;
							}
						});
					}

					return Sizzle;

				})(window);


			jQuery.find = Sizzle;
			jQuery.expr = Sizzle.selectors;
			jQuery.expr[":"] = jQuery.expr.pseudos;
			jQuery.unique = Sizzle.uniqueSort;
			jQuery.text = Sizzle.getText;
			jQuery.isXMLDoc = Sizzle.isXML;
			jQuery.contains = Sizzle.contains;


			var rneedsContext = jQuery.expr.match.needsContext;

			var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);


			var risSimple = /^.[^:#\[\.,]*$/;

			// Implement the identical functionality for filter and not
			function winnow(elements, qualifier, not) {
				if (jQuery.isFunction(qualifier)) {
					return jQuery.grep(elements, function (elem, i) {
						/* jshint -W018 */
						return !!qualifier.call(elem, i, elem) !== not;
					});

				}

				if (qualifier.nodeType) {
					return jQuery.grep(elements, function (elem) {
						return ( elem === qualifier ) !== not;
					});

				}

				if (typeof qualifier === "string") {
					if (risSimple.test(qualifier)) {
						return jQuery.filter(qualifier, elements, not);
					}

					qualifier = jQuery.filter(qualifier, elements);
				}

				return jQuery.grep(elements, function (elem) {
					return ( indexOf.call(qualifier, elem) >= 0 ) !== not;
				});
			}

			jQuery.filter = function (expr, elems, not) {
				var elem = elems[0];

				if (not) {
					expr = ":not(" + expr + ")";
				}

				return elems.length === 1 && elem.nodeType === 1 ?
					jQuery.find.matchesSelector(elem, expr) ? [elem] : [] :
					jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
						return elem.nodeType === 1;
					}));
			};

			jQuery.fn.extend({
				find: function (selector) {
					var i,
						len = this.length,
						ret = [],
						self = this;

					if (typeof selector !== "string") {
						return this.pushStack(jQuery(selector).filter(function () {
							for (i = 0; i < len; i++) {
								if (jQuery.contains(self[i], this)) {
									return true;
								}
							}
						}));
					}

					for (i = 0; i < len; i++) {
						jQuery.find(selector, self[i], ret);
					}

					// Needed because $( selector, context ) becomes $( context ).find( selector )
					ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
					ret.selector = this.selector ? this.selector + " " + selector : selector;
					return ret;
				},
				filter: function (selector) {
					return this.pushStack(winnow(this, selector || [], false));
				},
				not: function (selector) {
					return this.pushStack(winnow(this, selector || [], true));
				},
				is: function (selector) {
					return !!winnow(
						this,

						// If this is a positional/relative selector, check membership in the returned set
						// so $("p:first").is("p:last") won't return true for a doc with two "p".
						typeof selector === "string" && rneedsContext.test(selector) ?
							jQuery(selector) :
						selector || [],
						false
					).length;
				}
			});


			// Initialize a jQuery object


			// A central reference to the root jQuery(document)
			var rootjQuery,

			// A simple way to check for HTML strings
			// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
			// Strict HTML recognition (#11290: must start with <)
				rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

				init = jQuery.fn.init = function (selector, context) {
					var match, elem;

					// HANDLE: $(""), $(null), $(undefined), $(false)
					if (!selector) {
						return this;
					}

					// Handle HTML strings
					if (typeof selector === "string") {
						if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
							// Assume that strings that start and end with <> are HTML and skip the regex check
							match = [null, selector, null];

						} else {
							match = rquickExpr.exec(selector);
						}

						// Match html or make sure no context is specified for #id
						if (match && (match[1] || !context)) {

							// HANDLE: $(html) -> $(array)
							if (match[1]) {
								context = context instanceof jQuery ? context[0] : context;

								// Option to run scripts is true for back-compat
								// Intentionally let the error be thrown if parseHTML is not present
								jQuery.merge(this, jQuery.parseHTML(
									match[1],
									context && context.nodeType ? context.ownerDocument || context : document,
									true
								));

								// HANDLE: $(html, props)
								if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
									for (match in context) {
										// Properties of context are called as methods if possible
										if (jQuery.isFunction(this[match])) {
											this[match](context[match]);

											// ...and otherwise set as attributes
										} else {
											this.attr(match, context[match]);
										}
									}
								}

								return this;

								// HANDLE: $(#id)
							} else {
								elem = document.getElementById(match[2]);

								// Support: Blackberry 4.6
								// gEBID returns nodes no longer in the document (#6963)
								if (elem && elem.parentNode) {
									// Inject the element directly into the jQuery object
									this.length = 1;
									this[0] = elem;
								}

								this.context = document;
								this.selector = selector;
								return this;
							}

							// HANDLE: $(expr, $(...))
						} else if (!context || context.jquery) {
							return ( context || rootjQuery ).find(selector);

							// HANDLE: $(expr, context)
							// (which is just equivalent to: $(context).find(expr)
						} else {
							return this.constructor(context).find(selector);
						}

						// HANDLE: $(DOMElement)
					} else if (selector.nodeType) {
						this.context = this[0] = selector;
						this.length = 1;
						return this;

						// HANDLE: $(function)
						// Shortcut for document ready
					} else if (jQuery.isFunction(selector)) {
						return typeof rootjQuery.ready !== "undefined" ?
							rootjQuery.ready(selector) :
							// Execute immediately if ready is not present
							selector(jQuery);
					}

					if (selector.selector !== undefined) {
						this.selector = selector.selector;
						this.context = selector.context;
					}

					return jQuery.makeArray(selector, this);
				};

			// Give the init function the jQuery prototype for later instantiation
			init.prototype = jQuery.fn;

			// Initialize central reference
			rootjQuery = jQuery(document);


			var rparentsprev = /^(?:parents|prev(?:Until|All))/,
			// Methods guaranteed to produce a unique set when starting from a unique set
				guaranteedUnique = {
					children: true,
					contents: true,
					next: true,
					prev: true
				};

			jQuery.extend({
				dir: function (elem, dir, until) {
					var matched = [],
						truncate = until !== undefined;

					while ((elem = elem[dir]) && elem.nodeType !== 9) {
						if (elem.nodeType === 1) {
							if (truncate && jQuery(elem).is(until)) {
								break;
							}
							matched.push(elem);
						}
					}
					return matched;
				},

				sibling: function (n, elem) {
					var matched = [];

					for (; n; n = n.nextSibling) {
						if (n.nodeType === 1 && n !== elem) {
							matched.push(n);
						}
					}

					return matched;
				}
			});

			jQuery.fn.extend({
				has: function (target) {
					var targets = jQuery(target, this),
						l = targets.length;

					return this.filter(function () {
						var i = 0;
						for (; i < l; i++) {
							if (jQuery.contains(this, targets[i])) {
								return true;
							}
						}
					});
				},

				closest: function (selectors, context) {
					var cur,
						i = 0,
						l = this.length,
						matched = [],
						pos = rneedsContext.test(selectors) || typeof selectors !== "string" ?
							jQuery(selectors, context || this.context) :
							0;

					for (; i < l; i++) {
						for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
							// Always skip document fragments
							if (cur.nodeType < 11 && (pos ?
								pos.index(cur) > -1 :

									// Don't pass non-elements to Sizzle
								cur.nodeType === 1 &&
								jQuery.find.matchesSelector(cur, selectors))) {

								matched.push(cur);
								break;
							}
						}
					}

					return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
				},

				// Determine the position of an element within the set
				index: function (elem) {

					// No argument, return index in parent
					if (!elem) {
						return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
					}

					// Index in selector
					if (typeof elem === "string") {
						return indexOf.call(jQuery(elem), this[0]);
					}

					// Locate the position of the desired element
					return indexOf.call(this,

						// If it receives a jQuery object, the first element is used
						elem.jquery ? elem[0] : elem
					);
				},

				add: function (selector, context) {
					return this.pushStack(
						jQuery.unique(
							jQuery.merge(this.get(), jQuery(selector, context))
						)
					);
				},

				addBack: function (selector) {
					return this.add(selector == null ?
							this.prevObject : this.prevObject.filter(selector)
					);
				}
			});

			function sibling(cur, dir) {
				while ((cur = cur[dir]) && cur.nodeType !== 1) {
				}
				return cur;
			}

			jQuery.each({
				parent: function (elem) {
					var parent = elem.parentNode;
					return parent && parent.nodeType !== 11 ? parent : null;
				},
				parents: function (elem) {
					return jQuery.dir(elem, "parentNode");
				},
				parentsUntil: function (elem, i, until) {
					return jQuery.dir(elem, "parentNode", until);
				},
				next: function (elem) {
					return sibling(elem, "nextSibling");
				},
				prev: function (elem) {
					return sibling(elem, "previousSibling");
				},
				nextAll: function (elem) {
					return jQuery.dir(elem, "nextSibling");
				},
				prevAll: function (elem) {
					return jQuery.dir(elem, "previousSibling");
				},
				nextUntil: function (elem, i, until) {
					return jQuery.dir(elem, "nextSibling", until);
				},
				prevUntil: function (elem, i, until) {
					return jQuery.dir(elem, "previousSibling", until);
				},
				siblings: function (elem) {
					return jQuery.sibling(( elem.parentNode || {} ).firstChild, elem);
				},
				children: function (elem) {
					return jQuery.sibling(elem.firstChild);
				},
				contents: function (elem) {
					return elem.contentDocument || jQuery.merge([], elem.childNodes);
				}
			}, function (name, fn) {
				jQuery.fn[name] = function (until, selector) {
					var matched = jQuery.map(this, fn, until);

					if (name.slice(-5) !== "Until") {
						selector = until;
					}

					if (selector && typeof selector === "string") {
						matched = jQuery.filter(selector, matched);
					}

					if (this.length > 1) {
						// Remove duplicates
						if (!guaranteedUnique[name]) {
							jQuery.unique(matched);
						}

						// Reverse order for parents* and prev-derivatives
						if (rparentsprev.test(name)) {
							matched.reverse();
						}
					}

					return this.pushStack(matched);
				};
			});
			var rnotwhite = (/\S+/g);


			// String to Object options format cache
			var optionsCache = {};

			// Convert String-formatted options into Object-formatted ones and store in cache
			function createOptions(options) {
				var object = optionsCache[options] = {};
				jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
					object[flag] = true;
				});
				return object;
			}

			/*
			 * Create a callback list using the following parameters:
			 *
			 *	options: an optional list of space-separated options that will change how
			 *			the callback list behaves or a more traditional option object
			 *
			 * By default a callback list will act like an event callback list and can be
			 * "fired" multiple times.
			 *
			 * Possible options:
			 *
			 *	once:			will ensure the callback list can only be fired once (like a Deferred)
			 *
			 *	memory:			will keep track of previous values and will call any callback added
			 *					after the list has been fired right away with the latest "memorized"
			 *					values (like a Deferred)
			 *
			 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
			 *
			 *	stopOnFalse:	interrupt callings when a callback returns false
			 *
			 */
			jQuery.Callbacks = function (options) {

				// Convert options from String-formatted to Object-formatted if needed
				// (we check in cache first)
				options = typeof options === "string" ?
					( optionsCache[options] || createOptions(options) ) :
					jQuery.extend({}, options);

				var // Last fire value (for non-forgettable lists)
					memory,
				// Flag to know if list was already fired
					fired,
				// Flag to know if list is currently firing
					firing,
				// First callback to fire (used internally by add and fireWith)
					firingStart,
				// End of the loop when firing
					firingLength,
				// Index of currently firing callback (modified by remove if needed)
					firingIndex,
				// Actual callback list
					list = [],
				// Stack of fire calls for repeatable lists
					stack = !options.once && [],
				// Fire callbacks
					fire = function (data) {
						memory = options.memory && data;
						fired = true;
						firingIndex = firingStart || 0;
						firingStart = 0;
						firingLength = list.length;
						firing = true;
						for (; list && firingIndex < firingLength; firingIndex++) {
							if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
								memory = false; // To prevent further calls using add
								break;
							}
						}
						firing = false;
						if (list) {
							if (stack) {
								if (stack.length) {
									fire(stack.shift());
								}
							} else if (memory) {
								list = [];
							} else {
								self.disable();
							}
						}
					},
				// Actual Callbacks object
					self = {
						// Add a callback or a collection of callbacks to the list
						add: function () {
							if (list) {
								// First, we save the current length
								var start = list.length;
								(function add(args) {
									jQuery.each(args, function (_, arg) {
										var type = jQuery.type(arg);
										if (type === "function") {
											if (!options.unique || !self.has(arg)) {
												list.push(arg);
											}
										} else if (arg && arg.length && type !== "string") {
											// Inspect recursively
											add(arg);
										}
									});
								})(arguments);
								// Do we need to add the callbacks to the
								// current firing batch?
								if (firing) {
									firingLength = list.length;
									// With memory, if we're not firing then
									// we should call right away
								} else if (memory) {
									firingStart = start;
									fire(memory);
								}
							}
							return this;
						},
						// Remove a callback from the list
						remove: function () {
							if (list) {
								jQuery.each(arguments, function (_, arg) {
									var index;
									while (( index = jQuery.inArray(arg, list, index) ) > -1) {
										list.splice(index, 1);
										// Handle firing indexes
										if (firing) {
											if (index <= firingLength) {
												firingLength--;
											}
											if (index <= firingIndex) {
												firingIndex--;
											}
										}
									}
								});
							}
							return this;
						},
						// Check if a given callback is in the list.
						// If no argument is given, return whether or not list has callbacks attached.
						has: function (fn) {
							return fn ? jQuery.inArray(fn, list) > -1 : !!( list && list.length );
						},
						// Remove all callbacks from the list
						empty: function () {
							list = [];
							firingLength = 0;
							return this;
						},
						// Have the list do nothing anymore
						disable: function () {
							list = stack = memory = undefined;
							return this;
						},
						// Is it disabled?
						disabled: function () {
							return !list;
						},
						// Lock the list in its current state
						lock: function () {
							stack = undefined;
							if (!memory) {
								self.disable();
							}
							return this;
						},
						// Is it locked?
						locked: function () {
							return !stack;
						},
						// Call all callbacks with the given context and arguments
						fireWith: function (context, args) {
							if (list && ( !fired || stack )) {
								args = args || [];
								args = [context, args.slice ? args.slice() : args];
								if (firing) {
									stack.push(args);
								} else {
									fire(args);
								}
							}
							return this;
						},
						// Call all the callbacks with the given arguments
						fire: function () {
							self.fireWith(this, arguments);
							return this;
						},
						// To know if the callbacks have already been called at least once
						fired: function () {
							return !!fired;
						}
					};

				return self;
			};


			jQuery.extend({

				Deferred: function (func) {
					var tuples = [
							// action, add listener, listener list, final state
							["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
							["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
							["notify", "progress", jQuery.Callbacks("memory")]
						],
						state = "pending",
						promise = {
							state: function () {
								return state;
							},
							always: function () {
								deferred.done(arguments).fail(arguments);
								return this;
							},
							then: function (/* fnDone, fnFail, fnProgress */) {
								var fns = arguments;
								return jQuery.Deferred(function (newDefer) {
									jQuery.each(tuples, function (i, tuple) {
										var fn = jQuery.isFunction(fns[i]) && fns[i];
										// deferred[ done | fail | progress ] for forwarding actions to newDefer
										deferred[tuple[1]](function () {
											var returned = fn && fn.apply(this, arguments);
											if (returned && jQuery.isFunction(returned.promise)) {
												returned.promise()
													.done(newDefer.resolve)
													.fail(newDefer.reject)
													.progress(newDefer.notify);
											} else {
												newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
											}
										});
									});
									fns = null;
								}).promise();
							},
							// Get a promise for this deferred
							// If obj is provided, the promise aspect is added to the object
							promise: function (obj) {
								return obj != null ? jQuery.extend(obj, promise) : promise;
							}
						},
						deferred = {};

					// Keep pipe for back-compat
					promise.pipe = promise.then;

					// Add list-specific methods
					jQuery.each(tuples, function (i, tuple) {
						var list = tuple[2],
							stateString = tuple[3];

						// promise[ done | fail | progress ] = list.add
						promise[tuple[1]] = list.add;

						// Handle state
						if (stateString) {
							list.add(function () {
								// state = [ resolved | rejected ]
								state = stateString;

								// [ reject_list | resolve_list ].disable; progress_list.lock
							}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
						}

						// deferred[ resolve | reject | notify ]
						deferred[tuple[0]] = function () {
							deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
							return this;
						};
						deferred[tuple[0] + "With"] = list.fireWith;
					});

					// Make the deferred a promise
					promise.promise(deferred);

					// Call given func if any
					if (func) {
						func.call(deferred, deferred);
					}

					// All done!
					return deferred;
				},

				// Deferred helper
				when: function (subordinate /* , ..., subordinateN */) {
					var i = 0,
						resolveValues = slice.call(arguments),
						length = resolveValues.length,

					// the count of uncompleted subordinates
						remaining = length !== 1 || ( subordinate && jQuery.isFunction(subordinate.promise) ) ? length : 0,

					// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
						deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

					// Update function for both resolve and progress values
						updateFunc = function (i, contexts, values) {
							return function (value) {
								contexts[i] = this;
								values[i] = arguments.length > 1 ? slice.call(arguments) : value;
								if (values === progressValues) {
									deferred.notifyWith(contexts, values);
								} else if (!( --remaining )) {
									deferred.resolveWith(contexts, values);
								}
							};
						},

						progressValues, progressContexts, resolveContexts;

					// Add listeners to Deferred subordinates; treat others as resolved
					if (length > 1) {
						progressValues = new Array(length);
						progressContexts = new Array(length);
						resolveContexts = new Array(length);
						for (; i < length; i++) {
							if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
								resolveValues[i].promise()
									.done(updateFunc(i, resolveContexts, resolveValues))
									.fail(deferred.reject)
									.progress(updateFunc(i, progressContexts, progressValues));
							} else {
								--remaining;
							}
						}
					}

					// If we're not waiting on anything, resolve the master
					if (!remaining) {
						deferred.resolveWith(resolveContexts, resolveValues);
					}

					return deferred.promise();
				}
			});


			// The deferred used on DOM ready
			var readyList;

			jQuery.fn.ready = function (fn) {
				// Add the callback
				jQuery.ready.promise().done(fn);

				return this;
			};

			jQuery.extend({
				// Is the DOM ready to be used? Set to true once it occurs.
				isReady: false,

				// A counter to track how many items to wait for before
				// the ready event fires. See #6781
				readyWait: 1,

				// Hold (or release) the ready event
				holdReady: function (hold) {
					if (hold) {
						jQuery.readyWait++;
					} else {
						jQuery.ready(true);
					}
				},

				// Handle when the DOM is ready
				ready: function (wait) {

					// Abort if there are pending holds or we're already ready
					if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
						return;
					}

					// Remember that the DOM is ready
					jQuery.isReady = true;

					// If a normal DOM Ready event fired, decrement, and wait if need be
					if (wait !== true && --jQuery.readyWait > 0) {
						return;
					}

					// If there are functions bound, to execute
					readyList.resolveWith(document, [jQuery]);

					// Trigger any bound ready events
					if (jQuery.fn.triggerHandler) {
						jQuery(document).triggerHandler("ready");
						jQuery(document).off("ready");
					}
				}
			});

			/**
			 * The ready event handler and self cleanup method
			 */
			function completed() {
				document.removeEventListener("DOMContentLoaded", completed, false);
				window.removeEventListener("load", completed, false);
				jQuery.ready();
			}

			jQuery.ready.promise = function (obj) {
				if (!readyList) {

					readyList = jQuery.Deferred();

					// Catch cases where $(document).ready() is called after the browser event has already occurred.
					// We once tried to use readyState "interactive" here, but it caused issues like the one
					// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
					if (document.readyState === "complete") {
						// Handle it asynchronously to allow scripts the opportunity to delay ready
						setTimeout(jQuery.ready);

					} else {

						// Use the handy event callback
						document.addEventListener("DOMContentLoaded", completed, false);

						// A fallback to window.onload, that will always work
						window.addEventListener("load", completed, false);
					}
				}
				return readyList.promise(obj);
			};

			// Kick off the DOM ready check even if the user does not
			jQuery.ready.promise();


			// Multifunctional method to get and set values of a collection
			// The value/s can optionally be executed if it's a function
			var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
				var i = 0,
					len = elems.length,
					bulk = key == null;

				// Sets many values
				if (jQuery.type(key) === "object") {
					chainable = true;
					for (i in key) {
						jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
					}

					// Sets one value
				} else if (value !== undefined) {
					chainable = true;

					if (!jQuery.isFunction(value)) {
						raw = true;
					}

					if (bulk) {
						// Bulk operations run against the entire set
						if (raw) {
							fn.call(elems, value);
							fn = null;

							// ...except when executing function values
						} else {
							bulk = fn;
							fn = function (elem, key, value) {
								return bulk.call(jQuery(elem), value);
							};
						}
					}

					if (fn) {
						for (; i < len; i++) {
							fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
						}
					}
				}

				return chainable ?
					elems :

					// Gets
					bulk ?
						fn.call(elems) :
						len ? fn(elems[0], key) : emptyGet;
			};


			/**
			 * Determines whether an object can have data
			 */
			jQuery.acceptData = function (owner) {
				// Accepts only:
				//  - Node
				//    - Node.ELEMENT_NODE
				//    - Node.DOCUMENT_NODE
				//  - Object
				//    - Any
				/* jshint -W018 */
				return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
			};


			function Data() {
				// Support: Android<4,
				// Old WebKit does not have Object.preventExtensions/freeze method,
				// return new empty object instead with no [[set]] accessor
				Object.defineProperty(this.cache = {}, 0, {
					get: function () {
						return {};
					}
				});

				this.expando = jQuery.expando + Data.uid++;
			}

			Data.uid = 1;
			Data.accepts = jQuery.acceptData;

			Data.prototype = {
				key: function (owner) {
					// We can accept data for non-element nodes in modern browsers,
					// but we should not, see #8335.
					// Always return the key for a frozen object.
					if (!Data.accepts(owner)) {
						return 0;
					}

					var descriptor = {},
					// Check if the owner object already has a cache key
						unlock = owner[this.expando];

					// If not, create one
					if (!unlock) {
						unlock = Data.uid++;

						// Secure it in a non-enumerable, non-writable property
						try {
							descriptor[this.expando] = {value: unlock};
							Object.defineProperties(owner, descriptor);

							// Support: Android<4
							// Fallback to a less secure definition
						} catch (e) {
							descriptor[this.expando] = unlock;
							jQuery.extend(owner, descriptor);
						}
					}

					// Ensure the cache object
					if (!this.cache[unlock]) {
						this.cache[unlock] = {};
					}

					return unlock;
				},
				set: function (owner, data, value) {
					var prop,
					// There may be an unlock assigned to this node,
					// if there is no entry for this "owner", create one inline
					// and set the unlock as though an owner entry had always existed
						unlock = this.key(owner),
						cache = this.cache[unlock];

					// Handle: [ owner, key, value ] args
					if (typeof data === "string") {
						cache[data] = value;

						// Handle: [ owner, { properties } ] args
					} else {
						// Fresh assignments by object are shallow copied
						if (jQuery.isEmptyObject(cache)) {
							jQuery.extend(this.cache[unlock], data);
							// Otherwise, copy the properties one-by-one to the cache object
						} else {
							for (prop in data) {
								cache[prop] = data[prop];
							}
						}
					}
					return cache;
				},
				get: function (owner, key) {
					// Either a valid cache is found, or will be created.
					// New caches will be created and the unlock returned,
					// allowing direct access to the newly created
					// empty data object. A valid owner object must be provided.
					var cache = this.cache[this.key(owner)];

					return key === undefined ?
						cache : cache[key];
				},
				access: function (owner, key, value) {
					var stored;
					// In cases where either:
					//
					//   1. No key was specified
					//   2. A string key was specified, but no value provided
					//
					// Take the "read" path and allow the get method to determine
					// which value to return, respectively either:
					//
					//   1. The entire cache object
					//   2. The data stored at the key
					//
					if (key === undefined ||
						((key && typeof key === "string") && value === undefined)) {

						stored = this.get(owner, key);

						return stored !== undefined ?
							stored : this.get(owner, jQuery.camelCase(key));
					}

					// [*]When the key is not a string, or both a key and value
					// are specified, set or extend (existing objects) with either:
					//
					//   1. An object of properties
					//   2. A key and value
					//
					this.set(owner, key, value);

					// Since the "set" path can have two possible entry points
					// return the expected data based on which path was taken[*]
					return value !== undefined ? value : key;
				},
				remove: function (owner, key) {
					var i, name, camel,
						unlock = this.key(owner),
						cache = this.cache[unlock];

					if (key === undefined) {
						this.cache[unlock] = {};

					} else {
						// Support array or space separated string of keys
						if (jQuery.isArray(key)) {
							// If "name" is an array of keys...
							// When data is initially created, via ("key", "val") signature,
							// keys will be converted to camelCase.
							// Since there is no way to tell _how_ a key was added, remove
							// both plain key and camelCase key. #12786
							// This will only penalize the array argument path.
							name = key.concat(key.map(jQuery.camelCase));
						} else {
							camel = jQuery.camelCase(key);
							// Try the string as a key before any manipulation
							if (key in cache) {
								name = [key, camel];
							} else {
								// If a key with the spaces exists, use it.
								// Otherwise, create an array by matching non-whitespace
								name = camel;
								name = name in cache ?
									[name] : ( name.match(rnotwhite) || [] );
							}
						}

						i = name.length;
						while (i--) {
							delete cache[name[i]];
						}
					}
				},
				hasData: function (owner) {
					return !jQuery.isEmptyObject(
						this.cache[owner[this.expando]] || {}
					);
				},
				discard: function (owner) {
					if (owner[this.expando]) {
						delete this.cache[owner[this.expando]];
					}
				}
			};
			var data_priv = new Data();

			var data_user = new Data();


			//	Implementation Summary
			//
			//	1. Enforce API surface and semantic compatibility with 1.9.x branch
			//	2. Improve the module's maintainability by reducing the storage
			//		paths to a single mechanism.
			//	3. Use the same single mechanism to support "private" and "user" data.
			//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
			//	5. Avoid exposing implementation details on user objects (eg. expando properties)
			//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

			var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
				rmultiDash = /([A-Z])/g;

			function dataAttr(elem, key, data) {
				var name;

				// If nothing was found internally, try to fetch any
				// data from the HTML5 data-* attribute
				if (data === undefined && elem.nodeType === 1) {
					name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
					data = elem.getAttribute(name);

					if (typeof data === "string") {
						try {
							data = data === "true" ? true :
								data === "false" ? false :
									data === "null" ? null :
										// Only convert to a number if it doesn't change the string
										+data + "" === data ? +data :
											rbrace.test(data) ? jQuery.parseJSON(data) :
												data;
						} catch (e) {
						}

						// Make sure we set the data so it isn't changed later
						data_user.set(elem, key, data);
					} else {
						data = undefined;
					}
				}
				return data;
			}

			jQuery.extend({
				hasData: function (elem) {
					return data_user.hasData(elem) || data_priv.hasData(elem);
				},

				data: function (elem, name, data) {
					return data_user.access(elem, name, data);
				},

				removeData: function (elem, name) {
					data_user.remove(elem, name);
				},

				// TODO: Now that all calls to _data and _removeData have been replaced
				// with direct calls to data_priv methods, these can be deprecated.
				_data: function (elem, name, data) {
					return data_priv.access(elem, name, data);
				},

				_removeData: function (elem, name) {
					data_priv.remove(elem, name);
				}
			});

			jQuery.fn.extend({
				data: function (key, value) {
					var i, name, data,
						elem = this[0],
						attrs = elem && elem.attributes;

					// Gets all values
					if (key === undefined) {
						if (this.length) {
							data = data_user.get(elem);

							if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
								i = attrs.length;
								while (i--) {

									// Support: IE11+
									// The attrs elements can be null (#14894)
									if (attrs[i]) {
										name = attrs[i].name;
										if (name.indexOf("data-") === 0) {
											name = jQuery.camelCase(name.slice(5));
											dataAttr(elem, name, data[name]);
										}
									}
								}
								data_priv.set(elem, "hasDataAttrs", true);
							}
						}

						return data;
					}

					// Sets multiple values
					if (typeof key === "object") {
						return this.each(function () {
							data_user.set(this, key);
						});
					}

					return access(this, function (value) {
						var data,
							camelKey = jQuery.camelCase(key);

						// The calling jQuery object (element matches) is not empty
						// (and therefore has an element appears at this[ 0 ]) and the
						// `value` parameter was not undefined. An empty jQuery object
						// will result in `undefined` for elem = this[ 0 ] which will
						// throw an exception if an attempt to read a data cache is made.
						if (elem && value === undefined) {
							// Attempt to get data from the cache
							// with the key as-is
							data = data_user.get(elem, key);
							if (data !== undefined) {
								return data;
							}

							// Attempt to get data from the cache
							// with the key camelized
							data = data_user.get(elem, camelKey);
							if (data !== undefined) {
								return data;
							}

							// Attempt to "discover" the data in
							// HTML5 custom data-* attrs
							data = dataAttr(elem, camelKey, undefined);
							if (data !== undefined) {
								return data;
							}

							// We tried really hard, but the data doesn't exist.
							return;
						}

						// Set the data...
						this.each(function () {
							// First, attempt to store a copy or reference of any
							// data that might've been store with a camelCased key.
							var data = data_user.get(this, camelKey);

							// For HTML5 data-* attribute interop, we have to
							// store property names with dashes in a camelCase form.
							// This might not apply to all properties...*
							data_user.set(this, camelKey, value);

							// *... In the case of properties that might _actually_
							// have dashes, we need to also store a copy of that
							// unchanged property.
							if (key.indexOf("-") !== -1 && data !== undefined) {
								data_user.set(this, key, value);
							}
						});
					}, null, value, arguments.length > 1, null, true);
				},

				removeData: function (key) {
					return this.each(function () {
						data_user.remove(this, key);
					});
				}
			});


			jQuery.extend({
				queue: function (elem, type, data) {
					var queue;

					if (elem) {
						type = ( type || "fx" ) + "queue";
						queue = data_priv.get(elem, type);

						// Speed up dequeue by getting out quickly if this is just a lookup
						if (data) {
							if (!queue || jQuery.isArray(data)) {
								queue = data_priv.access(elem, type, jQuery.makeArray(data));
							} else {
								queue.push(data);
							}
						}
						return queue || [];
					}
				},

				dequeue: function (elem, type) {
					type = type || "fx";

					var queue = jQuery.queue(elem, type),
						startLength = queue.length,
						fn = queue.shift(),
						hooks = jQuery._queueHooks(elem, type),
						next = function () {
							jQuery.dequeue(elem, type);
						};

					// If the fx queue is dequeued, always remove the progress sentinel
					if (fn === "inprogress") {
						fn = queue.shift();
						startLength--;
					}

					if (fn) {

						// Add a progress sentinel to prevent the fx queue from being
						// automatically dequeued
						if (type === "fx") {
							queue.unshift("inprogress");
						}

						// Clear up the last queue stop function
						delete hooks.stop;
						fn.call(elem, next, hooks);
					}

					if (!startLength && hooks) {
						hooks.empty.fire();
					}
				},

				// Not public - generate a queueHooks object, or return the current one
				_queueHooks: function (elem, type) {
					var key = type + "queueHooks";
					return data_priv.get(elem, key) || data_priv.access(elem, key, {
							empty: jQuery.Callbacks("once memory").add(function () {
								data_priv.remove(elem, [type + "queue", key]);
							})
						});
				}
			});

			jQuery.fn.extend({
				queue: function (type, data) {
					var setter = 2;

					if (typeof type !== "string") {
						data = type;
						type = "fx";
						setter--;
					}

					if (arguments.length < setter) {
						return jQuery.queue(this[0], type);
					}

					return data === undefined ?
						this :
						this.each(function () {
							var queue = jQuery.queue(this, type, data);

							// Ensure a hooks for this queue
							jQuery._queueHooks(this, type);

							if (type === "fx" && queue[0] !== "inprogress") {
								jQuery.dequeue(this, type);
							}
						});
				},
				dequeue: function (type) {
					return this.each(function () {
						jQuery.dequeue(this, type);
					});
				},
				clearQueue: function (type) {
					return this.queue(type || "fx", []);
				},
				// Get a promise resolved when queues of a certain type
				// are emptied (fx is the type by default)
				promise: function (type, obj) {
					var tmp,
						count = 1,
						defer = jQuery.Deferred(),
						elements = this,
						i = this.length,
						resolve = function () {
							if (!( --count )) {
								defer.resolveWith(elements, [elements]);
							}
						};

					if (typeof type !== "string") {
						obj = type;
						type = undefined;
					}
					type = type || "fx";

					while (i--) {
						tmp = data_priv.get(elements[i], type + "queueHooks");
						if (tmp && tmp.empty) {
							count++;
							tmp.empty.add(resolve);
						}
					}
					resolve();
					return defer.promise(obj);
				}
			});
			var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

			var cssExpand = ["Top", "Right", "Bottom", "Left"];

			var isHidden = function (elem, el) {
				// isHidden might be called from jQuery#filter function;
				// in that case, element will be second argument
				elem = el || elem;
				return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
			};

			var rcheckableType = (/^(?:checkbox|radio)$/i);


			(function () {
				var fragment = document.createDocumentFragment(),
					div = fragment.appendChild(document.createElement("div")),
					input = document.createElement("input");

				// Support: Safari<=5.1
				// Check state lost if the name is set (#11217)
				// Support: Windows Web Apps (WWA)
				// `name` and `type` must use .setAttribute for WWA (#14901)
				input.setAttribute("type", "radio");
				input.setAttribute("checked", "checked");
				input.setAttribute("name", "t");

				div.appendChild(input);

				// Support: Safari<=5.1, Android<4.2
				// Older WebKit doesn't clone checked state correctly in fragments
				support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

				// Support: IE<=11+
				// Make sure textarea (and checkbox) defaultValue is properly cloned
				div.innerHTML = "<textarea>x</textarea>";
				support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
			})();
			var strundefined = typeof undefined;


			support.focusinBubbles = "onfocusin" in window;


			var
				rkeyEvent = /^key/,
				rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
				rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
				rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

			function returnTrue() {
				return true;
			}

			function returnFalse() {
				return false;
			}

			function safeActiveElement() {
				try {
					return document.activeElement;
				} catch (err) {
				}
			}

			/*
			 * Helper functions for managing events -- not part of the public interface.
			 * Props to Dean Edwards' addEvent library for many of the ideas.
			 */
			jQuery.event = {

				global: {},

				add: function (elem, types, handler, data, selector) {

					var handleObjIn, eventHandle, tmp,
						events, t, handleObj,
						special, handlers, type, namespaces, origType,
						elemData = data_priv.get(elem);

					// Don't attach events to noData or text/comment nodes (but allow plain objects)
					if (!elemData) {
						return;
					}

					// Caller can pass in an object of custom data in lieu of the handler
					if (handler.handler) {
						handleObjIn = handler;
						handler = handleObjIn.handler;
						selector = handleObjIn.selector;
					}

					// Make sure that the handler has a unique ID, used to find/remove it later
					if (!handler.guid) {
						handler.guid = jQuery.guid++;
					}

					// Init the element's event structure and main handler, if this is the first
					if (!(events = elemData.events)) {
						events = elemData.events = {};
					}
					if (!(eventHandle = elemData.handle)) {
						eventHandle = elemData.handle = function (e) {
							// Discard the second event of a jQuery.event.trigger() and
							// when an event is called after a page has unloaded
							return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
								jQuery.event.dispatch.apply(elem, arguments) : undefined;
						};
					}

					// Handle multiple events separated by a space
					types = ( types || "" ).match(rnotwhite) || [""];
					t = types.length;
					while (t--) {
						tmp = rtypenamespace.exec(types[t]) || [];
						type = origType = tmp[1];
						namespaces = ( tmp[2] || "" ).split(".").sort();

						// There *must* be a type, no attaching namespace-only handlers
						if (!type) {
							continue;
						}

						// If event changes its type, use the special event handlers for the changed type
						special = jQuery.event.special[type] || {};

						// If selector defined, determine special event api type, otherwise given type
						type = ( selector ? special.delegateType : special.bindType ) || type;

						// Update special based on newly reset type
						special = jQuery.event.special[type] || {};

						// handleObj is passed to all event handlers
						handleObj = jQuery.extend({
							type: type,
							origType: origType,
							data: data,
							handler: handler,
							guid: handler.guid,
							selector: selector,
							needsContext: selector && jQuery.expr.match.needsContext.test(selector),
							namespace: namespaces.join(".")
						}, handleObjIn);

						// Init the event handler queue if we're the first
						if (!(handlers = events[type])) {
							handlers = events[type] = [];
							handlers.delegateCount = 0;

							// Only use addEventListener if the special events handler returns false
							if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
								if (elem.addEventListener) {
									elem.addEventListener(type, eventHandle, false);
								}
							}
						}

						if (special.add) {
							special.add.call(elem, handleObj);

							if (!handleObj.handler.guid) {
								handleObj.handler.guid = handler.guid;
							}
						}

						// Add to the element's handler list, delegates in front
						if (selector) {
							handlers.splice(handlers.delegateCount++, 0, handleObj);
						} else {
							handlers.push(handleObj);
						}

						// Keep track of which events have ever been used, for event optimization
						jQuery.event.global[type] = true;
					}

				},

				// Detach an event or set of events from an element
				remove: function (elem, types, handler, selector, mappedTypes) {

					var j, origCount, tmp,
						events, t, handleObj,
						special, handlers, type, namespaces, origType,
						elemData = data_priv.hasData(elem) && data_priv.get(elem);

					if (!elemData || !(events = elemData.events)) {
						return;
					}

					// Once for each type.namespace in types; type may be omitted
					types = ( types || "" ).match(rnotwhite) || [""];
					t = types.length;
					while (t--) {
						tmp = rtypenamespace.exec(types[t]) || [];
						type = origType = tmp[1];
						namespaces = ( tmp[2] || "" ).split(".").sort();

						// Unbind all events (on this namespace, if provided) for the element
						if (!type) {
							for (type in events) {
								jQuery.event.remove(elem, type + types[t], handler, selector, true);
							}
							continue;
						}

						special = jQuery.event.special[type] || {};
						type = ( selector ? special.delegateType : special.bindType ) || type;
						handlers = events[type] || [];
						tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

						// Remove matching events
						origCount = j = handlers.length;
						while (j--) {
							handleObj = handlers[j];

							if (( mappedTypes || origType === handleObj.origType ) &&
								( !handler || handler.guid === handleObj.guid ) &&
								( !tmp || tmp.test(handleObj.namespace) ) &&
								( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector )) {
								handlers.splice(j, 1);

								if (handleObj.selector) {
									handlers.delegateCount--;
								}
								if (special.remove) {
									special.remove.call(elem, handleObj);
								}
							}
						}

						// Remove generic event handler if we removed something and no more handlers exist
						// (avoids potential for endless recursion during removal of special event handlers)
						if (origCount && !handlers.length) {
							if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
								jQuery.removeEvent(elem, type, elemData.handle);
							}

							delete events[type];
						}
					}

					// Remove the expando if it's no longer used
					if (jQuery.isEmptyObject(events)) {
						delete elemData.handle;
						data_priv.remove(elem, "events");
					}
				},

				trigger: function (event, data, elem, onlyHandlers) {

					var i, cur, tmp, bubbleType, ontype, handle, special,
						eventPath = [elem || document],
						type = hasOwn.call(event, "type") ? event.type : event,
						namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

					cur = tmp = elem = elem || document;

					// Don't do events on text and comment nodes
					if (elem.nodeType === 3 || elem.nodeType === 8) {
						return;
					}

					// focus/blur morphs to focusin/out; ensure we're not firing them right now
					if (rfocusMorph.test(type + jQuery.event.triggered)) {
						return;
					}

					if (type.indexOf(".") >= 0) {
						// Namespaced trigger; create a regexp to match event type in handle()
						namespaces = type.split(".");
						type = namespaces.shift();
						namespaces.sort();
					}
					ontype = type.indexOf(":") < 0 && "on" + type;

					// Caller can pass in a jQuery.Event object, Object, or just an event type string
					event = event[jQuery.expando] ?
						event :
						new jQuery.Event(type, typeof event === "object" && event);

					// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
					event.isTrigger = onlyHandlers ? 2 : 3;
					event.namespace = namespaces.join(".");
					event.namespace_re = event.namespace ?
						new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
						null;

					// Clean up the event in case it is being reused
					event.result = undefined;
					if (!event.target) {
						event.target = elem;
					}

					// Clone any incoming data and prepend the event, creating the handler arg list
					data = data == null ?
						[event] :
						jQuery.makeArray(data, [event]);

					// Allow special events to draw outside the lines
					special = jQuery.event.special[type] || {};
					if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
						return;
					}

					// Determine event propagation path in advance, per W3C events spec (#9951)
					// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
					if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

						bubbleType = special.delegateType || type;
						if (!rfocusMorph.test(bubbleType + type)) {
							cur = cur.parentNode;
						}
						for (; cur; cur = cur.parentNode) {
							eventPath.push(cur);
							tmp = cur;
						}

						// Only add window if we got to document (e.g., not plain obj or detached DOM)
						if (tmp === (elem.ownerDocument || document)) {
							eventPath.push(tmp.defaultView || tmp.parentWindow || window);
						}
					}

					// Fire handlers on the event path
					i = 0;
					while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

						event.type = i > 1 ?
							bubbleType :
						special.bindType || type;

						// jQuery handler
						handle = ( data_priv.get(cur, "events") || {} )[event.type] && data_priv.get(cur, "handle");
						if (handle) {
							handle.apply(cur, data);
						}

						// Native handler
						handle = ontype && cur[ontype];
						if (handle && handle.apply && jQuery.acceptData(cur)) {
							event.result = handle.apply(cur, data);
							if (event.result === false) {
								event.preventDefault();
							}
						}
					}
					event.type = type;

					// If nobody prevented the default action, do it now
					if (!onlyHandlers && !event.isDefaultPrevented()) {

						if ((!special._default || special._default.apply(eventPath.pop(), data) === false) &&
							jQuery.acceptData(elem)) {

							// Call a native DOM method on the target with the same name name as the event.
							// Don't do default actions on window, that's where global variables be (#6170)
							if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

								// Don't re-trigger an onFOO event when we call its FOO() method
								tmp = elem[ontype];

								if (tmp) {
									elem[ontype] = null;
								}

								// Prevent re-triggering of the same event, since we already bubbled it above
								jQuery.event.triggered = type;
								elem[type]();
								jQuery.event.triggered = undefined;

								if (tmp) {
									elem[ontype] = tmp;
								}
							}
						}
					}

					return event.result;
				},

				dispatch: function (event) {

					// Make a writable jQuery.Event from the native event object
					event = jQuery.event.fix(event);

					var i, j, ret, matched, handleObj,
						handlerQueue = [],
						args = slice.call(arguments),
						handlers = ( data_priv.get(this, "events") || {} )[event.type] || [],
						special = jQuery.event.special[event.type] || {};

					// Use the fix-ed jQuery.Event rather than the (read-only) native event
					args[0] = event;
					event.delegateTarget = this;

					// Call the preDispatch hook for the mapped type, and let it bail if desired
					if (special.preDispatch && special.preDispatch.call(this, event) === false) {
						return;
					}

					// Determine handlers
					handlerQueue = jQuery.event.handlers.call(this, event, handlers);

					// Run delegates first; they may want to stop propagation beneath us
					i = 0;
					while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
						event.currentTarget = matched.elem;

						j = 0;
						while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

							// Triggered event must either 1) have no namespace, or 2) have namespace(s)
							// a subset or equal to those in the bound event (both can have no namespace).
							if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {

								event.handleObj = handleObj;
								event.data = handleObj.data;

								ret = ( (jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler )
									.apply(matched.elem, args);

								if (ret !== undefined) {
									if ((event.result = ret) === false) {
										event.preventDefault();
										event.stopPropagation();
									}
								}
							}
						}
					}

					// Call the postDispatch hook for the mapped type
					if (special.postDispatch) {
						special.postDispatch.call(this, event);
					}

					return event.result;
				},

				handlers: function (event, handlers) {
					var i, matches, sel, handleObj,
						handlerQueue = [],
						delegateCount = handlers.delegateCount,
						cur = event.target;

					// Find delegate handlers
					// Black-hole SVG <use> instance trees (#13180)
					// Avoid non-left-click bubbling in Firefox (#3861)
					if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {

						for (; cur !== this; cur = cur.parentNode || this) {

							// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
							if (cur.disabled !== true || event.type !== "click") {
								matches = [];
								for (i = 0; i < delegateCount; i++) {
									handleObj = handlers[i];

									// Don't conflict with Object.prototype properties (#13203)
									sel = handleObj.selector + " ";

									if (matches[sel] === undefined) {
										matches[sel] = handleObj.needsContext ?
										jQuery(sel, this).index(cur) >= 0 :
											jQuery.find(sel, this, null, [cur]).length;
									}
									if (matches[sel]) {
										matches.push(handleObj);
									}
								}
								if (matches.length) {
									handlerQueue.push({elem: cur, handlers: matches});
								}
							}
						}
					}

					// Add the remaining (directly-bound) handlers
					if (delegateCount < handlers.length) {
						handlerQueue.push({elem: this, handlers: handlers.slice(delegateCount)});
					}

					return handlerQueue;
				},

				// Includes some event props shared by KeyEvent and MouseEvent
				props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

				fixHooks: {},

				keyHooks: {
					props: "char charCode key keyCode".split(" "),
					filter: function (event, original) {

						// Add which for key events
						if (event.which == null) {
							event.which = original.charCode != null ? original.charCode : original.keyCode;
						}

						return event;
					}
				},

				mouseHooks: {
					props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
					filter: function (event, original) {
						var eventDoc, doc, body,
							button = original.button;

						// Calculate pageX/Y if missing and clientX/Y available
						if (event.pageX == null && original.clientX != null) {
							eventDoc = event.target.ownerDocument || document;
							doc = eventDoc.documentElement;
							body = eventDoc.body;

							event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
							event.pageY = original.clientY + ( doc && doc.scrollTop || body && body.scrollTop || 0 ) - ( doc && doc.clientTop || body && body.clientTop || 0 );
						}

						// Add which for click: 1 === left; 2 === middle; 3 === right
						// Note: button is not normalized, so don't use it
						if (!event.which && button !== undefined) {
							event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
						}

						return event;
					}
				},

				fix: function (event) {
					if (event[jQuery.expando]) {
						return event;
					}

					// Create a writable copy of the event object and normalize some properties
					var i, prop, copy,
						type = event.type,
						originalEvent = event,
						fixHook = this.fixHooks[type];

					if (!fixHook) {
						this.fixHooks[type] = fixHook =
							rmouseEvent.test(type) ? this.mouseHooks :
								rkeyEvent.test(type) ? this.keyHooks :
								{};
					}
					copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

					event = new jQuery.Event(originalEvent);

					i = copy.length;
					while (i--) {
						prop = copy[i];
						event[prop] = originalEvent[prop];
					}

					// Support: Cordova 2.5 (WebKit) (#13255)
					// All events should have a target; Cordova deviceready doesn't
					if (!event.target) {
						event.target = document;
					}

					// Support: Safari 6.0+, Chrome<28
					// Target should not be a text node (#504, #13143)
					if (event.target.nodeType === 3) {
						event.target = event.target.parentNode;
					}

					return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
				},

				special: {
					load: {
						// Prevent triggered image.load events from bubbling to window.load
						noBubble: true
					},
					focus: {
						// Fire native event if possible so blur/focus sequence is correct
						trigger: function () {
							if (this !== safeActiveElement() && this.focus) {
								this.focus();
								return false;
							}
						},
						delegateType: "focusin"
					},
					blur: {
						trigger: function () {
							if (this === safeActiveElement() && this.blur) {
								this.blur();
								return false;
							}
						},
						delegateType: "focusout"
					},
					click: {
						// For checkbox, fire native event so checked state will be right
						trigger: function () {
							if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
								this.click();
								return false;
							}
						},

						// For cross-browser consistency, don't fire native .click() on links
						_default: function (event) {
							return jQuery.nodeName(event.target, "a");
						}
					},

					beforeunload: {
						postDispatch: function (event) {

							// Support: Firefox 20+
							// Firefox doesn't alert if the returnValue field is not set.
							if (event.result !== undefined && event.originalEvent) {
								event.originalEvent.returnValue = event.result;
							}
						}
					}
				},

				simulate: function (type, elem, event, bubble) {
					// Piggyback on a donor event to simulate a different one.
					// Fake originalEvent to avoid donor's stopPropagation, but if the
					// simulated event prevents default then we do the same on the donor.
					var e = jQuery.extend(
						new jQuery.Event(),
						event,
						{
							type: type,
							isSimulated: true,
							originalEvent: {}
						}
					);
					if (bubble) {
						jQuery.event.trigger(e, null, elem);
					} else {
						jQuery.event.dispatch.call(elem, e);
					}
					if (e.isDefaultPrevented()) {
						event.preventDefault();
					}
				}
			};

			jQuery.removeEvent = function (elem, type, handle) {
				if (elem.removeEventListener) {
					elem.removeEventListener(type, handle, false);
				}
			};

			jQuery.Event = function (src, props) {
				// Allow instantiation without the 'new' keyword
				if (!(this instanceof jQuery.Event)) {
					return new jQuery.Event(src, props);
				}

				// Event object
				if (src && src.type) {
					this.originalEvent = src;
					this.type = src.type;

					// Events bubbling up the document may have been marked as prevented
					// by a handler lower down the tree; reflect the correct value.
					this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
						// Support: Android<4.0
					src.returnValue === false ?
						returnTrue :
						returnFalse;

					// Event type
				} else {
					this.type = src;
				}

				// Put explicitly provided properties onto the event object
				if (props) {
					jQuery.extend(this, props);
				}

				// Create a timestamp if incoming event doesn't have one
				this.timeStamp = src && src.timeStamp || jQuery.now();

				// Mark it as fixed
				this[jQuery.expando] = true;
			};

			// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
			// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
			jQuery.Event.prototype = {
				isDefaultPrevented: returnFalse,
				isPropagationStopped: returnFalse,
				isImmediatePropagationStopped: returnFalse,

				preventDefault: function () {
					var e = this.originalEvent;

					this.isDefaultPrevented = returnTrue;

					if (e && e.preventDefault) {
						e.preventDefault();
					}
				},
				stopPropagation: function () {
					var e = this.originalEvent;

					this.isPropagationStopped = returnTrue;

					if (e && e.stopPropagation) {
						e.stopPropagation();
					}
				},
				stopImmediatePropagation: function () {
					var e = this.originalEvent;

					this.isImmediatePropagationStopped = returnTrue;

					if (e && e.stopImmediatePropagation) {
						e.stopImmediatePropagation();
					}

					this.stopPropagation();
				}
			};

			// Create mouseenter/leave events using mouseover/out and event-time checks
			// Support: Chrome 15+
			jQuery.each({
				mouseenter: "mouseover",
				mouseleave: "mouseout",
				pointerenter: "pointerover",
				pointerleave: "pointerout"
			}, function (orig, fix) {
				jQuery.event.special[orig] = {
					delegateType: fix,
					bindType: fix,

					handle: function (event) {
						var ret,
							target = this,
							related = event.relatedTarget,
							handleObj = event.handleObj;

						// For mousenter/leave call the handler if related is outside the target.
						// NB: No relatedTarget if the mouse left/entered the browser window
						if (!related || (related !== target && !jQuery.contains(target, related))) {
							event.type = handleObj.origType;
							ret = handleObj.handler.apply(this, arguments);
							event.type = fix;
						}
						return ret;
					}
				};
			});

			// Support: Firefox, Chrome, Safari
			// Create "bubbling" focus and blur events
			if (!support.focusinBubbles) {
				jQuery.each({focus: "focusin", blur: "focusout"}, function (orig, fix) {

					// Attach a single capturing handler on the document while someone wants focusin/focusout
					var handler = function (event) {
						jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
					};

					jQuery.event.special[fix] = {
						setup: function () {
							var doc = this.ownerDocument || this,
								attaches = data_priv.access(doc, fix);

							if (!attaches) {
								doc.addEventListener(orig, handler, true);
							}
							data_priv.access(doc, fix, ( attaches || 0 ) + 1);
						},
						teardown: function () {
							var doc = this.ownerDocument || this,
								attaches = data_priv.access(doc, fix) - 1;

							if (!attaches) {
								doc.removeEventListener(orig, handler, true);
								data_priv.remove(doc, fix);

							} else {
								data_priv.access(doc, fix, attaches);
							}
						}
					};
				});
			}

			jQuery.fn.extend({

				on: function (types, selector, data, fn, /*INTERNAL*/ one) {
					var origFn, type;

					// Types can be a map of types/handlers
					if (typeof types === "object") {
						// ( types-Object, selector, data )
						if (typeof selector !== "string") {
							// ( types-Object, data )
							data = data || selector;
							selector = undefined;
						}
						for (type in types) {
							this.on(type, selector, data, types[type], one);
						}
						return this;
					}

					if (data == null && fn == null) {
						// ( types, fn )
						fn = selector;
						data = selector = undefined;
					} else if (fn == null) {
						if (typeof selector === "string") {
							// ( types, selector, fn )
							fn = data;
							data = undefined;
						} else {
							// ( types, data, fn )
							fn = data;
							data = selector;
							selector = undefined;
						}
					}
					if (fn === false) {
						fn = returnFalse;
					} else if (!fn) {
						return this;
					}

					if (one === 1) {
						origFn = fn;
						fn = function (event) {
							// Can use an empty set, since event contains the info
							jQuery().off(event);
							return origFn.apply(this, arguments);
						};
						// Use same guid so caller can remove using origFn
						fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
					}
					return this.each(function () {
						jQuery.event.add(this, types, fn, data, selector);
					});
				},
				one: function (types, selector, data, fn) {
					return this.on(types, selector, data, fn, 1);
				},
				off: function (types, selector, fn) {
					var handleObj, type;
					if (types && types.preventDefault && types.handleObj) {
						// ( event )  dispatched jQuery.Event
						handleObj = types.handleObj;
						jQuery(types.delegateTarget).off(
							handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
							handleObj.selector,
							handleObj.handler
						);
						return this;
					}
					if (typeof types === "object") {
						// ( types-object [, selector] )
						for (type in types) {
							this.off(type, selector, types[type]);
						}
						return this;
					}
					if (selector === false || typeof selector === "function") {
						// ( types [, fn] )
						fn = selector;
						selector = undefined;
					}
					if (fn === false) {
						fn = returnFalse;
					}
					return this.each(function () {
						jQuery.event.remove(this, types, fn, selector);
					});
				},

				trigger: function (type, data) {
					return this.each(function () {
						jQuery.event.trigger(type, data, this);
					});
				},
				triggerHandler: function (type, data) {
					var elem = this[0];
					if (elem) {
						return jQuery.event.trigger(type, data, elem, true);
					}
				}
			});


			var
				rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
				rtagName = /<([\w:]+)/,
				rhtml = /<|&#?\w+;/,
				rnoInnerhtml = /<(?:script|style|link)/i,
			// checked="checked" or checked
				rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
				rscriptType = /^$|\/(?:java|ecma)script/i,
				rscriptTypeMasked = /^true\/(.*)/,
				rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

			// We have to close these tags to support XHTML (#13200)
				wrapMap = {

					// Support: IE9
					option: [1, "<select multiple='multiple'>", "</select>"],

					thead: [1, "<table>", "</table>"],
					col: [2, "<table><colgroup>", "</colgroup></table>"],
					tr: [2, "<table><tbody>", "</tbody></table>"],
					td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

					_default: [0, "", ""]
				};

			// Support: IE9
			wrapMap.optgroup = wrapMap.option;

			wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
			wrapMap.th = wrapMap.td;

			// Support: 1.x compatibility
			// Manipulating tables requires a tbody
			function manipulationTarget(elem, content) {
				return jQuery.nodeName(elem, "table") &&
				jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ?

				elem.getElementsByTagName("tbody")[0] ||
				elem.appendChild(elem.ownerDocument.createElement("tbody")) :
					elem;
			}

			// Replace/restore the type attribute of script elements for safe DOM manipulation
			function disableScript(elem) {
				elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
				return elem;
			}

			function restoreScript(elem) {
				var match = rscriptTypeMasked.exec(elem.type);

				if (match) {
					elem.type = match[1];
				} else {
					elem.removeAttribute("type");
				}

				return elem;
			}

			// Mark scripts as having already been evaluated
			function setGlobalEval(elems, refElements) {
				var i = 0,
					l = elems.length;

				for (; i < l; i++) {
					data_priv.set(
						elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval")
					);
				}
			}

			function cloneCopyEvent(src, dest) {
				var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

				if (dest.nodeType !== 1) {
					return;
				}

				// 1. Copy private data: events, handlers, etc.
				if (data_priv.hasData(src)) {
					pdataOld = data_priv.access(src);
					pdataCur = data_priv.set(dest, pdataOld);
					events = pdataOld.events;

					if (events) {
						delete pdataCur.handle;
						pdataCur.events = {};

						for (type in events) {
							for (i = 0, l = events[type].length; i < l; i++) {
								jQuery.event.add(dest, type, events[type][i]);
							}
						}
					}
				}

				// 2. Copy user data
				if (data_user.hasData(src)) {
					udataOld = data_user.access(src);
					udataCur = jQuery.extend({}, udataOld);

					data_user.set(dest, udataCur);
				}
			}

			function getAll(context, tag) {
				var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") :
					context.querySelectorAll ? context.querySelectorAll(tag || "*") :
						[];

				return tag === undefined || tag && jQuery.nodeName(context, tag) ?
					jQuery.merge([context], ret) :
					ret;
			}

			// Fix IE bugs, see support tests
			function fixInput(src, dest) {
				var nodeName = dest.nodeName.toLowerCase();

				// Fails to persist the checked state of a cloned checkbox or radio button.
				if (nodeName === "input" && rcheckableType.test(src.type)) {
					dest.checked = src.checked;

					// Fails to return the selected option to the default selected state when cloning options
				} else if (nodeName === "input" || nodeName === "textarea") {
					dest.defaultValue = src.defaultValue;
				}
			}

			jQuery.extend({
				clone: function (elem, dataAndEvents, deepDataAndEvents) {
					var i, l, srcElements, destElements,
						clone = elem.cloneNode(true),
						inPage = jQuery.contains(elem.ownerDocument, elem);

					// Fix IE cloning issues
					if (!support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc(elem)) {

						// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
						destElements = getAll(clone);
						srcElements = getAll(elem);

						for (i = 0, l = srcElements.length; i < l; i++) {
							fixInput(srcElements[i], destElements[i]);
						}
					}

					// Copy the events from the original to the clone
					if (dataAndEvents) {
						if (deepDataAndEvents) {
							srcElements = srcElements || getAll(elem);
							destElements = destElements || getAll(clone);

							for (i = 0, l = srcElements.length; i < l; i++) {
								cloneCopyEvent(srcElements[i], destElements[i]);
							}
						} else {
							cloneCopyEvent(elem, clone);
						}
					}

					// Preserve script evaluation history
					destElements = getAll(clone, "script");
					if (destElements.length > 0) {
						setGlobalEval(destElements, !inPage && getAll(elem, "script"));
					}

					// Return the cloned set
					return clone;
				},

				buildFragment: function (elems, context, scripts, selection) {
					var elem, tmp, tag, wrap, contains, j,
						fragment = context.createDocumentFragment(),
						nodes = [],
						i = 0,
						l = elems.length;

					for (; i < l; i++) {
						elem = elems[i];

						if (elem || elem === 0) {

							// Add nodes directly
							if (jQuery.type(elem) === "object") {
								// Support: QtWebKit, PhantomJS
								// push.apply(_, arraylike) throws on ancient WebKit
								jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

								// Convert non-html into a text node
							} else if (!rhtml.test(elem)) {
								nodes.push(context.createTextNode(elem));

								// Convert html into DOM nodes
							} else {
								tmp = tmp || fragment.appendChild(context.createElement("div"));

								// Deserialize a standard representation
								tag = ( rtagName.exec(elem) || ["", ""] )[1].toLowerCase();
								wrap = wrapMap[tag] || wrapMap._default;
								tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];

								// Descend through wrappers to the right content
								j = wrap[0];
								while (j--) {
									tmp = tmp.lastChild;
								}

								// Support: QtWebKit, PhantomJS
								// push.apply(_, arraylike) throws on ancient WebKit
								jQuery.merge(nodes, tmp.childNodes);

								// Remember the top-level container
								tmp = fragment.firstChild;

								// Ensure the created nodes are orphaned (#12392)
								tmp.textContent = "";
							}
						}
					}

					// Remove wrapper from fragment
					fragment.textContent = "";

					i = 0;
					while ((elem = nodes[i++])) {

						// #4087 - If origin and destination elements are the same, and this is
						// that element, do not do anything
						if (selection && jQuery.inArray(elem, selection) !== -1) {
							continue;
						}

						contains = jQuery.contains(elem.ownerDocument, elem);

						// Append to fragment
						tmp = getAll(fragment.appendChild(elem), "script");

						// Preserve script evaluation history
						if (contains) {
							setGlobalEval(tmp);
						}

						// Capture executables
						if (scripts) {
							j = 0;
							while ((elem = tmp[j++])) {
								if (rscriptType.test(elem.type || "")) {
									scripts.push(elem);
								}
							}
						}
					}

					return fragment;
				},

				cleanData: function (elems) {
					var data, elem, type, key,
						special = jQuery.event.special,
						i = 0;

					for (; (elem = elems[i]) !== undefined; i++) {
						if (jQuery.acceptData(elem)) {
							key = elem[data_priv.expando];

							if (key && (data = data_priv.cache[key])) {
								if (data.events) {
									for (type in data.events) {
										if (special[type]) {
											jQuery.event.remove(elem, type);

											// This is a shortcut to avoid jQuery.event.remove's overhead
										} else {
											jQuery.removeEvent(elem, type, data.handle);
										}
									}
								}
								if (data_priv.cache[key]) {
									// Discard any remaining `private` data
									delete data_priv.cache[key];
								}
							}
						}
						// Discard any remaining `user` data
						delete data_user.cache[elem[data_user.expando]];
					}
				}
			});

			jQuery.fn.extend({
				text: function (value) {
					return access(this, function (value) {
						return value === undefined ?
							jQuery.text(this) :
							this.empty().each(function () {
								if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
									this.textContent = value;
								}
							});
					}, null, value, arguments.length);
				},

				append: function () {
					return this.domManip(arguments, function (elem) {
						if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
							var target = manipulationTarget(this, elem);
							target.appendChild(elem);
						}
					});
				},

				prepend: function () {
					return this.domManip(arguments, function (elem) {
						if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
							var target = manipulationTarget(this, elem);
							target.insertBefore(elem, target.firstChild);
						}
					});
				},

				before: function () {
					return this.domManip(arguments, function (elem) {
						if (this.parentNode) {
							this.parentNode.insertBefore(elem, this);
						}
					});
				},

				after: function () {
					return this.domManip(arguments, function (elem) {
						if (this.parentNode) {
							this.parentNode.insertBefore(elem, this.nextSibling);
						}
					});
				},

				remove: function (selector, keepData /* Internal Use Only */) {
					var elem,
						elems = selector ? jQuery.filter(selector, this) : this,
						i = 0;

					for (; (elem = elems[i]) != null; i++) {
						if (!keepData && elem.nodeType === 1) {
							jQuery.cleanData(getAll(elem));
						}

						if (elem.parentNode) {
							if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
								setGlobalEval(getAll(elem, "script"));
							}
							elem.parentNode.removeChild(elem);
						}
					}

					return this;
				},

				empty: function () {
					var elem,
						i = 0;

					for (; (elem = this[i]) != null; i++) {
						if (elem.nodeType === 1) {

							// Prevent memory leaks
							jQuery.cleanData(getAll(elem, false));

							// Remove any remaining nodes
							elem.textContent = "";
						}
					}

					return this;
				},

				clone: function (dataAndEvents, deepDataAndEvents) {
					dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
					deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

					return this.map(function () {
						return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
					});
				},

				html: function (value) {
					return access(this, function (value) {
						var elem = this[0] || {},
							i = 0,
							l = this.length;

						if (value === undefined && elem.nodeType === 1) {
							return elem.innerHTML;
						}

						// See if we can take a shortcut and just use innerHTML
						if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[( rtagName.exec(value) || ["", ""] )[1].toLowerCase()]) {

							value = value.replace(rxhtmlTag, "<$1></$2>");

							try {
								for (; i < l; i++) {
									elem = this[i] || {};

									// Remove element nodes and prevent memory leaks
									if (elem.nodeType === 1) {
										jQuery.cleanData(getAll(elem, false));
										elem.innerHTML = value;
									}
								}

								elem = 0;

								// If using innerHTML throws an exception, use the fallback method
							} catch (e) {
							}
						}

						if (elem) {
							this.empty().append(value);
						}
					}, null, value, arguments.length);
				},

				replaceWith: function () {
					var arg = arguments[0];

					// Make the changes, replacing each context element with the new content
					this.domManip(arguments, function (elem) {
						arg = this.parentNode;

						jQuery.cleanData(getAll(this));

						if (arg) {
							arg.replaceChild(elem, this);
						}
					});

					// Force removal if there was no new content (e.g., from empty arguments)
					return arg && (arg.length || arg.nodeType) ? this : this.remove();
				},

				detach: function (selector) {
					return this.remove(selector, true);
				},

				domManip: function (args, callback) {

					// Flatten any nested arrays
					args = concat.apply([], args);

					var fragment, first, scripts, hasScripts, node, doc,
						i = 0,
						l = this.length,
						set = this,
						iNoClone = l - 1,
						value = args[0],
						isFunction = jQuery.isFunction(value);

					// We can't cloneNode fragments that contain checked, in WebKit
					if (isFunction ||
						( l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value) )) {
						return this.each(function (index) {
							var self = set.eq(index);
							if (isFunction) {
								args[0] = value.call(this, index, self.html());
							}
							self.domManip(args, callback);
						});
					}

					if (l) {
						fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
						first = fragment.firstChild;

						if (fragment.childNodes.length === 1) {
							fragment = first;
						}

						if (first) {
							scripts = jQuery.map(getAll(fragment, "script"), disableScript);
							hasScripts = scripts.length;

							// Use the original fragment for the last item instead of the first because it can end up
							// being emptied incorrectly in certain situations (#8070).
							for (; i < l; i++) {
								node = fragment;

								if (i !== iNoClone) {
									node = jQuery.clone(node, true, true);

									// Keep references to cloned scripts for later restoration
									if (hasScripts) {
										// Support: QtWebKit
										// jQuery.merge because push.apply(_, arraylike) throws
										jQuery.merge(scripts, getAll(node, "script"));
									}
								}

								callback.call(this[i], node, i);
							}

							if (hasScripts) {
								doc = scripts[scripts.length - 1].ownerDocument;

								// Reenable scripts
								jQuery.map(scripts, restoreScript);

								// Evaluate executable scripts on first document insertion
								for (i = 0; i < hasScripts; i++) {
									node = scripts[i];
									if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {

										if (node.src) {
											// Optional AJAX dependency, but won't run scripts if not present
											if (jQuery._evalUrl) {
												jQuery._evalUrl(node.src);
											}
										} else {
											jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
										}
									}
								}
							}
						}
					}

					return this;
				}
			});

			jQuery.each({
				appendTo: "append",
				prependTo: "prepend",
				insertBefore: "before",
				insertAfter: "after",
				replaceAll: "replaceWith"
			}, function (name, original) {
				jQuery.fn[name] = function (selector) {
					var elems,
						ret = [],
						insert = jQuery(selector),
						last = insert.length - 1,
						i = 0;

					for (; i <= last; i++) {
						elems = i === last ? this : this.clone(true);
						jQuery(insert[i])[original](elems);

						// Support: QtWebKit
						// .get() because push.apply(_, arraylike) throws
						push.apply(ret, elems.get());
					}

					return this.pushStack(ret);
				};
			});


			var iframe,
				elemdisplay = {};

			/**
			 * Retrieve the actual display of a element
			 * @param {String} name nodeName of the element
			 * @param {Object} doc Document object
			 */
			// Called only from within defaultDisplay
			function actualDisplay(name, doc) {
				var style,
					elem = jQuery(doc.createElement(name)).appendTo(doc.body),

				// getDefaultComputedStyle might be reliably used only on attached element
					display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle(elem[0]) ) ?

						// Use of this method is a temporary fix (more like optimization) until something better comes along,
						// since it was removed from specification and supported only in FF
						style.display : jQuery.css(elem[0], "display");

				// We don't have any data stored on the element,
				// so use "detach" method as fast way to get rid of the element
				elem.detach();

				return display;
			}

			/**
			 * Try to determine the default display value of an element
			 * @param {String} nodeName
			 */
			function defaultDisplay(nodeName) {
				var doc = document,
					display = elemdisplay[nodeName];

				if (!display) {
					display = actualDisplay(nodeName, doc);

					// If the simple way fails, read from inside an iframe
					if (display === "none" || !display) {

						// Use the already-created iframe if possible
						iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

						// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
						doc = iframe[0].contentDocument;

						// Support: IE
						doc.write();
						doc.close();

						display = actualDisplay(nodeName, doc);
						iframe.detach();
					}

					// Store the correct default display
					elemdisplay[nodeName] = display;
				}

				return display;
			}

			var rmargin = (/^margin/);

			var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

			var getStyles = function (elem) {
				// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
				// IE throws on elements created in popups
				// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
				if (elem.ownerDocument.defaultView.opener) {
					return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
				}

				return window.getComputedStyle(elem, null);
			};


			function curCSS(elem, name, computed) {
				var width, minWidth, maxWidth, ret,
					style = elem.style;

				computed = computed || getStyles(elem);

				// Support: IE9
				// getPropertyValue is only needed for .css('filter') (#12537)
				if (computed) {
					ret = computed.getPropertyValue(name) || computed[name];
				}

				if (computed) {

					if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
						ret = jQuery.style(elem, name);
					}

					// Support: iOS < 6
					// A tribute to the "awesome hack by Dean Edwards"
					// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
					// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
					if (rnumnonpx.test(ret) && rmargin.test(name)) {

						// Remember the original values
						width = style.width;
						minWidth = style.minWidth;
						maxWidth = style.maxWidth;

						// Put in the new values to get a computed value out
						style.minWidth = style.maxWidth = style.width = ret;
						ret = computed.width;

						// Revert the changed values
						style.width = width;
						style.minWidth = minWidth;
						style.maxWidth = maxWidth;
					}
				}

				return ret !== undefined ?
					// Support: IE
					// IE returns zIndex value as an integer.
				ret + "" :
					ret;
			}


			function addGetHookIf(conditionFn, hookFn) {
				// Define the hook, we'll check on the first run if it's really needed.
				return {
					get: function () {
						if (conditionFn()) {
							// Hook not needed (or it's not possible to use it due
							// to missing dependency), remove it.
							delete this.get;
							return;
						}

						// Hook needed; redefine it so that the support test is not executed again.
						return (this.get = hookFn).apply(this, arguments);
					}
				};
			}


			(function () {
				var pixelPositionVal, boxSizingReliableVal,
					docElem = document.documentElement,
					container = document.createElement("div"),
					div = document.createElement("div");

				if (!div.style) {
					return;
				}

				// Support: IE9-11+
				// Style of cloned element affects source element cloned (#8908)
				div.style.backgroundClip = "content-box";
				div.cloneNode(true).style.backgroundClip = "";
				support.clearCloneStyle = div.style.backgroundClip === "content-box";

				container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
					"position:absolute";
				container.appendChild(div);

				// Executing both pixelPosition & boxSizingReliable tests require only one layout
				// so they're executed at the same time to save the second computation.
				function computePixelPositionAndBoxSizingReliable() {
					div.style.cssText =
						// Support: Firefox<29, Android 2.3
						// Vendor-prefix box-sizing
						"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
						"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
						"border:1px;padding:1px;width:4px;position:absolute";
					div.innerHTML = "";
					docElem.appendChild(container);

					var divStyle = window.getComputedStyle(div, null);
					pixelPositionVal = divStyle.top !== "1%";
					boxSizingReliableVal = divStyle.width === "4px";

					docElem.removeChild(container);
				}

				// Support: node.js jsdom
				// Don't assume that getComputedStyle is a property of the global object
				if (window.getComputedStyle) {
					jQuery.extend(support, {
						pixelPosition: function () {

							// This test is executed only once but we still do memoizing
							// since we can use the boxSizingReliable pre-computing.
							// No need to check if the test was already performed, though.
							computePixelPositionAndBoxSizingReliable();
							return pixelPositionVal;
						},
						boxSizingReliable: function () {
							if (boxSizingReliableVal == null) {
								computePixelPositionAndBoxSizingReliable();
							}
							return boxSizingReliableVal;
						},
						reliableMarginRight: function () {

							// Support: Android 2.3
							// Check if div with explicit width and no margin-right incorrectly
							// gets computed margin-right based on width of container. (#3333)
							// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
							// This support function is only executed once so no memoizing is needed.
							var ret,
								marginDiv = div.appendChild(document.createElement("div"));

							// Reset CSS: box-sizing; display; margin; border; padding
							marginDiv.style.cssText = div.style.cssText =
								// Support: Firefox<29, Android 2.3
								// Vendor-prefix box-sizing
								"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
								"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
							marginDiv.style.marginRight = marginDiv.style.width = "0";
							div.style.width = "1px";
							docElem.appendChild(container);

							ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);

							docElem.removeChild(container);
							div.removeChild(marginDiv);

							return ret;
						}
					});
				}
			})();


			// A method for quickly swapping in/out CSS properties to get correct calculations.
			jQuery.swap = function (elem, options, callback, args) {
				var ret, name,
					old = {};

				// Remember the old values, and insert the new ones
				for (name in options) {
					old[name] = elem.style[name];
					elem.style[name] = options[name];
				}

				ret = callback.apply(elem, args || []);

				// Revert the old values
				for (name in options) {
					elem.style[name] = old[name];
				}

				return ret;
			};


			var
			// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
			// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
				rdisplayswap = /^(none|table(?!-c[ea]).+)/,
				rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
				rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),

				cssShow = {position: "absolute", visibility: "hidden", display: "block"},
				cssNormalTransform = {
					letterSpacing: "0",
					fontWeight: "400"
				},

				cssPrefixes = ["Webkit", "O", "Moz", "ms"];

			// Return a css property mapped to a potentially vendor prefixed property
			function vendorPropName(style, name) {

				// Shortcut for names that are not vendor prefixed
				if (name in style) {
					return name;
				}

				// Check for vendor prefixed names
				var capName = name[0].toUpperCase() + name.slice(1),
					origName = name,
					i = cssPrefixes.length;

				while (i--) {
					name = cssPrefixes[i] + capName;
					if (name in style) {
						return name;
					}
				}

				return origName;
			}

			function setPositiveNumber(elem, value, subtract) {
				var matches = rnumsplit.exec(value);
				return matches ?
					// Guard against undefined "subtract", e.g., when used as in cssHooks
				Math.max(0, matches[1] - ( subtract || 0 )) + ( matches[2] || "px" ) :
					value;
			}

			function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
				var i = extra === ( isBorderBox ? "border" : "content" ) ?
						// If we already have the right measurement, avoid augmentation
						4 :
						// Otherwise initialize for horizontal or vertical properties
						name === "width" ? 1 : 0,

					val = 0;

				for (; i < 4; i += 2) {
					// Both box models exclude margin, so add it if we want it
					if (extra === "margin") {
						val += jQuery.css(elem, extra + cssExpand[i], true, styles);
					}

					if (isBorderBox) {
						// border-box includes padding, so remove it if we want content
						if (extra === "content") {
							val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
						}

						// At this point, extra isn't border nor margin, so remove border
						if (extra !== "margin") {
							val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
						}
					} else {
						// At this point, extra isn't content, so add padding
						val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

						// At this point, extra isn't content nor padding, so add border
						if (extra !== "padding") {
							val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
						}
					}
				}

				return val;
			}

			function getWidthOrHeight(elem, name, extra) {

				// Start with offset property, which is equivalent to the border-box value
				var valueIsBorderBox = true,
					val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
					styles = getStyles(elem),
					isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

				// Some non-html elements return undefined for offsetWidth, so check for null/undefined
				// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
				// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
				if (val <= 0 || val == null) {
					// Fall back to computed then uncomputed css if necessary
					val = curCSS(elem, name, styles);
					if (val < 0 || val == null) {
						val = elem.style[name];
					}

					// Computed unit is not pixels. Stop here and return.
					if (rnumnonpx.test(val)) {
						return val;
					}

					// Check for style in case a browser which returns unreliable values
					// for getComputedStyle silently falls back to the reliable elem.style
					valueIsBorderBox = isBorderBox &&
						( support.boxSizingReliable() || val === elem.style[name] );

					// Normalize "", auto, and prepare for extra
					val = parseFloat(val) || 0;
				}

				// Use the active box-sizing model to add/subtract irrelevant styles
				return ( val +
						augmentWidthOrHeight(
							elem,
							name,
							extra || ( isBorderBox ? "border" : "content" ),
							valueIsBorderBox,
							styles
						)
					) + "px";
			}

			function showHide(elements, show) {
				var display, elem, hidden,
					values = [],
					index = 0,
					length = elements.length;

				for (; index < length; index++) {
					elem = elements[index];
					if (!elem.style) {
						continue;
					}

					values[index] = data_priv.get(elem, "olddisplay");
					display = elem.style.display;
					if (show) {
						// Reset the inline display of this element to learn if it is
						// being hidden by cascaded rules or not
						if (!values[index] && display === "none") {
							elem.style.display = "";
						}

						// Set elements which have been overridden with display: none
						// in a stylesheet to whatever the default browser style is
						// for such an element
						if (elem.style.display === "" && isHidden(elem)) {
							values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
						}
					} else {
						hidden = isHidden(elem);

						if (display !== "none" || !hidden) {
							data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
						}
					}
				}

				// Set the display of most of the elements in a second loop
				// to avoid the constant reflow
				for (index = 0; index < length; index++) {
					elem = elements[index];
					if (!elem.style) {
						continue;
					}
					if (!show || elem.style.display === "none" || elem.style.display === "") {
						elem.style.display = show ? values[index] || "" : "none";
					}
				}

				return elements;
			}

			jQuery.extend({

				// Add in style property hooks for overriding the default
				// behavior of getting and setting a style property
				cssHooks: {
					opacity: {
						get: function (elem, computed) {
							if (computed) {

								// We should always get a number back from opacity
								var ret = curCSS(elem, "opacity");
								return ret === "" ? "1" : ret;
							}
						}
					}
				},

				// Don't automatically add "px" to these possibly-unitless properties
				cssNumber: {
					"columnCount": true,
					"fillOpacity": true,
					"flexGrow": true,
					"flexShrink": true,
					"fontWeight": true,
					"lineHeight": true,
					"opacity": true,
					"order": true,
					"orphans": true,
					"widows": true,
					"zIndex": true,
					"zoom": true
				},

				// Add in properties whose names you wish to fix before
				// setting or getting the value
				cssProps: {
					"float": "cssFloat"
				},

				// Get and set the style property on a DOM Node
				style: function (elem, name, value, extra) {

					// Don't set styles on text and comment nodes
					if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
						return;
					}

					// Make sure that we're working with the right name
					var ret, type, hooks,
						origName = jQuery.camelCase(name),
						style = elem.style;

					name = jQuery.cssProps[origName] || ( jQuery.cssProps[origName] = vendorPropName(style, origName) );

					// Gets hook for the prefixed version, then unprefixed version
					hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

					// Check if we're setting a value
					if (value !== undefined) {
						type = typeof value;

						// Convert "+=" or "-=" to relative numbers (#7345)
						if (type === "string" && (ret = rrelNum.exec(value))) {
							value = ( ret[1] + 1 ) * ret[2] + parseFloat(jQuery.css(elem, name));
							// Fixes bug #9237
							type = "number";
						}

						// Make sure that null and NaN values aren't set (#7116)
						if (value == null || value !== value) {
							return;
						}

						// If a number, add 'px' to the (except for certain CSS properties)
						if (type === "number" && !jQuery.cssNumber[origName]) {
							value += "px";
						}

						// Support: IE9-11+
						// background-* props affect original clone's values
						if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
							style[name] = "inherit";
						}

						// If a hook was provided, use that value, otherwise just set the specified value
						if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
							style[name] = value;
						}

					} else {
						// If a hook was provided get the non-computed value from there
						if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
							return ret;
						}

						// Otherwise just get the value from the style object
						return style[name];
					}
				},

				css: function (elem, name, extra, styles) {
					var val, num, hooks,
						origName = jQuery.camelCase(name);

					// Make sure that we're working with the right name
					name = jQuery.cssProps[origName] || ( jQuery.cssProps[origName] = vendorPropName(elem.style, origName) );

					// Try prefixed name followed by the unprefixed name
					hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

					// If a hook was provided get the computed value from there
					if (hooks && "get" in hooks) {
						val = hooks.get(elem, true, extra);
					}

					// Otherwise, if a way to get the computed value exists, use that
					if (val === undefined) {
						val = curCSS(elem, name, styles);
					}

					// Convert "normal" to computed value
					if (val === "normal" && name in cssNormalTransform) {
						val = cssNormalTransform[name];
					}

					// Make numeric if forced or a qualifier was provided and val looks numeric
					if (extra === "" || extra) {
						num = parseFloat(val);
						return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
					}
					return val;
				}
			});

			jQuery.each(["height", "width"], function (i, name) {
				jQuery.cssHooks[name] = {
					get: function (elem, computed, extra) {
						if (computed) {

							// Certain elements can have dimension info if we invisibly show them
							// but it must have a current display style that would benefit
							return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ?
								jQuery.swap(elem, cssShow, function () {
									return getWidthOrHeight(elem, name, extra);
								}) :
								getWidthOrHeight(elem, name, extra);
						}
					},

					set: function (elem, value, extra) {
						var styles = extra && getStyles(elem);
						return setPositiveNumber(elem, value, extra ?
								augmentWidthOrHeight(
									elem,
									name,
									extra,
									jQuery.css(elem, "boxSizing", false, styles) === "border-box",
									styles
								) : 0
						);
					}
				};
			});

			// Support: Android 2.3
			jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight,
				function (elem, computed) {
					if (computed) {
						return jQuery.swap(elem, {"display": "inline-block"},
							curCSS, [elem, "marginRight"]);
					}
				}
			);

			// These hooks are used by animate to expand properties
			jQuery.each({
				margin: "",
				padding: "",
				border: "Width"
			}, function (prefix, suffix) {
				jQuery.cssHooks[prefix + suffix] = {
					expand: function (value) {
						var i = 0,
							expanded = {},

						// Assumes a single number if not a string
							parts = typeof value === "string" ? value.split(" ") : [value];

						for (; i < 4; i++) {
							expanded[prefix + cssExpand[i] + suffix] =
								parts[i] || parts[i - 2] || parts[0];
						}

						return expanded;
					}
				};

				if (!rmargin.test(prefix)) {
					jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
				}
			});

			jQuery.fn.extend({
				css: function (name, value) {
					return access(this, function (elem, name, value) {
						var styles, len,
							map = {},
							i = 0;

						if (jQuery.isArray(name)) {
							styles = getStyles(elem);
							len = name.length;

							for (; i < len; i++) {
								map[name[i]] = jQuery.css(elem, name[i], false, styles);
							}

							return map;
						}

						return value !== undefined ?
							jQuery.style(elem, name, value) :
							jQuery.css(elem, name);
					}, name, value, arguments.length > 1);
				},
				show: function () {
					return showHide(this, true);
				},
				hide: function () {
					return showHide(this);
				},
				toggle: function (state) {
					if (typeof state === "boolean") {
						return state ? this.show() : this.hide();
					}

					return this.each(function () {
						if (isHidden(this)) {
							jQuery(this).show();
						} else {
							jQuery(this).hide();
						}
					});
				}
			});


			function Tween(elem, options, prop, end, easing) {
				return new Tween.prototype.init(elem, options, prop, end, easing);
			}

			jQuery.Tween = Tween;

			Tween.prototype = {
				constructor: Tween,
				init: function (elem, options, prop, end, easing, unit) {
					this.elem = elem;
					this.prop = prop;
					this.easing = easing || "swing";
					this.options = options;
					this.start = this.now = this.cur();
					this.end = end;
					this.unit = unit || ( jQuery.cssNumber[prop] ? "" : "px" );
				},
				cur: function () {
					var hooks = Tween.propHooks[this.prop];

					return hooks && hooks.get ?
						hooks.get(this) :
						Tween.propHooks._default.get(this);
				},
				run: function (percent) {
					var eased,
						hooks = Tween.propHooks[this.prop];

					if (this.options.duration) {
						this.pos = eased = jQuery.easing[this.easing](
							percent, this.options.duration * percent, 0, 1, this.options.duration
						);
					} else {
						this.pos = eased = percent;
					}
					this.now = ( this.end - this.start ) * eased + this.start;

					if (this.options.step) {
						this.options.step.call(this.elem, this.now, this);
					}

					if (hooks && hooks.set) {
						hooks.set(this);
					} else {
						Tween.propHooks._default.set(this);
					}
					return this;
				}
			};

			Tween.prototype.init.prototype = Tween.prototype;

			Tween.propHooks = {
				_default: {
					get: function (tween) {
						var result;

						if (tween.elem[tween.prop] != null &&
							(!tween.elem.style || tween.elem.style[tween.prop] == null)) {
							return tween.elem[tween.prop];
						}

						// Passing an empty string as a 3rd parameter to .css will automatically
						// attempt a parseFloat and fallback to a string if the parse fails.
						// Simple values such as "10px" are parsed to Float;
						// complex values such as "rotate(1rad)" are returned as-is.
						result = jQuery.css(tween.elem, tween.prop, "");
						// Empty strings, null, undefined and "auto" are converted to 0.
						return !result || result === "auto" ? 0 : result;
					},
					set: function (tween) {
						// Use step hook for back compat.
						// Use cssHook if its there.
						// Use .style if available and use plain properties where available.
						if (jQuery.fx.step[tween.prop]) {
							jQuery.fx.step[tween.prop](tween);
						} else if (tween.elem.style && ( tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop] )) {
							jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
						} else {
							tween.elem[tween.prop] = tween.now;
						}
					}
				}
			};

			// Support: IE9
			// Panic based approach to setting things on disconnected nodes
			Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
				set: function (tween) {
					if (tween.elem.nodeType && tween.elem.parentNode) {
						tween.elem[tween.prop] = tween.now;
					}
				}
			};

			jQuery.easing = {
				linear: function (p) {
					return p;
				},
				swing: function (p) {
					return 0.5 - Math.cos(p * Math.PI) / 2;
				}
			};

			jQuery.fx = Tween.prototype.init;

			// Back Compat <1.8 extension point
			jQuery.fx.step = {};


			var
				fxNow, timerId,
				rfxtypes = /^(?:toggle|show|hide)$/,
				rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
				rrun = /queueHooks$/,
				animationPrefilters = [defaultPrefilter],
				tweeners = {
					"*": [function (prop, value) {
						var tween = this.createTween(prop, value),
							target = tween.cur(),
							parts = rfxnum.exec(value),
							unit = parts && parts[3] || ( jQuery.cssNumber[prop] ? "" : "px" ),

						// Starting value computation is required for potential unit mismatches
							start = ( jQuery.cssNumber[prop] || unit !== "px" && +target ) &&
								rfxnum.exec(jQuery.css(tween.elem, prop)),
							scale = 1,
							maxIterations = 20;

						if (start && start[3] !== unit) {
							// Trust units reported by jQuery.css
							unit = unit || start[3];

							// Make sure we update the tween properties later on
							parts = parts || [];

							// Iteratively approximate from a nonzero starting point
							start = +target || 1;

							do {
								// If previous iteration zeroed out, double until we get *something*.
								// Use string for doubling so we don't accidentally see scale as unchanged below
								scale = scale || ".5";

								// Adjust and apply
								start = start / scale;
								jQuery.style(tween.elem, prop, start + unit);

								// Update scale, tolerating zero or NaN from tween.cur(),
								// break the loop if scale is unchanged or perfect, or if we've just had enough
							} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
						}

						// Update tween properties
						if (parts) {
							start = tween.start = +start || +target || 0;
							tween.unit = unit;
							// If a +=/-= token was provided, we're doing a relative animation
							tween.end = parts[1] ?
							start + ( parts[1] + 1 ) * parts[2] :
								+parts[2];
						}

						return tween;
					}]
				};

			// Animations created synchronously will run synchronously
			function createFxNow() {
				setTimeout(function () {
					fxNow = undefined;
				});
				return ( fxNow = jQuery.now() );
			}

			// Generate parameters to create a standard animation
			function genFx(type, includeWidth) {
				var which,
					i = 0,
					attrs = {height: type};

				// If we include width, step value is 1 to do all cssExpand values,
				// otherwise step value is 2 to skip over Left and Right
				includeWidth = includeWidth ? 1 : 0;
				for (; i < 4; i += 2 - includeWidth) {
					which = cssExpand[i];
					attrs["margin" + which] = attrs["padding" + which] = type;
				}

				if (includeWidth) {
					attrs.opacity = attrs.width = type;
				}

				return attrs;
			}

			function createTween(value, prop, animation) {
				var tween,
					collection = ( tweeners[prop] || [] ).concat(tweeners["*"]),
					index = 0,
					length = collection.length;
				for (; index < length; index++) {
					if ((tween = collection[index].call(animation, prop, value))) {

						// We're done with this property
						return tween;
					}
				}
			}

			function defaultPrefilter(elem, props, opts) {
				/* jshint validthis: true */
				var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
					anim = this,
					orig = {},
					style = elem.style,
					hidden = elem.nodeType && isHidden(elem),
					dataShow = data_priv.get(elem, "fxshow");

				// Handle queue: false promises
				if (!opts.queue) {
					hooks = jQuery._queueHooks(elem, "fx");
					if (hooks.unqueued == null) {
						hooks.unqueued = 0;
						oldfire = hooks.empty.fire;
						hooks.empty.fire = function () {
							if (!hooks.unqueued) {
								oldfire();
							}
						};
					}
					hooks.unqueued++;

					anim.always(function () {
						// Ensure the complete handler is called before this completes
						anim.always(function () {
							hooks.unqueued--;
							if (!jQuery.queue(elem, "fx").length) {
								hooks.empty.fire();
							}
						});
					});
				}

				// Height/width overflow pass
				if (elem.nodeType === 1 && ( "height" in props || "width" in props )) {
					// Make sure that nothing sneaks out
					// Record all 3 overflow attributes because IE9-10 do not
					// change the overflow attribute when overflowX and
					// overflowY are set to the same value
					opts.overflow = [style.overflow, style.overflowX, style.overflowY];

					// Set display property to inline-block for height/width
					// animations on inline elements that are having width/height animated
					display = jQuery.css(elem, "display");

					// Test default display if display is currently "none"
					checkDisplay = display === "none" ?
					data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

					if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
						style.display = "inline-block";
					}
				}

				if (opts.overflow) {
					style.overflow = "hidden";
					anim.always(function () {
						style.overflow = opts.overflow[0];
						style.overflowX = opts.overflow[1];
						style.overflowY = opts.overflow[2];
					});
				}

				// show/hide pass
				for (prop in props) {
					value = props[prop];
					if (rfxtypes.exec(value)) {
						delete props[prop];
						toggle = toggle || value === "toggle";
						if (value === ( hidden ? "hide" : "show" )) {

							// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
							if (value === "show" && dataShow && dataShow[prop] !== undefined) {
								hidden = true;
							} else {
								continue;
							}
						}
						orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

						// Any non-fx value stops us from restoring the original display value
					} else {
						display = undefined;
					}
				}

				if (!jQuery.isEmptyObject(orig)) {
					if (dataShow) {
						if ("hidden" in dataShow) {
							hidden = dataShow.hidden;
						}
					} else {
						dataShow = data_priv.access(elem, "fxshow", {});
					}

					// Store state if its toggle - enables .stop().toggle() to "reverse"
					if (toggle) {
						dataShow.hidden = !hidden;
					}
					if (hidden) {
						jQuery(elem).show();
					} else {
						anim.done(function () {
							jQuery(elem).hide();
						});
					}
					anim.done(function () {
						var prop;

						data_priv.remove(elem, "fxshow");
						for (prop in orig) {
							jQuery.style(elem, prop, orig[prop]);
						}
					});
					for (prop in orig) {
						tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

						if (!( prop in dataShow )) {
							dataShow[prop] = tween.start;
							if (hidden) {
								tween.end = tween.start;
								tween.start = prop === "width" || prop === "height" ? 1 : 0;
							}
						}
					}

					// If this is a noop like .hide().hide(), restore an overwritten display value
				} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
					style.display = display;
				}
			}

			function propFilter(props, specialEasing) {
				var index, name, easing, value, hooks;

				// camelCase, specialEasing and expand cssHook pass
				for (index in props) {
					name = jQuery.camelCase(index);
					easing = specialEasing[name];
					value = props[index];
					if (jQuery.isArray(value)) {
						easing = value[1];
						value = props[index] = value[0];
					}

					if (index !== name) {
						props[name] = value;
						delete props[index];
					}

					hooks = jQuery.cssHooks[name];
					if (hooks && "expand" in hooks) {
						value = hooks.expand(value);
						delete props[name];

						// Not quite $.extend, this won't overwrite existing keys.
						// Reusing 'index' because we have the correct "name"
						for (index in value) {
							if (!( index in props )) {
								props[index] = value[index];
								specialEasing[index] = easing;
							}
						}
					} else {
						specialEasing[name] = easing;
					}
				}
			}

			function Animation(elem, properties, options) {
				var result,
					stopped,
					index = 0,
					length = animationPrefilters.length,
					deferred = jQuery.Deferred().always(function () {
						// Don't match elem in the :animated selector
						delete tick.elem;
					}),
					tick = function () {
						if (stopped) {
							return false;
						}
						var currentTime = fxNow || createFxNow(),
							remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
						// Support: Android 2.3
						// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
							temp = remaining / animation.duration || 0,
							percent = 1 - temp,
							index = 0,
							length = animation.tweens.length;

						for (; index < length; index++) {
							animation.tweens[index].run(percent);
						}

						deferred.notifyWith(elem, [animation, percent, remaining]);

						if (percent < 1 && length) {
							return remaining;
						} else {
							deferred.resolveWith(elem, [animation]);
							return false;
						}
					},
					animation = deferred.promise({
						elem: elem,
						props: jQuery.extend({}, properties),
						opts: jQuery.extend(true, {specialEasing: {}}, options),
						originalProperties: properties,
						originalOptions: options,
						startTime: fxNow || createFxNow(),
						duration: options.duration,
						tweens: [],
						createTween: function (prop, end) {
							var tween = jQuery.Tween(elem, animation.opts, prop, end,
								animation.opts.specialEasing[prop] || animation.opts.easing);
							animation.tweens.push(tween);
							return tween;
						},
						stop: function (gotoEnd) {
							var index = 0,
							// If we are going to the end, we want to run all the tweens
							// otherwise we skip this part
								length = gotoEnd ? animation.tweens.length : 0;
							if (stopped) {
								return this;
							}
							stopped = true;
							for (; index < length; index++) {
								animation.tweens[index].run(1);
							}

							// Resolve when we played the last frame; otherwise, reject
							if (gotoEnd) {
								deferred.resolveWith(elem, [animation, gotoEnd]);
							} else {
								deferred.rejectWith(elem, [animation, gotoEnd]);
							}
							return this;
						}
					}),
					props = animation.props;

				propFilter(props, animation.opts.specialEasing);

				for (; index < length; index++) {
					result = animationPrefilters[index].call(animation, elem, props, animation.opts);
					if (result) {
						return result;
					}
				}

				jQuery.map(props, createTween, animation);

				if (jQuery.isFunction(animation.opts.start)) {
					animation.opts.start.call(elem, animation);
				}

				jQuery.fx.timer(
					jQuery.extend(tick, {
						elem: elem,
						anim: animation,
						queue: animation.opts.queue
					})
				);

				// attach callbacks from options
				return animation.progress(animation.opts.progress)
					.done(animation.opts.done, animation.opts.complete)
					.fail(animation.opts.fail)
					.always(animation.opts.always);
			}

			jQuery.Animation = jQuery.extend(Animation, {

				tweener: function (props, callback) {
					if (jQuery.isFunction(props)) {
						callback = props;
						props = ["*"];
					} else {
						props = props.split(" ");
					}

					var prop,
						index = 0,
						length = props.length;

					for (; index < length; index++) {
						prop = props[index];
						tweeners[prop] = tweeners[prop] || [];
						tweeners[prop].unshift(callback);
					}
				},

				prefilter: function (callback, prepend) {
					if (prepend) {
						animationPrefilters.unshift(callback);
					} else {
						animationPrefilters.push(callback);
					}
				}
			});

			jQuery.speed = function (speed, easing, fn) {
				var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
					complete: fn || !fn && easing ||
					jQuery.isFunction(speed) && speed,
					duration: speed,
					easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
				};

				opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
					opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

				// Normalize opt.queue - true/undefined/null -> "fx"
				if (opt.queue == null || opt.queue === true) {
					opt.queue = "fx";
				}

				// Queueing
				opt.old = opt.complete;

				opt.complete = function () {
					if (jQuery.isFunction(opt.old)) {
						opt.old.call(this);
					}

					if (opt.queue) {
						jQuery.dequeue(this, opt.queue);
					}
				};

				return opt;
			};

			jQuery.fn.extend({
				fadeTo: function (speed, to, easing, callback) {

					// Show any hidden elements after setting opacity to 0
					return this.filter(isHidden).css("opacity", 0).show()

						// Animate to the value specified
						.end().animate({opacity: to}, speed, easing, callback);
				},
				animate: function (prop, speed, easing, callback) {
					var empty = jQuery.isEmptyObject(prop),
						optall = jQuery.speed(speed, easing, callback),
						doAnimation = function () {
							// Operate on a copy of prop so per-property easing won't be lost
							var anim = Animation(this, jQuery.extend({}, prop), optall);

							// Empty animations, or finishing resolves immediately
							if (empty || data_priv.get(this, "finish")) {
								anim.stop(true);
							}
						};
					doAnimation.finish = doAnimation;

					return empty || optall.queue === false ?
						this.each(doAnimation) :
						this.queue(optall.queue, doAnimation);
				},
				stop: function (type, clearQueue, gotoEnd) {
					var stopQueue = function (hooks) {
						var stop = hooks.stop;
						delete hooks.stop;
						stop(gotoEnd);
					};

					if (typeof type !== "string") {
						gotoEnd = clearQueue;
						clearQueue = type;
						type = undefined;
					}
					if (clearQueue && type !== false) {
						this.queue(type || "fx", []);
					}

					return this.each(function () {
						var dequeue = true,
							index = type != null && type + "queueHooks",
							timers = jQuery.timers,
							data = data_priv.get(this);

						if (index) {
							if (data[index] && data[index].stop) {
								stopQueue(data[index]);
							}
						} else {
							for (index in data) {
								if (data[index] && data[index].stop && rrun.test(index)) {
									stopQueue(data[index]);
								}
							}
						}

						for (index = timers.length; index--;) {
							if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
								timers[index].anim.stop(gotoEnd);
								dequeue = false;
								timers.splice(index, 1);
							}
						}

						// Start the next in the queue if the last step wasn't forced.
						// Timers currently will call their complete callbacks, which
						// will dequeue but only if they were gotoEnd.
						if (dequeue || !gotoEnd) {
							jQuery.dequeue(this, type);
						}
					});
				},
				finish: function (type) {
					if (type !== false) {
						type = type || "fx";
					}
					return this.each(function () {
						var index,
							data = data_priv.get(this),
							queue = data[type + "queue"],
							hooks = data[type + "queueHooks"],
							timers = jQuery.timers,
							length = queue ? queue.length : 0;

						// Enable finishing flag on private data
						data.finish = true;

						// Empty the queue first
						jQuery.queue(this, type, []);

						if (hooks && hooks.stop) {
							hooks.stop.call(this, true);
						}

						// Look for any active animations, and finish them
						for (index = timers.length; index--;) {
							if (timers[index].elem === this && timers[index].queue === type) {
								timers[index].anim.stop(true);
								timers.splice(index, 1);
							}
						}

						// Look for any animations in the old queue and finish them
						for (index = 0; index < length; index++) {
							if (queue[index] && queue[index].finish) {
								queue[index].finish.call(this);
							}
						}

						// Turn off finishing flag
						delete data.finish;
					});
				}
			});

			jQuery.each(["toggle", "show", "hide"], function (i, name) {
				var cssFn = jQuery.fn[name];
				jQuery.fn[name] = function (speed, easing, callback) {
					return speed == null || typeof speed === "boolean" ?
						cssFn.apply(this, arguments) :
						this.animate(genFx(name, true), speed, easing, callback);
				};
			});

			// Generate shortcuts for custom animations
			jQuery.each({
				slideDown: genFx("show"),
				slideUp: genFx("hide"),
				slideToggle: genFx("toggle"),
				fadeIn: {opacity: "show"},
				fadeOut: {opacity: "hide"},
				fadeToggle: {opacity: "toggle"}
			}, function (name, props) {
				jQuery.fn[name] = function (speed, easing, callback) {
					return this.animate(props, speed, easing, callback);
				};
			});

			jQuery.timers = [];
			jQuery.fx.tick = function () {
				var timer,
					i = 0,
					timers = jQuery.timers;

				fxNow = jQuery.now();

				for (; i < timers.length; i++) {
					timer = timers[i];
					// Checks the timer has not already been removed
					if (!timer() && timers[i] === timer) {
						timers.splice(i--, 1);
					}
				}

				if (!timers.length) {
					jQuery.fx.stop();
				}
				fxNow = undefined;
			};

			jQuery.fx.timer = function (timer) {
				jQuery.timers.push(timer);
				if (timer()) {
					jQuery.fx.start();
				} else {
					jQuery.timers.pop();
				}
			};

			jQuery.fx.interval = 13;

			jQuery.fx.start = function () {
				if (!timerId) {
					timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
				}
			};

			jQuery.fx.stop = function () {
				clearInterval(timerId);
				timerId = null;
			};

			jQuery.fx.speeds = {
				slow: 600,
				fast: 200,
				// Default speed
				_default: 400
			};


			// Based off of the plugin by Clint Helfers, with permission.
			// http://blindsignals.com/index.php/2009/07/jquery-delay/
			jQuery.fn.delay = function (time, type) {
				time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
				type = type || "fx";

				return this.queue(type, function (next, hooks) {
					var timeout = setTimeout(next, time);
					hooks.stop = function () {
						clearTimeout(timeout);
					};
				});
			};


			(function () {
				var input = document.createElement("input"),
					select = document.createElement("select"),
					opt = select.appendChild(document.createElement("option"));

				input.type = "checkbox";

				// Support: iOS<=5.1, Android<=4.2+
				// Default value for a checkbox should be "on"
				support.checkOn = input.value !== "";

				// Support: IE<=11+
				// Must access selectedIndex to make default options select
				support.optSelected = opt.selected;

				// Support: Android<=2.3
				// Options inside disabled selects are incorrectly marked as disabled
				select.disabled = true;
				support.optDisabled = !opt.disabled;

				// Support: IE<=11+
				// An input loses its value after becoming a radio
				input = document.createElement("input");
				input.value = "t";
				input.type = "radio";
				support.radioValue = input.value === "t";
			})();


			var nodeHook, boolHook,
				attrHandle = jQuery.expr.attrHandle;

			jQuery.fn.extend({
				attr: function (name, value) {
					return access(this, jQuery.attr, name, value, arguments.length > 1);
				},

				removeAttr: function (name) {
					return this.each(function () {
						jQuery.removeAttr(this, name);
					});
				}
			});

			jQuery.extend({
				attr: function (elem, name, value) {
					var hooks, ret,
						nType = elem.nodeType;

					// don't get/set attributes on text, comment and attribute nodes
					if (!elem || nType === 3 || nType === 8 || nType === 2) {
						return;
					}

					// Fallback to prop when attributes are not supported
					if (typeof elem.getAttribute === strundefined) {
						return jQuery.prop(elem, name, value);
					}

					// All attributes are lowercase
					// Grab necessary hook if one is defined
					if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
						name = name.toLowerCase();
						hooks = jQuery.attrHooks[name] ||
							( jQuery.expr.match.bool.test(name) ? boolHook : nodeHook );
					}

					if (value !== undefined) {

						if (value === null) {
							jQuery.removeAttr(elem, name);

						} else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
							return ret;

						} else {
							elem.setAttribute(name, value + "");
							return value;
						}

					} else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
						return ret;

					} else {
						ret = jQuery.find.attr(elem, name);

						// Non-existent attributes return null, we normalize to undefined
						return ret == null ?
							undefined :
							ret;
					}
				},

				removeAttr: function (elem, value) {
					var name, propName,
						i = 0,
						attrNames = value && value.match(rnotwhite);

					if (attrNames && elem.nodeType === 1) {
						while ((name = attrNames[i++])) {
							propName = jQuery.propFix[name] || name;

							// Boolean attributes get special treatment (#10870)
							if (jQuery.expr.match.bool.test(name)) {
								// Set corresponding property to false
								elem[propName] = false;
							}

							elem.removeAttribute(name);
						}
					}
				},

				attrHooks: {
					type: {
						set: function (elem, value) {
							if (!support.radioValue && value === "radio" &&
								jQuery.nodeName(elem, "input")) {
								var val = elem.value;
								elem.setAttribute("type", value);
								if (val) {
									elem.value = val;
								}
								return value;
							}
						}
					}
				}
			});

			// Hooks for boolean attributes
			boolHook = {
				set: function (elem, value, name) {
					if (value === false) {
						// Remove boolean attributes when set to false
						jQuery.removeAttr(elem, name);
					} else {
						elem.setAttribute(name, name);
					}
					return name;
				}
			};
			jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
				var getter = attrHandle[name] || jQuery.find.attr;

				attrHandle[name] = function (elem, name, isXML) {
					var ret, handle;
					if (!isXML) {
						// Avoid an infinite loop by temporarily removing this function from the getter
						handle = attrHandle[name];
						attrHandle[name] = ret;
						ret = getter(elem, name, isXML) != null ?
							name.toLowerCase() :
							null;
						attrHandle[name] = handle;
					}
					return ret;
				};
			});


			var rfocusable = /^(?:input|select|textarea|button)$/i;

			jQuery.fn.extend({
				prop: function (name, value) {
					return access(this, jQuery.prop, name, value, arguments.length > 1);
				},

				removeProp: function (name) {
					return this.each(function () {
						delete this[jQuery.propFix[name] || name];
					});
				}
			});

			jQuery.extend({
				propFix: {
					"for": "htmlFor",
					"class": "className"
				},

				prop: function (elem, name, value) {
					var ret, hooks, notxml,
						nType = elem.nodeType;

					// Don't get/set properties on text, comment and attribute nodes
					if (!elem || nType === 3 || nType === 8 || nType === 2) {
						return;
					}

					notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

					if (notxml) {
						// Fix name and attach hooks
						name = jQuery.propFix[name] || name;
						hooks = jQuery.propHooks[name];
					}

					if (value !== undefined) {
						return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ?
							ret :
							( elem[name] = value );

					} else {
						return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ?
							ret :
							elem[name];
					}
				},

				propHooks: {
					tabIndex: {
						get: function (elem) {
							return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ?
								elem.tabIndex :
								-1;
						}
					}
				}
			});

			if (!support.optSelected) {
				jQuery.propHooks.selected = {
					get: function (elem) {
						var parent = elem.parentNode;
						if (parent && parent.parentNode) {
							parent.parentNode.selectedIndex;
						}
						return null;
					}
				};
			}

			jQuery.each([
				"tabIndex",
				"readOnly",
				"maxLength",
				"cellSpacing",
				"cellPadding",
				"rowSpan",
				"colSpan",
				"useMap",
				"frameBorder",
				"contentEditable"
			], function () {
				jQuery.propFix[this.toLowerCase()] = this;
			});


			var rclass = /[\t\r\n\f]/g;

			jQuery.fn.extend({
				addClass: function (value) {
					var classes, elem, cur, clazz, j, finalValue,
						proceed = typeof value === "string" && value,
						i = 0,
						len = this.length;

					if (jQuery.isFunction(value)) {
						return this.each(function (j) {
							jQuery(this).addClass(value.call(this, j, this.className));
						});
					}

					if (proceed) {
						// The disjunction here is for better compressibility (see removeClass)
						classes = ( value || "" ).match(rnotwhite) || [];

						for (; i < len; i++) {
							elem = this[i];
							cur = elem.nodeType === 1 && ( elem.className ?
										( " " + elem.className + " " ).replace(rclass, " ") :
										" "
								);

							if (cur) {
								j = 0;
								while ((clazz = classes[j++])) {
									if (cur.indexOf(" " + clazz + " ") < 0) {
										cur += clazz + " ";
									}
								}

								// only assign if different to avoid unneeded rendering.
								finalValue = jQuery.trim(cur);
								if (elem.className !== finalValue) {
									elem.className = finalValue;
								}
							}
						}
					}

					return this;
				},

				removeClass: function (value) {
					var classes, elem, cur, clazz, j, finalValue,
						proceed = arguments.length === 0 || typeof value === "string" && value,
						i = 0,
						len = this.length;

					if (jQuery.isFunction(value)) {
						return this.each(function (j) {
							jQuery(this).removeClass(value.call(this, j, this.className));
						});
					}
					if (proceed) {
						classes = ( value || "" ).match(rnotwhite) || [];

						for (; i < len; i++) {
							elem = this[i];
							// This expression is here for better compressibility (see addClass)
							cur = elem.nodeType === 1 && ( elem.className ?
										( " " + elem.className + " " ).replace(rclass, " ") :
										""
								);

							if (cur) {
								j = 0;
								while ((clazz = classes[j++])) {
									// Remove *all* instances
									while (cur.indexOf(" " + clazz + " ") >= 0) {
										cur = cur.replace(" " + clazz + " ", " ");
									}
								}

								// Only assign if different to avoid unneeded rendering.
								finalValue = value ? jQuery.trim(cur) : "";
								if (elem.className !== finalValue) {
									elem.className = finalValue;
								}
							}
						}
					}

					return this;
				},

				toggleClass: function (value, stateVal) {
					var type = typeof value;

					if (typeof stateVal === "boolean" && type === "string") {
						return stateVal ? this.addClass(value) : this.removeClass(value);
					}

					if (jQuery.isFunction(value)) {
						return this.each(function (i) {
							jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
						});
					}

					return this.each(function () {
						if (type === "string") {
							// Toggle individual class names
							var className,
								i = 0,
								self = jQuery(this),
								classNames = value.match(rnotwhite) || [];

							while ((className = classNames[i++])) {
								// Check each className given, space separated list
								if (self.hasClass(className)) {
									self.removeClass(className);
								} else {
									self.addClass(className);
								}
							}

							// Toggle whole class name
						} else if (type === strundefined || type === "boolean") {
							if (this.className) {
								// store className if set
								data_priv.set(this, "__className__", this.className);
							}

							// If the element has a class name or if we're passed `false`,
							// then remove the whole classname (if there was one, the above saved it).
							// Otherwise bring back whatever was previously saved (if anything),
							// falling back to the empty string if nothing was stored.
							this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
						}
					});
				},

				hasClass: function (selector) {
					var className = " " + selector + " ",
						i = 0,
						l = this.length;
					for (; i < l; i++) {
						if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
							return true;
						}
					}

					return false;
				}
			});


			var rreturn = /\r/g;

			jQuery.fn.extend({
				val: function (value) {
					var hooks, ret, isFunction,
						elem = this[0];

					if (!arguments.length) {
						if (elem) {
							hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

							if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
								return ret;
							}

							ret = elem.value;

							return typeof ret === "string" ?
								// Handle most common string cases
								ret.replace(rreturn, "") :
								// Handle cases where value is null/undef or number
								ret == null ? "" : ret;
						}

						return;
					}

					isFunction = jQuery.isFunction(value);

					return this.each(function (i) {
						var val;

						if (this.nodeType !== 1) {
							return;
						}

						if (isFunction) {
							val = value.call(this, i, jQuery(this).val());
						} else {
							val = value;
						}

						// Treat null/undefined as ""; convert numbers to string
						if (val == null) {
							val = "";

						} else if (typeof val === "number") {
							val += "";

						} else if (jQuery.isArray(val)) {
							val = jQuery.map(val, function (value) {
								return value == null ? "" : value + "";
							});
						}

						hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

						// If set returns undefined, fall back to normal setting
						if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
							this.value = val;
						}
					});
				}
			});

			jQuery.extend({
				valHooks: {
					option: {
						get: function (elem) {
							var val = jQuery.find.attr(elem, "value");
							return val != null ?
								val :
								// Support: IE10-11+
								// option.text throws exceptions (#14686, #14858)
								jQuery.trim(jQuery.text(elem));
						}
					},
					select: {
						get: function (elem) {
							var value, option,
								options = elem.options,
								index = elem.selectedIndex,
								one = elem.type === "select-one" || index < 0,
								values = one ? null : [],
								max = one ? index + 1 : options.length,
								i = index < 0 ?
									max :
									one ? index : 0;

							// Loop through all the selected options
							for (; i < max; i++) {
								option = options[i];

								// IE6-9 doesn't update selected after form reset (#2551)
								if (( option.selected || i === index ) &&
										// Don't return options that are disabled or in a disabled optgroup
									( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
									( !option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup") )) {

									// Get the specific value for the option
									value = jQuery(option).val();

									// We don't need an array for one selects
									if (one) {
										return value;
									}

									// Multi-Selects return an array
									values.push(value);
								}
							}

							return values;
						},

						set: function (elem, value) {
							var optionSet, option,
								options = elem.options,
								values = jQuery.makeArray(value),
								i = options.length;

							while (i--) {
								option = options[i];
								if ((option.selected = jQuery.inArray(option.value, values) >= 0)) {
									optionSet = true;
								}
							}

							// Force browsers to behave consistently when non-matching value is set
							if (!optionSet) {
								elem.selectedIndex = -1;
							}
							return values;
						}
					}
				}
			});

			// Radios and checkboxes getter/setter
			jQuery.each(["radio", "checkbox"], function () {
				jQuery.valHooks[this] = {
					set: function (elem, value) {
						if (jQuery.isArray(value)) {
							return ( elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0 );
						}
					}
				};
				if (!support.checkOn) {
					jQuery.valHooks[this].get = function (elem) {
						return elem.getAttribute("value") === null ? "on" : elem.value;
					};
				}
			});


			// Return jQuery for attributes-only inclusion


			jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
			"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
			"change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

				// Handle event binding
				jQuery.fn[name] = function (data, fn) {
					return arguments.length > 0 ?
						this.on(name, null, data, fn) :
						this.trigger(name);
				};
			});

			jQuery.fn.extend({
				hover: function (fnOver, fnOut) {
					return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
				},

				bind: function (types, data, fn) {
					return this.on(types, null, data, fn);
				},
				unbind: function (types, fn) {
					return this.off(types, null, fn);
				},

				delegate: function (selector, types, data, fn) {
					return this.on(types, selector, data, fn);
				},
				undelegate: function (selector, types, fn) {
					// ( namespace ) or ( selector, types [, fn] )
					return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
				}
			});


			var nonce = jQuery.now();

			var rquery = (/\?/);


			// Support: Android 2.3
			// Workaround failure to string-cast null input
			jQuery.parseJSON = function (data) {
				return JSON.parse(data + "");
			};


			// Cross-browser xml parsing
			jQuery.parseXML = function (data) {
				var xml, tmp;
				if (!data || typeof data !== "string") {
					return null;
				}

				// Support: IE9
				try {
					tmp = new DOMParser();
					xml = tmp.parseFromString(data, "text/xml");
				} catch (e) {
					xml = undefined;
				}

				if (!xml || xml.getElementsByTagName("parsererror").length) {
					jQuery.error("Invalid XML: " + data);
				}
				return xml;
			};


			var
				rhash = /#.*$/,
				rts = /([?&])_=[^&]*/,
				rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
			// #7653, #8125, #8152: local protocol detection
				rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
				rnoContent = /^(?:GET|HEAD)$/,
				rprotocol = /^\/\//,
				rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

			/* Prefilters
			 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
			 * 2) These are called:
			 *    - BEFORE asking for a transport
			 *    - AFTER param serialization (s.data is a string if s.processData is true)
			 * 3) key is the dataType
			 * 4) the catchall symbol "*" can be used
			 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
			 */
				prefilters = {},

			/* Transports bindings
			 * 1) key is the dataType
			 * 2) the catchall symbol "*" can be used
			 * 3) selection will start with transport dataType and THEN go to "*" if needed
			 */
				transports = {},

			// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
				allTypes = "*/".concat("*"),

			// Document location
				ajaxLocation = window.location.href,

			// Segment location into parts
				ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

			// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
			function addToPrefiltersOrTransports(structure) {

				// dataTypeExpression is optional and defaults to "*"
				return function (dataTypeExpression, func) {

					if (typeof dataTypeExpression !== "string") {
						func = dataTypeExpression;
						dataTypeExpression = "*";
					}

					var dataType,
						i = 0,
						dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

					if (jQuery.isFunction(func)) {
						// For each dataType in the dataTypeExpression
						while ((dataType = dataTypes[i++])) {
							// Prepend if requested
							if (dataType[0] === "+") {
								dataType = dataType.slice(1) || "*";
								(structure[dataType] = structure[dataType] || []).unshift(func);

								// Otherwise append
							} else {
								(structure[dataType] = structure[dataType] || []).push(func);
							}
						}
					}
				};
			}

			// Base inspection function for prefilters and transports
			function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

				var inspected = {},
					seekingTransport = ( structure === transports );

				function inspect(dataType) {
					var selected;
					inspected[dataType] = true;
					jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
						var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
						if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
							options.dataTypes.unshift(dataTypeOrTransport);
							inspect(dataTypeOrTransport);
							return false;
						} else if (seekingTransport) {
							return !( selected = dataTypeOrTransport );
						}
					});
					return selected;
				}

				return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
			}

			// A special extend for ajax options
			// that takes "flat" options (not to be deep extended)
			// Fixes #9887
			function ajaxExtend(target, src) {
				var key, deep,
					flatOptions = jQuery.ajaxSettings.flatOptions || {};

				for (key in src) {
					if (src[key] !== undefined) {
						( flatOptions[key] ? target : ( deep || (deep = {}) ) )[key] = src[key];
					}
				}
				if (deep) {
					jQuery.extend(true, target, deep);
				}

				return target;
			}

			/* Handles responses to an ajax request:
			 * - finds the right dataType (mediates between content-type and expected dataType)
			 * - returns the corresponding response
			 */
			function ajaxHandleResponses(s, jqXHR, responses) {

				var ct, type, finalDataType, firstDataType,
					contents = s.contents,
					dataTypes = s.dataTypes;

				// Remove auto dataType and get content-type in the process
				while (dataTypes[0] === "*") {
					dataTypes.shift();
					if (ct === undefined) {
						ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
					}
				}

				// Check if we're dealing with a known content-type
				if (ct) {
					for (type in contents) {
						if (contents[type] && contents[type].test(ct)) {
							dataTypes.unshift(type);
							break;
						}
					}
				}

				// Check to see if we have a response for the expected dataType
				if (dataTypes[0] in responses) {
					finalDataType = dataTypes[0];
				} else {
					// Try convertible dataTypes
					for (type in responses) {
						if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
							finalDataType = type;
							break;
						}
						if (!firstDataType) {
							firstDataType = type;
						}
					}
					// Or just use first one
					finalDataType = finalDataType || firstDataType;
				}

				// If we found a dataType
				// We add the dataType to the list if needed
				// and return the corresponding response
				if (finalDataType) {
					if (finalDataType !== dataTypes[0]) {
						dataTypes.unshift(finalDataType);
					}
					return responses[finalDataType];
				}
			}

			/* Chain conversions given the request and the original response
			 * Also sets the responseXXX fields on the jqXHR instance
			 */
			function ajaxConvert(s, response, jqXHR, isSuccess) {
				var conv2, current, conv, tmp, prev,
					converters = {},
				// Work with a copy of dataTypes in case we need to modify it for conversion
					dataTypes = s.dataTypes.slice();

				// Create converters map with lowercased keys
				if (dataTypes[1]) {
					for (conv in s.converters) {
						converters[conv.toLowerCase()] = s.converters[conv];
					}
				}

				current = dataTypes.shift();

				// Convert to each sequential dataType
				while (current) {

					if (s.responseFields[current]) {
						jqXHR[s.responseFields[current]] = response;
					}

					// Apply the dataFilter if provided
					if (!prev && isSuccess && s.dataFilter) {
						response = s.dataFilter(response, s.dataType);
					}

					prev = current;
					current = dataTypes.shift();

					if (current) {

						// There's only work to do if current dataType is non-auto
						if (current === "*") {

							current = prev;

							// Convert response if prev dataType is non-auto and differs from current
						} else if (prev !== "*" && prev !== current) {

							// Seek a direct converter
							conv = converters[prev + " " + current] || converters["* " + current];

							// If none found, seek a pair
							if (!conv) {
								for (conv2 in converters) {

									// If conv2 outputs current
									tmp = conv2.split(" ");
									if (tmp[1] === current) {

										// If prev can be converted to accepted input
										conv = converters[prev + " " + tmp[0]] ||
											converters["* " + tmp[0]];
										if (conv) {
											// Condense equivalence converters
											if (conv === true) {
												conv = converters[conv2];

												// Otherwise, insert the intermediate dataType
											} else if (converters[conv2] !== true) {
												current = tmp[0];
												dataTypes.unshift(tmp[1]);
											}
											break;
										}
									}
								}
							}

							// Apply converter (if not an equivalence)
							if (conv !== true) {

								// Unless errors are allowed to bubble, catch and return them
								if (conv && s["throws"]) {
									response = conv(response);
								} else {
									try {
										response = conv(response);
									} catch (e) {
										return {
											state: "parsererror",
											error: conv ? e : "No conversion from " + prev + " to " + current
										};
									}
								}
							}
						}
					}
				}

				return {state: "success", data: response};
			}

			jQuery.extend({

				// Counter for holding the number of active queries
				active: 0,

				// Last-Modified header cache for next request
				lastModified: {},
				etag: {},

				ajaxSettings: {
					url: ajaxLocation,
					type: "GET",
					isLocal: rlocalProtocol.test(ajaxLocParts[1]),
					global: true,
					processData: true,
					async: true,
					contentType: "application/x-www-form-urlencoded; charset=UTF-8",
					/*
					 timeout: 0,
					 data: null,
					 dataType: null,
					 username: null,
					 password: null,
					 cache: null,
					 throws: false,
					 traditional: false,
					 headers: {},
					 */

					accepts: {
						"*": allTypes,
						text: "text/plain",
						html: "text/html",
						xml: "application/xml, text/xml",
						json: "application/json, text/javascript"
					},

					contents: {
						xml: /xml/,
						html: /html/,
						json: /json/
					},

					responseFields: {
						xml: "responseXML",
						text: "responseText",
						json: "responseJSON"
					},

					// Data converters
					// Keys separate source (or catchall "*") and destination types with a single space
					converters: {

						// Convert anything to text
						"* text": String,

						// Text to html (true = no transformation)
						"text html": true,

						// Evaluate text as a json expression
						"text json": jQuery.parseJSON,

						// Parse text as xml
						"text xml": jQuery.parseXML
					},

					// For options that shouldn't be deep extended:
					// you can add your own custom options here if
					// and when you create one that shouldn't be
					// deep extended (see ajaxExtend)
					flatOptions: {
						url: true,
						context: true
					}
				},

				// Creates a full fledged settings object into target
				// with both ajaxSettings and settings fields.
				// If target is omitted, writes into ajaxSettings.
				ajaxSetup: function (target, settings) {
					return settings ?

						// Building a settings object
						ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

						// Extending ajaxSettings
						ajaxExtend(jQuery.ajaxSettings, target);
				},

				ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
				ajaxTransport: addToPrefiltersOrTransports(transports),

				// Main method
				ajax: function (url, options) {

					// If url is an object, simulate pre-1.5 signature
					if (typeof url === "object") {
						options = url;
						url = undefined;
					}

					// Force options to be an object
					options = options || {};

					var transport,
					// URL without anti-cache param
						cacheURL,
					// Response headers
						responseHeadersString,
						responseHeaders,
					// timeout handle
						timeoutTimer,
					// Cross-domain detection vars
						parts,
					// To know if global events are to be dispatched
						fireGlobals,
					// Loop variable
						i,
					// Create the final options object
						s = jQuery.ajaxSetup({}, options),
					// Callbacks context
						callbackContext = s.context || s,
					// Context for global events is callbackContext if it is a DOM node or jQuery collection
						globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
							jQuery(callbackContext) :
							jQuery.event,
					// Deferreds
						deferred = jQuery.Deferred(),
						completeDeferred = jQuery.Callbacks("once memory"),
					// Status-dependent callbacks
						statusCode = s.statusCode || {},
					// Headers (they are sent all at once)
						requestHeaders = {},
						requestHeadersNames = {},
					// The jqXHR state
						state = 0,
					// Default abort message
						strAbort = "canceled",
					// Fake xhr
						jqXHR = {
							readyState: 0,

							// Builds headers hashtable if needed
							getResponseHeader: function (key) {
								var match;
								if (state === 2) {
									if (!responseHeaders) {
										responseHeaders = {};
										while ((match = rheaders.exec(responseHeadersString))) {
											responseHeaders[match[1].toLowerCase()] = match[2];
										}
									}
									match = responseHeaders[key.toLowerCase()];
								}
								return match == null ? null : match;
							},

							// Raw string
							getAllResponseHeaders: function () {
								return state === 2 ? responseHeadersString : null;
							},

							// Caches the header
							setRequestHeader: function (name, value) {
								var lname = name.toLowerCase();
								if (!state) {
									name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
									requestHeaders[name] = value;
								}
								return this;
							},

							// Overrides response content-type header
							overrideMimeType: function (type) {
								if (!state) {
									s.mimeType = type;
								}
								return this;
							},

							// Status-dependent callbacks
							statusCode: function (map) {
								var code;
								if (map) {
									if (state < 2) {
										for (code in map) {
											// Lazy-add the new callback in a way that preserves old ones
											statusCode[code] = [statusCode[code], map[code]];
										}
									} else {
										// Execute the appropriate callbacks
										jqXHR.always(map[jqXHR.status]);
									}
								}
								return this;
							},

							// Cancel the request
							abort: function (statusText) {
								var finalText = statusText || strAbort;
								if (transport) {
									transport.abort(finalText);
								}
								done(0, finalText);
								return this;
							}
						};

					// Attach deferreds
					deferred.promise(jqXHR).complete = completeDeferred.add;
					jqXHR.success = jqXHR.done;
					jqXHR.error = jqXHR.fail;

					// Remove hash character (#7531: and string promotion)
					// Add protocol if not provided (prefilters might expect it)
					// Handle falsy url in the settings object (#10093: consistency with old signature)
					// We also use the url parameter if available
					s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace(rhash, "")
						.replace(rprotocol, ajaxLocParts[1] + "//");

					// Alias method option to type as per ticket #12004
					s.type = options.method || options.type || s.method || s.type;

					// Extract dataTypes list
					s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

					// A cross-domain request is in order when we have a protocol:host:port mismatch
					if (s.crossDomain == null) {
						parts = rurl.exec(s.url.toLowerCase());
						s.crossDomain = !!( parts &&
							( parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] ||
							( parts[3] || ( parts[1] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[3] || ( ajaxLocParts[1] === "http:" ? "80" : "443" ) ) )
						);
					}

					// Convert data if not already a string
					if (s.data && s.processData && typeof s.data !== "string") {
						s.data = jQuery.param(s.data, s.traditional);
					}

					// Apply prefilters
					inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

					// If request was aborted inside a prefilter, stop there
					if (state === 2) {
						return jqXHR;
					}

					// We can fire global events as of now if asked to
					// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
					fireGlobals = jQuery.event && s.global;

					// Watch for a new set of requests
					if (fireGlobals && jQuery.active++ === 0) {
						jQuery.event.trigger("ajaxStart");
					}

					// Uppercase the type
					s.type = s.type.toUpperCase();

					// Determine if request has content
					s.hasContent = !rnoContent.test(s.type);

					// Save the URL in case we're toying with the If-Modified-Since
					// and/or If-None-Match header later on
					cacheURL = s.url;

					// More options handling for requests with no content
					if (!s.hasContent) {

						// If data is available, append data to url
						if (s.data) {
							cacheURL = ( s.url += ( rquery.test(cacheURL) ? "&" : "?" ) + s.data );
							// #9682: remove data so that it's not used in an eventual retry
							delete s.data;
						}

						// Add anti-cache in url if needed
						if (s.cache === false) {
							s.url = rts.test(cacheURL) ?

								// If there is already a '_' parameter, set its value
								cacheURL.replace(rts, "$1_=" + nonce++) :

								// Otherwise add one to the end
							cacheURL + ( rquery.test(cacheURL) ? "&" : "?" ) + "_=" + nonce++;
						}
					}

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						if (jQuery.lastModified[cacheURL]) {
							jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
						}
						if (jQuery.etag[cacheURL]) {
							jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
						}
					}

					// Set the correct header, if data is being sent
					if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
						jqXHR.setRequestHeader("Content-Type", s.contentType);
					}

					// Set the Accepts header for the server, depending on the dataType
					jqXHR.setRequestHeader(
						"Accept",
						s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
						s.accepts[s.dataTypes[0]] + ( s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
							s.accepts["*"]
					);

					// Check for headers option
					for (i in s.headers) {
						jqXHR.setRequestHeader(i, s.headers[i]);
					}

					// Allow custom headers/mimetypes and early abort
					if (s.beforeSend && ( s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2 )) {
						// Abort if not done already and return
						return jqXHR.abort();
					}

					// Aborting is no longer a cancellation
					strAbort = "abort";

					// Install callbacks on deferreds
					for (i in {success: 1, error: 1, complete: 1}) {
						jqXHR[i](s[i]);
					}

					// Get transport
					transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

					// If no transport, we auto-abort
					if (!transport) {
						done(-1, "No Transport");
					} else {
						jqXHR.readyState = 1;

						// Send global event
						if (fireGlobals) {
							globalEventContext.trigger("ajaxSend", [jqXHR, s]);
						}
						// Timeout
						if (s.async && s.timeout > 0) {
							timeoutTimer = setTimeout(function () {
								jqXHR.abort("timeout");
							}, s.timeout);
						}

						try {
							state = 1;
							transport.send(requestHeaders, done);
						} catch (e) {
							// Propagate exception as error if not done
							if (state < 2) {
								done(-1, e);
								// Simply rethrow otherwise
							} else {
								throw e;
							}
						}
					}

					// Callback for when everything is done
					function done(status, nativeStatusText, responses, headers) {
						var isSuccess, success, error, response, modified,
							statusText = nativeStatusText;

						// Called once
						if (state === 2) {
							return;
						}

						// State is "done" now
						state = 2;

						// Clear timeout if it exists
						if (timeoutTimer) {
							clearTimeout(timeoutTimer);
						}

						// Dereference transport for early garbage collection
						// (no matter how long the jqXHR object will be used)
						transport = undefined;

						// Cache response headers
						responseHeadersString = headers || "";

						// Set readyState
						jqXHR.readyState = status > 0 ? 4 : 0;

						// Determine if successful
						isSuccess = status >= 200 && status < 300 || status === 304;

						// Get response data
						if (responses) {
							response = ajaxHandleResponses(s, jqXHR, responses);
						}

						// Convert no matter what (that way responseXXX fields are always set)
						response = ajaxConvert(s, response, jqXHR, isSuccess);

						// If successful, handle type chaining
						if (isSuccess) {

							// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
							if (s.ifModified) {
								modified = jqXHR.getResponseHeader("Last-Modified");
								if (modified) {
									jQuery.lastModified[cacheURL] = modified;
								}
								modified = jqXHR.getResponseHeader("etag");
								if (modified) {
									jQuery.etag[cacheURL] = modified;
								}
							}

							// if no content
							if (status === 204 || s.type === "HEAD") {
								statusText = "nocontent";

								// if not modified
							} else if (status === 304) {
								statusText = "notmodified";

								// If we have data, let's convert it
							} else {
								statusText = response.state;
								success = response.data;
								error = response.error;
								isSuccess = !error;
							}
						} else {
							// Extract error from statusText and normalize for non-aborts
							error = statusText;
							if (status || !statusText) {
								statusText = "error";
								if (status < 0) {
									status = 0;
								}
							}
						}

						// Set data for the fake xhr object
						jqXHR.status = status;
						jqXHR.statusText = ( nativeStatusText || statusText ) + "";

						// Success/Error
						if (isSuccess) {
							deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
						} else {
							deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
						}

						// Status-dependent callbacks
						jqXHR.statusCode(statusCode);
						statusCode = undefined;

						if (fireGlobals) {
							globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError",
								[jqXHR, s, isSuccess ? success : error]);
						}

						// Complete
						completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

						if (fireGlobals) {
							globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
							// Handle the global AJAX counter
							if (!( --jQuery.active )) {
								jQuery.event.trigger("ajaxStop");
							}
						}
					}

					return jqXHR;
				},

				getJSON: function (url, data, callback) {
					return jQuery.get(url, data, callback, "json");
				},

				getScript: function (url, callback) {
					return jQuery.get(url, undefined, callback, "script");
				}
			});

			jQuery.each(["get", "post"], function (i, method) {
				jQuery[method] = function (url, data, callback, type) {
					// Shift arguments if data argument was omitted
					if (jQuery.isFunction(data)) {
						type = type || callback;
						callback = data;
						data = undefined;
					}

					return jQuery.ajax({
						url: url,
						type: method,
						dataType: type,
						data: data,
						success: callback
					});
				};
			});


			jQuery._evalUrl = function (url) {
				return jQuery.ajax({
					url: url,
					type: "GET",
					dataType: "script",
					async: false,
					global: false,
					"throws": true
				});
			};


			jQuery.fn.extend({
				wrapAll: function (html) {
					var wrap;

					if (jQuery.isFunction(html)) {
						return this.each(function (i) {
							jQuery(this).wrapAll(html.call(this, i));
						});
					}

					if (this[0]) {

						// The elements to wrap the target around
						wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

						if (this[0].parentNode) {
							wrap.insertBefore(this[0]);
						}

						wrap.map(function () {
							var elem = this;

							while (elem.firstElementChild) {
								elem = elem.firstElementChild;
							}

							return elem;
						}).append(this);
					}

					return this;
				},

				wrapInner: function (html) {
					if (jQuery.isFunction(html)) {
						return this.each(function (i) {
							jQuery(this).wrapInner(html.call(this, i));
						});
					}

					return this.each(function () {
						var self = jQuery(this),
							contents = self.contents();

						if (contents.length) {
							contents.wrapAll(html);

						} else {
							self.append(html);
						}
					});
				},

				wrap: function (html) {
					var isFunction = jQuery.isFunction(html);

					return this.each(function (i) {
						jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
					});
				},

				unwrap: function () {
					return this.parent().each(function () {
						if (!jQuery.nodeName(this, "body")) {
							jQuery(this).replaceWith(this.childNodes);
						}
					}).end();
				}
			});


			jQuery.expr.filters.hidden = function (elem) {
				// Support: Opera <= 12.12
				// Opera reports offsetWidths and offsetHeights less than zero on some elements
				return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
			};
			jQuery.expr.filters.visible = function (elem) {
				return !jQuery.expr.filters.hidden(elem);
			};


			var r20 = /%20/g,
				rbracket = /\[\]$/,
				rCRLF = /\r?\n/g,
				rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
				rsubmittable = /^(?:input|select|textarea|keygen)/i;

			function buildParams(prefix, obj, traditional, add) {
				var name;

				if (jQuery.isArray(obj)) {
					// Serialize array item.
					jQuery.each(obj, function (i, v) {
						if (traditional || rbracket.test(prefix)) {
							// Treat each array item as a scalar.
							add(prefix, v);

						} else {
							// Item is non-scalar (array or object), encode its numeric index.
							buildParams(prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add);
						}
					});

				} else if (!traditional && jQuery.type(obj) === "object") {
					// Serialize object item.
					for (name in obj) {
						buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
					}

				} else {
					// Serialize scalar item.
					add(prefix, obj);
				}
			}

			// Serialize an array of form elements or a set of
			// key/values into a query string
			jQuery.param = function (a, traditional) {
				var prefix,
					s = [],
					add = function (key, value) {
						// If value is a function, invoke it and return its value
						value = jQuery.isFunction(value) ? value() : ( value == null ? "" : value );
						s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
					};

				// Set traditional to true for jQuery <= 1.3.2 behavior.
				if (traditional === undefined) {
					traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
				}

				// If an array was passed in, assume that it is an array of form elements.
				if (jQuery.isArray(a) || ( a.jquery && !jQuery.isPlainObject(a) )) {
					// Serialize the form elements
					jQuery.each(a, function () {
						add(this.name, this.value);
					});

				} else {
					// If traditional, encode the "old" way (the way 1.3.2 or older
					// did it), otherwise encode params recursively.
					for (prefix in a) {
						buildParams(prefix, a[prefix], traditional, add);
					}
				}

				// Return the resulting serialization
				return s.join("&").replace(r20, "+");
			};

			jQuery.fn.extend({
				serialize: function () {
					return jQuery.param(this.serializeArray());
				},
				serializeArray: function () {
					return this.map(function () {
						// Can add propHook for "elements" to filter or add form elements
						var elements = jQuery.prop(this, "elements");
						return elements ? jQuery.makeArray(elements) : this;
					})
						.filter(function () {
							var type = this.type;

							// Use .is( ":disabled" ) so that fieldset[disabled] works
							return this.name && !jQuery(this).is(":disabled") &&
								rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
								( this.checked || !rcheckableType.test(type) );
						})
						.map(function (i, elem) {
							var val = jQuery(this).val();

							return val == null ?
								null :
								jQuery.isArray(val) ?
									jQuery.map(val, function (val) {
										return {name: elem.name, value: val.replace(rCRLF, "\r\n")};
									}) :
								{name: elem.name, value: val.replace(rCRLF, "\r\n")};
						}).get();
				}
			});


			jQuery.ajaxSettings.xhr = function () {
				try {
					return new XMLHttpRequest();
				} catch (e) {
				}
			};

			var xhrId = 0,
				xhrCallbacks = {},
				xhrSuccessStatus = {
					// file protocol always yields status code 0, assume 200
					0: 200,
					// Support: IE9
					// #1450: sometimes IE returns 1223 when it should be 204
					1223: 204
				},
				xhrSupported = jQuery.ajaxSettings.xhr();

			// Support: IE9
			// Open requests must be manually aborted on unload (#5280)
			// See https://support.microsoft.com/kb/2856746 for more info
			if (window.attachEvent) {
				window.attachEvent("onunload", function () {
					for (var key in xhrCallbacks) {
						xhrCallbacks[key]();
					}
				});
			}

			support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
			support.ajax = xhrSupported = !!xhrSupported;

			jQuery.ajaxTransport(function (options) {
				var callback;

				// Cross domain only allowed if supported through XMLHttpRequest
				if (support.cors || xhrSupported && !options.crossDomain) {
					return {
						send: function (headers, complete) {
							var i,
								xhr = options.xhr(),
								id = ++xhrId;

							xhr.open(options.type, options.url, options.async, options.username, options.password);

							// Apply custom fields if provided
							if (options.xhrFields) {
								for (i in options.xhrFields) {
									xhr[i] = options.xhrFields[i];
								}
							}

							// Override mime type if needed
							if (options.mimeType && xhr.overrideMimeType) {
								xhr.overrideMimeType(options.mimeType);
							}

							// X-Requested-With header
							// For cross-domain requests, seeing as conditions for a preflight are
							// akin to a jigsaw puzzle, we simply never set it to be sure.
							// (it can always be set on a per-request basis or even using ajaxSetup)
							// For same-domain requests, won't change header if already provided.
							if (!options.crossDomain && !headers["X-Requested-With"]) {
								headers["X-Requested-With"] = "XMLHttpRequest";
							}

							// Set headers
							for (i in headers) {
								xhr.setRequestHeader(i, headers[i]);
							}

							// Callback
							callback = function (type) {
								return function () {
									if (callback) {
										delete xhrCallbacks[id];
										callback = xhr.onload = xhr.onerror = null;

										if (type === "abort") {
											xhr.abort();
										} else if (type === "error") {
											complete(
												// file: protocol always yields status 0; see #8605, #14207
												xhr.status,
												xhr.statusText
											);
										} else {
											complete(
												xhrSuccessStatus[xhr.status] || xhr.status,
												xhr.statusText,
												// Support: IE9
												// Accessing binary-data responseText throws an exception
												// (#11426)
												typeof xhr.responseText === "string" ? {
													text: xhr.responseText
												} : undefined,
												xhr.getAllResponseHeaders()
											);
										}
									}
								};
							};

							// Listen to events
							xhr.onload = callback();
							xhr.onerror = callback("error");

							// Create the abort callback
							callback = xhrCallbacks[id] = callback("abort");

							try {
								// Do send the request (this may raise an exception)
								xhr.send(options.hasContent && options.data || null);
							} catch (e) {
								// #14683: Only rethrow if this hasn't been notified as an error yet
								if (callback) {
									throw e;
								}
							}
						},

						abort: function () {
							if (callback) {
								callback();
							}
						}
					};
				}
			});


			// Install script dataType
			jQuery.ajaxSetup({
				accepts: {
					script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
				},
				contents: {
					script: /(?:java|ecma)script/
				},
				converters: {
					"text script": function (text) {
						jQuery.globalEval(text);
						return text;
					}
				}
			});

			// Handle cache's special case and crossDomain
			jQuery.ajaxPrefilter("script", function (s) {
				if (s.cache === undefined) {
					s.cache = false;
				}
				if (s.crossDomain) {
					s.type = "GET";
				}
			});

			// Bind script tag hack transport
			jQuery.ajaxTransport("script", function (s) {
				// This transport only deals with cross domain requests
				if (s.crossDomain) {
					var script, callback;
					return {
						send: function (_, complete) {
							script = jQuery("<script>").prop({
								async: true,
								charset: s.scriptCharset,
								src: s.url
							}).on(
								"load error",
								callback = function (evt) {
									script.remove();
									callback = null;
									if (evt) {
										complete(evt.type === "error" ? 404 : 200, evt.type);
									}
								}
							);
							document.head.appendChild(script[0]);
						},
						abort: function () {
							if (callback) {
								callback();
							}
						}
					};
				}
			});


			var oldCallbacks = [],
				rjsonp = /(=)\?(?=&|$)|\?\?/;

			// Default jsonp settings
			jQuery.ajaxSetup({
				jsonp: "callback",
				jsonpCallback: function () {
					var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
					this[callback] = true;
					return callback;
				}
			});

			// Detect, normalize options and install callbacks for jsonp requests
			jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

				var callbackName, overwritten, responseContainer,
					jsonProp = s.jsonp !== false && ( rjsonp.test(s.url) ?
								"url" :
							typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data"
						);

				// Handle iff the expected data type is "jsonp" or we have a parameter to set
				if (jsonProp || s.dataTypes[0] === "jsonp") {

					// Get callback name, remembering preexisting value associated with it
					callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
						s.jsonpCallback() :
						s.jsonpCallback;

					// Insert callback into url or form data
					if (jsonProp) {
						s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
					} else if (s.jsonp !== false) {
						s.url += ( rquery.test(s.url) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
					}

					// Use data converter to retrieve json after script execution
					s.converters["script json"] = function () {
						if (!responseContainer) {
							jQuery.error(callbackName + " was not called");
						}
						return responseContainer[0];
					};

					// force json dataType
					s.dataTypes[0] = "json";

					// Install callback
					overwritten = window[callbackName];
					window[callbackName] = function () {
						responseContainer = arguments;
					};

					// Clean-up function (fires after converters)
					jqXHR.always(function () {
						// Restore preexisting value
						window[callbackName] = overwritten;

						// Save back as free
						if (s[callbackName]) {
							// make sure that re-using the options doesn't screw things around
							s.jsonpCallback = originalSettings.jsonpCallback;

							// save the callback name for future use
							oldCallbacks.push(callbackName);
						}

						// Call if it was a function and we have a response
						if (responseContainer && jQuery.isFunction(overwritten)) {
							overwritten(responseContainer[0]);
						}

						responseContainer = overwritten = undefined;
					});

					// Delegate to script
					return "script";
				}
			});


			// data: string of html
			// context (optional): If specified, the fragment will be created in this context, defaults to document
			// keepScripts (optional): If true, will include scripts passed in the html string
			jQuery.parseHTML = function (data, context, keepScripts) {
				if (!data || typeof data !== "string") {
					return null;
				}
				if (typeof context === "boolean") {
					keepScripts = context;
					context = false;
				}
				context = context || document;

				var parsed = rsingleTag.exec(data),
					scripts = !keepScripts && [];

				// Single tag
				if (parsed) {
					return [context.createElement(parsed[1])];
				}

				parsed = jQuery.buildFragment([data], context, scripts);

				if (scripts && scripts.length) {
					jQuery(scripts).remove();
				}

				return jQuery.merge([], parsed.childNodes);
			};


			// Keep a copy of the old load method
			var _load = jQuery.fn.load;

			/**
			 * Load a url into a page
			 */
			jQuery.fn.load = function (url, params, callback) {
				if (typeof url !== "string" && _load) {
					return _load.apply(this, arguments);
				}

				var selector, type, response,
					self = this,
					off = url.indexOf(" ");

				if (off >= 0) {
					selector = jQuery.trim(url.slice(off));
					url = url.slice(0, off);
				}

				// If it's a function
				if (jQuery.isFunction(params)) {

					// We assume that it's the callback
					callback = params;
					params = undefined;

					// Otherwise, build a param string
				} else if (params && typeof params === "object") {
					type = "POST";
				}

				// If we have elements to modify, make the request
				if (self.length > 0) {
					jQuery.ajax({
						url: url,

						// if "type" variable is undefined, then "GET" method will be used
						type: type,
						dataType: "html",
						data: params
					}).done(function (responseText) {

						// Save response for use in complete callback
						response = arguments;

						self.html(selector ?

							// If a selector was specified, locate the right elements in a dummy div
							// Exclude scripts to avoid IE 'Permission Denied' errors
							jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

							// Otherwise use the full result
							responseText);

					}).complete(callback && function (jqXHR, status) {
							self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
						});
				}

				return this;
			};


			// Attach a bunch of functions for handling common AJAX events
			jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
				jQuery.fn[type] = function (fn) {
					return this.on(type, fn);
				};
			});


			jQuery.expr.filters.animated = function (elem) {
				return jQuery.grep(jQuery.timers, function (fn) {
					return elem === fn.elem;
				}).length;
			};


			var docElem = window.document.documentElement;

			/**
			 * Gets a window from an element
			 */
			function getWindow(elem) {
				return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
			}

			jQuery.offset = {
				setOffset: function (elem, options, i) {
					var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
						position = jQuery.css(elem, "position"),
						curElem = jQuery(elem),
						props = {};

					// Set position first, in-case top/left are set even on static elem
					if (position === "static") {
						elem.style.position = "relative";
					}

					curOffset = curElem.offset();
					curCSSTop = jQuery.css(elem, "top");
					curCSSLeft = jQuery.css(elem, "left");
					calculatePosition = ( position === "absolute" || position === "fixed" ) &&
						( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

					// Need to be able to calculate position if either
					// top or left is auto and position is either absolute or fixed
					if (calculatePosition) {
						curPosition = curElem.position();
						curTop = curPosition.top;
						curLeft = curPosition.left;

					} else {
						curTop = parseFloat(curCSSTop) || 0;
						curLeft = parseFloat(curCSSLeft) || 0;
					}

					if (jQuery.isFunction(options)) {
						options = options.call(elem, i, curOffset);
					}

					if (options.top != null) {
						props.top = ( options.top - curOffset.top ) + curTop;
					}
					if (options.left != null) {
						props.left = ( options.left - curOffset.left ) + curLeft;
					}

					if ("using" in options) {
						options.using.call(elem, props);

					} else {
						curElem.css(props);
					}
				}
			};

			jQuery.fn.extend({
				offset: function (options) {
					if (arguments.length) {
						return options === undefined ?
							this :
							this.each(function (i) {
								jQuery.offset.setOffset(this, options, i);
							});
					}

					var docElem, win,
						elem = this[0],
						box = {top: 0, left: 0},
						doc = elem && elem.ownerDocument;

					if (!doc) {
						return;
					}

					docElem = doc.documentElement;

					// Make sure it's not a disconnected DOM node
					if (!jQuery.contains(docElem, elem)) {
						return box;
					}

					// Support: BlackBerry 5, iOS 3 (original iPhone)
					// If we don't have gBCR, just use 0,0 rather than error
					if (typeof elem.getBoundingClientRect !== strundefined) {
						box = elem.getBoundingClientRect();
					}
					win = getWindow(doc);
					return {
						top: box.top + win.pageYOffset - docElem.clientTop,
						left: box.left + win.pageXOffset - docElem.clientLeft
					};
				},

				position: function () {
					if (!this[0]) {
						return;
					}

					var offsetParent, offset,
						elem = this[0],
						parentOffset = {top: 0, left: 0};

					// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
					if (jQuery.css(elem, "position") === "fixed") {
						// Assume getBoundingClientRect is there when computed position is fixed
						offset = elem.getBoundingClientRect();

					} else {
						// Get *real* offsetParent
						offsetParent = this.offsetParent();

						// Get correct offsets
						offset = this.offset();
						if (!jQuery.nodeName(offsetParent[0], "html")) {
							parentOffset = offsetParent.offset();
						}

						// Add offsetParent borders
						parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
						parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
					}

					// Subtract parent offsets and element margins
					return {
						top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
						left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
					};
				},

				offsetParent: function () {
					return this.map(function () {
						var offsetParent = this.offsetParent || docElem;

						while (offsetParent && ( !jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static" )) {
							offsetParent = offsetParent.offsetParent;
						}

						return offsetParent || docElem;
					});
				}
			});

			// Create scrollLeft and scrollTop methods
			jQuery.each({scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function (method, prop) {
				var top = "pageYOffset" === prop;

				jQuery.fn[method] = function (val) {
					return access(this, function (elem, method, val) {
						var win = getWindow(elem);

						if (val === undefined) {
							return win ? win[prop] : elem[method];
						}

						if (win) {
							win.scrollTo(
								!top ? val : window.pageXOffset,
								top ? val : window.pageYOffset
							);

						} else {
							elem[method] = val;
						}
					}, method, val, arguments.length, null);
				};
			});

			// Support: Safari<7+, Chrome<37+
			// Add the top/left cssHooks using jQuery.fn.position
			// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
			// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
			// getComputedStyle returns percent when specified for top/left/bottom/right;
			// rather than make the css module depend on the offset module, just check for it here
			jQuery.each(["top", "left"], function (i, prop) {
				jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,
					function (elem, computed) {
						if (computed) {
							computed = curCSS(elem, prop);
							// If curCSS returns percentage, fallback to offset
							return rnumnonpx.test(computed) ?
							jQuery(elem).position()[prop] + "px" :
								computed;
						}
					}
				);
			});


			// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
			jQuery.each({Height: "height", Width: "width"}, function (name, type) {
				jQuery.each({
					padding: "inner" + name,
					content: type,
					"": "outer" + name
				}, function (defaultExtra, funcName) {
					// Margin is only for outerHeight, outerWidth
					jQuery.fn[funcName] = function (margin, value) {
						var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
							extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

						return access(this, function (elem, type, value) {
							var doc;

							if (jQuery.isWindow(elem)) {
								// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
								// isn't a whole lot we can do. See pull request at this URL for discussion:
								// https://github.com/jquery/jquery/pull/764
								return elem.document.documentElement["client" + name];
							}

							// Get document width or height
							if (elem.nodeType === 9) {
								doc = elem.documentElement;

								// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
								// whichever is greatest
								return Math.max(
									elem.body["scroll" + name], doc["scroll" + name],
									elem.body["offset" + name], doc["offset" + name],
									doc["client" + name]
								);
							}

							return value === undefined ?
								// Get width or height on the element, requesting but not forcing parseFloat
								jQuery.css(elem, type, extra) :

								// Set width or height on the element
								jQuery.style(elem, type, value, extra);
						}, type, chainable ? margin : undefined, chainable, null);
					};
				});
			});


			// The number of elements contained in the matched element set
			jQuery.fn.size = function () {
				return this.length;
			};

			jQuery.fn.andSelf = jQuery.fn.addBack;


			// Register as a named AMD module, since jQuery can be concatenated with other
			// files that may use define, but not via a proper concatenation script that
			// understands anonymous AMD modules. A named AMD is safest and most robust
			// way to register. Lowercase jquery is used because AMD module names are
			// derived from file names, and jQuery is normally delivered in a lowercase
			// file name. Do this after creating the global so that if an AMD module wants
			// to call noConflict to hide this version of jQuery, it will work.

			// Note that for maximum portability, libraries that are not jQuery should
			// declare themselves as anonymous modules, and avoid setting a global if an
			// AMD loader is present. jQuery is a special case. For more information, see
			// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

			if (true) {
				!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
					return jQuery;
				}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			}


			var
			// Map over jQuery in case of overwrite
				_jQuery = window.jQuery,

			// Map over the $ in case of overwrite
				_$ = window.$;

			jQuery.noConflict = function (deep) {
				if (window.$ === jQuery) {
					window.$ = _$;
				}

				if (deep && window.jQuery === jQuery) {
					window.jQuery = _jQuery;
				}

				return jQuery;
			};

			// Expose jQuery and $ identifiers, even in AMD
			// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
			// and CommonJS for browser emulators (#13566)
			if (typeof noGlobal === strundefined) {
				window.jQuery = window.$ = jQuery;
			}


			return jQuery;

		}));


		/***/
	},
	/* 240 */
	/***/ function (module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_RESULT__;
		/* WEBPACK VAR INJECTION */
		(function (module, global, _) {/**
		 * @license
		 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
		 * Build: `lodash modern -d -o ./index.js`
		 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
		 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
		 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
		 * Available under MIT license <https://lodash.com/license>
		 */
			;
			(function () {

				/** Used as a safe reference for `undefined` in pre-ES5 environments. */
				var undefined;

				/** Used as the semantic version number. */
				var VERSION = '3.10.1';

				/** Used to compose bitmasks for wrapper metadata. */
				var BIND_FLAG = 1,
					BIND_KEY_FLAG = 2,
					CURRY_BOUND_FLAG = 4,
					CURRY_FLAG = 8,
					CURRY_RIGHT_FLAG = 16,
					PARTIAL_FLAG = 32,
					PARTIAL_RIGHT_FLAG = 64,
					ARY_FLAG = 128,
					REARG_FLAG = 256;

				/** Used as default options for `_.trunc`. */
				var DEFAULT_TRUNC_LENGTH = 30,
					DEFAULT_TRUNC_OMISSION = '...';

				/** Used to detect when a function becomes hot. */
				var HOT_COUNT = 150,
					HOT_SPAN = 16;

				/** Used as the size to enable large array optimizations. */
				var LARGE_ARRAY_SIZE = 200;

				/** Used to indicate the type of lazy iteratees. */
				var LAZY_FILTER_FLAG = 1,
					LAZY_MAP_FLAG = 2;

				/** Used as the `TypeError` message for "Functions" methods. */
				var FUNC_ERROR_TEXT = 'Expected a function';

				/** Used as the internal argument placeholder. */
				var PLACEHOLDER = '__lodash_placeholder__';

				/** `Object#toString` result references. */
				var argsTag = '[object Arguments]',
					arrayTag = '[object Array]',
					boolTag = '[object Boolean]',
					dateTag = '[object Date]',
					errorTag = '[object Error]',
					funcTag = '[object Function]',
					mapTag = '[object Map]',
					numberTag = '[object Number]',
					objectTag = '[object Object]',
					regexpTag = '[object RegExp]',
					setTag = '[object Set]',
					stringTag = '[object String]',
					weakMapTag = '[object WeakMap]';

				var arrayBufferTag = '[object ArrayBuffer]',
					float32Tag = '[object Float32Array]',
					float64Tag = '[object Float64Array]',
					int8Tag = '[object Int8Array]',
					int16Tag = '[object Int16Array]',
					int32Tag = '[object Int32Array]',
					uint8Tag = '[object Uint8Array]',
					uint8ClampedTag = '[object Uint8ClampedArray]',
					uint16Tag = '[object Uint16Array]',
					uint32Tag = '[object Uint32Array]';

				/** Used to match empty string literals in compiled template source. */
				var reEmptyStringLeading = /\b__p \+= '';/g,
					reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
					reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

				/** Used to match HTML entities and HTML characters. */
				var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
					reUnescapedHtml = /[&<>"'`]/g,
					reHasEscapedHtml = RegExp(reEscapedHtml.source),
					reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

				/** Used to match template delimiters. */
				var reEscape = /<%-([\s\S]+?)%>/g,
					reEvaluate = /<%([\s\S]+?)%>/g,
					reInterpolate = /<%=([\s\S]+?)%>/g;

				/** Used to match property names within property paths. */
				var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
					reIsPlainProp = /^\w*$/,
					rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

				/**
				 * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
				 * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
				 */
				var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
					reHasRegExpChars = RegExp(reRegExpChars.source);

				/** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
				var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

				/** Used to match backslashes in property paths. */
				var reEscapeChar = /\\(\\)?/g;

				/** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
				var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

				/** Used to match `RegExp` flags from their coerced string values. */
				var reFlags = /\w*$/;

				/** Used to detect hexadecimal string values. */
				var reHasHexPrefix = /^0[xX]/;

				/** Used to detect host constructors (Safari > 5). */
				var reIsHostCtor = /^\[object .+?Constructor\]$/;

				/** Used to detect unsigned integer values. */
				var reIsUint = /^\d+$/;

				/** Used to match latin-1 supplementary letters (excluding mathematical operators). */
				var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

				/** Used to ensure capturing order of template delimiters. */
				var reNoMatch = /($^)/;

				/** Used to match unescaped characters in compiled string literals. */
				var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

				/** Used to match words to create compound words. */
				var reWords = (function () {
					var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
						lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

					return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
				}());

				/** Used to assign default `context` object properties. */
				var contextProps = [
					'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
					'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
					'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
					'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
					'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
				];

				/** Used to make template sourceURLs easier to identify. */
				var templateCounter = -1;

				/** Used to identify `toStringTag` values of typed arrays. */
				var typedArrayTags = {};
				typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
					typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
						typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
							typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
								typedArrayTags[uint32Tag] = true;
				typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
					typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
						typedArrayTags[dateTag] = typedArrayTags[errorTag] =
							typedArrayTags[funcTag] = typedArrayTags[mapTag] =
								typedArrayTags[numberTag] = typedArrayTags[objectTag] =
									typedArrayTags[regexpTag] = typedArrayTags[setTag] =
										typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

				/** Used to identify `toStringTag` values supported by `_.clone`. */
				var cloneableTags = {};
				cloneableTags[argsTag] = cloneableTags[arrayTag] =
					cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
						cloneableTags[dateTag] = cloneableTags[float32Tag] =
							cloneableTags[float64Tag] = cloneableTags[int8Tag] =
								cloneableTags[int16Tag] = cloneableTags[int32Tag] =
									cloneableTags[numberTag] = cloneableTags[objectTag] =
										cloneableTags[regexpTag] = cloneableTags[stringTag] =
											cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
												cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
				cloneableTags[errorTag] = cloneableTags[funcTag] =
					cloneableTags[mapTag] = cloneableTags[setTag] =
						cloneableTags[weakMapTag] = false;

				/** Used to map latin-1 supplementary letters to basic latin letters. */
				var deburredLetters = {
					'\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
					'\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
					'\xc7': 'C', '\xe7': 'c',
					'\xd0': 'D', '\xf0': 'd',
					'\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
					'\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
					'\xcC': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
					'\xeC': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
					'\xd1': 'N', '\xf1': 'n',
					'\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
					'\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
					'\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
					'\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
					'\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
					'\xc6': 'Ae', '\xe6': 'ae',
					'\xde': 'Th', '\xfe': 'th',
					'\xdf': 'ss'
				};

				/** Used to map characters to HTML entities. */
				var htmlEscapes = {
					'&': '&amp;',
					'<': '&lt;',
					'>': '&gt;',
					'"': '&quot;',
					"'": '&#39;',
					'`': '&#96;'
				};

				/** Used to map HTML entities to characters. */
				var htmlUnescapes = {
					'&amp;': '&',
					'&lt;': '<',
					'&gt;': '>',
					'&quot;': '"',
					'&#39;': "'",
					'&#96;': '`'
				};

				/** Used to determine if values are of the language type `Object`. */
				var objectTypes = {
					'function': true,
					'object': true
				};

				/** Used to escape characters for inclusion in compiled regexes. */
				var regexpEscapes = {
					'0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
					'5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
					'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
					'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
					'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
				};

				/** Used to escape characters for inclusion in compiled string literals. */
				var stringEscapes = {
					'\\': '\\',
					"'": "'",
					'\n': 'n',
					'\r': 'r',
					'\u2028': 'u2028',
					'\u2029': 'u2029'
				};

				/** Detect free variable `exports`. */
				var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

				/** Detect free variable `module`. */
				var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

				/** Detect free variable `global` from Node.js. */
				var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

				/** Detect free variable `self`. */
				var freeSelf = objectTypes[typeof self] && self && self.Object && self;

				/** Detect free variable `window`. */
				var freeWindow = objectTypes[typeof window] && window && window.Object && window;

				/** Detect the popular CommonJS extension `module.exports`. */
				var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

				/**
				 * Used as a reference to the global object.
				 *
				 * The `this` value is used if it's the global object to avoid Greasemonkey's
				 * restricted `window` object, otherwise the `window` object is used.
				 */
				var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

				/*--------------------------------------------------------------------------*/

				/**
				 * The base implementation of `compareAscending` which compares values and
				 * sorts them in ascending order without guaranteeing a stable sort.
				 *
				 * @private
				 * @param {*} value The value to compare.
				 * @param {*} other The other value to compare.
				 * @returns {number} Returns the sort order indicator for `value`.
				 */
				function baseCompareAscending(value, other) {
					if (value !== other) {
						var valIsNull = value === null,
							valIsUndef = value === undefined,
							valIsReflexive = value === value;

						var othIsNull = other === null,
							othIsUndef = other === undefined,
							othIsReflexive = other === other;

						if ((value > other && !othIsNull) || !valIsReflexive ||
							(valIsNull && !othIsUndef && othIsReflexive) ||
							(valIsUndef && othIsReflexive)) {
							return 1;
						}
						if ((value < other && !valIsNull) || !othIsReflexive ||
							(othIsNull && !valIsUndef && valIsReflexive) ||
							(othIsUndef && valIsReflexive)) {
							return -1;
						}
					}
					return 0;
				}

				/**
				 * The base implementation of `_.findIndex` and `_.findLastIndex` without
				 * support for callback shorthands and `this` binding.
				 *
				 * @private
				 * @param {Array} array The array to search.
				 * @param {Function} predicate The function invoked per iteration.
				 * @param {boolean} [fromRight] Specify iterating from right to left.
				 * @returns {number} Returns the index of the matched value, else `-1`.
				 */
				function baseFindIndex(array, predicate, fromRight) {
					var length = array.length,
						index = fromRight ? length : -1;

					while ((fromRight ? index-- : ++index < length)) {
						if (predicate(array[index], index, array)) {
							return index;
						}
					}
					return -1;
				}

				/**
				 * The base implementation of `_.indexOf` without support for binary searches.
				 *
				 * @private
				 * @param {Array} array The array to search.
				 * @param {*} value The value to search for.
				 * @param {number} fromIndex The index to search from.
				 * @returns {number} Returns the index of the matched value, else `-1`.
				 */
				function baseIndexOf(array, value, fromIndex) {
					if (value !== value) {
						return indexOfNaN(array, fromIndex);
					}
					var index = fromIndex - 1,
						length = array.length;

					while (++index < length) {
						if (array[index] === value) {
							return index;
						}
					}
					return -1;
				}

				/**
				 * The base implementation of `_.isFunction` without support for environments
				 * with incorrect `typeof` results.
				 *
				 * @private
				 * @param {*} value The value to check.
				 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
				 */
				function baseIsFunction(value) {
					// Avoid a Chakra JIT bug in compatibility modes of IE 11.
					// See https://github.com/jashkenas/underscore/issues/1621 for more details.
					return typeof value == 'function' || false;
				}

				/**
				 * Converts `value` to a string if it's not one. An empty string is returned
				 * for `null` or `undefined` values.
				 *
				 * @private
				 * @param {*} value The value to process.
				 * @returns {string} Returns the string.
				 */
				function baseToString(value) {
					return value == null ? '' : (value + '');
				}

				/**
				 * Used by `_.trim` and `_.trimLeft` to get the index of the first character
				 * of `string` that is not found in `chars`.
				 *
				 * @private
				 * @param {string} string The string to inspect.
				 * @param {string} chars The characters to find.
				 * @returns {number} Returns the index of the first character not found in `chars`.
				 */
				function charsLeftIndex(string, chars) {
					var index = -1,
						length = string.length;

					while (++index < length && chars.indexOf(string.charAt(index)) > -1) {
					}
					return index;
				}

				/**
				 * Used by `_.trim` and `_.trimRight` to get the index of the last character
				 * of `string` that is not found in `chars`.
				 *
				 * @private
				 * @param {string} string The string to inspect.
				 * @param {string} chars The characters to find.
				 * @returns {number} Returns the index of the last character not found in `chars`.
				 */
				function charsRightIndex(string, chars) {
					var index = string.length;

					while (index-- && chars.indexOf(string.charAt(index)) > -1) {
					}
					return index;
				}

				/**
				 * Used by `_.sortBy` to compare transformed elements of a collection and stable
				 * sort them in ascending order.
				 *
				 * @private
				 * @param {Object} object The object to compare.
				 * @param {Object} other The other object to compare.
				 * @returns {number} Returns the sort order indicator for `object`.
				 */
				function compareAscending(object, other) {
					return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
				}

				/**
				 * Used by `_.sortByOrder` to compare multiple properties of a value to another
				 * and stable sort them.
				 *
				 * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
				 * a value is sorted in ascending order if its corresponding order is "asc", and
				 * descending if "desc".
				 *
				 * @private
				 * @param {Object} object The object to compare.
				 * @param {Object} other The other object to compare.
				 * @param {boolean[]} orders The order to sort by for each property.
				 * @returns {number} Returns the sort order indicator for `object`.
				 */
				function compareMultiple(object, other, orders) {
					var index = -1,
						objCriteria = object.criteria,
						othCriteria = other.criteria,
						length = objCriteria.length,
						ordersLength = orders.length;

					while (++index < length) {
						var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
						if (result) {
							if (index >= ordersLength) {
								return result;
							}
							var order = orders[index];
							return result * ((order === 'asc' || order === true) ? 1 : -1);
						}
					}
					// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
					// that causes it, under certain circumstances, to provide the same value for
					// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
					// for more details.
					//
					// This also ensures a stable sort in V8 and other engines.
					// See https://code.google.com/p/v8/issues/detail?id=90 for more details.
					return object.index - other.index;
				}

				/**
				 * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
				 *
				 * @private
				 * @param {string} letter The matched letter to deburr.
				 * @returns {string} Returns the deburred letter.
				 */
				function deburrLetter(letter) {
					return deburredLetters[letter];
				}

				/**
				 * Used by `_.escape` to convert characters to HTML entities.
				 *
				 * @private
				 * @param {string} chr The matched character to escape.
				 * @returns {string} Returns the escaped character.
				 */
				function escapeHtmlChar(chr) {
					return htmlEscapes[chr];
				}

				/**
				 * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
				 *
				 * @private
				 * @param {string} chr The matched character to escape.
				 * @param {string} leadingChar The capture group for a leading character.
				 * @param {string} whitespaceChar The capture group for a whitespace character.
				 * @returns {string} Returns the escaped character.
				 */
				function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
					if (leadingChar) {
						chr = regexpEscapes[chr];
					} else if (whitespaceChar) {
						chr = stringEscapes[chr];
					}
					return '\\' + chr;
				}

				/**
				 * Used by `_.template` to escape characters for inclusion in compiled string literals.
				 *
				 * @private
				 * @param {string} chr The matched character to escape.
				 * @returns {string} Returns the escaped character.
				 */
				function escapeStringChar(chr) {
					return '\\' + stringEscapes[chr];
				}

				/**
				 * Gets the index at which the first occurrence of `NaN` is found in `array`.
				 *
				 * @private
				 * @param {Array} array The array to search.
				 * @param {number} fromIndex The index to search from.
				 * @param {boolean} [fromRight] Specify iterating from right to left.
				 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
				 */
				function indexOfNaN(array, fromIndex, fromRight) {
					var length = array.length,
						index = fromIndex + (fromRight ? 0 : -1);

					while ((fromRight ? index-- : ++index < length)) {
						var other = array[index];
						if (other !== other) {
							return index;
						}
					}
					return -1;
				}

				/**
				 * Checks if `value` is object-like.
				 *
				 * @private
				 * @param {*} value The value to check.
				 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
				 */
				function isObjectLike(value) {
					return !!value && typeof value == 'object';
				}

				/**
				 * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
				 * character code is whitespace.
				 *
				 * @private
				 * @param {number} charCode The character code to inspect.
				 * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
				 */
				function isSpace(charCode) {
					return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
					(charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
				}

				/**
				 * Replaces all `placeholder` elements in `array` with an internal placeholder
				 * and returns an array of their indexes.
				 *
				 * @private
				 * @param {Array} array The array to modify.
				 * @param {*} placeholder The placeholder to replace.
				 * @returns {Array} Returns the new array of placeholder indexes.
				 */
				function replaceHolders(array, placeholder) {
					var index = -1,
						length = array.length,
						resIndex = -1,
						result = [];

					while (++index < length) {
						if (array[index] === placeholder) {
							array[index] = PLACEHOLDER;
							result[++resIndex] = index;
						}
					}
					return result;
				}

				/**
				 * An implementation of `_.uniq` optimized for sorted arrays without support
				 * for callback shorthands and `this` binding.
				 *
				 * @private
				 * @param {Array} array The array to inspect.
				 * @param {Function} [iteratee] The function invoked per iteration.
				 * @returns {Array} Returns the new duplicate-value-free array.
				 */
				function sortedUniq(array, iteratee) {
					var seen,
						index = -1,
						length = array.length,
						resIndex = -1,
						result = [];

					while (++index < length) {
						var value = array[index],
							computed = iteratee ? iteratee(value, index, array) : value;

						if (!index || seen !== computed) {
							seen = computed;
							result[++resIndex] = value;
						}
					}
					return result;
				}

				/**
				 * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
				 * character of `string`.
				 *
				 * @private
				 * @param {string} string The string to inspect.
				 * @returns {number} Returns the index of the first non-whitespace character.
				 */
				function trimmedLeftIndex(string) {
					var index = -1,
						length = string.length;

					while (++index < length && isSpace(string.charCodeAt(index))) {
					}
					return index;
				}

				/**
				 * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
				 * character of `string`.
				 *
				 * @private
				 * @param {string} string The string to inspect.
				 * @returns {number} Returns the index of the last non-whitespace character.
				 */
				function trimmedRightIndex(string) {
					var index = string.length;

					while (index-- && isSpace(string.charCodeAt(index))) {
					}
					return index;
				}

				/**
				 * Used by `_.unescape` to convert HTML entities to characters.
				 *
				 * @private
				 * @param {string} chr The matched character to unescape.
				 * @returns {string} Returns the unescaped character.
				 */
				function unescapeHtmlChar(chr) {
					return htmlUnescapes[chr];
				}

				/*--------------------------------------------------------------------------*/

				/**
				 * Create a new pristine `lodash` function using the given `context` object.
				 *
				 * @static
				 * @memberOf _
				 * @category Utility
				 * @param {Object} [context=root] The context object.
				 * @returns {Function} Returns a new `lodash` function.
				 * @example
				 *
				 * _.mixin({ 'foo': _.constant('foo') });
				 *
				 * var lodash = _.runInContext();
				 * lodash.mixin({ 'bar': lodash.constant('bar') });
				 *
				 * _.isFunction(_.foo);
				 * // => true
				 * _.isFunction(_.bar);
				 * // => false
				 *
				 * lodash.isFunction(lodash.foo);
				 * // => false
				 * lodash.isFunction(lodash.bar);
				 * // => true
				 *
				 * // using `context` to mock `Date#getTime` use in `_.now`
				 * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
				 *
				 * // or creating a suped-up `defer` in Node.js
				 * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
				 */
				function runInContext(context) {
					// Avoid issues with some ES3 environments that attempt to use values, named
					// after built-in constructors like `Object`, for the creation of literals.
					// ES5 clears this up by stating that literals must use built-in constructors.
					// See https://es5.github.io/#x11.1.5 for more details.
					context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

					/** Native constructor references. */
					var Array = context.Array,
						Date = context.Date,
						Error = context.Error,
						Function = context.Function,
						Math = context.Math,
						Number = context.Number,
						Object = context.Object,
						RegExp = context.RegExp,
						String = context.String,
						TypeError = context.TypeError;

					/** Used for native method references. */
					var arrayProto = Array.prototype,
						objectProto = Object.prototype,
						stringProto = String.prototype;

					/** Used to resolve the decompiled source of functions. */
					var fnToString = Function.prototype.toString;

					/** Used to check objects for own properties. */
					var hasOwnProperty = objectProto.hasOwnProperty;

					/** Used to generate unique IDs. */
					var idCounter = 0;

					/**
					 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
					 * of values.
					 */
					var objToString = objectProto.toString;

					/** Used to restore the original `_` reference in `_.noConflict`. */
					var oldDash = root._;

					/** Used to detect if a method is native. */
					var reIsNative = RegExp('^' +
						fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
							.replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
					);

					/** Native method references. */
					var ArrayBuffer = context.ArrayBuffer,
						clearTimeout = context.clearTimeout,
						parseFloat = context.parseFloat,
						pow = Math.pow,
						propertyIsEnumerable = objectProto.propertyIsEnumerable,
						Set = getNative(context, 'Set'),
						setTimeout = context.setTimeout,
						splice = arrayProto.splice,
						Uint8Array = context.Uint8Array,
						WeakMap = getNative(context, 'WeakMap');

					/* Native method references for those with the same name as other `lodash` methods. */
					var nativeCeil = Math.ceil,
						nativeCreate = getNative(Object, 'create'),
						nativeFloor = Math.floor,
						nativeIsArray = getNative(Array, 'isArray'),
						nativeIsFinite = context.isFinite,
						nativeKeys = getNative(Object, 'keys'),
						nativeMax = Math.max,
						nativeMin = Math.min,
						nativeNow = getNative(Date, 'now'),
						nativeParseInt = context.parseInt,
						nativeRandom = Math.random;

					/** Used as references for `-Infinity` and `Infinity`. */
					var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
						POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

					/** Used as references for the maximum length and index of an array. */
					var MAX_ARRAY_LENGTH = 4294967295,
						MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
						HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

					/**
					 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
					 * of an array-like value.
					 */
					var MAX_SAFE_INTEGER = 9007199254740991;

					/** Used to store function metadata. */
					var metaMap = WeakMap && new WeakMap;

					/** Used to lookup unminified function names. */
					var realNames = {};

					/*------------------------------------------------------------------------*/

					/**
					 * Creates a `lodash` object which wraps `value` to enable implicit chaining.
					 * Methods that operate on and return arrays, collections, and functions can
					 * be chained together. Methods that retrieve a single value or may return a
					 * primitive value will automatically end the chain returning the unwrapped
					 * value. Explicit chaining may be enabled using `_.chain`. The execution of
					 * chained methods is lazy, that is, execution is deferred until `_#value`
					 * is implicitly or explicitly called.
					 *
					 * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
					 * fusion is an optimization strategy which merge iteratee calls; this can help
					 * to avoid the creation of intermediate data structures and greatly reduce the
					 * number of iteratee executions.
					 *
					 * Chaining is supported in custom builds as long as the `_#value` method is
					 * directly or indirectly included in the build.
					 *
					 * In addition to lodash methods, wrappers have `Array` and `String` methods.
					 *
					 * The wrapper `Array` methods are:
					 * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
					 * `splice`, and `unshift`
					 *
					 * The wrapper `String` methods are:
					 * `replace` and `split`
					 *
					 * The wrapper methods that support shortcut fusion are:
					 * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
					 * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
					 * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
					 * and `where`
					 *
					 * The chainable wrapper methods are:
					 * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
					 * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
					 * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
					 * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
					 * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
					 * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
					 * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
					 * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
					 * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
					 * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
					 * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
					 * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
					 * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
					 * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
					 * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
					 * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
					 * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
					 *
					 * The wrapper methods that are **not** chainable by default are:
					 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
					 * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
					 * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
					 * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
					 * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
					 * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
					 * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
					 * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
					 * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
					 * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
					 * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
					 * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
					 * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
					 * `unescape`, `uniqueId`, `value`, and `words`
					 *
					 * The wrapper method `sample` will return a wrapped value when `n` is provided,
					 * otherwise an unwrapped value is returned.
					 *
					 * @name _
					 * @constructor
					 * @category Chain
					 * @param {*} value The value to wrap in a `lodash` instance.
					 * @returns {Object} Returns the new `lodash` wrapper instance.
					 * @example
					 *
					 * var wrapped = _([1, 2, 3]);
					 *
					 * // returns an unwrapped value
					 * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
					 * // => 6
					 *
					 * // returns a wrapped value
					 * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
					 *
					 * _.isArray(squares);
					 * // => false
					 *
					 * _.isArray(squares.value());
					 * // => true
					 */
					function lodash(value) {
						if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
							if (value instanceof LodashWrapper) {
								return value;
							}
							if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
								return wrapperClone(value);
							}
						}
						return new LodashWrapper(value);
					}

					/**
					 * The function whose prototype all chaining wrappers inherit from.
					 *
					 * @private
					 */
					function baseLodash() {
						// No operation performed.
					}

					/**
					 * The base constructor for creating `lodash` wrapper objects.
					 *
					 * @private
					 * @param {*} value The value to wrap.
					 * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
					 * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
					 */
					function LodashWrapper(value, chainAll, actions) {
						this.__wrapped__ = value;
						this.__actions__ = actions || [];
						this.__chain__ = !!chainAll;
					}

					/**
					 * An object environment feature flags.
					 *
					 * @static
					 * @memberOf _
					 * @type Object
					 */
					var support = lodash.support = {};

					/**
					 * By default, the template delimiters used by lodash are like those in
					 * embedded Ruby (ERB). Change the following template settings to use
					 * alternative delimiters.
					 *
					 * @static
					 * @memberOf _
					 * @type Object
					 */
					lodash.templateSettings = {

						/**
						 * Used to detect `data` property values to be HTML-escaped.
						 *
						 * @memberOf _.templateSettings
						 * @type RegExp
						 */
						'escape': reEscape,

						/**
						 * Used to detect code to be evaluated.
						 *
						 * @memberOf _.templateSettings
						 * @type RegExp
						 */
						'evaluate': reEvaluate,

						/**
						 * Used to detect `data` property values to inject.
						 *
						 * @memberOf _.templateSettings
						 * @type RegExp
						 */
						'interpolate': reInterpolate,

						/**
						 * Used to reference the data object in the template text.
						 *
						 * @memberOf _.templateSettings
						 * @type string
						 */
						'variable': '',

						/**
						 * Used to import variables into the compiled template.
						 *
						 * @memberOf _.templateSettings
						 * @type Object
						 */
						'imports': {

							/**
							 * A reference to the `lodash` function.
							 *
							 * @memberOf _.templateSettings.imports
							 * @type Function
							 */
							'_': lodash
						}
					};

					/*------------------------------------------------------------------------*/

					/**
					 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
					 *
					 * @private
					 * @param {*} value The value to wrap.
					 */
					function LazyWrapper(value) {
						this.__wrapped__ = value;
						this.__actions__ = [];
						this.__dir__ = 1;
						this.__filtered__ = false;
						this.__iteratees__ = [];
						this.__takeCount__ = POSITIVE_INFINITY;
						this.__views__ = [];
					}

					/**
					 * Creates a clone of the lazy wrapper object.
					 *
					 * @private
					 * @name clone
					 * @memberOf LazyWrapper
					 * @returns {Object} Returns the cloned `LazyWrapper` object.
					 */
					function lazyClone() {
						var result = new LazyWrapper(this.__wrapped__);
						result.__actions__ = arrayCopy(this.__actions__);
						result.__dir__ = this.__dir__;
						result.__filtered__ = this.__filtered__;
						result.__iteratees__ = arrayCopy(this.__iteratees__);
						result.__takeCount__ = this.__takeCount__;
						result.__views__ = arrayCopy(this.__views__);
						return result;
					}

					/**
					 * Reverses the direction of lazy iteration.
					 *
					 * @private
					 * @name reverse
					 * @memberOf LazyWrapper
					 * @returns {Object} Returns the new reversed `LazyWrapper` object.
					 */
					function lazyReverse() {
						if (this.__filtered__) {
							var result = new LazyWrapper(this);
							result.__dir__ = -1;
							result.__filtered__ = true;
						} else {
							result = this.clone();
							result.__dir__ *= -1;
						}
						return result;
					}

					/**
					 * Extracts the unwrapped value from its lazy wrapper.
					 *
					 * @private
					 * @name value
					 * @memberOf LazyWrapper
					 * @returns {*} Returns the unwrapped value.
					 */
					function lazyValue() {
						var array = this.__wrapped__.value(),
							dir = this.__dir__,
							isArr = isArray(array),
							isRight = dir < 0,
							arrLength = isArr ? array.length : 0,
							view = getView(0, arrLength, this.__views__),
							start = view.start,
							end = view.end,
							length = end - start,
							index = isRight ? end : (start - 1),
							iteratees = this.__iteratees__,
							iterLength = iteratees.length,
							resIndex = 0,
							takeCount = nativeMin(length, this.__takeCount__);

						if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
							return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
						}
						var result = [];

						outer:
							while (length-- && resIndex < takeCount) {
								index += dir;

								var iterIndex = -1,
									value = array[index];

								while (++iterIndex < iterLength) {
									var data = iteratees[iterIndex],
										iteratee = data.iteratee,
										type = data.type,
										computed = iteratee(value);

									if (type == LAZY_MAP_FLAG) {
										value = computed;
									} else if (!computed) {
										if (type == LAZY_FILTER_FLAG) {
											continue outer;
										} else {
											break outer;
										}
									}
								}
								result[resIndex++] = value;
							}
						return result;
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Creates a cache object to store key/value pairs.
					 *
					 * @private
					 * @static
					 * @name Cache
					 * @memberOf _.memoize
					 */
					function MapCache() {
						this.__data__ = {};
					}

					/**
					 * Removes `key` and its value from the cache.
					 *
					 * @private
					 * @name delete
					 * @memberOf _.memoize.Cache
					 * @param {string} key The key of the value to remove.
					 * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
					 */
					function mapDelete(key) {
						return this.has(key) && delete this.__data__[key];
					}

					/**
					 * Gets the cached value for `key`.
					 *
					 * @private
					 * @name get
					 * @memberOf _.memoize.Cache
					 * @param {string} key The key of the value to get.
					 * @returns {*} Returns the cached value.
					 */
					function mapGet(key) {
						return key == '__proto__' ? undefined : this.__data__[key];
					}

					/**
					 * Checks if a cached value for `key` exists.
					 *
					 * @private
					 * @name has
					 * @memberOf _.memoize.Cache
					 * @param {string} key The key of the entry to check.
					 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
					 */
					function mapHas(key) {
						return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
					}

					/**
					 * Sets `value` to `key` of the cache.
					 *
					 * @private
					 * @name set
					 * @memberOf _.memoize.Cache
					 * @param {string} key The key of the value to cache.
					 * @param {*} value The value to cache.
					 * @returns {Object} Returns the cache object.
					 */
					function mapSet(key, value) {
						if (key != '__proto__') {
							this.__data__[key] = value;
						}
						return this;
					}

					/*------------------------------------------------------------------------*/

					/**
					 *
					 * Creates a cache object to store unique values.
					 *
					 * @private
					 * @param {Array} [values] The values to cache.
					 */
					function SetCache(values) {
						var length = values ? values.length : 0;

						this.data = {'hash': nativeCreate(null), 'set': new Set};
						while (length--) {
							this.push(values[length]);
						}
					}

					/**
					 * Checks if `value` is in `cache` mimicking the return signature of
					 * `_.indexOf` by returning `0` if the value is found, else `-1`.
					 *
					 * @private
					 * @param {Object} cache The cache to search.
					 * @param {*} value The value to search for.
					 * @returns {number} Returns `0` if `value` is found, else `-1`.
					 */
					function cacheIndexOf(cache, value) {
						var data = cache.data,
							result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

						return result ? 0 : -1;
					}

					/**
					 * Adds `value` to the cache.
					 *
					 * @private
					 * @name push
					 * @memberOf SetCache
					 * @param {*} value The value to cache.
					 */
					function cachePush(value) {
						var data = this.data;
						if (typeof value == 'string' || isObject(value)) {
							data.set.add(value);
						} else {
							data.hash[value] = true;
						}
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Creates a new array joining `array` with `other`.
					 *
					 * @private
					 * @param {Array} array The array to join.
					 * @param {Array} other The other array to join.
					 * @returns {Array} Returns the new concatenated array.
					 */
					function arrayConcat(array, other) {
						var index = -1,
							length = array.length,
							othIndex = -1,
							othLength = other.length,
							result = Array(length + othLength);

						while (++index < length) {
							result[index] = array[index];
						}
						while (++othIndex < othLength) {
							result[index++] = other[othIndex];
						}
						return result;
					}

					/**
					 * Copies the values of `source` to `array`.
					 *
					 * @private
					 * @param {Array} source The array to copy values from.
					 * @param {Array} [array=[]] The array to copy values to.
					 * @returns {Array} Returns `array`.
					 */
					function arrayCopy(source, array) {
						var index = -1,
							length = source.length;

						array || (array = Array(length));
						while (++index < length) {
							array[index] = source[index];
						}
						return array;
					}

					/**
					 * A specialized version of `_.forEach` for arrays without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array} array The array to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {Array} Returns `array`.
					 */
					function arrayEach(array, iteratee) {
						var index = -1,
							length = array.length;

						while (++index < length) {
							if (iteratee(array[index], index, array) === false) {
								break;
							}
						}
						return array;
					}

					/**
					 * A specialized version of `_.forEachRight` for arrays without support for
					 * callback shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array} array The array to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {Array} Returns `array`.
					 */
					function arrayEachRight(array, iteratee) {
						var length = array.length;

						while (length--) {
							if (iteratee(array[length], length, array) === false) {
								break;
							}
						}
						return array;
					}

					/**
					 * A specialized version of `_.every` for arrays without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array} array The array to iterate over.
					 * @param {Function} predicate The function invoked per iteration.
					 * @returns {boolean} Returns `true` if all elements pass the predicate check,
					 *  else `false`.
					 */
					function arrayEvery(array, predicate) {
						var index = -1,
							length = array.length;

						while (++index < length) {
							if (!predicate(array[index], index, array)) {
								return false;
							}
						}
						return true;
					}

					/**
					 * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
					 * with one argument: (value).
					 *
					 * @private
					 * @param {Array} array The array to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @param {Function} comparator The function used to compare values.
					 * @param {*} exValue The initial extremum value.
					 * @returns {*} Returns the extremum value.
					 */
					function arrayExtremum(array, iteratee, comparator, exValue) {
						var index = -1,
							length = array.length,
							computed = exValue,
							result = computed;

						while (++index < length) {
							var value = array[index],
								current = +iteratee(value);

							if (comparator(current, computed)) {
								computed = current;
								result = value;
							}
						}
						return result;
					}

					/**
					 * A specialized version of `_.filter` for arrays without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array} array The array to iterate over.
					 * @param {Function} predicate The function invoked per iteration.
					 * @returns {Array} Returns the new filtered array.
					 */
					function arrayFilter(array, predicate) {
						var index = -1,
							length = array.length,
							resIndex = -1,
							result = [];

						while (++index < length) {
							var value = array[index];
							if (predicate(value, index, array)) {
								result[++resIndex] = value;
							}
						}
						return result;
					}

					/**
					 * A specialized version of `_.map` for arrays without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array} array The array to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {Array} Returns the new mapped array.
					 */
					function arrayMap(array, iteratee) {
						var index = -1,
							length = array.length,
							result = Array(length);

						while (++index < length) {
							result[index] = iteratee(array[index], index, array);
						}
						return result;
					}

					/**
					 * Appends the elements of `values` to `array`.
					 *
					 * @private
					 * @param {Array} array The array to modify.
					 * @param {Array} values The values to append.
					 * @returns {Array} Returns `array`.
					 */
					function arrayPush(array, values) {
						var index = -1,
							length = values.length,
							offset = array.length;

						while (++index < length) {
							array[offset + index] = values[index];
						}
						return array;
					}

					/**
					 * A specialized version of `_.reduce` for arrays without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array} array The array to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @param {*} [accumulator] The initial value.
					 * @param {boolean} [initFromArray] Specify using the first element of `array`
					 *  as the initial value.
					 * @returns {*} Returns the accumulated value.
					 */
					function arrayReduce(array, iteratee, accumulator, initFromArray) {
						var index = -1,
							length = array.length;

						if (initFromArray && length) {
							accumulator = array[++index];
						}
						while (++index < length) {
							accumulator = iteratee(accumulator, array[index], index, array);
						}
						return accumulator;
					}

					/**
					 * A specialized version of `_.reduceRight` for arrays without support for
					 * callback shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array} array The array to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @param {*} [accumulator] The initial value.
					 * @param {boolean} [initFromArray] Specify using the last element of `array`
					 *  as the initial value.
					 * @returns {*} Returns the accumulated value.
					 */
					function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
						var length = array.length;
						if (initFromArray && length) {
							accumulator = array[--length];
						}
						while (length--) {
							accumulator = iteratee(accumulator, array[length], length, array);
						}
						return accumulator;
					}

					/**
					 * A specialized version of `_.some` for arrays without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array} array The array to iterate over.
					 * @param {Function} predicate The function invoked per iteration.
					 * @returns {boolean} Returns `true` if any element passes the predicate check,
					 *  else `false`.
					 */
					function arraySome(array, predicate) {
						var index = -1,
							length = array.length;

						while (++index < length) {
							if (predicate(array[index], index, array)) {
								return true;
							}
						}
						return false;
					}

					/**
					 * A specialized version of `_.sum` for arrays without support for callback
					 * shorthands and `this` binding..
					 *
					 * @private
					 * @param {Array} array The array to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {number} Returns the sum.
					 */
					function arraySum(array, iteratee) {
						var length = array.length,
							result = 0;

						while (length--) {
							result += +iteratee(array[length]) || 0;
						}
						return result;
					}

					/**
					 * Used by `_.defaults` to customize its `_.assign` use.
					 *
					 * @private
					 * @param {*} objectValue The destination object property value.
					 * @param {*} sourceValue The source object property value.
					 * @returns {*} Returns the value to assign to the destination object.
					 */
					function assignDefaults(objectValue, sourceValue) {
						return objectValue === undefined ? sourceValue : objectValue;
					}

					/**
					 * Used by `_.template` to customize its `_.assign` use.
					 *
					 * **Note:** This function is like `assignDefaults` except that it ignores
					 * inherited property values when checking if a property is `undefined`.
					 *
					 * @private
					 * @param {*} objectValue The destination object property value.
					 * @param {*} sourceValue The source object property value.
					 * @param {string} key The key associated with the object and source values.
					 * @param {Object} object The destination object.
					 * @returns {*} Returns the value to assign to the destination object.
					 */
					function assignOwnDefaults(objectValue, sourceValue, key, object) {
						return (objectValue === undefined || !hasOwnProperty.call(object, key))
							? sourceValue
							: objectValue;
					}

					/**
					 * A specialized version of `_.assign` for customizing assigned values without
					 * support for argument juggling, multiple sources, and `this` binding `customizer`
					 * functions.
					 *
					 * @private
					 * @param {Object} object The destination object.
					 * @param {Object} source The source object.
					 * @param {Function} customizer The function to customize assigned values.
					 * @returns {Object} Returns `object`.
					 */
					function assignWith(object, source, customizer) {
						var index = -1,
							props = keys(source),
							length = props.length;

						while (++index < length) {
							var key = props[index],
								value = object[key],
								result = customizer(value, source[key], key, object, source);

							if ((result === result ? (result !== value) : (value === value)) ||
								(value === undefined && !(key in object))) {
								object[key] = result;
							}
						}
						return object;
					}

					/**
					 * The base implementation of `_.assign` without support for argument juggling,
					 * multiple sources, and `customizer` functions.
					 *
					 * @private
					 * @param {Object} object The destination object.
					 * @param {Object} source The source object.
					 * @returns {Object} Returns `object`.
					 */
					function baseAssign(object, source) {
						return source == null
							? object
							: baseCopy(source, keys(source), object);
					}

					/**
					 * The base implementation of `_.at` without support for string collections
					 * and individual key arguments.
					 *
					 * @private
					 * @param {Array|Object} collection The collection to iterate over.
					 * @param {number[]|string[]} props The property names or indexes of elements to pick.
					 * @returns {Array} Returns the new array of picked elements.
					 */
					function baseAt(collection, props) {
						var index = -1,
							isNil = collection == null,
							isArr = !isNil && isArrayLike(collection),
							length = isArr ? collection.length : 0,
							propsLength = props.length,
							result = Array(propsLength);

						while (++index < propsLength) {
							var key = props[index];
							if (isArr) {
								result[index] = isIndex(key, length) ? collection[key] : undefined;
							} else {
								result[index] = isNil ? undefined : collection[key];
							}
						}
						return result;
					}

					/**
					 * Copies properties of `source` to `object`.
					 *
					 * @private
					 * @param {Object} source The object to copy properties from.
					 * @param {Array} props The property names to copy.
					 * @param {Object} [object={}] The object to copy properties to.
					 * @returns {Object} Returns `object`.
					 */
					function baseCopy(source, props, object) {
						object || (object = {});

						var index = -1,
							length = props.length;

						while (++index < length) {
							var key = props[index];
							object[key] = source[key];
						}
						return object;
					}

					/**
					 * The base implementation of `_.callback` which supports specifying the
					 * number of arguments to provide to `func`.
					 *
					 * @private
					 * @param {*} [func=_.identity] The value to convert to a callback.
					 * @param {*} [thisArg] The `this` binding of `func`.
					 * @param {number} [argCount] The number of arguments to provide to `func`.
					 * @returns {Function} Returns the callback.
					 */
					function baseCallback(func, thisArg, argCount) {
						var type = typeof func;
						if (type == 'function') {
							return thisArg === undefined
								? func
								: bindCallback(func, thisArg, argCount);
						}
						if (func == null) {
							return identity;
						}
						if (type == 'object') {
							return baseMatches(func);
						}
						return thisArg === undefined
							? property(func)
							: baseMatchesProperty(func, thisArg);
					}

					/**
					 * The base implementation of `_.clone` without support for argument juggling
					 * and `this` binding `customizer` functions.
					 *
					 * @private
					 * @param {*} value The value to clone.
					 * @param {boolean} [isDeep] Specify a deep clone.
					 * @param {Function} [customizer] The function to customize cloning values.
					 * @param {string} [key] The key of `value`.
					 * @param {Object} [object] The object `value` belongs to.
					 * @param {Array} [stackA=[]] Tracks traversed source objects.
					 * @param {Array} [stackB=[]] Associates clones with source counterparts.
					 * @returns {*} Returns the cloned value.
					 */
					function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
						var result;
						if (customizer) {
							result = object ? customizer(value, key, object) : customizer(value);
						}
						if (result !== undefined) {
							return result;
						}
						if (!isObject(value)) {
							return value;
						}
						var isArr = isArray(value);
						if (isArr) {
							result = initCloneArray(value);
							if (!isDeep) {
								return arrayCopy(value, result);
							}
						} else {
							var tag = objToString.call(value),
								isFunc = tag == funcTag;

							if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
								result = initCloneObject(isFunc ? {} : value);
								if (!isDeep) {
									return baseAssign(result, value);
								}
							} else {
								return cloneableTags[tag]
									? initCloneByTag(value, tag, isDeep)
									: (object ? value : {});
							}
						}
						// Check for circular references and return its corresponding clone.
						stackA || (stackA = []);
						stackB || (stackB = []);

						var length = stackA.length;
						while (length--) {
							if (stackA[length] == value) {
								return stackB[length];
							}
						}
						// Add the source value to the stack of traversed objects and associate it with its clone.
						stackA.push(value);
						stackB.push(result);

						// Recursively populate clone (susceptible to call stack limits).
						(isArr ? arrayEach : baseForOwn)(value, function (subValue, key) {
							result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
						});
						return result;
					}

					/**
					 * The base implementation of `_.create` without support for assigning
					 * properties to the created object.
					 *
					 * @private
					 * @param {Object} prototype The object to inherit from.
					 * @returns {Object} Returns the new object.
					 */
					var baseCreate = (function () {
						function object() {
						}

						return function (prototype) {
							if (isObject(prototype)) {
								object.prototype = prototype;
								var result = new object;
								object.prototype = undefined;
							}
							return result || {};
						};
					}());

					/**
					 * The base implementation of `_.delay` and `_.defer` which accepts an index
					 * of where to slice the arguments to provide to `func`.
					 *
					 * @private
					 * @param {Function} func The function to delay.
					 * @param {number} wait The number of milliseconds to delay invocation.
					 * @param {Object} args The arguments provide to `func`.
					 * @returns {number} Returns the timer id.
					 */
					function baseDelay(func, wait, args) {
						if (typeof func != 'function') {
							throw new TypeError(FUNC_ERROR_TEXT);
						}
						return setTimeout(function () {
							func.apply(undefined, args);
						}, wait);
					}

					/**
					 * The base implementation of `_.difference` which accepts a single array
					 * of values to exclude.
					 *
					 * @private
					 * @param {Array} array The array to inspect.
					 * @param {Array} values The values to exclude.
					 * @returns {Array} Returns the new array of filtered values.
					 */
					function baseDifference(array, values) {
						var length = array ? array.length : 0,
							result = [];

						if (!length) {
							return result;
						}
						var index = -1,
							indexOf = getIndexOf(),
							isCommon = indexOf == baseIndexOf,
							cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
							valuesLength = values.length;

						if (cache) {
							indexOf = cacheIndexOf;
							isCommon = false;
							values = cache;
						}
						outer:
							while (++index < length) {
								var value = array[index];

								if (isCommon && value === value) {
									var valuesIndex = valuesLength;
									while (valuesIndex--) {
										if (values[valuesIndex] === value) {
											continue outer;
										}
									}
									result.push(value);
								}
								else if (indexOf(values, value, 0) < 0) {
									result.push(value);
								}
							}
						return result;
					}

					/**
					 * The base implementation of `_.forEach` without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {Array|Object|string} Returns `collection`.
					 */
					var baseEach = createBaseEach(baseForOwn);

					/**
					 * The base implementation of `_.forEachRight` without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {Array|Object|string} Returns `collection`.
					 */
					var baseEachRight = createBaseEach(baseForOwnRight, true);

					/**
					 * The base implementation of `_.every` without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} predicate The function invoked per iteration.
					 * @returns {boolean} Returns `true` if all elements pass the predicate check,
					 *  else `false`
					 */
					function baseEvery(collection, predicate) {
						var result = true;
						baseEach(collection, function (value, index, collection) {
							result = !!predicate(value, index, collection);
							return result;
						});
						return result;
					}

					/**
					 * Gets the extremum value of `collection` invoking `iteratee` for each value
					 * in `collection` to generate the criterion by which the value is ranked.
					 * The `iteratee` is invoked with three arguments: (value, index|key, collection).
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @param {Function} comparator The function used to compare values.
					 * @param {*} exValue The initial extremum value.
					 * @returns {*} Returns the extremum value.
					 */
					function baseExtremum(collection, iteratee, comparator, exValue) {
						var computed = exValue,
							result = computed;

						baseEach(collection, function (value, index, collection) {
							var current = +iteratee(value, index, collection);
							if (comparator(current, computed) || (current === exValue && current === result)) {
								computed = current;
								result = value;
							}
						});
						return result;
					}

					/**
					 * The base implementation of `_.fill` without an iteratee call guard.
					 *
					 * @private
					 * @param {Array} array The array to fill.
					 * @param {*} value The value to fill `array` with.
					 * @param {number} [start=0] The start position.
					 * @param {number} [end=array.length] The end position.
					 * @returns {Array} Returns `array`.
					 */
					function baseFill(array, value, start, end) {
						var length = array.length;

						start = start == null ? 0 : (+start || 0);
						if (start < 0) {
							start = -start > length ? 0 : (length + start);
						}
						end = (end === undefined || end > length) ? length : (+end || 0);
						if (end < 0) {
							end += length;
						}
						length = start > end ? 0 : (end >>> 0);
						start >>>= 0;

						while (start < length) {
							array[start++] = value;
						}
						return array;
					}

					/**
					 * The base implementation of `_.filter` without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} predicate The function invoked per iteration.
					 * @returns {Array} Returns the new filtered array.
					 */
					function baseFilter(collection, predicate) {
						var result = [];
						baseEach(collection, function (value, index, collection) {
							if (predicate(value, index, collection)) {
								result.push(value);
							}
						});
						return result;
					}

					/**
					 * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
					 * without support for callback shorthands and `this` binding, which iterates
					 * over `collection` using the provided `eachFunc`.
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to search.
					 * @param {Function} predicate The function invoked per iteration.
					 * @param {Function} eachFunc The function to iterate over `collection`.
					 * @param {boolean} [retKey] Specify returning the key of the found element
					 *  instead of the element itself.
					 * @returns {*} Returns the found element or its key, else `undefined`.
					 */
					function baseFind(collection, predicate, eachFunc, retKey) {
						var result;
						eachFunc(collection, function (value, key, collection) {
							if (predicate(value, key, collection)) {
								result = retKey ? key : value;
								return false;
							}
						});
						return result;
					}

					/**
					 * The base implementation of `_.flatten` with added support for restricting
					 * flattening and specifying the start index.
					 *
					 * @private
					 * @param {Array} array The array to flatten.
					 * @param {boolean} [isDeep] Specify a deep flatten.
					 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
					 * @param {Array} [result=[]] The initial result value.
					 * @returns {Array} Returns the new flattened array.
					 */
					function baseFlatten(array, isDeep, isStrict, result) {
						result || (result = []);

						var index = -1,
							length = array.length;

						while (++index < length) {
							var value = array[index];
							if (isObjectLike(value) && isArrayLike(value) &&
								(isStrict || isArray(value) || isArguments(value))) {
								if (isDeep) {
									// Recursively flatten arrays (susceptible to call stack limits).
									baseFlatten(value, isDeep, isStrict, result);
								} else {
									arrayPush(result, value);
								}
							} else if (!isStrict) {
								result[result.length] = value;
							}
						}
						return result;
					}

					/**
					 * The base implementation of `baseForIn` and `baseForOwn` which iterates
					 * over `object` properties returned by `keysFunc` invoking `iteratee` for
					 * each property. Iteratee functions may exit iteration early by explicitly
					 * returning `false`.
					 *
					 * @private
					 * @param {Object} object The object to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @param {Function} keysFunc The function to get the keys of `object`.
					 * @returns {Object} Returns `object`.
					 */
					var baseFor = createBaseFor();

					/**
					 * This function is like `baseFor` except that it iterates over properties
					 * in the opposite order.
					 *
					 * @private
					 * @param {Object} object The object to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @param {Function} keysFunc The function to get the keys of `object`.
					 * @returns {Object} Returns `object`.
					 */
					var baseForRight = createBaseFor(true);

					/**
					 * The base implementation of `_.forIn` without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Object} object The object to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {Object} Returns `object`.
					 */
					function baseForIn(object, iteratee) {
						return baseFor(object, iteratee, keysIn);
					}

					/**
					 * The base implementation of `_.forOwn` without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Object} object The object to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {Object} Returns `object`.
					 */
					function baseForOwn(object, iteratee) {
						return baseFor(object, iteratee, keys);
					}

					/**
					 * The base implementation of `_.forOwnRight` without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Object} object The object to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {Object} Returns `object`.
					 */
					function baseForOwnRight(object, iteratee) {
						return baseForRight(object, iteratee, keys);
					}

					/**
					 * The base implementation of `_.functions` which creates an array of
					 * `object` function property names filtered from those provided.
					 *
					 * @private
					 * @param {Object} object The object to inspect.
					 * @param {Array} props The property names to filter.
					 * @returns {Array} Returns the new array of filtered property names.
					 */
					function baseFunctions(object, props) {
						var index = -1,
							length = props.length,
							resIndex = -1,
							result = [];

						while (++index < length) {
							var key = props[index];
							if (isFunction(object[key])) {
								result[++resIndex] = key;
							}
						}
						return result;
					}

					/**
					 * The base implementation of `get` without support for string paths
					 * and default values.
					 *
					 * @private
					 * @param {Object} object The object to query.
					 * @param {Array} path The path of the property to get.
					 * @param {string} [pathKey] The key representation of path.
					 * @returns {*} Returns the resolved value.
					 */
					function baseGet(object, path, pathKey) {
						if (object == null) {
							return;
						}
						if (pathKey !== undefined && pathKey in toObject(object)) {
							path = [pathKey];
						}
						var index = 0,
							length = path.length;

						while (object != null && index < length) {
							object = object[path[index++]];
						}
						return (index && index == length) ? object : undefined;
					}

					/**
					 * The base implementation of `_.isEqual` without support for `this` binding
					 * `customizer` functions.
					 *
					 * @private
					 * @param {*} value The value to compare.
					 * @param {*} other The other value to compare.
					 * @param {Function} [customizer] The function to customize comparing values.
					 * @param {boolean} [isLoose] Specify performing partial comparisons.
					 * @param {Array} [stackA] Tracks traversed `value` objects.
					 * @param {Array} [stackB] Tracks traversed `other` objects.
					 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
					 */
					function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
						if (value === other) {
							return true;
						}
						if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
							return value !== value && other !== other;
						}
						return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
					}

					/**
					 * A specialized version of `baseIsEqual` for arrays and objects which performs
					 * deep comparisons and tracks traversed objects enabling objects with circular
					 * references to be compared.
					 *
					 * @private
					 * @param {Object} object The object to compare.
					 * @param {Object} other The other object to compare.
					 * @param {Function} equalFunc The function to determine equivalents of values.
					 * @param {Function} [customizer] The function to customize comparing objects.
					 * @param {boolean} [isLoose] Specify performing partial comparisons.
					 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
					 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
					 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
					 */
					function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
						var objIsArr = isArray(object),
							othIsArr = isArray(other),
							objTag = arrayTag,
							othTag = arrayTag;

						if (!objIsArr) {
							objTag = objToString.call(object);
							if (objTag == argsTag) {
								objTag = objectTag;
							} else if (objTag != objectTag) {
								objIsArr = isTypedArray(object);
							}
						}
						if (!othIsArr) {
							othTag = objToString.call(other);
							if (othTag == argsTag) {
								othTag = objectTag;
							} else if (othTag != objectTag) {
								othIsArr = isTypedArray(other);
							}
						}
						var objIsObj = objTag == objectTag,
							othIsObj = othTag == objectTag,
							isSameTag = objTag == othTag;

						if (isSameTag && !(objIsArr || objIsObj)) {
							return equalByTag(object, other, objTag);
						}
						if (!isLoose) {
							var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
								othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

							if (objIsWrapped || othIsWrapped) {
								return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
							}
						}
						if (!isSameTag) {
							return false;
						}
						// Assume cyclic values are equal.
						// For more information on detecting circular references see https://es5.github.io/#JO.
						stackA || (stackA = []);
						stackB || (stackB = []);

						var length = stackA.length;
						while (length--) {
							if (stackA[length] == object) {
								return stackB[length] == other;
							}
						}
						// Add `object` and `other` to the stack of traversed objects.
						stackA.push(object);
						stackB.push(other);

						var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

						stackA.pop();
						stackB.pop();

						return result;
					}

					/**
					 * The base implementation of `_.isMatch` without support for callback
					 * shorthands and `this` binding.
					 *
					 * @private
					 * @param {Object} object The object to inspect.
					 * @param {Array} matchData The propery names, values, and compare flags to match.
					 * @param {Function} [customizer] The function to customize comparing objects.
					 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
					 */
					function baseIsMatch(object, matchData, customizer) {
						var index = matchData.length,
							length = index,
							noCustomizer = !customizer;

						if (object == null) {
							return !length;
						}
						object = toObject(object);
						while (index--) {
							var data = matchData[index];
							if ((noCustomizer && data[2])
									? data[1] !== object[data[0]]
									: !(data[0] in object)
							) {
								return false;
							}
						}
						while (++index < length) {
							data = matchData[index];
							var key = data[0],
								objValue = object[key],
								srcValue = data[1];

							if (noCustomizer && data[2]) {
								if (objValue === undefined && !(key in object)) {
									return false;
								}
							} else {
								var result = customizer ? customizer(objValue, srcValue, key) : undefined;
								if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
									return false;
								}
							}
						}
						return true;
					}

					/**
					 * The base implementation of `_.map` without support for callback shorthands
					 * and `this` binding.
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {Array} Returns the new mapped array.
					 */
					function baseMap(collection, iteratee) {
						var index = -1,
							result = isArrayLike(collection) ? Array(collection.length) : [];

						baseEach(collection, function (value, key, collection) {
							result[++index] = iteratee(value, key, collection);
						});
						return result;
					}

					/**
					 * The base implementation of `_.matches` which does not clone `source`.
					 *
					 * @private
					 * @param {Object} source The object of property values to match.
					 * @returns {Function} Returns the new function.
					 */
					function baseMatches(source) {
						var matchData = getMatchData(source);
						if (matchData.length == 1 && matchData[0][2]) {
							var key = matchData[0][0],
								value = matchData[0][1];

							return function (object) {
								if (object == null) {
									return false;
								}
								return object[key] === value && (value !== undefined || (key in toObject(object)));
							};
						}
						return function (object) {
							return baseIsMatch(object, matchData);
						};
					}

					/**
					 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
					 *
					 * @private
					 * @param {string} path The path of the property to get.
					 * @param {*} srcValue The value to compare.
					 * @returns {Function} Returns the new function.
					 */
					function baseMatchesProperty(path, srcValue) {
						var isArr = isArray(path),
							isCommon = isKey(path) && isStrictComparable(srcValue),
							pathKey = (path + '');

						path = toPath(path);
						return function (object) {
							if (object == null) {
								return false;
							}
							var key = pathKey;
							object = toObject(object);
							if ((isArr || !isCommon) && !(key in object)) {
								object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
								if (object == null) {
									return false;
								}
								key = last(path);
								object = toObject(object);
							}
							return object[key] === srcValue
								? (srcValue !== undefined || (key in object))
								: baseIsEqual(srcValue, object[key], undefined, true);
						};
					}

					/**
					 * The base implementation of `_.merge` without support for argument juggling,
					 * multiple sources, and `this` binding `customizer` functions.
					 *
					 * @private
					 * @param {Object} object The destination object.
					 * @param {Object} source The source object.
					 * @param {Function} [customizer] The function to customize merged values.
					 * @param {Array} [stackA=[]] Tracks traversed source objects.
					 * @param {Array} [stackB=[]] Associates values with source counterparts.
					 * @returns {Object} Returns `object`.
					 */
					function baseMerge(object, source, customizer, stackA, stackB) {
						if (!isObject(object)) {
							return object;
						}
						var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
							props = isSrcArr ? undefined : keys(source);

						arrayEach(props || source, function (srcValue, key) {
							if (props) {
								key = srcValue;
								srcValue = source[key];
							}
							if (isObjectLike(srcValue)) {
								stackA || (stackA = []);
								stackB || (stackB = []);
								baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
							}
							else {
								var value = object[key],
									result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
									isCommon = result === undefined;

								if (isCommon) {
									result = srcValue;
								}
								if ((result !== undefined || (isSrcArr && !(key in object))) &&
									(isCommon || (result === result ? (result !== value) : (value === value)))) {
									object[key] = result;
								}
							}
						});
						return object;
					}

					/**
					 * A specialized version of `baseMerge` for arrays and objects which performs
					 * deep merges and tracks traversed objects enabling objects with circular
					 * references to be merged.
					 *
					 * @private
					 * @param {Object} object The destination object.
					 * @param {Object} source The source object.
					 * @param {string} key The key of the value to merge.
					 * @param {Function} mergeFunc The function to merge values.
					 * @param {Function} [customizer] The function to customize merged values.
					 * @param {Array} [stackA=[]] Tracks traversed source objects.
					 * @param {Array} [stackB=[]] Associates values with source counterparts.
					 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
					 */
					function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
						var length = stackA.length,
							srcValue = source[key];

						while (length--) {
							if (stackA[length] == srcValue) {
								object[key] = stackB[length];
								return;
							}
						}
						var value = object[key],
							result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
							isCommon = result === undefined;

						if (isCommon) {
							result = srcValue;
							if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
								result = isArray(value)
									? value
									: (isArrayLike(value) ? arrayCopy(value) : []);
							}
							else if (isPlainObject(srcValue) || isArguments(srcValue)) {
								result = isArguments(value)
									? toPlainObject(value)
									: (isPlainObject(value) ? value : {});
							}
							else {
								isCommon = false;
							}
						}
						// Add the source value to the stack of traversed objects and associate
						// it with its merged value.
						stackA.push(srcValue);
						stackB.push(result);

						if (isCommon) {
							// Recursively merge objects and arrays (susceptible to call stack limits).
							object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
						} else if (result === result ? (result !== value) : (value === value)) {
							object[key] = result;
						}
					}

					/**
					 * The base implementation of `_.property` without support for deep paths.
					 *
					 * @private
					 * @param {string} key The key of the property to get.
					 * @returns {Function} Returns the new function.
					 */
					function baseProperty(key) {
						return function (object) {
							return object == null ? undefined : object[key];
						};
					}

					/**
					 * A specialized version of `baseProperty` which supports deep paths.
					 *
					 * @private
					 * @param {Array|string} path The path of the property to get.
					 * @returns {Function} Returns the new function.
					 */
					function basePropertyDeep(path) {
						var pathKey = (path + '');
						path = toPath(path);
						return function (object) {
							return baseGet(object, path, pathKey);
						};
					}

					/**
					 * The base implementation of `_.pullAt` without support for individual
					 * index arguments and capturing the removed elements.
					 *
					 * @private
					 * @param {Array} array The array to modify.
					 * @param {number[]} indexes The indexes of elements to remove.
					 * @returns {Array} Returns `array`.
					 */
					function basePullAt(array, indexes) {
						var length = array ? indexes.length : 0;
						while (length--) {
							var index = indexes[length];
							if (index != previous && isIndex(index)) {
								var previous = index;
								splice.call(array, index, 1);
							}
						}
						return array;
					}

					/**
					 * The base implementation of `_.random` without support for argument juggling
					 * and returning floating-point numbers.
					 *
					 * @private
					 * @param {number} min The minimum possible value.
					 * @param {number} max The maximum possible value.
					 * @returns {number} Returns the random number.
					 */
					function baseRandom(min, max) {
						return min + nativeFloor(nativeRandom() * (max - min + 1));
					}

					/**
					 * The base implementation of `_.reduce` and `_.reduceRight` without support
					 * for callback shorthands and `this` binding, which iterates over `collection`
					 * using the provided `eachFunc`.
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @param {*} accumulator The initial value.
					 * @param {boolean} initFromCollection Specify using the first or last element
					 *  of `collection` as the initial value.
					 * @param {Function} eachFunc The function to iterate over `collection`.
					 * @returns {*} Returns the accumulated value.
					 */
					function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
						eachFunc(collection, function (value, index, collection) {
							accumulator = initFromCollection
								? (initFromCollection = false, value)
								: iteratee(accumulator, value, index, collection);
						});
						return accumulator;
					}

					/**
					 * The base implementation of `setData` without support for hot loop detection.
					 *
					 * @private
					 * @param {Function} func The function to associate metadata with.
					 * @param {*} data The metadata.
					 * @returns {Function} Returns `func`.
					 */
					var baseSetData = !metaMap ? identity : function (func, data) {
						metaMap.set(func, data);
						return func;
					};

					/**
					 * The base implementation of `_.slice` without an iteratee call guard.
					 *
					 * @private
					 * @param {Array} array The array to slice.
					 * @param {number} [start=0] The start position.
					 * @param {number} [end=array.length] The end position.
					 * @returns {Array} Returns the slice of `array`.
					 */
					function baseSlice(array, start, end) {
						var index = -1,
							length = array.length;

						start = start == null ? 0 : (+start || 0);
						if (start < 0) {
							start = -start > length ? 0 : (length + start);
						}
						end = (end === undefined || end > length) ? length : (+end || 0);
						if (end < 0) {
							end += length;
						}
						length = start > end ? 0 : ((end - start) >>> 0);
						start >>>= 0;

						var result = Array(length);
						while (++index < length) {
							result[index] = array[index + start];
						}
						return result;
					}

					/**
					 * The base implementation of `_.some` without support for callback shorthands
					 * and `this` binding.
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} predicate The function invoked per iteration.
					 * @returns {boolean} Returns `true` if any element passes the predicate check,
					 *  else `false`.
					 */
					function baseSome(collection, predicate) {
						var result;

						baseEach(collection, function (value, index, collection) {
							result = predicate(value, index, collection);
							return !result;
						});
						return !!result;
					}

					/**
					 * The base implementation of `_.sortBy` which uses `comparer` to define
					 * the sort order of `array` and replaces criteria objects with their
					 * corresponding values.
					 *
					 * @private
					 * @param {Array} array The array to sort.
					 * @param {Function} comparer The function to define sort order.
					 * @returns {Array} Returns `array`.
					 */
					function baseSortBy(array, comparer) {
						var length = array.length;

						array.sort(comparer);
						while (length--) {
							array[length] = array[length].value;
						}
						return array;
					}

					/**
					 * The base implementation of `_.sortByOrder` without param guards.
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
					 * @param {boolean[]} orders The sort orders of `iteratees`.
					 * @returns {Array} Returns the new sorted array.
					 */
					function baseSortByOrder(collection, iteratees, orders) {
						var callback = getCallback(),
							index = -1;

						iteratees = arrayMap(iteratees, function (iteratee) {
							return callback(iteratee);
						});

						var result = baseMap(collection, function (value) {
							var criteria = arrayMap(iteratees, function (iteratee) {
								return iteratee(value);
							});
							return {'criteria': criteria, 'index': ++index, 'value': value};
						});

						return baseSortBy(result, function (object, other) {
							return compareMultiple(object, other, orders);
						});
					}

					/**
					 * The base implementation of `_.sum` without support for callback shorthands
					 * and `this` binding.
					 *
					 * @private
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @returns {number} Returns the sum.
					 */
					function baseSum(collection, iteratee) {
						var result = 0;
						baseEach(collection, function (value, index, collection) {
							result += +iteratee(value, index, collection) || 0;
						});
						return result;
					}

					/**
					 * The base implementation of `_.uniq` without support for callback shorthands
					 * and `this` binding.
					 *
					 * @private
					 * @param {Array} array The array to inspect.
					 * @param {Function} [iteratee] The function invoked per iteration.
					 * @returns {Array} Returns the new duplicate-value-free array.
					 */
					function baseUniq(array, iteratee) {
						var index = -1,
							indexOf = getIndexOf(),
							length = array.length,
							isCommon = indexOf == baseIndexOf,
							isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
							seen = isLarge ? createCache() : null,
							result = [];

						if (seen) {
							indexOf = cacheIndexOf;
							isCommon = false;
						} else {
							isLarge = false;
							seen = iteratee ? [] : result;
						}
						outer:
							while (++index < length) {
								var value = array[index],
									computed = iteratee ? iteratee(value, index, array) : value;

								if (isCommon && value === value) {
									var seenIndex = seen.length;
									while (seenIndex--) {
										if (seen[seenIndex] === computed) {
											continue outer;
										}
									}
									if (iteratee) {
										seen.push(computed);
									}
									result.push(value);
								}
								else if (indexOf(seen, computed, 0) < 0) {
									if (iteratee || isLarge) {
										seen.push(computed);
									}
									result.push(value);
								}
							}
						return result;
					}

					/**
					 * The base implementation of `_.values` and `_.valuesIn` which creates an
					 * array of `object` property values corresponding to the property names
					 * of `props`.
					 *
					 * @private
					 * @param {Object} object The object to query.
					 * @param {Array} props The property names to get values for.
					 * @returns {Object} Returns the array of property values.
					 */
					function baseValues(object, props) {
						var index = -1,
							length = props.length,
							result = Array(length);

						while (++index < length) {
							result[index] = object[props[index]];
						}
						return result;
					}

					/**
					 * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
					 * and `_.takeWhile` without support for callback shorthands and `this` binding.
					 *
					 * @private
					 * @param {Array} array The array to query.
					 * @param {Function} predicate The function invoked per iteration.
					 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
					 * @param {boolean} [fromRight] Specify iterating from right to left.
					 * @returns {Array} Returns the slice of `array`.
					 */
					function baseWhile(array, predicate, isDrop, fromRight) {
						var length = array.length,
							index = fromRight ? length : -1;

						while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
						}
						return isDrop
							? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
							: baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
					}

					/**
					 * The base implementation of `wrapperValue` which returns the result of
					 * performing a sequence of actions on the unwrapped `value`, where each
					 * successive action is supplied the return value of the previous.
					 *
					 * @private
					 * @param {*} value The unwrapped value.
					 * @param {Array} actions Actions to peform to resolve the unwrapped value.
					 * @returns {*} Returns the resolved value.
					 */
					function baseWrapperValue(value, actions) {
						var result = value;
						if (result instanceof LazyWrapper) {
							result = result.value();
						}
						var index = -1,
							length = actions.length;

						while (++index < length) {
							var action = actions[index];
							result = action.func.apply(action.thisArg, arrayPush([result], action.args));
						}
						return result;
					}

					/**
					 * Performs a binary search of `array` to determine the index at which `value`
					 * should be inserted into `array` in order to maintain its sort order.
					 *
					 * @private
					 * @param {Array} array The sorted array to inspect.
					 * @param {*} value The value to evaluate.
					 * @param {boolean} [retHighest] Specify returning the highest qualified index.
					 * @returns {number} Returns the index at which `value` should be inserted
					 *  into `array`.
					 */
					function binaryIndex(array, value, retHighest) {
						var low = 0,
							high = array ? array.length : low;

						if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
							while (low < high) {
								var mid = (low + high) >>> 1,
									computed = array[mid];

								if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
									low = mid + 1;
								} else {
									high = mid;
								}
							}
							return high;
						}
						return binaryIndexBy(array, value, identity, retHighest);
					}

					/**
					 * This function is like `binaryIndex` except that it invokes `iteratee` for
					 * `value` and each element of `array` to compute their sort ranking. The
					 * iteratee is invoked with one argument; (value).
					 *
					 * @private
					 * @param {Array} array The sorted array to inspect.
					 * @param {*} value The value to evaluate.
					 * @param {Function} iteratee The function invoked per iteration.
					 * @param {boolean} [retHighest] Specify returning the highest qualified index.
					 * @returns {number} Returns the index at which `value` should be inserted
					 *  into `array`.
					 */
					function binaryIndexBy(array, value, iteratee, retHighest) {
						value = iteratee(value);

						var low = 0,
							high = array ? array.length : 0,
							valIsNaN = value !== value,
							valIsNull = value === null,
							valIsUndef = value === undefined;

						while (low < high) {
							var mid = nativeFloor((low + high) / 2),
								computed = iteratee(array[mid]),
								isDef = computed !== undefined,
								isReflexive = computed === computed;

							if (valIsNaN) {
								var setLow = isReflexive || retHighest;
							} else if (valIsNull) {
								setLow = isReflexive && isDef && (retHighest || computed != null);
							} else if (valIsUndef) {
								setLow = isReflexive && (retHighest || isDef);
							} else if (computed == null) {
								setLow = false;
							} else {
								setLow = retHighest ? (computed <= value) : (computed < value);
							}
							if (setLow) {
								low = mid + 1;
							} else {
								high = mid;
							}
						}
						return nativeMin(high, MAX_ARRAY_INDEX);
					}

					/**
					 * A specialized version of `baseCallback` which only supports `this` binding
					 * and specifying the number of arguments to provide to `func`.
					 *
					 * @private
					 * @param {Function} func The function to bind.
					 * @param {*} thisArg The `this` binding of `func`.
					 * @param {number} [argCount] The number of arguments to provide to `func`.
					 * @returns {Function} Returns the callback.
					 */
					function bindCallback(func, thisArg, argCount) {
						if (typeof func != 'function') {
							return identity;
						}
						if (thisArg === undefined) {
							return func;
						}
						switch (argCount) {
							case 1:
								return function (value) {
									return func.call(thisArg, value);
								};
							case 3:
								return function (value, index, collection) {
									return func.call(thisArg, value, index, collection);
								};
							case 4:
								return function (accumulator, value, index, collection) {
									return func.call(thisArg, accumulator, value, index, collection);
								};
							case 5:
								return function (value, other, key, object, source) {
									return func.call(thisArg, value, other, key, object, source);
								};
						}
						return function () {
							return func.apply(thisArg, arguments);
						};
					}

					/**
					 * Creates a clone of the given array buffer.
					 *
					 * @private
					 * @param {ArrayBuffer} buffer The array buffer to clone.
					 * @returns {ArrayBuffer} Returns the cloned array buffer.
					 */
					function bufferClone(buffer) {
						var result = new ArrayBuffer(buffer.byteLength),
							view = new Uint8Array(result);

						view.set(new Uint8Array(buffer));
						return result;
					}

					/**
					 * Creates an array that is the composition of partially applied arguments,
					 * placeholders, and provided arguments into a single array of arguments.
					 *
					 * @private
					 * @param {Array|Object} args The provided arguments.
					 * @param {Array} partials The arguments to prepend to those provided.
					 * @param {Array} holders The `partials` placeholder indexes.
					 * @returns {Array} Returns the new array of composed arguments.
					 */
					function composeArgs(args, partials, holders) {
						var holdersLength = holders.length,
							argsIndex = -1,
							argsLength = nativeMax(args.length - holdersLength, 0),
							leftIndex = -1,
							leftLength = partials.length,
							result = Array(leftLength + argsLength);

						while (++leftIndex < leftLength) {
							result[leftIndex] = partials[leftIndex];
						}
						while (++argsIndex < holdersLength) {
							result[holders[argsIndex]] = args[argsIndex];
						}
						while (argsLength--) {
							result[leftIndex++] = args[argsIndex++];
						}
						return result;
					}

					/**
					 * This function is like `composeArgs` except that the arguments composition
					 * is tailored for `_.partialRight`.
					 *
					 * @private
					 * @param {Array|Object} args The provided arguments.
					 * @param {Array} partials The arguments to append to those provided.
					 * @param {Array} holders The `partials` placeholder indexes.
					 * @returns {Array} Returns the new array of composed arguments.
					 */
					function composeArgsRight(args, partials, holders) {
						var holdersIndex = -1,
							holdersLength = holders.length,
							argsIndex = -1,
							argsLength = nativeMax(args.length - holdersLength, 0),
							rightIndex = -1,
							rightLength = partials.length,
							result = Array(argsLength + rightLength);

						while (++argsIndex < argsLength) {
							result[argsIndex] = args[argsIndex];
						}
						var offset = argsIndex;
						while (++rightIndex < rightLength) {
							result[offset + rightIndex] = partials[rightIndex];
						}
						while (++holdersIndex < holdersLength) {
							result[offset + holders[holdersIndex]] = args[argsIndex++];
						}
						return result;
					}

					/**
					 * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
					 *
					 * @private
					 * @param {Function} setter The function to set keys and values of the accumulator object.
					 * @param {Function} [initializer] The function to initialize the accumulator object.
					 * @returns {Function} Returns the new aggregator function.
					 */
					function createAggregator(setter, initializer) {
						return function (collection, iteratee, thisArg) {
							var result = initializer ? initializer() : {};
							iteratee = getCallback(iteratee, thisArg, 3);

							if (isArray(collection)) {
								var index = -1,
									length = collection.length;

								while (++index < length) {
									var value = collection[index];
									setter(result, value, iteratee(value, index, collection), collection);
								}
							} else {
								baseEach(collection, function (value, key, collection) {
									setter(result, value, iteratee(value, key, collection), collection);
								});
							}
							return result;
						};
					}

					/**
					 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
					 *
					 * @private
					 * @param {Function} assigner The function to assign values.
					 * @returns {Function} Returns the new assigner function.
					 */
					function createAssigner(assigner) {
						return restParam(function (object, sources) {
							var index = -1,
								length = object == null ? 0 : sources.length,
								customizer = length > 2 ? sources[length - 2] : undefined,
								guard = length > 2 ? sources[2] : undefined,
								thisArg = length > 1 ? sources[length - 1] : undefined;

							if (typeof customizer == 'function') {
								customizer = bindCallback(customizer, thisArg, 5);
								length -= 2;
							} else {
								customizer = typeof thisArg == 'function' ? thisArg : undefined;
								length -= (customizer ? 1 : 0);
							}
							if (guard && isIterateeCall(sources[0], sources[1], guard)) {
								customizer = length < 3 ? undefined : customizer;
								length = 1;
							}
							while (++index < length) {
								var source = sources[index];
								if (source) {
									assigner(object, source, customizer);
								}
							}
							return object;
						});
					}

					/**
					 * Creates a `baseEach` or `baseEachRight` function.
					 *
					 * @private
					 * @param {Function} eachFunc The function to iterate over a collection.
					 * @param {boolean} [fromRight] Specify iterating from right to left.
					 * @returns {Function} Returns the new base function.
					 */
					function createBaseEach(eachFunc, fromRight) {
						return function (collection, iteratee) {
							var length = collection ? getLength(collection) : 0;
							if (!isLength(length)) {
								return eachFunc(collection, iteratee);
							}
							var index = fromRight ? length : -1,
								iterable = toObject(collection);

							while ((fromRight ? index-- : ++index < length)) {
								if (iteratee(iterable[index], index, iterable) === false) {
									break;
								}
							}
							return collection;
						};
					}

					/**
					 * Creates a base function for `_.forIn` or `_.forInRight`.
					 *
					 * @private
					 * @param {boolean} [fromRight] Specify iterating from right to left.
					 * @returns {Function} Returns the new base function.
					 */
					function createBaseFor(fromRight) {
						return function (object, iteratee, keysFunc) {
							var iterable = toObject(object),
								props = keysFunc(object),
								length = props.length,
								index = fromRight ? length : -1;

							while ((fromRight ? index-- : ++index < length)) {
								var key = props[index];
								if (iteratee(iterable[key], key, iterable) === false) {
									break;
								}
							}
							return object;
						};
					}

					/**
					 * Creates a function that wraps `func` and invokes it with the `this`
					 * binding of `thisArg`.
					 *
					 * @private
					 * @param {Function} func The function to bind.
					 * @param {*} [thisArg] The `this` binding of `func`.
					 * @returns {Function} Returns the new bound function.
					 */
					function createBindWrapper(func, thisArg) {
						var Ctor = createCtorWrapper(func);

						function wrapper() {
							var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
							return fn.apply(thisArg, arguments);
						}

						return wrapper;
					}

					/**
					 * Creates a `Set` cache object to optimize linear searches of large arrays.
					 *
					 * @private
					 * @param {Array} [values] The values to cache.
					 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
					 */
					function createCache(values) {
						return (nativeCreate && Set) ? new SetCache(values) : null;
					}

					/**
					 * Creates a function that produces compound words out of the words in a
					 * given string.
					 *
					 * @private
					 * @param {Function} callback The function to combine each word.
					 * @returns {Function} Returns the new compounder function.
					 */
					function createCompounder(callback) {
						return function (string) {
							var index = -1,
								array = words(deburr(string)),
								length = array.length,
								result = '';

							while (++index < length) {
								result = callback(result, array[index], index);
							}
							return result;
						};
					}

					/**
					 * Creates a function that produces an instance of `Ctor` regardless of
					 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
					 *
					 * @private
					 * @param {Function} Ctor The constructor to wrap.
					 * @returns {Function} Returns the new wrapped function.
					 */
					function createCtorWrapper(Ctor) {
						return function () {
							// Use a `switch` statement to work with class constructors.
							// See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
							// for more details.
							var args = arguments;
							switch (args.length) {
								case 0:
									return new Ctor;
								case 1:
									return new Ctor(args[0]);
								case 2:
									return new Ctor(args[0], args[1]);
								case 3:
									return new Ctor(args[0], args[1], args[2]);
								case 4:
									return new Ctor(args[0], args[1], args[2], args[3]);
								case 5:
									return new Ctor(args[0], args[1], args[2], args[3], args[4]);
								case 6:
									return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
								case 7:
									return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
							}
							var thisBinding = baseCreate(Ctor.prototype),
								result = Ctor.apply(thisBinding, args);

							// Mimic the constructor's `return` behavior.
							// See https://es5.github.io/#x13.2.2 for more details.
							return isObject(result) ? result : thisBinding;
						};
					}

					/**
					 * Creates a `_.curry` or `_.curryRight` function.
					 *
					 * @private
					 * @param {boolean} flag The curry bit flag.
					 * @returns {Function} Returns the new curry function.
					 */
					function createCurry(flag) {
						function curryFunc(func, arity, guard) {
							if (guard && isIterateeCall(func, arity, guard)) {
								arity = undefined;
							}
							var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
							result.placeholder = curryFunc.placeholder;
							return result;
						}

						return curryFunc;
					}

					/**
					 * Creates a `_.defaults` or `_.defaultsDeep` function.
					 *
					 * @private
					 * @param {Function} assigner The function to assign values.
					 * @param {Function} customizer The function to customize assigned values.
					 * @returns {Function} Returns the new defaults function.
					 */
					function createDefaults(assigner, customizer) {
						return restParam(function (args) {
							var object = args[0];
							if (object == null) {
								return object;
							}
							args.push(customizer);
							return assigner.apply(undefined, args);
						});
					}

					/**
					 * Creates a `_.max` or `_.min` function.
					 *
					 * @private
					 * @param {Function} comparator The function used to compare values.
					 * @param {*} exValue The initial extremum value.
					 * @returns {Function} Returns the new extremum function.
					 */
					function createExtremum(comparator, exValue) {
						return function (collection, iteratee, thisArg) {
							if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
								iteratee = undefined;
							}
							iteratee = getCallback(iteratee, thisArg, 3);
							if (iteratee.length == 1) {
								collection = isArray(collection) ? collection : toIterable(collection);
								var result = arrayExtremum(collection, iteratee, comparator, exValue);
								if (!(collection.length && result === exValue)) {
									return result;
								}
							}
							return baseExtremum(collection, iteratee, comparator, exValue);
						};
					}

					/**
					 * Creates a `_.find` or `_.findLast` function.
					 *
					 * @private
					 * @param {Function} eachFunc The function to iterate over a collection.
					 * @param {boolean} [fromRight] Specify iterating from right to left.
					 * @returns {Function} Returns the new find function.
					 */
					function createFind(eachFunc, fromRight) {
						return function (collection, predicate, thisArg) {
							predicate = getCallback(predicate, thisArg, 3);
							if (isArray(collection)) {
								var index = baseFindIndex(collection, predicate, fromRight);
								return index > -1 ? collection[index] : undefined;
							}
							return baseFind(collection, predicate, eachFunc);
						};
					}

					/**
					 * Creates a `_.findIndex` or `_.findLastIndex` function.
					 *
					 * @private
					 * @param {boolean} [fromRight] Specify iterating from right to left.
					 * @returns {Function} Returns the new find function.
					 */
					function createFindIndex(fromRight) {
						return function (array, predicate, thisArg) {
							if (!(array && array.length)) {
								return -1;
							}
							predicate = getCallback(predicate, thisArg, 3);
							return baseFindIndex(array, predicate, fromRight);
						};
					}

					/**
					 * Creates a `_.findKey` or `_.findLastKey` function.
					 *
					 * @private
					 * @param {Function} objectFunc The function to iterate over an object.
					 * @returns {Function} Returns the new find function.
					 */
					function createFindKey(objectFunc) {
						return function (object, predicate, thisArg) {
							predicate = getCallback(predicate, thisArg, 3);
							return baseFind(object, predicate, objectFunc, true);
						};
					}

					/**
					 * Creates a `_.flow` or `_.flowRight` function.
					 *
					 * @private
					 * @param {boolean} [fromRight] Specify iterating from right to left.
					 * @returns {Function} Returns the new flow function.
					 */
					function createFlow(fromRight) {
						return function () {
							var wrapper,
								length = arguments.length,
								index = fromRight ? length : -1,
								leftIndex = 0,
								funcs = Array(length);

							while ((fromRight ? index-- : ++index < length)) {
								var func = funcs[leftIndex++] = arguments[index];
								if (typeof func != 'function') {
									throw new TypeError(FUNC_ERROR_TEXT);
								}
								if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
									wrapper = new LodashWrapper([], true);
								}
							}
							index = wrapper ? -1 : length;
							while (++index < length) {
								func = funcs[index];

								var funcName = getFuncName(func),
									data = funcName == 'wrapper' ? getData(func) : undefined;

								if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
									wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
								} else {
									wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
								}
							}
							return function () {
								var args = arguments,
									value = args[0];

								if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
									return wrapper.plant(value).value();
								}
								var index = 0,
									result = length ? funcs[index].apply(this, args) : value;

								while (++index < length) {
									result = funcs[index].call(this, result);
								}
								return result;
							};
						};
					}

					/**
					 * Creates a function for `_.forEach` or `_.forEachRight`.
					 *
					 * @private
					 * @param {Function} arrayFunc The function to iterate over an array.
					 * @param {Function} eachFunc The function to iterate over a collection.
					 * @returns {Function} Returns the new each function.
					 */
					function createForEach(arrayFunc, eachFunc) {
						return function (collection, iteratee, thisArg) {
							return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
								? arrayFunc(collection, iteratee)
								: eachFunc(collection, bindCallback(iteratee, thisArg, 3));
						};
					}

					/**
					 * Creates a function for `_.forIn` or `_.forInRight`.
					 *
					 * @private
					 * @param {Function} objectFunc The function to iterate over an object.
					 * @returns {Function} Returns the new each function.
					 */
					function createForIn(objectFunc) {
						return function (object, iteratee, thisArg) {
							if (typeof iteratee != 'function' || thisArg !== undefined) {
								iteratee = bindCallback(iteratee, thisArg, 3);
							}
							return objectFunc(object, iteratee, keysIn);
						};
					}

					/**
					 * Creates a function for `_.forOwn` or `_.forOwnRight`.
					 *
					 * @private
					 * @param {Function} objectFunc The function to iterate over an object.
					 * @returns {Function} Returns the new each function.
					 */
					function createForOwn(objectFunc) {
						return function (object, iteratee, thisArg) {
							if (typeof iteratee != 'function' || thisArg !== undefined) {
								iteratee = bindCallback(iteratee, thisArg, 3);
							}
							return objectFunc(object, iteratee);
						};
					}

					/**
					 * Creates a function for `_.mapKeys` or `_.mapValues`.
					 *
					 * @private
					 * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
					 * @returns {Function} Returns the new map function.
					 */
					function createObjectMapper(isMapKeys) {
						return function (object, iteratee, thisArg) {
							var result = {};
							iteratee = getCallback(iteratee, thisArg, 3);

							baseForOwn(object, function (value, key, object) {
								var mapped = iteratee(value, key, object);
								key = isMapKeys ? mapped : key;
								value = isMapKeys ? value : mapped;
								result[key] = value;
							});
							return result;
						};
					}

					/**
					 * Creates a function for `_.padLeft` or `_.padRight`.
					 *
					 * @private
					 * @param {boolean} [fromRight] Specify padding from the right.
					 * @returns {Function} Returns the new pad function.
					 */
					function createPadDir(fromRight) {
						return function (string, length, chars) {
							string = baseToString(string);
							return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
						};
					}

					/**
					 * Creates a `_.partial` or `_.partialRight` function.
					 *
					 * @private
					 * @param {boolean} flag The partial bit flag.
					 * @returns {Function} Returns the new partial function.
					 */
					function createPartial(flag) {
						var partialFunc = restParam(function (func, partials) {
							var holders = replaceHolders(partials, partialFunc.placeholder);
							return createWrapper(func, flag, undefined, partials, holders);
						});
						return partialFunc;
					}

					/**
					 * Creates a function for `_.reduce` or `_.reduceRight`.
					 *
					 * @private
					 * @param {Function} arrayFunc The function to iterate over an array.
					 * @param {Function} eachFunc The function to iterate over a collection.
					 * @returns {Function} Returns the new each function.
					 */
					function createReduce(arrayFunc, eachFunc) {
						return function (collection, iteratee, accumulator, thisArg) {
							var initFromArray = arguments.length < 3;
							return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
								? arrayFunc(collection, iteratee, accumulator, initFromArray)
								: baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
						};
					}

					/**
					 * Creates a function that wraps `func` and invokes it with optional `this`
					 * binding of, partial application, and currying.
					 *
					 * @private
					 * @param {Function|string} func The function or method name to reference.
					 * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
					 * @param {*} [thisArg] The `this` binding of `func`.
					 * @param {Array} [partials] The arguments to prepend to those provided to the new function.
					 * @param {Array} [holders] The `partials` placeholder indexes.
					 * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
					 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
					 * @param {Array} [argPos] The argument positions of the new function.
					 * @param {number} [ary] The arity cap of `func`.
					 * @param {number} [arity] The arity of `func`.
					 * @returns {Function} Returns the new wrapped function.
					 */
					function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
						var isAry = bitmask & ARY_FLAG,
							isBind = bitmask & BIND_FLAG,
							isBindKey = bitmask & BIND_KEY_FLAG,
							isCurry = bitmask & CURRY_FLAG,
							isCurryBound = bitmask & CURRY_BOUND_FLAG,
							isCurryRight = bitmask & CURRY_RIGHT_FLAG,
							Ctor = isBindKey ? undefined : createCtorWrapper(func);

						function wrapper() {
							// Avoid `arguments` object use disqualifying optimizations by
							// converting it to an array before providing it to other functions.
							var length = arguments.length,
								index = length,
								args = Array(length);

							while (index--) {
								args[index] = arguments[index];
							}
							if (partials) {
								args = composeArgs(args, partials, holders);
							}
							if (partialsRight) {
								args = composeArgsRight(args, partialsRight, holdersRight);
							}
							if (isCurry || isCurryRight) {
								var placeholder = wrapper.placeholder,
									argsHolders = replaceHolders(args, placeholder);

								length -= argsHolders.length;
								if (length < arity) {
									var newArgPos = argPos ? arrayCopy(argPos) : undefined,
										newArity = nativeMax(arity - length, 0),
										newsHolders = isCurry ? argsHolders : undefined,
										newHoldersRight = isCurry ? undefined : argsHolders,
										newPartials = isCurry ? args : undefined,
										newPartialsRight = isCurry ? undefined : args;

									bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
									bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

									if (!isCurryBound) {
										bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
									}
									var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
										result = createHybridWrapper.apply(undefined, newData);

									if (isLaziable(func)) {
										setData(result, newData);
									}
									result.placeholder = placeholder;
									return result;
								}
							}
							var thisBinding = isBind ? thisArg : this,
								fn = isBindKey ? thisBinding[func] : func;

							if (argPos) {
								args = reorder(args, argPos);
							}
							if (isAry && ary < args.length) {
								args.length = ary;
							}
							if (this && this !== root && this instanceof wrapper) {
								fn = Ctor || createCtorWrapper(func);
							}
							return fn.apply(thisBinding, args);
						}

						return wrapper;
					}

					/**
					 * Creates the padding required for `string` based on the given `length`.
					 * The `chars` string is truncated if the number of characters exceeds `length`.
					 *
					 * @private
					 * @param {string} string The string to create padding for.
					 * @param {number} [length=0] The padding length.
					 * @param {string} [chars=' '] The string used as padding.
					 * @returns {string} Returns the pad for `string`.
					 */
					function createPadding(string, length, chars) {
						var strLength = string.length;
						length = +length;

						if (strLength >= length || !nativeIsFinite(length)) {
							return '';
						}
						var padLength = length - strLength;
						chars = chars == null ? ' ' : (chars + '');
						return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
					}

					/**
					 * Creates a function that wraps `func` and invokes it with the optional `this`
					 * binding of `thisArg` and the `partials` prepended to those provided to
					 * the wrapper.
					 *
					 * @private
					 * @param {Function} func The function to partially apply arguments to.
					 * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
					 * @param {*} thisArg The `this` binding of `func`.
					 * @param {Array} partials The arguments to prepend to those provided to the new function.
					 * @returns {Function} Returns the new bound function.
					 */
					function createPartialWrapper(func, bitmask, thisArg, partials) {
						var isBind = bitmask & BIND_FLAG,
							Ctor = createCtorWrapper(func);

						function wrapper() {
							// Avoid `arguments` object use disqualifying optimizations by
							// converting it to an array before providing it `func`.
							var argsIndex = -1,
								argsLength = arguments.length,
								leftIndex = -1,
								leftLength = partials.length,
								args = Array(leftLength + argsLength);

							while (++leftIndex < leftLength) {
								args[leftIndex] = partials[leftIndex];
							}
							while (argsLength--) {
								args[leftIndex++] = arguments[++argsIndex];
							}
							var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
							return fn.apply(isBind ? thisArg : this, args);
						}

						return wrapper;
					}

					/**
					 * Creates a `_.ceil`, `_.floor`, or `_.round` function.
					 *
					 * @private
					 * @param {string} methodName The name of the `Math` method to use when rounding.
					 * @returns {Function} Returns the new round function.
					 */
					function createRound(methodName) {
						var func = Math[methodName];
						return function (number, precision) {
							precision = precision === undefined ? 0 : (+precision || 0);
							if (precision) {
								precision = pow(10, precision);
								return func(number * precision) / precision;
							}
							return func(number);
						};
					}

					/**
					 * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
					 *
					 * @private
					 * @param {boolean} [retHighest] Specify returning the highest qualified index.
					 * @returns {Function} Returns the new index function.
					 */
					function createSortedIndex(retHighest) {
						return function (array, value, iteratee, thisArg) {
							var callback = getCallback(iteratee);
							return (iteratee == null && callback === baseCallback)
								? binaryIndex(array, value, retHighest)
								: binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
						};
					}

					/**
					 * Creates a function that either curries or invokes `func` with optional
					 * `this` binding and partially applied arguments.
					 *
					 * @private
					 * @param {Function|string} func The function or method name to reference.
					 * @param {number} bitmask The bitmask of flags.
					 *  The bitmask may be composed of the following flags:
					 *     1 - `_.bind`
					 *     2 - `_.bindKey`
					 *     4 - `_.curry` or `_.curryRight` of a bound function
					 *     8 - `_.curry`
					 *    16 - `_.curryRight`
					 *    32 - `_.partial`
					 *    64 - `_.partialRight`
					 *   128 - `_.rearg`
					 *   256 - `_.ary`
					 * @param {*} [thisArg] The `this` binding of `func`.
					 * @param {Array} [partials] The arguments to be partially applied.
					 * @param {Array} [holders] The `partials` placeholder indexes.
					 * @param {Array} [argPos] The argument positions of the new function.
					 * @param {number} [ary] The arity cap of `func`.
					 * @param {number} [arity] The arity of `func`.
					 * @returns {Function} Returns the new wrapped function.
					 */
					function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
						var isBindKey = bitmask & BIND_KEY_FLAG;
						if (!isBindKey && typeof func != 'function') {
							throw new TypeError(FUNC_ERROR_TEXT);
						}
						var length = partials ? partials.length : 0;
						if (!length) {
							bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
							partials = holders = undefined;
						}
						length -= (holders ? holders.length : 0);
						if (bitmask & PARTIAL_RIGHT_FLAG) {
							var partialsRight = partials,
								holdersRight = holders;

							partials = holders = undefined;
						}
						var data = isBindKey ? undefined : getData(func),
							newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

						if (data) {
							mergeData(newData, data);
							bitmask = newData[1];
							arity = newData[9];
						}
						newData[9] = arity == null
							? (isBindKey ? 0 : func.length)
							: (nativeMax(arity - length, 0) || 0);

						if (bitmask == BIND_FLAG) {
							var result = createBindWrapper(newData[0], newData[2]);
						} else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
							result = createPartialWrapper.apply(undefined, newData);
						} else {
							result = createHybridWrapper.apply(undefined, newData);
						}
						var setter = data ? baseSetData : setData;
						return setter(result, newData);
					}

					/**
					 * A specialized version of `baseIsEqualDeep` for arrays with support for
					 * partial deep comparisons.
					 *
					 * @private
					 * @param {Array} array The array to compare.
					 * @param {Array} other The other array to compare.
					 * @param {Function} equalFunc The function to determine equivalents of values.
					 * @param {Function} [customizer] The function to customize comparing arrays.
					 * @param {boolean} [isLoose] Specify performing partial comparisons.
					 * @param {Array} [stackA] Tracks traversed `value` objects.
					 * @param {Array} [stackB] Tracks traversed `other` objects.
					 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
					 */
					function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
						var index = -1,
							arrLength = array.length,
							othLength = other.length;

						if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
							return false;
						}
						// Ignore non-index properties.
						while (++index < arrLength) {
							var arrValue = array[index],
								othValue = other[index],
								result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

							if (result !== undefined) {
								if (result) {
									continue;
								}
								return false;
							}
							// Recursively compare arrays (susceptible to call stack limits).
							if (isLoose) {
								if (!arraySome(other, function (othValue) {
										return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
									})) {
									return false;
								}
							} else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
								return false;
							}
						}
						return true;
					}

					/**
					 * A specialized version of `baseIsEqualDeep` for comparing objects of
					 * the same `toStringTag`.
					 *
					 * **Note:** This function only supports comparing values with tags of
					 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
					 *
					 * @private
					 * @param {Object} object The object to compare.
					 * @param {Object} other The other object to compare.
					 * @param {string} tag The `toStringTag` of the objects to compare.
					 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
					 */
					function equalByTag(object, other, tag) {
						switch (tag) {
							case boolTag:
							case dateTag:
								// Coerce dates and booleans to numbers, dates to milliseconds and booleans
								// to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
								return +object == +other;

							case errorTag:
								return object.name == other.name && object.message == other.message;

							case numberTag:
								// Treat `NaN` vs. `NaN` as equal.
								return (object != +object)
									? other != +other
									: object == +other;

							case regexpTag:
							case stringTag:
								// Coerce regexes to strings and treat strings primitives and string
								// objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
								return object == (other + '');
						}
						return false;
					}

					/**
					 * A specialized version of `baseIsEqualDeep` for objects with support for
					 * partial deep comparisons.
					 *
					 * @private
					 * @param {Object} object The object to compare.
					 * @param {Object} other The other object to compare.
					 * @param {Function} equalFunc The function to determine equivalents of values.
					 * @param {Function} [customizer] The function to customize comparing values.
					 * @param {boolean} [isLoose] Specify performing partial comparisons.
					 * @param {Array} [stackA] Tracks traversed `value` objects.
					 * @param {Array} [stackB] Tracks traversed `other` objects.
					 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
					 */
					function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
						var objProps = keys(object),
							objLength = objProps.length,
							othProps = keys(other),
							othLength = othProps.length;

						if (objLength != othLength && !isLoose) {
							return false;
						}
						var index = objLength;
						while (index--) {
							var key = objProps[index];
							if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
								return false;
							}
						}
						var skipCtor = isLoose;
						while (++index < objLength) {
							key = objProps[index];
							var objValue = object[key],
								othValue = other[key],
								result = customizer ? customizer(isLoose ? othValue : objValue, isLoose ? objValue : othValue, key) : undefined;

							// Recursively compare objects (susceptible to call stack limits).
							if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
								return false;
							}
							skipCtor || (skipCtor = key == 'constructor');
						}
						if (!skipCtor) {
							var objCtor = object.constructor,
								othCtor = other.constructor;

							// Non `Object` object instances with different constructors are not equal.
							if (objCtor != othCtor &&
								('constructor' in object && 'constructor' in other) && !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
								typeof othCtor == 'function' && othCtor instanceof othCtor)) {
								return false;
							}
						}
						return true;
					}

					/**
					 * Gets the appropriate "callback" function. If the `_.callback` method is
					 * customized this function returns the custom method, otherwise it returns
					 * the `baseCallback` function. If arguments are provided the chosen function
					 * is invoked with them and its result is returned.
					 *
					 * @private
					 * @returns {Function} Returns the chosen function or its result.
					 */
					function getCallback(func, thisArg, argCount) {
						var result = lodash.callback || callback;
						result = result === callback ? baseCallback : result;
						return argCount ? result(func, thisArg, argCount) : result;
					}

					/**
					 * Gets metadata for `func`.
					 *
					 * @private
					 * @param {Function} func The function to query.
					 * @returns {*} Returns the metadata for `func`.
					 */
					var getData = !metaMap ? noop : function (func) {
						return metaMap.get(func);
					};

					/**
					 * Gets the name of `func`.
					 *
					 * @private
					 * @param {Function} func The function to query.
					 * @returns {string} Returns the function name.
					 */
					function getFuncName(func) {
						var result = func.name,
							array = realNames[result],
							length = array ? array.length : 0;

						while (length--) {
							var data = array[length],
								otherFunc = data.func;
							if (otherFunc == null || otherFunc == func) {
								return data.name;
							}
						}
						return result;
					}

					/**
					 * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
					 * customized this function returns the custom method, otherwise it returns
					 * the `baseIndexOf` function. If arguments are provided the chosen function
					 * is invoked with them and its result is returned.
					 *
					 * @private
					 * @returns {Function|number} Returns the chosen function or its result.
					 */
					function getIndexOf(collection, target, fromIndex) {
						var result = lodash.indexOf || indexOf;
						result = result === indexOf ? baseIndexOf : result;
						return collection ? result(collection, target, fromIndex) : result;
					}

					/**
					 * Gets the "length" property value of `object`.
					 *
					 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
					 * that affects Safari on at least iOS 8.1-8.3 ARM64.
					 *
					 * @private
					 * @param {Object} object The object to query.
					 * @returns {*} Returns the "length" value.
					 */
					var getLength = baseProperty('length');

					/**
					 * Gets the propery names, values, and compare flags of `object`.
					 *
					 * @private
					 * @param {Object} object The object to query.
					 * @returns {Array} Returns the match data of `object`.
					 */
					function getMatchData(object) {
						var result = pairs(object),
							length = result.length;

						while (length--) {
							result[length][2] = isStrictComparable(result[length][1]);
						}
						return result;
					}

					/**
					 * Gets the native function at `key` of `object`.
					 *
					 * @private
					 * @param {Object} object The object to query.
					 * @param {string} key The key of the method to get.
					 * @returns {*} Returns the function if it's native, else `undefined`.
					 */
					function getNative(object, key) {
						var value = object == null ? undefined : object[key];
						return isNative(value) ? value : undefined;
					}

					/**
					 * Gets the view, applying any `transforms` to the `start` and `end` positions.
					 *
					 * @private
					 * @param {number} start The start of the view.
					 * @param {number} end The end of the view.
					 * @param {Array} transforms The transformations to apply to the view.
					 * @returns {Object} Returns an object containing the `start` and `end`
					 *  positions of the view.
					 */
					function getView(start, end, transforms) {
						var index = -1,
							length = transforms.length;

						while (++index < length) {
							var data = transforms[index],
								size = data.size;

							switch (data.type) {
								case 'drop':
									start += size;
									break;
								case 'dropRight':
									end -= size;
									break;
								case 'take':
									end = nativeMin(end, start + size);
									break;
								case 'takeRight':
									start = nativeMax(start, end - size);
									break;
							}
						}
						return {'start': start, 'end': end};
					}

					/**
					 * Initializes an array clone.
					 *
					 * @private
					 * @param {Array} array The array to clone.
					 * @returns {Array} Returns the initialized clone.
					 */
					function initCloneArray(array) {
						var length = array.length,
							result = new array.constructor(length);

						// Add array properties assigned by `RegExp#exec`.
						if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
							result.index = array.index;
							result.input = array.input;
						}
						return result;
					}

					/**
					 * Initializes an object clone.
					 *
					 * @private
					 * @param {Object} object The object to clone.
					 * @returns {Object} Returns the initialized clone.
					 */
					function initCloneObject(object) {
						var Ctor = object.constructor;
						if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
							Ctor = Object;
						}
						return new Ctor;
					}

					/**
					 * Initializes an object clone based on its `toStringTag`.
					 *
					 * **Note:** This function only supports cloning values with tags of
					 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
					 *
					 * @private
					 * @param {Object} object The object to clone.
					 * @param {string} tag The `toStringTag` of the object to clone.
					 * @param {boolean} [isDeep] Specify a deep clone.
					 * @returns {Object} Returns the initialized clone.
					 */
					function initCloneByTag(object, tag, isDeep) {
						var Ctor = object.constructor;
						switch (tag) {
							case arrayBufferTag:
								return bufferClone(object);

							case boolTag:
							case dateTag:
								return new Ctor(+object);

							case float32Tag:
							case float64Tag:
							case int8Tag:
							case int16Tag:
							case int32Tag:
							case uint8Tag:
							case uint8ClampedTag:
							case uint16Tag:
							case uint32Tag:
								var buffer = object.buffer;
								return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

							case numberTag:
							case stringTag:
								return new Ctor(object);

							case regexpTag:
								var result = new Ctor(object.source, reFlags.exec(object));
								result.lastIndex = object.lastIndex;
						}
						return result;
					}

					/**
					 * Invokes the method at `path` on `object`.
					 *
					 * @private
					 * @param {Object} object The object to query.
					 * @param {Array|string} path The path of the method to invoke.
					 * @param {Array} args The arguments to invoke the method with.
					 * @returns {*} Returns the result of the invoked method.
					 */
					function invokePath(object, path, args) {
						if (object != null && !isKey(path, object)) {
							path = toPath(path);
							object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
							path = last(path);
						}
						var func = object == null ? object : object[path];
						return func == null ? undefined : func.apply(object, args);
					}

					/**
					 * Checks if `value` is array-like.
					 *
					 * @private
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
					 */
					function isArrayLike(value) {
						return value != null && isLength(getLength(value));
					}

					/**
					 * Checks if `value` is a valid array-like index.
					 *
					 * @private
					 * @param {*} value The value to check.
					 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
					 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
					 */
					function isIndex(value, length) {
						value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
						length = length == null ? MAX_SAFE_INTEGER : length;
						return value > -1 && value % 1 == 0 && value < length;
					}

					/**
					 * Checks if the provided arguments are from an iteratee call.
					 *
					 * @private
					 * @param {*} value The potential iteratee value argument.
					 * @param {*} index The potential iteratee index or key argument.
					 * @param {*} object The potential iteratee object argument.
					 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
					 */
					function isIterateeCall(value, index, object) {
						if (!isObject(object)) {
							return false;
						}
						var type = typeof index;
						if (type == 'number'
								? (isArrayLike(object) && isIndex(index, object.length))
								: (type == 'string' && index in object)) {
							var other = object[index];
							return value === value ? (value === other) : (other !== other);
						}
						return false;
					}

					/**
					 * Checks if `value` is a property name and not a property path.
					 *
					 * @private
					 * @param {*} value The value to check.
					 * @param {Object} [object] The object to query keys on.
					 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
					 */
					function isKey(value, object) {
						var type = typeof value;
						if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
							return true;
						}
						if (isArray(value)) {
							return false;
						}
						var result = !reIsDeepProp.test(value);
						return result || (object != null && value in toObject(object));
					}

					/**
					 * Checks if `func` has a lazy counterpart.
					 *
					 * @private
					 * @param {Function} func The function to check.
					 * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
					 */
					function isLaziable(func) {
						var funcName = getFuncName(func);
						if (!(funcName in LazyWrapper.prototype)) {
							return false;
						}
						var other = lodash[funcName];
						if (func === other) {
							return true;
						}
						var data = getData(other);
						return !!data && func === data[0];
					}

					/**
					 * Checks if `value` is a valid array-like length.
					 *
					 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
					 *
					 * @private
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
					 */
					function isLength(value) {
						return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
					}

					/**
					 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
					 *
					 * @private
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` if suitable for strict
					 *  equality comparisons, else `false`.
					 */
					function isStrictComparable(value) {
						return value === value && !isObject(value);
					}

					/**
					 * Merges the function metadata of `source` into `data`.
					 *
					 * Merging metadata reduces the number of wrappers required to invoke a function.
					 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
					 * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
					 * augment function arguments, making the order in which they are executed important,
					 * preventing the merging of metadata. However, we make an exception for a safe
					 * common case where curried functions have `_.ary` and or `_.rearg` applied.
					 *
					 * @private
					 * @param {Array} data The destination metadata.
					 * @param {Array} source The source metadata.
					 * @returns {Array} Returns `data`.
					 */
					function mergeData(data, source) {
						var bitmask = data[1],
							srcBitmask = source[1],
							newBitmask = bitmask | srcBitmask,
							isCommon = newBitmask < ARY_FLAG;

						var isCombo =
							(srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
							(srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
							(srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

						// Exit early if metadata can't be merged.
						if (!(isCommon || isCombo)) {
							return data;
						}
						// Use source `thisArg` if available.
						if (srcBitmask & BIND_FLAG) {
							data[2] = source[2];
							// Set when currying a bound function.
							newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
						}
						// Compose partial arguments.
						var value = source[3];
						if (value) {
							var partials = data[3];
							data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
							data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
						}
						// Compose partial right arguments.
						value = source[5];
						if (value) {
							partials = data[5];
							data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
							data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
						}
						// Use source `argPos` if available.
						value = source[7];
						if (value) {
							data[7] = arrayCopy(value);
						}
						// Use source `ary` if it's smaller.
						if (srcBitmask & ARY_FLAG) {
							data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
						}
						// Use source `arity` if one is not provided.
						if (data[9] == null) {
							data[9] = source[9];
						}
						// Use source `func` and merge bitmasks.
						data[0] = source[0];
						data[1] = newBitmask;

						return data;
					}

					/**
					 * Used by `_.defaultsDeep` to customize its `_.merge` use.
					 *
					 * @private
					 * @param {*} objectValue The destination object property value.
					 * @param {*} sourceValue The source object property value.
					 * @returns {*} Returns the value to assign to the destination object.
					 */
					function mergeDefaults(objectValue, sourceValue) {
						return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
					}

					/**
					 * A specialized version of `_.pick` which picks `object` properties specified
					 * by `props`.
					 *
					 * @private
					 * @param {Object} object The source object.
					 * @param {string[]} props The property names to pick.
					 * @returns {Object} Returns the new object.
					 */
					function pickByArray(object, props) {
						object = toObject(object);

						var index = -1,
							length = props.length,
							result = {};

						while (++index < length) {
							var key = props[index];
							if (key in object) {
								result[key] = object[key];
							}
						}
						return result;
					}

					/**
					 * A specialized version of `_.pick` which picks `object` properties `predicate`
					 * returns truthy for.
					 *
					 * @private
					 * @param {Object} object The source object.
					 * @param {Function} predicate The function invoked per iteration.
					 * @returns {Object} Returns the new object.
					 */
					function pickByCallback(object, predicate) {
						var result = {};
						baseForIn(object, function (value, key, object) {
							if (predicate(value, key, object)) {
								result[key] = value;
							}
						});
						return result;
					}

					/**
					 * Reorder `array` according to the specified indexes where the element at
					 * the first index is assigned as the first element, the element at
					 * the second index is assigned as the second element, and so on.
					 *
					 * @private
					 * @param {Array} array The array to reorder.
					 * @param {Array} indexes The arranged array indexes.
					 * @returns {Array} Returns `array`.
					 */
					function reorder(array, indexes) {
						var arrLength = array.length,
							length = nativeMin(indexes.length, arrLength),
							oldArray = arrayCopy(array);

						while (length--) {
							var index = indexes[length];
							array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
						}
						return array;
					}

					/**
					 * Sets metadata for `func`.
					 *
					 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
					 * period of time, it will trip its breaker and transition to an identity function
					 * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
					 * for more details.
					 *
					 * @private
					 * @param {Function} func The function to associate metadata with.
					 * @param {*} data The metadata.
					 * @returns {Function} Returns `func`.
					 */
					var setData = (function () {
						var count = 0,
							lastCalled = 0;

						return function (key, value) {
							var stamp = now(),
								remaining = HOT_SPAN - (stamp - lastCalled);

							lastCalled = stamp;
							if (remaining > 0) {
								if (++count >= HOT_COUNT) {
									return key;
								}
							} else {
								count = 0;
							}
							return baseSetData(key, value);
						};
					}());

					/**
					 * A fallback implementation of `Object.keys` which creates an array of the
					 * own enumerable property names of `object`.
					 *
					 * @private
					 * @param {Object} object The object to query.
					 * @returns {Array} Returns the array of property names.
					 */
					function shimKeys(object) {
						var props = keysIn(object),
							propsLength = props.length,
							length = propsLength && object.length;

						var allowIndexes = !!length && isLength(length) &&
							(isArray(object) || isArguments(object));

						var index = -1,
							result = [];

						while (++index < propsLength) {
							var key = props[index];
							if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
								result.push(key);
							}
						}
						return result;
					}

					/**
					 * Converts `value` to an array-like object if it's not one.
					 *
					 * @private
					 * @param {*} value The value to process.
					 * @returns {Array|Object} Returns the array-like object.
					 */
					function toIterable(value) {
						if (value == null) {
							return [];
						}
						if (!isArrayLike(value)) {
							return values(value);
						}
						return isObject(value) ? value : Object(value);
					}

					/**
					 * Converts `value` to an object if it's not one.
					 *
					 * @private
					 * @param {*} value The value to process.
					 * @returns {Object} Returns the object.
					 */
					function toObject(value) {
						return isObject(value) ? value : Object(value);
					}

					/**
					 * Converts `value` to property path array if it's not one.
					 *
					 * @private
					 * @param {*} value The value to process.
					 * @returns {Array} Returns the property path array.
					 */
					function toPath(value) {
						if (isArray(value)) {
							return value;
						}
						var result = [];
						baseToString(value).replace(rePropName, function (match, number, quote, string) {
							result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
						});
						return result;
					}

					/**
					 * Creates a clone of `wrapper`.
					 *
					 * @private
					 * @param {Object} wrapper The wrapper to clone.
					 * @returns {Object} Returns the cloned wrapper.
					 */
					function wrapperClone(wrapper) {
						return wrapper instanceof LazyWrapper
							? wrapper.clone()
							: new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Creates an array of elements split into groups the length of `size`.
					 * If `collection` can't be split evenly, the final chunk will be the remaining
					 * elements.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to process.
					 * @param {number} [size=1] The length of each chunk.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Array} Returns the new array containing chunks.
					 * @example
					 *
					 * _.chunk(['a', 'b', 'c', 'd'], 2);
					 * // => [['a', 'b'], ['c', 'd']]
					 *
					 * _.chunk(['a', 'b', 'c', 'd'], 3);
					 * // => [['a', 'b', 'c'], ['d']]
					 */
					function chunk(array, size, guard) {
						if (guard ? isIterateeCall(array, size, guard) : size == null) {
							size = 1;
						} else {
							size = nativeMax(nativeFloor(size) || 1, 1);
						}
						var index = 0,
							length = array ? array.length : 0,
							resIndex = -1,
							result = Array(nativeCeil(length / size));

						while (index < length) {
							result[++resIndex] = baseSlice(array, index, (index += size));
						}
						return result;
					}

					/**
					 * Creates an array with all falsey values removed. The values `false`, `null`,
					 * `0`, `""`, `undefined`, and `NaN` are falsey.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to compact.
					 * @returns {Array} Returns the new array of filtered values.
					 * @example
					 *
					 * _.compact([0, 1, false, 2, '', 3]);
					 * // => [1, 2, 3]
					 */
					function compact(array) {
						var index = -1,
							length = array ? array.length : 0,
							resIndex = -1,
							result = [];

						while (++index < length) {
							var value = array[index];
							if (value) {
								result[++resIndex] = value;
							}
						}
						return result;
					}

					/**
					 * Creates an array of unique `array` values not included in the other
					 * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
					 * for equality comparisons.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to inspect.
					 * @param {...Array} [values] The arrays of values to exclude.
					 * @returns {Array} Returns the new array of filtered values.
					 * @example
					 *
					 * _.difference([1, 2, 3], [4, 2]);
					 * // => [1, 3]
					 */
					var difference = restParam(function (array, values) {
						return (isObjectLike(array) && isArrayLike(array))
							? baseDifference(array, baseFlatten(values, false, true))
							: [];
					});

					/**
					 * Creates a slice of `array` with `n` elements dropped from the beginning.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to query.
					 * @param {number} [n=1] The number of elements to drop.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Array} Returns the slice of `array`.
					 * @example
					 *
					 * _.drop([1, 2, 3]);
					 * // => [2, 3]
					 *
					 * _.drop([1, 2, 3], 2);
					 * // => [3]
					 *
					 * _.drop([1, 2, 3], 5);
					 * // => []
					 *
					 * _.drop([1, 2, 3], 0);
					 * // => [1, 2, 3]
					 */
					function drop(array, n, guard) {
						var length = array ? array.length : 0;
						if (!length) {
							return [];
						}
						if (guard ? isIterateeCall(array, n, guard) : n == null) {
							n = 1;
						}
						return baseSlice(array, n < 0 ? 0 : n);
					}

					/**
					 * Creates a slice of `array` with `n` elements dropped from the end.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to query.
					 * @param {number} [n=1] The number of elements to drop.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Array} Returns the slice of `array`.
					 * @example
					 *
					 * _.dropRight([1, 2, 3]);
					 * // => [1, 2]
					 *
					 * _.dropRight([1, 2, 3], 2);
					 * // => [1]
					 *
					 * _.dropRight([1, 2, 3], 5);
					 * // => []
					 *
					 * _.dropRight([1, 2, 3], 0);
					 * // => [1, 2, 3]
					 */
					function dropRight(array, n, guard) {
						var length = array ? array.length : 0;
						if (!length) {
							return [];
						}
						if (guard ? isIterateeCall(array, n, guard) : n == null) {
							n = 1;
						}
						n = length - (+n || 0);
						return baseSlice(array, 0, n < 0 ? 0 : n);
					}

					/**
					 * Creates a slice of `array` excluding elements dropped from the end.
					 * Elements are dropped until `predicate` returns falsey. The predicate is
					 * bound to `thisArg` and invoked with three arguments: (value, index, array).
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that match the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to query.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {Array} Returns the slice of `array`.
					 * @example
					 *
					 * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
					 * // => [1]
					 *
					 * var users = [
					 *   { 'user': 'barney',  'active': true },
					 *   { 'user': 'fred',    'active': false },
					 *   { 'user': 'pebbles', 'active': false }
					 * ];
					 *
					 * // using the `_.matches` callback shorthand
					 * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
					 * // => ['barney', 'fred']
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
					 * // => ['barney']
					 *
					 * // using the `_.property` callback shorthand
					 * _.pluck(_.dropRightWhile(users, 'active'), 'user');
					 * // => ['barney', 'fred', 'pebbles']
					 */
					function dropRightWhile(array, predicate, thisArg) {
						return (array && array.length)
							? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
							: [];
					}

					/**
					 * Creates a slice of `array` excluding elements dropped from the beginning.
					 * Elements are dropped until `predicate` returns falsey. The predicate is
					 * bound to `thisArg` and invoked with three arguments: (value, index, array).
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to query.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {Array} Returns the slice of `array`.
					 * @example
					 *
					 * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
					 * // => [3]
					 *
					 * var users = [
					 *   { 'user': 'barney',  'active': false },
					 *   { 'user': 'fred',    'active': false },
					 *   { 'user': 'pebbles', 'active': true }
					 * ];
					 *
					 * // using the `_.matches` callback shorthand
					 * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
					 * // => ['fred', 'pebbles']
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.pluck(_.dropWhile(users, 'active', false), 'user');
					 * // => ['pebbles']
					 *
					 * // using the `_.property` callback shorthand
					 * _.pluck(_.dropWhile(users, 'active'), 'user');
					 * // => ['barney', 'fred', 'pebbles']
					 */
					function dropWhile(array, predicate, thisArg) {
						return (array && array.length)
							? baseWhile(array, getCallback(predicate, thisArg, 3), true)
							: [];
					}

					/**
					 * Fills elements of `array` with `value` from `start` up to, but not
					 * including, `end`.
					 *
					 * **Note:** This method mutates `array`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to fill.
					 * @param {*} value The value to fill `array` with.
					 * @param {number} [start=0] The start position.
					 * @param {number} [end=array.length] The end position.
					 * @returns {Array} Returns `array`.
					 * @example
					 *
					 * var array = [1, 2, 3];
					 *
					 * _.fill(array, 'a');
					 * console.log(array);
					 * // => ['a', 'a', 'a']
					 *
					 * _.fill(Array(3), 2);
					 * // => [2, 2, 2]
					 *
					 * _.fill([4, 6, 8], '*', 1, 2);
					 * // => [4, '*', 8]
					 */
					function fill(array, value, start, end) {
						var length = array ? array.length : 0;
						if (!length) {
							return [];
						}
						if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
							start = 0;
							end = length;
						}
						return baseFill(array, value, start, end);
					}

					/**
					 * This method is like `_.find` except that it returns the index of the first
					 * element `predicate` returns truthy for instead of the element itself.
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to search.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {number} Returns the index of the found element, else `-1`.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney',  'active': false },
					 *   { 'user': 'fred',    'active': false },
					 *   { 'user': 'pebbles', 'active': true }
					 * ];
					 *
					 * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
					 * // => 0
					 *
					 * // using the `_.matches` callback shorthand
					 * _.findIndex(users, { 'user': 'fred', 'active': false });
					 * // => 1
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.findIndex(users, 'active', false);
					 * // => 0
					 *
					 * // using the `_.property` callback shorthand
					 * _.findIndex(users, 'active');
					 * // => 2
					 */
					var findIndex = createFindIndex();

					/**
					 * This method is like `_.findIndex` except that it iterates over elements
					 * of `collection` from right to left.
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to search.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {number} Returns the index of the found element, else `-1`.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney',  'active': true },
					 *   { 'user': 'fred',    'active': false },
					 *   { 'user': 'pebbles', 'active': false }
					 * ];
					 *
					 * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
					 * // => 2
					 *
					 * // using the `_.matches` callback shorthand
					 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
					 * // => 0
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.findLastIndex(users, 'active', false);
					 * // => 2
					 *
					 * // using the `_.property` callback shorthand
					 * _.findLastIndex(users, 'active');
					 * // => 0
					 */
					var findLastIndex = createFindIndex(true);

					/**
					 * Gets the first element of `array`.
					 *
					 * @static
					 * @memberOf _
					 * @alias head
					 * @category Array
					 * @param {Array} array The array to query.
					 * @returns {*} Returns the first element of `array`.
					 * @example
					 *
					 * _.first([1, 2, 3]);
					 * // => 1
					 *
					 * _.first([]);
					 * // => undefined
					 */
					function first(array) {
						return array ? array[0] : undefined;
					}

					/**
					 * Flattens a nested array. If `isDeep` is `true` the array is recursively
					 * flattened, otherwise it is only flattened a single level.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to flatten.
					 * @param {boolean} [isDeep] Specify a deep flatten.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Array} Returns the new flattened array.
					 * @example
					 *
					 * _.flatten([1, [2, 3, [4]]]);
					 * // => [1, 2, 3, [4]]
					 *
					 * // using `isDeep`
					 * _.flatten([1, [2, 3, [4]]], true);
					 * // => [1, 2, 3, 4]
					 */
					function flatten(array, isDeep, guard) {
						var length = array ? array.length : 0;
						if (guard && isIterateeCall(array, isDeep, guard)) {
							isDeep = false;
						}
						return length ? baseFlatten(array, isDeep) : [];
					}

					/**
					 * Recursively flattens a nested array.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to recursively flatten.
					 * @returns {Array} Returns the new flattened array.
					 * @example
					 *
					 * _.flattenDeep([1, [2, 3, [4]]]);
					 * // => [1, 2, 3, 4]
					 */
					function flattenDeep(array) {
						var length = array ? array.length : 0;
						return length ? baseFlatten(array, true) : [];
					}

					/**
					 * Gets the index at which the first occurrence of `value` is found in `array`
					 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
					 * for equality comparisons. If `fromIndex` is negative, it is used as the offset
					 * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
					 * performs a faster binary search.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to search.
					 * @param {*} value The value to search for.
					 * @param {boolean|number} [fromIndex=0] The index to search from or `true`
					 *  to perform a binary search on a sorted array.
					 * @returns {number} Returns the index of the matched value, else `-1`.
					 * @example
					 *
					 * _.indexOf([1, 2, 1, 2], 2);
					 * // => 1
					 *
					 * // using `fromIndex`
					 * _.indexOf([1, 2, 1, 2], 2, 2);
					 * // => 3
					 *
					 * // performing a binary search
					 * _.indexOf([1, 1, 2, 2], 2, true);
					 * // => 2
					 */
					function indexOf(array, value, fromIndex) {
						var length = array ? array.length : 0;
						if (!length) {
							return -1;
						}
						if (typeof fromIndex == 'number') {
							fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
						} else if (fromIndex) {
							var index = binaryIndex(array, value);
							if (index < length &&
								(value === value ? (value === array[index]) : (array[index] !== array[index]))) {
								return index;
							}
							return -1;
						}
						return baseIndexOf(array, value, fromIndex || 0);
					}

					/**
					 * Gets all but the last element of `array`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to query.
					 * @returns {Array} Returns the slice of `array`.
					 * @example
					 *
					 * _.initial([1, 2, 3]);
					 * // => [1, 2]
					 */
					function initial(array) {
						return dropRight(array, 1);
					}

					/**
					 * Creates an array of unique values that are included in all of the provided
					 * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
					 * for equality comparisons.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {...Array} [arrays] The arrays to inspect.
					 * @returns {Array} Returns the new array of shared values.
					 * @example
					 * _.intersection([1, 2], [4, 2], [2, 1]);
					 * // => [2]
					 */
					var intersection = restParam(function (arrays) {
						var othLength = arrays.length,
							othIndex = othLength,
							caches = Array(length),
							indexOf = getIndexOf(),
							isCommon = indexOf == baseIndexOf,
							result = [];

						while (othIndex--) {
							var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
							caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
						}
						var array = arrays[0],
							index = -1,
							length = array ? array.length : 0,
							seen = caches[0];

						outer:
							while (++index < length) {
								value = array[index];
								if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
									var othIndex = othLength;
									while (--othIndex) {
										var cache = caches[othIndex];
										if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
											continue outer;
										}
									}
									if (seen) {
										seen.push(value);
									}
									result.push(value);
								}
							}
						return result;
					});

					/**
					 * Gets the last element of `array`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to query.
					 * @returns {*} Returns the last element of `array`.
					 * @example
					 *
					 * _.last([1, 2, 3]);
					 * // => 3
					 */
					function last(array) {
						var length = array ? array.length : 0;
						return length ? array[length - 1] : undefined;
					}

					/**
					 * This method is like `_.indexOf` except that it iterates over elements of
					 * `array` from right to left.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to search.
					 * @param {*} value The value to search for.
					 * @param {boolean|number} [fromIndex=array.length-1] The index to search from
					 *  or `true` to perform a binary search on a sorted array.
					 * @returns {number} Returns the index of the matched value, else `-1`.
					 * @example
					 *
					 * _.lastIndexOf([1, 2, 1, 2], 2);
					 * // => 3
					 *
					 * // using `fromIndex`
					 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
					 * // => 1
					 *
					 * // performing a binary search
					 * _.lastIndexOf([1, 1, 2, 2], 2, true);
					 * // => 3
					 */
					function lastIndexOf(array, value, fromIndex) {
						var length = array ? array.length : 0;
						if (!length) {
							return -1;
						}
						var index = length;
						if (typeof fromIndex == 'number') {
							index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
						} else if (fromIndex) {
							index = binaryIndex(array, value, true) - 1;
							var other = array[index];
							if (value === value ? (value === other) : (other !== other)) {
								return index;
							}
							return -1;
						}
						if (value !== value) {
							return indexOfNaN(array, index, true);
						}
						while (index--) {
							if (array[index] === value) {
								return index;
							}
						}
						return -1;
					}

					/**
					 * Removes all provided values from `array` using
					 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
					 * for equality comparisons.
					 *
					 * **Note:** Unlike `_.without`, this method mutates `array`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to modify.
					 * @param {...*} [values] The values to remove.
					 * @returns {Array} Returns `array`.
					 * @example
					 *
					 * var array = [1, 2, 3, 1, 2, 3];
					 *
					 * _.pull(array, 2, 3);
					 * console.log(array);
					 * // => [1, 1]
					 */
					function pull() {
						var args = arguments,
							array = args[0];

						if (!(array && array.length)) {
							return array;
						}
						var index = 0,
							indexOf = getIndexOf(),
							length = args.length;

						while (++index < length) {
							var fromIndex = 0,
								value = args[index];

							while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
								splice.call(array, fromIndex, 1);
							}
						}
						return array;
					}

					/**
					 * Removes elements from `array` corresponding to the given indexes and returns
					 * an array of the removed elements. Indexes may be specified as an array of
					 * indexes or as individual arguments.
					 *
					 * **Note:** Unlike `_.at`, this method mutates `array`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to modify.
					 * @param {...(number|number[])} [indexes] The indexes of elements to remove,
					 *  specified as individual indexes or arrays of indexes.
					 * @returns {Array} Returns the new array of removed elements.
					 * @example
					 *
					 * var array = [5, 10, 15, 20];
					 * var evens = _.pullAt(array, 1, 3);
					 *
					 * console.log(array);
					 * // => [5, 15]
					 *
					 * console.log(evens);
					 * // => [10, 20]
					 */
					var pullAt = restParam(function (array, indexes) {
						indexes = baseFlatten(indexes);

						var result = baseAt(array, indexes);
						basePullAt(array, indexes.sort(baseCompareAscending));
						return result;
					});

					/**
					 * Removes all elements from `array` that `predicate` returns truthy for
					 * and returns an array of the removed elements. The predicate is bound to
					 * `thisArg` and invoked with three arguments: (value, index, array).
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * **Note:** Unlike `_.filter`, this method mutates `array`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to modify.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {Array} Returns the new array of removed elements.
					 * @example
					 *
					 * var array = [1, 2, 3, 4];
					 * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
					 *
					 * console.log(array);
					 * // => [1, 3]
					 *
					 * console.log(evens);
					 * // => [2, 4]
					 */
					function remove(array, predicate, thisArg) {
						var result = [];
						if (!(array && array.length)) {
							return result;
						}
						var index = -1,
							indexes = [],
							length = array.length;

						predicate = getCallback(predicate, thisArg, 3);
						while (++index < length) {
							var value = array[index];
							if (predicate(value, index, array)) {
								result.push(value);
								indexes.push(index);
							}
						}
						basePullAt(array, indexes);
						return result;
					}

					/**
					 * Gets all but the first element of `array`.
					 *
					 * @static
					 * @memberOf _
					 * @alias tail
					 * @category Array
					 * @param {Array} array The array to query.
					 * @returns {Array} Returns the slice of `array`.
					 * @example
					 *
					 * _.rest([1, 2, 3]);
					 * // => [2, 3]
					 */
					function rest(array) {
						return drop(array, 1);
					}

					/**
					 * Creates a slice of `array` from `start` up to, but not including, `end`.
					 *
					 * **Note:** This method is used instead of `Array#slice` to support node
					 * lists in IE < 9 and to ensure dense arrays are returned.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to slice.
					 * @param {number} [start=0] The start position.
					 * @param {number} [end=array.length] The end position.
					 * @returns {Array} Returns the slice of `array`.
					 */
					function slice(array, start, end) {
						var length = array ? array.length : 0;
						if (!length) {
							return [];
						}
						if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
							start = 0;
							end = length;
						}
						return baseSlice(array, start, end);
					}

					/**
					 * Uses a binary search to determine the lowest index at which `value` should
					 * be inserted into `array` in order to maintain its sort order. If an iteratee
					 * function is provided it is invoked for `value` and each element of `array`
					 * to compute their sort ranking. The iteratee is bound to `thisArg` and
					 * invoked with one argument; (value).
					 *
					 * If a property name is provided for `iteratee` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `iteratee` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The sorted array to inspect.
					 * @param {*} value The value to evaluate.
					 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {number} Returns the index at which `value` should be inserted
					 *  into `array`.
					 * @example
					 *
					 * _.sortedIndex([30, 50], 40);
					 * // => 1
					 *
					 * _.sortedIndex([4, 4, 5, 5], 5);
					 * // => 2
					 *
					 * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
					 *
					 * // using an iteratee function
					 * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
					 * // => 1
					 *
					 * // using the `_.property` callback shorthand
					 * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
					 * // => 1
					 */
					var sortedIndex = createSortedIndex();

					/**
					 * This method is like `_.sortedIndex` except that it returns the highest
					 * index at which `value` should be inserted into `array` in order to
					 * maintain its sort order.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The sorted array to inspect.
					 * @param {*} value The value to evaluate.
					 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {number} Returns the index at which `value` should be inserted
					 *  into `array`.
					 * @example
					 *
					 * _.sortedLastIndex([4, 4, 5, 5], 5);
					 * // => 4
					 */
					var sortedLastIndex = createSortedIndex(true);

					/**
					 * Creates a slice of `array` with `n` elements taken from the beginning.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to query.
					 * @param {number} [n=1] The number of elements to take.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Array} Returns the slice of `array`.
					 * @example
					 *
					 * _.take([1, 2, 3]);
					 * // => [1]
					 *
					 * _.take([1, 2, 3], 2);
					 * // => [1, 2]
					 *
					 * _.take([1, 2, 3], 5);
					 * // => [1, 2, 3]
					 *
					 * _.take([1, 2, 3], 0);
					 * // => []
					 */
					function take(array, n, guard) {
						var length = array ? array.length : 0;
						if (!length) {
							return [];
						}
						if (guard ? isIterateeCall(array, n, guard) : n == null) {
							n = 1;
						}
						return baseSlice(array, 0, n < 0 ? 0 : n);
					}

					/**
					 * Creates a slice of `array` with `n` elements taken from the end.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to query.
					 * @param {number} [n=1] The number of elements to take.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Array} Returns the slice of `array`.
					 * @example
					 *
					 * _.takeRight([1, 2, 3]);
					 * // => [3]
					 *
					 * _.takeRight([1, 2, 3], 2);
					 * // => [2, 3]
					 *
					 * _.takeRight([1, 2, 3], 5);
					 * // => [1, 2, 3]
					 *
					 * _.takeRight([1, 2, 3], 0);
					 * // => []
					 */
					function takeRight(array, n, guard) {
						var length = array ? array.length : 0;
						if (!length) {
							return [];
						}
						if (guard ? isIterateeCall(array, n, guard) : n == null) {
							n = 1;
						}
						n = length - (+n || 0);
						return baseSlice(array, n < 0 ? 0 : n);
					}

					/**
					 * Creates a slice of `array` with elements taken from the end. Elements are
					 * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
					 * and invoked with three arguments: (value, index, array).
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to query.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {Array} Returns the slice of `array`.
					 * @example
					 *
					 * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
					 * // => [2, 3]
					 *
					 * var users = [
					 *   { 'user': 'barney',  'active': true },
					 *   { 'user': 'fred',    'active': false },
					 *   { 'user': 'pebbles', 'active': false }
					 * ];
					 *
					 * // using the `_.matches` callback shorthand
					 * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
					 * // => ['pebbles']
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
					 * // => ['fred', 'pebbles']
					 *
					 * // using the `_.property` callback shorthand
					 * _.pluck(_.takeRightWhile(users, 'active'), 'user');
					 * // => []
					 */
					function takeRightWhile(array, predicate, thisArg) {
						return (array && array.length)
							? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
							: [];
					}

					/**
					 * Creates a slice of `array` with elements taken from the beginning. Elements
					 * are taken until `predicate` returns falsey. The predicate is bound to
					 * `thisArg` and invoked with three arguments: (value, index, array).
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to query.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {Array} Returns the slice of `array`.
					 * @example
					 *
					 * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
					 * // => [1, 2]
					 *
					 * var users = [
					 *   { 'user': 'barney',  'active': false },
					 *   { 'user': 'fred',    'active': false},
					 *   { 'user': 'pebbles', 'active': true }
					 * ];
					 *
					 * // using the `_.matches` callback shorthand
					 * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
					 * // => ['barney']
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.pluck(_.takeWhile(users, 'active', false), 'user');
					 * // => ['barney', 'fred']
					 *
					 * // using the `_.property` callback shorthand
					 * _.pluck(_.takeWhile(users, 'active'), 'user');
					 * // => []
					 */
					function takeWhile(array, predicate, thisArg) {
						return (array && array.length)
							? baseWhile(array, getCallback(predicate, thisArg, 3))
							: [];
					}

					/**
					 * Creates an array of unique values, in order, from all of the provided arrays
					 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
					 * for equality comparisons.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {...Array} [arrays] The arrays to inspect.
					 * @returns {Array} Returns the new array of combined values.
					 * @example
					 *
					 * _.union([1, 2], [4, 2], [2, 1]);
					 * // => [1, 2, 4]
					 */
					var union = restParam(function (arrays) {
						return baseUniq(baseFlatten(arrays, false, true));
					});

					/**
					 * Creates a duplicate-free version of an array, using
					 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
					 * for equality comparisons, in which only the first occurence of each element
					 * is kept. Providing `true` for `isSorted` performs a faster search algorithm
					 * for sorted arrays. If an iteratee function is provided it is invoked for
					 * each element in the array to generate the criterion by which uniqueness
					 * is computed. The `iteratee` is bound to `thisArg` and invoked with three
					 * arguments: (value, index, array).
					 *
					 * If a property name is provided for `iteratee` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `iteratee` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @alias unique
					 * @category Array
					 * @param {Array} array The array to inspect.
					 * @param {boolean} [isSorted] Specify the array is sorted.
					 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Array} Returns the new duplicate-value-free array.
					 * @example
					 *
					 * _.uniq([2, 1, 2]);
					 * // => [2, 1]
					 *
					 * // using `isSorted`
					 * _.uniq([1, 1, 2], true);
					 * // => [1, 2]
					 *
					 * // using an iteratee function
					 * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
					 * // => [1, 2.5]
					 *
					 * // using the `_.property` callback shorthand
					 * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
					 * // => [{ 'x': 1 }, { 'x': 2 }]
					 */
					function uniq(array, isSorted, iteratee, thisArg) {
						var length = array ? array.length : 0;
						if (!length) {
							return [];
						}
						if (isSorted != null && typeof isSorted != 'boolean') {
							thisArg = iteratee;
							iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
							isSorted = false;
						}
						var callback = getCallback();
						if (!(iteratee == null && callback === baseCallback)) {
							iteratee = callback(iteratee, thisArg, 3);
						}
						return (isSorted && getIndexOf() == baseIndexOf)
							? sortedUniq(array, iteratee)
							: baseUniq(array, iteratee);
					}

					/**
					 * This method is like `_.zip` except that it accepts an array of grouped
					 * elements and creates an array regrouping the elements to their pre-zip
					 * configuration.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array of grouped elements to process.
					 * @returns {Array} Returns the new array of regrouped elements.
					 * @example
					 *
					 * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
					 * // => [['fred', 30, true], ['barney', 40, false]]
					 *
					 * _.unzip(zipped);
					 * // => [['fred', 'barney'], [30, 40], [true, false]]
					 */
					function unzip(array) {
						if (!(array && array.length)) {
							return [];
						}
						var index = -1,
							length = 0;

						array = arrayFilter(array, function (group) {
							if (isArrayLike(group)) {
								length = nativeMax(group.length, length);
								return true;
							}
						});
						var result = Array(length);
						while (++index < length) {
							result[index] = arrayMap(array, baseProperty(index));
						}
						return result;
					}

					/**
					 * This method is like `_.unzip` except that it accepts an iteratee to specify
					 * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
					 * and invoked with four arguments: (accumulator, value, index, group).
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array of grouped elements to process.
					 * @param {Function} [iteratee] The function to combine regrouped values.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Array} Returns the new array of regrouped elements.
					 * @example
					 *
					 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
					 * // => [[1, 10, 100], [2, 20, 200]]
					 *
					 * _.unzipWith(zipped, _.add);
					 * // => [3, 30, 300]
					 */
					function unzipWith(array, iteratee, thisArg) {
						var length = array ? array.length : 0;
						if (!length) {
							return [];
						}
						var result = unzip(array);
						if (iteratee == null) {
							return result;
						}
						iteratee = bindCallback(iteratee, thisArg, 4);
						return arrayMap(result, function (group) {
							return arrayReduce(group, iteratee, undefined, true);
						});
					}

					/**
					 * Creates an array excluding all provided values using
					 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
					 * for equality comparisons.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {Array} array The array to filter.
					 * @param {...*} [values] The values to exclude.
					 * @returns {Array} Returns the new array of filtered values.
					 * @example
					 *
					 * _.without([1, 2, 1, 3], 1, 2);
					 * // => [3]
					 */
					var without = restParam(function (array, values) {
						return isArrayLike(array)
							? baseDifference(array, values)
							: [];
					});

					/**
					 * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
					 * of the provided arrays.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {...Array} [arrays] The arrays to inspect.
					 * @returns {Array} Returns the new array of values.
					 * @example
					 *
					 * _.xor([1, 2], [4, 2]);
					 * // => [1, 4]
					 */
					function xor() {
						var index = -1,
							length = arguments.length;

						while (++index < length) {
							var array = arguments[index];
							if (isArrayLike(array)) {
								var result = result
									? arrayPush(baseDifference(result, array), baseDifference(array, result))
									: array;
							}
						}
						return result ? baseUniq(result) : [];
					}

					/**
					 * Creates an array of grouped elements, the first of which contains the first
					 * elements of the given arrays, the second of which contains the second elements
					 * of the given arrays, and so on.
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {...Array} [arrays] The arrays to process.
					 * @returns {Array} Returns the new array of grouped elements.
					 * @example
					 *
					 * _.zip(['fred', 'barney'], [30, 40], [true, false]);
					 * // => [['fred', 30, true], ['barney', 40, false]]
					 */
					var zip = restParam(unzip);

					/**
					 * The inverse of `_.pairs`; this method returns an object composed from arrays
					 * of property names and values. Provide either a single two dimensional array,
					 * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
					 * and one of corresponding values.
					 *
					 * @static
					 * @memberOf _
					 * @alias object
					 * @category Array
					 * @param {Array} props The property names.
					 * @param {Array} [values=[]] The property values.
					 * @returns {Object} Returns the new object.
					 * @example
					 *
					 * _.zipObject([['fred', 30], ['barney', 40]]);
					 * // => { 'fred': 30, 'barney': 40 }
					 *
					 * _.zipObject(['fred', 'barney'], [30, 40]);
					 * // => { 'fred': 30, 'barney': 40 }
					 */
					function zipObject(props, values) {
						var index = -1,
							length = props ? props.length : 0,
							result = {};

						if (length && !values && !isArray(props[0])) {
							values = [];
						}
						while (++index < length) {
							var key = props[index];
							if (values) {
								result[key] = values[index];
							} else if (key) {
								result[key[0]] = key[1];
							}
						}
						return result;
					}

					/**
					 * This method is like `_.zip` except that it accepts an iteratee to specify
					 * how grouped values should be combined. The `iteratee` is bound to `thisArg`
					 * and invoked with four arguments: (accumulator, value, index, group).
					 *
					 * @static
					 * @memberOf _
					 * @category Array
					 * @param {...Array} [arrays] The arrays to process.
					 * @param {Function} [iteratee] The function to combine grouped values.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Array} Returns the new array of grouped elements.
					 * @example
					 *
					 * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
					 * // => [111, 222]
					 */
					var zipWith = restParam(function (arrays) {
						var length = arrays.length,
							iteratee = length > 2 ? arrays[length - 2] : undefined,
							thisArg = length > 1 ? arrays[length - 1] : undefined;

						if (length > 2 && typeof iteratee == 'function') {
							length -= 2;
						} else {
							iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
							thisArg = undefined;
						}
						arrays.length = length;
						return unzipWith(arrays, iteratee, thisArg);
					});

					/*------------------------------------------------------------------------*/

					/**
					 * Creates a `lodash` object that wraps `value` with explicit method
					 * chaining enabled.
					 *
					 * @static
					 * @memberOf _
					 * @category Chain
					 * @param {*} value The value to wrap.
					 * @returns {Object} Returns the new `lodash` wrapper instance.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney',  'age': 36 },
					 *   { 'user': 'fred',    'age': 40 },
					 *   { 'user': 'pebbles', 'age': 1 }
					 * ];
					 *
					 * var youngest = _.chain(users)
					 *   .sortBy('age')
					 *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
					 *   .first()
					 *   .value();
					 * // => 'pebbles is 1'
					 */
					function chain(value) {
						var result = lodash(value);
						result.__chain__ = true;
						return result;
					}

					/**
					 * This method invokes `interceptor` and returns `value`. The interceptor is
					 * bound to `thisArg` and invoked with one argument; (value). The purpose of
					 * this method is to "tap into" a method chain in order to perform operations
					 * on intermediate results within the chain.
					 *
					 * @static
					 * @memberOf _
					 * @category Chain
					 * @param {*} value The value to provide to `interceptor`.
					 * @param {Function} interceptor The function to invoke.
					 * @param {*} [thisArg] The `this` binding of `interceptor`.
					 * @returns {*} Returns `value`.
					 * @example
					 *
					 * _([1, 2, 3])
					 *  .tap(function(array) {
	     *    array.pop();
	     *  })
					 *  .reverse()
					 *  .value();
					 * // => [2, 1]
					 */
					function tap(value, interceptor, thisArg) {
						interceptor.call(thisArg, value);
						return value;
					}

					/**
					 * This method is like `_.tap` except that it returns the result of `interceptor`.
					 *
					 * @static
					 * @memberOf _
					 * @category Chain
					 * @param {*} value The value to provide to `interceptor`.
					 * @param {Function} interceptor The function to invoke.
					 * @param {*} [thisArg] The `this` binding of `interceptor`.
					 * @returns {*} Returns the result of `interceptor`.
					 * @example
					 *
					 * _('  abc  ')
					 *  .chain()
					 *  .trim()
					 *  .thru(function(value) {
	     *    return [value];
	     *  })
					 *  .value();
					 * // => ['abc']
					 */
					function thru(value, interceptor, thisArg) {
						return interceptor.call(thisArg, value);
					}

					/**
					 * Enables explicit method chaining on the wrapper object.
					 *
					 * @name chain
					 * @memberOf _
					 * @category Chain
					 * @returns {Object} Returns the new `lodash` wrapper instance.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney', 'age': 36 },
					 *   { 'user': 'fred',   'age': 40 }
					 * ];
					 *
					 * // without explicit chaining
					 * _(users).first();
					 * // => { 'user': 'barney', 'age': 36 }
					 *
					 * // with explicit chaining
					 * _(users).chain()
					 *   .first()
					 *   .pick('user')
					 *   .value();
					 * // => { 'user': 'barney' }
					 */
					function wrapperChain() {
						return chain(this);
					}

					/**
					 * Executes the chained sequence and returns the wrapped result.
					 *
					 * @name commit
					 * @memberOf _
					 * @category Chain
					 * @returns {Object} Returns the new `lodash` wrapper instance.
					 * @example
					 *
					 * var array = [1, 2];
					 * var wrapped = _(array).push(3);
					 *
					 * console.log(array);
					 * // => [1, 2]
					 *
					 * wrapped = wrapped.commit();
					 * console.log(array);
					 * // => [1, 2, 3]
					 *
					 * wrapped.last();
					 * // => 3
					 *
					 * console.log(array);
					 * // => [1, 2, 3]
					 */
					function wrapperCommit() {
						return new LodashWrapper(this.value(), this.__chain__);
					}

					/**
					 * Creates a new array joining a wrapped array with any additional arrays
					 * and/or values.
					 *
					 * @name concat
					 * @memberOf _
					 * @category Chain
					 * @param {...*} [values] The values to concatenate.
					 * @returns {Array} Returns the new concatenated array.
					 * @example
					 *
					 * var array = [1];
					 * var wrapped = _(array).concat(2, [3], [[4]]);
					 *
					 * console.log(wrapped.value());
					 * // => [1, 2, 3, [4]]
					 *
					 * console.log(array);
					 * // => [1]
					 */
					var wrapperConcat = restParam(function (values) {
						values = baseFlatten(values);
						return this.thru(function (array) {
							return arrayConcat(isArray(array) ? array : [toObject(array)], values);
						});
					});

					/**
					 * Creates a clone of the chained sequence planting `value` as the wrapped value.
					 *
					 * @name plant
					 * @memberOf _
					 * @category Chain
					 * @returns {Object} Returns the new `lodash` wrapper instance.
					 * @example
					 *
					 * var array = [1, 2];
					 * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
					 *
					 * var other = [3, 4];
					 * var otherWrapped = wrapped.plant(other);
					 *
					 * otherWrapped.value();
					 * // => [9, 16]
					 *
					 * wrapped.value();
					 * // => [1, 4]
					 */
					function wrapperPlant(value) {
						var result,
							parent = this;

						while (parent instanceof baseLodash) {
							var clone = wrapperClone(parent);
							if (result) {
								previous.__wrapped__ = clone;
							} else {
								result = clone;
							}
							var previous = clone;
							parent = parent.__wrapped__;
						}
						previous.__wrapped__ = value;
						return result;
					}

					/**
					 * Reverses the wrapped array so the first element becomes the last, the
					 * second element becomes the second to last, and so on.
					 *
					 * **Note:** This method mutates the wrapped array.
					 *
					 * @name reverse
					 * @memberOf _
					 * @category Chain
					 * @returns {Object} Returns the new reversed `lodash` wrapper instance.
					 * @example
					 *
					 * var array = [1, 2, 3];
					 *
					 * _(array).reverse().value()
					 * // => [3, 2, 1]
					 *
					 * console.log(array);
					 * // => [3, 2, 1]
					 */
					function wrapperReverse() {
						var value = this.__wrapped__;

						var interceptor = function (value) {
							return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
						};
						if (value instanceof LazyWrapper) {
							var wrapped = value;
							if (this.__actions__.length) {
								wrapped = new LazyWrapper(this);
							}
							wrapped = wrapped.reverse();
							wrapped.__actions__.push({'func': thru, 'args': [interceptor], 'thisArg': undefined});
							return new LodashWrapper(wrapped, this.__chain__);
						}
						return this.thru(interceptor);
					}

					/**
					 * Produces the result of coercing the unwrapped value to a string.
					 *
					 * @name toString
					 * @memberOf _
					 * @category Chain
					 * @returns {string} Returns the coerced string value.
					 * @example
					 *
					 * _([1, 2, 3]).toString();
					 * // => '1,2,3'
					 */
					function wrapperToString() {
						return (this.value() + '');
					}

					/**
					 * Executes the chained sequence to extract the unwrapped value.
					 *
					 * @name value
					 * @memberOf _
					 * @alias run, toJSON, valueOf
					 * @category Chain
					 * @returns {*} Returns the resolved unwrapped value.
					 * @example
					 *
					 * _([1, 2, 3]).value();
					 * // => [1, 2, 3]
					 */
					function wrapperValue() {
						return baseWrapperValue(this.__wrapped__, this.__actions__);
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Creates an array of elements corresponding to the given keys, or indexes,
					 * of `collection`. Keys may be specified as individual arguments or as arrays
					 * of keys.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {...(number|number[]|string|string[])} [props] The property names
					 *  or indexes of elements to pick, specified individually or in arrays.
					 * @returns {Array} Returns the new array of picked elements.
					 * @example
					 *
					 * _.at(['a', 'b', 'c'], [0, 2]);
					 * // => ['a', 'c']
					 *
					 * _.at(['barney', 'fred', 'pebbles'], 0, 2);
					 * // => ['barney', 'pebbles']
					 */
					var at = restParam(function (collection, props) {
						return baseAt(collection, baseFlatten(props));
					});

					/**
					 * Creates an object composed of keys generated from the results of running
					 * each element of `collection` through `iteratee`. The corresponding value
					 * of each key is the number of times the key was returned by `iteratee`.
					 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
					 * (value, index|key, collection).
					 *
					 * If a property name is provided for `iteratee` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `iteratee` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Object} Returns the composed aggregate object.
					 * @example
					 *
					 * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
					 * // => { '4': 1, '6': 2 }
					 *
					 * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
					 * // => { '4': 1, '6': 2 }
					 *
					 * _.countBy(['one', 'two', 'three'], 'length');
					 * // => { '3': 2, '5': 1 }
					 */
					var countBy = createAggregator(function (result, value, key) {
						hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
					});

					/**
					 * Checks if `predicate` returns truthy for **all** elements of `collection`.
					 * The predicate is bound to `thisArg` and invoked with three arguments:
					 * (value, index|key, collection).
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @alias all
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {boolean} Returns `true` if all elements pass the predicate check,
					 *  else `false`.
					 * @example
					 *
					 * _.every([true, 1, null, 'yes'], Boolean);
					 * // => false
					 *
					 * var users = [
					 *   { 'user': 'barney', 'active': false },
					 *   { 'user': 'fred',   'active': false }
					 * ];
					 *
					 * // using the `_.matches` callback shorthand
					 * _.every(users, { 'user': 'barney', 'active': false });
					 * // => false
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.every(users, 'active', false);
					 * // => true
					 *
					 * // using the `_.property` callback shorthand
					 * _.every(users, 'active');
					 * // => false
					 */
					function every(collection, predicate, thisArg) {
						var func = isArray(collection) ? arrayEvery : baseEvery;
						if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
							predicate = undefined;
						}
						if (typeof predicate != 'function' || thisArg !== undefined) {
							predicate = getCallback(predicate, thisArg, 3);
						}
						return func(collection, predicate);
					}

					/**
					 * Iterates over elements of `collection`, returning an array of all elements
					 * `predicate` returns truthy for. The predicate is bound to `thisArg` and
					 * invoked with three arguments: (value, index|key, collection).
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @alias select
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {Array} Returns the new filtered array.
					 * @example
					 *
					 * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
					 * // => [4, 6]
					 *
					 * var users = [
					 *   { 'user': 'barney', 'age': 36, 'active': true },
					 *   { 'user': 'fred',   'age': 40, 'active': false }
					 * ];
					 *
					 * // using the `_.matches` callback shorthand
					 * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
					 * // => ['barney']
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.pluck(_.filter(users, 'active', false), 'user');
					 * // => ['fred']
					 *
					 * // using the `_.property` callback shorthand
					 * _.pluck(_.filter(users, 'active'), 'user');
					 * // => ['barney']
					 */
					function filter(collection, predicate, thisArg) {
						var func = isArray(collection) ? arrayFilter : baseFilter;
						predicate = getCallback(predicate, thisArg, 3);
						return func(collection, predicate);
					}

					/**
					 * Iterates over elements of `collection`, returning the first element
					 * `predicate` returns truthy for. The predicate is bound to `thisArg` and
					 * invoked with three arguments: (value, index|key, collection).
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @alias detect
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to search.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {*} Returns the matched element, else `undefined`.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney',  'age': 36, 'active': true },
					 *   { 'user': 'fred',    'age': 40, 'active': false },
					 *   { 'user': 'pebbles', 'age': 1,  'active': true }
					 * ];
					 *
					 * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
					 * // => 'barney'
					 *
					 * // using the `_.matches` callback shorthand
					 * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
					 * // => 'pebbles'
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.result(_.find(users, 'active', false), 'user');
					 * // => 'fred'
					 *
					 * // using the `_.property` callback shorthand
					 * _.result(_.find(users, 'active'), 'user');
					 * // => 'barney'
					 */
					var find = createFind(baseEach);

					/**
					 * This method is like `_.find` except that it iterates over elements of
					 * `collection` from right to left.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to search.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {*} Returns the matched element, else `undefined`.
					 * @example
					 *
					 * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
					 * // => 3
					 */
					var findLast = createFind(baseEachRight, true);

					/**
					 * Performs a deep comparison between each element in `collection` and the
					 * source object, returning the first element that has equivalent property
					 * values.
					 *
					 * **Note:** This method supports comparing arrays, booleans, `Date` objects,
					 * numbers, `Object` objects, regexes, and strings. Objects are compared by
					 * their own, not inherited, enumerable properties. For comparing a single
					 * own or inherited property value see `_.matchesProperty`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to search.
					 * @param {Object} source The object of property values to match.
					 * @returns {*} Returns the matched element, else `undefined`.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney', 'age': 36, 'active': true },
					 *   { 'user': 'fred',   'age': 40, 'active': false }
					 * ];
					 *
					 * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
					 * // => 'barney'
					 *
					 * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
					 * // => 'fred'
					 */
					function findWhere(collection, source) {
						return find(collection, baseMatches(source));
					}

					/**
					 * Iterates over elements of `collection` invoking `iteratee` for each element.
					 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
					 * (value, index|key, collection). Iteratee functions may exit iteration early
					 * by explicitly returning `false`.
					 *
					 * **Note:** As with other "Collections" methods, objects with a "length" property
					 * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
					 * may be used for object iteration.
					 *
					 * @static
					 * @memberOf _
					 * @alias each
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Array|Object|string} Returns `collection`.
					 * @example
					 *
					 * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
					 * // => logs each value from left to right and returns the array
					 *
					 * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
					 * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
					 */
					var forEach = createForEach(arrayEach, baseEach);

					/**
					 * This method is like `_.forEach` except that it iterates over elements of
					 * `collection` from right to left.
					 *
					 * @static
					 * @memberOf _
					 * @alias eachRight
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Array|Object|string} Returns `collection`.
					 * @example
					 *
					 * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
					 * // => logs each value from right to left and returns the array
					 */
					var forEachRight = createForEach(arrayEachRight, baseEachRight);

					/**
					 * Creates an object composed of keys generated from the results of running
					 * each element of `collection` through `iteratee`. The corresponding value
					 * of each key is an array of the elements responsible for generating the key.
					 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
					 * (value, index|key, collection).
					 *
					 * If a property name is provided for `iteratee` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `iteratee` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Object} Returns the composed aggregate object.
					 * @example
					 *
					 * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
					 * // => { '4': [4.2], '6': [6.1, 6.4] }
					 *
					 * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
					 * // => { '4': [4.2], '6': [6.1, 6.4] }
					 *
					 * // using the `_.property` callback shorthand
					 * _.groupBy(['one', 'two', 'three'], 'length');
					 * // => { '3': ['one', 'two'], '5': ['three'] }
					 */
					var groupBy = createAggregator(function (result, value, key) {
						if (hasOwnProperty.call(result, key)) {
							result[key].push(value);
						} else {
							result[key] = [value];
						}
					});

					/**
					 * Checks if `value` is in `collection` using
					 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
					 * for equality comparisons. If `fromIndex` is negative, it is used as the offset
					 * from the end of `collection`.
					 *
					 * @static
					 * @memberOf _
					 * @alias contains, include
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to search.
					 * @param {*} target The value to search for.
					 * @param {number} [fromIndex=0] The index to search from.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
					 * @returns {boolean} Returns `true` if a matching element is found, else `false`.
					 * @example
					 *
					 * _.includes([1, 2, 3], 1);
					 * // => true
					 *
					 * _.includes([1, 2, 3], 1, 2);
					 * // => false
					 *
					 * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
					 * // => true
					 *
					 * _.includes('pebbles', 'eb');
					 * // => true
					 */
					function includes(collection, target, fromIndex, guard) {
						var length = collection ? getLength(collection) : 0;
						if (!isLength(length)) {
							collection = values(collection);
							length = collection.length;
						}
						if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
							fromIndex = 0;
						} else {
							fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
						}
						return (typeof collection == 'string' || !isArray(collection) && isString(collection))
							? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
							: (!!length && getIndexOf(collection, target, fromIndex) > -1);
					}

					/**
					 * Creates an object composed of keys generated from the results of running
					 * each element of `collection` through `iteratee`. The corresponding value
					 * of each key is the last element responsible for generating the key. The
					 * iteratee function is bound to `thisArg` and invoked with three arguments:
					 * (value, index|key, collection).
					 *
					 * If a property name is provided for `iteratee` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `iteratee` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Object} Returns the composed aggregate object.
					 * @example
					 *
					 * var keyData = [
					 *   { 'dir': 'left', 'code': 97 },
					 *   { 'dir': 'right', 'code': 100 }
					 * ];
					 *
					 * _.indexBy(keyData, 'dir');
					 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
					 *
					 * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
					 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
					 *
					 * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
					 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
					 */
					var indexBy = createAggregator(function (result, value, key) {
						result[key] = value;
					});

					/**
					 * Invokes the method at `path` of each element in `collection`, returning
					 * an array of the results of each invoked method. Any additional arguments
					 * are provided to each invoked method. If `methodName` is a function it is
					 * invoked for, and `this` bound to, each element in `collection`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Array|Function|string} path The path of the method to invoke or
					 *  the function invoked per iteration.
					 * @param {...*} [args] The arguments to invoke the method with.
					 * @returns {Array} Returns the array of results.
					 * @example
					 *
					 * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
					 * // => [[1, 5, 7], [1, 2, 3]]
					 *
					 * _.invoke([123, 456], String.prototype.split, '');
					 * // => [['1', '2', '3'], ['4', '5', '6']]
					 */
					var invoke = restParam(function (collection, path, args) {
						var index = -1,
							isFunc = typeof path == 'function',
							isProp = isKey(path),
							result = isArrayLike(collection) ? Array(collection.length) : [];

						baseEach(collection, function (value) {
							var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
							result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
						});
						return result;
					});

					/**
					 * Creates an array of values by running each element in `collection` through
					 * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
					 * arguments: (value, index|key, collection).
					 *
					 * If a property name is provided for `iteratee` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `iteratee` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * Many lodash methods are guarded to work as iteratees for methods like
					 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
					 *
					 * The guarded methods are:
					 * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
					 * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
					 * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
					 * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
					 * `sum`, `uniq`, and `words`
					 *
					 * @static
					 * @memberOf _
					 * @alias collect
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Array} Returns the new mapped array.
					 * @example
					 *
					 * function timesThree(n) {
	     *   return n * 3;
	     * }
					 *
					 * _.map([1, 2], timesThree);
					 * // => [3, 6]
					 *
					 * _.map({ 'a': 1, 'b': 2 }, timesThree);
					 * // => [3, 6] (iteration order is not guaranteed)
					 *
					 * var users = [
					 *   { 'user': 'barney' },
					 *   { 'user': 'fred' }
					 * ];
					 *
					 * // using the `_.property` callback shorthand
					 * _.map(users, 'user');
					 * // => ['barney', 'fred']
					 */
					function map(collection, iteratee, thisArg) {
						var func = isArray(collection) ? arrayMap : baseMap;
						iteratee = getCallback(iteratee, thisArg, 3);
						return func(collection, iteratee);
					}

					/**
					 * Creates an array of elements split into two groups, the first of which
					 * contains elements `predicate` returns truthy for, while the second of which
					 * contains elements `predicate` returns falsey for. The predicate is bound
					 * to `thisArg` and invoked with three arguments: (value, index|key, collection).
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {Array} Returns the array of grouped elements.
					 * @example
					 *
					 * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
					 * // => [[1, 3], [2]]
					 *
					 * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
					 * // => [[1.2, 3.4], [2.3]]
					 *
					 * var users = [
					 *   { 'user': 'barney',  'age': 36, 'active': false },
					 *   { 'user': 'fred',    'age': 40, 'active': true },
					 *   { 'user': 'pebbles', 'age': 1,  'active': false }
					 * ];
					 *
					 * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
					 *
					 * // using the `_.matches` callback shorthand
					 * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
					 * // => [['pebbles'], ['barney', 'fred']]
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.map(_.partition(users, 'active', false), mapper);
					 * // => [['barney', 'pebbles'], ['fred']]
					 *
					 * // using the `_.property` callback shorthand
					 * _.map(_.partition(users, 'active'), mapper);
					 * // => [['fred'], ['barney', 'pebbles']]
					 */
					var partition = createAggregator(function (result, value, key) {
						result[key ? 0 : 1].push(value);
					}, function () {
						return [[], []];
					});

					/**
					 * Gets the property value of `path` from all elements in `collection`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Array|string} path The path of the property to pluck.
					 * @returns {Array} Returns the property values.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney', 'age': 36 },
					 *   { 'user': 'fred',   'age': 40 }
					 * ];
					 *
					 * _.pluck(users, 'user');
					 * // => ['barney', 'fred']
					 *
					 * var userIndex = _.indexBy(users, 'user');
					 * _.pluck(userIndex, 'age');
					 * // => [36, 40] (iteration order is not guaranteed)
					 */
					function pluck(collection, path) {
						return map(collection, property(path));
					}

					/**
					 * Reduces `collection` to a value which is the accumulated result of running
					 * each element in `collection` through `iteratee`, where each successive
					 * invocation is supplied the return value of the previous. If `accumulator`
					 * is not provided the first element of `collection` is used as the initial
					 * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
					 * (accumulator, value, index|key, collection).
					 *
					 * Many lodash methods are guarded to work as iteratees for methods like
					 * `_.reduce`, `_.reduceRight`, and `_.transform`.
					 *
					 * The guarded methods are:
					 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
					 * and `sortByOrder`
					 *
					 * @static
					 * @memberOf _
					 * @alias foldl, inject
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
					 * @param {*} [accumulator] The initial value.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {*} Returns the accumulated value.
					 * @example
					 *
					 * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
					 * // => 3
					 *
					 * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
					 * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
					 */
					var reduce = createReduce(arrayReduce, baseEach);

					/**
					 * This method is like `_.reduce` except that it iterates over elements of
					 * `collection` from right to left.
					 *
					 * @static
					 * @memberOf _
					 * @alias foldr
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
					 * @param {*} [accumulator] The initial value.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {*} Returns the accumulated value.
					 * @example
					 *
					 * var array = [[0, 1], [2, 3], [4, 5]];
					 *
					 * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
					 * // => [4, 5, 2, 3, 0, 1]
					 */
					var reduceRight = createReduce(arrayReduceRight, baseEachRight);

					/**
					 * The opposite of `_.filter`; this method returns the elements of `collection`
					 * that `predicate` does **not** return truthy for.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {Array} Returns the new filtered array.
					 * @example
					 *
					 * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
					 * // => [1, 3]
					 *
					 * var users = [
					 *   { 'user': 'barney', 'age': 36, 'active': false },
					 *   { 'user': 'fred',   'age': 40, 'active': true }
					 * ];
					 *
					 * // using the `_.matches` callback shorthand
					 * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
					 * // => ['barney']
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.pluck(_.reject(users, 'active', false), 'user');
					 * // => ['fred']
					 *
					 * // using the `_.property` callback shorthand
					 * _.pluck(_.reject(users, 'active'), 'user');
					 * // => ['barney']
					 */
					function reject(collection, predicate, thisArg) {
						var func = isArray(collection) ? arrayFilter : baseFilter;
						predicate = getCallback(predicate, thisArg, 3);
						return func(collection, function (value, index, collection) {
							return !predicate(value, index, collection);
						});
					}

					/**
					 * Gets a random element or `n` random elements from a collection.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to sample.
					 * @param {number} [n] The number of elements to sample.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {*} Returns the random sample(s).
					 * @example
					 *
					 * _.sample([1, 2, 3, 4]);
					 * // => 2
					 *
					 * _.sample([1, 2, 3, 4], 2);
					 * // => [3, 1]
					 */
					function sample(collection, n, guard) {
						if (guard ? isIterateeCall(collection, n, guard) : n == null) {
							collection = toIterable(collection);
							var length = collection.length;
							return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
						}
						var index = -1,
							result = toArray(collection),
							length = result.length,
							lastIndex = length - 1;

						n = nativeMin(n < 0 ? 0 : (+n || 0), length);
						while (++index < n) {
							var rand = baseRandom(index, lastIndex),
								value = result[rand];

							result[rand] = result[index];
							result[index] = value;
						}
						result.length = n;
						return result;
					}

					/**
					 * Creates an array of shuffled values, using a version of the
					 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to shuffle.
					 * @returns {Array} Returns the new shuffled array.
					 * @example
					 *
					 * _.shuffle([1, 2, 3, 4]);
					 * // => [4, 1, 3, 2]
					 */
					function shuffle(collection) {
						return sample(collection, POSITIVE_INFINITY);
					}

					/**
					 * Gets the size of `collection` by returning its length for array-like
					 * values or the number of own enumerable properties for objects.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to inspect.
					 * @returns {number} Returns the size of `collection`.
					 * @example
					 *
					 * _.size([1, 2, 3]);
					 * // => 3
					 *
					 * _.size({ 'a': 1, 'b': 2 });
					 * // => 2
					 *
					 * _.size('pebbles');
					 * // => 7
					 */
					function size(collection) {
						var length = collection ? getLength(collection) : 0;
						return isLength(length) ? length : keys(collection).length;
					}

					/**
					 * Checks if `predicate` returns truthy for **any** element of `collection`.
					 * The function returns as soon as it finds a passing value and does not iterate
					 * over the entire collection. The predicate is bound to `thisArg` and invoked
					 * with three arguments: (value, index|key, collection).
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @alias any
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {boolean} Returns `true` if any element passes the predicate check,
					 *  else `false`.
					 * @example
					 *
					 * _.some([null, 0, 'yes', false], Boolean);
					 * // => true
					 *
					 * var users = [
					 *   { 'user': 'barney', 'active': true },
					 *   { 'user': 'fred',   'active': false }
					 * ];
					 *
					 * // using the `_.matches` callback shorthand
					 * _.some(users, { 'user': 'barney', 'active': false });
					 * // => false
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.some(users, 'active', false);
					 * // => true
					 *
					 * // using the `_.property` callback shorthand
					 * _.some(users, 'active');
					 * // => true
					 */
					function some(collection, predicate, thisArg) {
						var func = isArray(collection) ? arraySome : baseSome;
						if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
							predicate = undefined;
						}
						if (typeof predicate != 'function' || thisArg !== undefined) {
							predicate = getCallback(predicate, thisArg, 3);
						}
						return func(collection, predicate);
					}

					/**
					 * Creates an array of elements, sorted in ascending order by the results of
					 * running each element in a collection through `iteratee`. This method performs
					 * a stable sort, that is, it preserves the original sort order of equal elements.
					 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
					 * (value, index|key, collection).
					 *
					 * If a property name is provided for `iteratee` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `iteratee` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Array} Returns the new sorted array.
					 * @example
					 *
					 * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
					 * // => [3, 1, 2]
					 *
					 * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
					 * // => [3, 1, 2]
					 *
					 * var users = [
					 *   { 'user': 'fred' },
					 *   { 'user': 'pebbles' },
					 *   { 'user': 'barney' }
					 * ];
					 *
					 * // using the `_.property` callback shorthand
					 * _.pluck(_.sortBy(users, 'user'), 'user');
					 * // => ['barney', 'fred', 'pebbles']
					 */
					function sortBy(collection, iteratee, thisArg) {
						if (collection == null) {
							return [];
						}
						if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
							iteratee = undefined;
						}
						var index = -1;
						iteratee = getCallback(iteratee, thisArg, 3);

						var result = baseMap(collection, function (value, key, collection) {
							return {'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value};
						});
						return baseSortBy(result, compareAscending);
					}

					/**
					 * This method is like `_.sortBy` except that it can sort by multiple iteratees
					 * or property names.
					 *
					 * If a property name is provided for an iteratee the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If an object is provided for an iteratee the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
					 *  The iteratees to sort by, specified as individual values or arrays of values.
					 * @returns {Array} Returns the new sorted array.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'fred',   'age': 48 },
					 *   { 'user': 'barney', 'age': 36 },
					 *   { 'user': 'fred',   'age': 42 },
					 *   { 'user': 'barney', 'age': 34 }
					 * ];
					 *
					 * _.map(_.sortByAll(users, ['user', 'age']), _.values);
					 * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
					 *
					 * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
					 * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
					 */
					var sortByAll = restParam(function (collection, iteratees) {
						if (collection == null) {
							return [];
						}
						var guard = iteratees[2];
						if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
							iteratees.length = 1;
						}
						return baseSortByOrder(collection, baseFlatten(iteratees), []);
					});

					/**
					 * This method is like `_.sortByAll` except that it allows specifying the
					 * sort orders of the iteratees to sort by. If `orders` is unspecified, all
					 * values are sorted in ascending order. Otherwise, a value is sorted in
					 * ascending order if its corresponding order is "asc", and descending if "desc".
					 *
					 * If a property name is provided for an iteratee the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If an object is provided for an iteratee the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
					 * @param {boolean[]} [orders] The sort orders of `iteratees`.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
					 * @returns {Array} Returns the new sorted array.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'fred',   'age': 48 },
					 *   { 'user': 'barney', 'age': 34 },
					 *   { 'user': 'fred',   'age': 42 },
					 *   { 'user': 'barney', 'age': 36 }
					 * ];
					 *
					 * // sort by `user` in ascending order and by `age` in descending order
					 * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
					 * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
					 */
					function sortByOrder(collection, iteratees, orders, guard) {
						if (collection == null) {
							return [];
						}
						if (guard && isIterateeCall(iteratees, orders, guard)) {
							orders = undefined;
						}
						if (!isArray(iteratees)) {
							iteratees = iteratees == null ? [] : [iteratees];
						}
						if (!isArray(orders)) {
							orders = orders == null ? [] : [orders];
						}
						return baseSortByOrder(collection, iteratees, orders);
					}

					/**
					 * Performs a deep comparison between each element in `collection` and the
					 * source object, returning an array of all elements that have equivalent
					 * property values.
					 *
					 * **Note:** This method supports comparing arrays, booleans, `Date` objects,
					 * numbers, `Object` objects, regexes, and strings. Objects are compared by
					 * their own, not inherited, enumerable properties. For comparing a single
					 * own or inherited property value see `_.matchesProperty`.
					 *
					 * @static
					 * @memberOf _
					 * @category Collection
					 * @param {Array|Object|string} collection The collection to search.
					 * @param {Object} source The object of property values to match.
					 * @returns {Array} Returns the new filtered array.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
					 *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
					 * ];
					 *
					 * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
					 * // => ['barney']
					 *
					 * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
					 * // => ['fred']
					 */
					function where(collection, source) {
						return filter(collection, baseMatches(source));
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Gets the number of milliseconds that have elapsed since the Unix epoch
					 * (1 January 1970 00:00:00 UTC).
					 *
					 * @static
					 * @memberOf _
					 * @category Date
					 * @example
					 *
					 * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
					 * // => logs the number of milliseconds it took for the deferred function to be invoked
					 */
					var now = nativeNow || function () {
							return new Date().getTime();
						};

					/*------------------------------------------------------------------------*/

					/**
					 * The opposite of `_.before`; this method creates a function that invokes
					 * `func` once it is called `n` or more times.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {number} n The number of calls before `func` is invoked.
					 * @param {Function} func The function to restrict.
					 * @returns {Function} Returns the new restricted function.
					 * @example
					 *
					 * var saves = ['profile', 'settings'];
					 *
					 * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
					 *
					 * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
					 * // => logs 'done saving!' after the two async saves have completed
					 */
					function after(n, func) {
						if (typeof func != 'function') {
							if (typeof n == 'function') {
								var temp = n;
								n = func;
								func = temp;
							} else {
								throw new TypeError(FUNC_ERROR_TEXT);
							}
						}
						n = nativeIsFinite(n = +n) ? n : 0;
						return function () {
							if (--n < 1) {
								return func.apply(this, arguments);
							}
						};
					}

					/**
					 * Creates a function that accepts up to `n` arguments ignoring any
					 * additional arguments.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to cap arguments for.
					 * @param {number} [n=func.length] The arity cap.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
					 * // => [6, 8, 10]
					 */
					function ary(func, n, guard) {
						if (guard && isIterateeCall(func, n, guard)) {
							n = undefined;
						}
						n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
						return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
					}

					/**
					 * Creates a function that invokes `func`, with the `this` binding and arguments
					 * of the created function, while it is called less than `n` times. Subsequent
					 * calls to the created function return the result of the last `func` invocation.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {number} n The number of calls at which `func` is no longer invoked.
					 * @param {Function} func The function to restrict.
					 * @returns {Function} Returns the new restricted function.
					 * @example
					 *
					 * jQuery('#add').on('click', _.before(5, addContactToList));
					 * // => allows adding up to 4 contacts to the list
					 */
					function before(n, func) {
						var result;
						if (typeof func != 'function') {
							if (typeof n == 'function') {
								var temp = n;
								n = func;
								func = temp;
							} else {
								throw new TypeError(FUNC_ERROR_TEXT);
							}
						}
						return function () {
							if (--n > 0) {
								result = func.apply(this, arguments);
							}
							if (n <= 1) {
								func = undefined;
							}
							return result;
						};
					}

					/**
					 * Creates a function that invokes `func` with the `this` binding of `thisArg`
					 * and prepends any additional `_.bind` arguments to those provided to the
					 * bound function.
					 *
					 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
					 * may be used as a placeholder for partially applied arguments.
					 *
					 * **Note:** Unlike native `Function#bind` this method does not set the "length"
					 * property of bound functions.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to bind.
					 * @param {*} thisArg The `this` binding of `func`.
					 * @param {...*} [partials] The arguments to be partially applied.
					 * @returns {Function} Returns the new bound function.
					 * @example
					 *
					 * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
					 *
					 * var object = { 'user': 'fred' };
					 *
					 * var bound = _.bind(greet, object, 'hi');
					 * bound('!');
					 * // => 'hi fred!'
					 *
					 * // using placeholders
					 * var bound = _.bind(greet, object, _, '!');
					 * bound('hi');
					 * // => 'hi fred!'
					 */
					var bind = restParam(function (func, thisArg, partials) {
						var bitmask = BIND_FLAG;
						if (partials.length) {
							var holders = replaceHolders(partials, bind.placeholder);
							bitmask |= PARTIAL_FLAG;
						}
						return createWrapper(func, bitmask, thisArg, partials, holders);
					});

					/**
					 * Binds methods of an object to the object itself, overwriting the existing
					 * method. Method names may be specified as individual arguments or as arrays
					 * of method names. If no method names are provided all enumerable function
					 * properties, own and inherited, of `object` are bound.
					 *
					 * **Note:** This method does not set the "length" property of bound functions.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Object} object The object to bind and assign the bound methods to.
					 * @param {...(string|string[])} [methodNames] The object method names to bind,
					 *  specified as individual method names or arrays of method names.
					 * @returns {Object} Returns `object`.
					 * @example
					 *
					 * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
					 *
					 * _.bindAll(view);
					 * jQuery('#docs').on('click', view.onClick);
					 * // => logs 'clicked docs' when the element is clicked
					 */
					var bindAll = restParam(function (object, methodNames) {
						methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

						var index = -1,
							length = methodNames.length;

						while (++index < length) {
							var key = methodNames[index];
							object[key] = createWrapper(object[key], BIND_FLAG, object);
						}
						return object;
					});

					/**
					 * Creates a function that invokes the method at `object[key]` and prepends
					 * any additional `_.bindKey` arguments to those provided to the bound function.
					 *
					 * This method differs from `_.bind` by allowing bound functions to reference
					 * methods that may be redefined or don't yet exist.
					 * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
					 * for more details.
					 *
					 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
					 * builds, may be used as a placeholder for partially applied arguments.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Object} object The object the method belongs to.
					 * @param {string} key The key of the method.
					 * @param {...*} [partials] The arguments to be partially applied.
					 * @returns {Function} Returns the new bound function.
					 * @example
					 *
					 * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
					 *
					 * var bound = _.bindKey(object, 'greet', 'hi');
					 * bound('!');
					 * // => 'hi fred!'
					 *
					 * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
					 *
					 * bound('!');
					 * // => 'hiya fred!'
					 *
					 * // using placeholders
					 * var bound = _.bindKey(object, 'greet', _, '!');
					 * bound('hi');
					 * // => 'hiya fred!'
					 */
					var bindKey = restParam(function (object, key, partials) {
						var bitmask = BIND_FLAG | BIND_KEY_FLAG;
						if (partials.length) {
							var holders = replaceHolders(partials, bindKey.placeholder);
							bitmask |= PARTIAL_FLAG;
						}
						return createWrapper(key, bitmask, object, partials, holders);
					});

					/**
					 * Creates a function that accepts one or more arguments of `func` that when
					 * called either invokes `func` returning its result, if all `func` arguments
					 * have been provided, or returns a function that accepts one or more of the
					 * remaining `func` arguments, and so on. The arity of `func` may be specified
					 * if `func.length` is not sufficient.
					 *
					 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
					 * may be used as a placeholder for provided arguments.
					 *
					 * **Note:** This method does not set the "length" property of curried functions.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to curry.
					 * @param {number} [arity=func.length] The arity of `func`.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Function} Returns the new curried function.
					 * @example
					 *
					 * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
					 *
					 * var curried = _.curry(abc);
					 *
					 * curried(1)(2)(3);
					 * // => [1, 2, 3]
					 *
					 * curried(1, 2)(3);
					 * // => [1, 2, 3]
					 *
					 * curried(1, 2, 3);
					 * // => [1, 2, 3]
					 *
					 * // using placeholders
					 * curried(1)(_, 3)(2);
					 * // => [1, 2, 3]
					 */
					var curry = createCurry(CURRY_FLAG);

					/**
					 * This method is like `_.curry` except that arguments are applied to `func`
					 * in the manner of `_.partialRight` instead of `_.partial`.
					 *
					 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
					 * builds, may be used as a placeholder for provided arguments.
					 *
					 * **Note:** This method does not set the "length" property of curried functions.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to curry.
					 * @param {number} [arity=func.length] The arity of `func`.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Function} Returns the new curried function.
					 * @example
					 *
					 * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
					 *
					 * var curried = _.curryRight(abc);
					 *
					 * curried(3)(2)(1);
					 * // => [1, 2, 3]
					 *
					 * curried(2, 3)(1);
					 * // => [1, 2, 3]
					 *
					 * curried(1, 2, 3);
					 * // => [1, 2, 3]
					 *
					 * // using placeholders
					 * curried(3)(1, _)(2);
					 * // => [1, 2, 3]
					 */
					var curryRight = createCurry(CURRY_RIGHT_FLAG);

					/**
					 * Creates a debounced function that delays invoking `func` until after `wait`
					 * milliseconds have elapsed since the last time the debounced function was
					 * invoked. The debounced function comes with a `cancel` method to cancel
					 * delayed invocations. Provide an options object to indicate that `func`
					 * should be invoked on the leading and/or trailing edge of the `wait` timeout.
					 * Subsequent calls to the debounced function return the result of the last
					 * `func` invocation.
					 *
					 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
					 * on the trailing edge of the timeout only if the the debounced function is
					 * invoked more than once during the `wait` timeout.
					 *
					 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
					 * for details over the differences between `_.debounce` and `_.throttle`.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to debounce.
					 * @param {number} [wait=0] The number of milliseconds to delay.
					 * @param {Object} [options] The options object.
					 * @param {boolean} [options.leading=false] Specify invoking on the leading
					 *  edge of the timeout.
					 * @param {number} [options.maxWait] The maximum time `func` is allowed to be
					 *  delayed before it is invoked.
					 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
					 *  edge of the timeout.
					 * @returns {Function} Returns the new debounced function.
					 * @example
					 *
					 * // avoid costly calculations while the window size is in flux
					 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
					 *
					 * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
					 * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
					 *
					 * // ensure `batchLog` is invoked once after 1 second of debounced calls
					 * var source = new EventSource('/stream');
					 * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
					 *
					 * // cancel a debounced call
					 * var todoChanges = _.debounce(batchLog, 1000);
					 * Object.observe(models.todo, todoChanges);
					 *
					 * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
					 *
					 * // ...at some point `models.todo` is changed
					 * models.todo.completed = true;
					 *
					 * // ...before 1 second has passed `models.todo` is deleted
					 * // which cancels the debounced `todoChanges` call
					 * delete models.todo;
					 */
					function debounce(func, wait, options) {
						var args,
							maxTimeoutId,
							result,
							stamp,
							thisArg,
							timeoutId,
							trailingCall,
							lastCalled = 0,
							maxWait = false,
							trailing = true;

						if (typeof func != 'function') {
							throw new TypeError(FUNC_ERROR_TEXT);
						}
						wait = wait < 0 ? 0 : (+wait || 0);
						if (options === true) {
							var leading = true;
							trailing = false;
						} else if (isObject(options)) {
							leading = !!options.leading;
							maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
							trailing = 'trailing' in options ? !!options.trailing : trailing;
						}

						function cancel() {
							if (timeoutId) {
								clearTimeout(timeoutId);
							}
							if (maxTimeoutId) {
								clearTimeout(maxTimeoutId);
							}
							lastCalled = 0;
							maxTimeoutId = timeoutId = trailingCall = undefined;
						}

						function complete(isCalled, id) {
							if (id) {
								clearTimeout(id);
							}
							maxTimeoutId = timeoutId = trailingCall = undefined;
							if (isCalled) {
								lastCalled = now();
								result = func.apply(thisArg, args);
								if (!timeoutId && !maxTimeoutId) {
									args = thisArg = undefined;
								}
							}
						}

						function delayed() {
							var remaining = wait - (now() - stamp);
							if (remaining <= 0 || remaining > wait) {
								complete(trailingCall, maxTimeoutId);
							} else {
								timeoutId = setTimeout(delayed, remaining);
							}
						}

						function maxDelayed() {
							complete(trailing, timeoutId);
						}

						function debounced() {
							args = arguments;
							stamp = now();
							thisArg = this;
							trailingCall = trailing && (timeoutId || !leading);

							if (maxWait === false) {
								var leadingCall = leading && !timeoutId;
							} else {
								if (!maxTimeoutId && !leading) {
									lastCalled = stamp;
								}
								var remaining = maxWait - (stamp - lastCalled),
									isCalled = remaining <= 0 || remaining > maxWait;

								if (isCalled) {
									if (maxTimeoutId) {
										maxTimeoutId = clearTimeout(maxTimeoutId);
									}
									lastCalled = stamp;
									result = func.apply(thisArg, args);
								}
								else if (!maxTimeoutId) {
									maxTimeoutId = setTimeout(maxDelayed, remaining);
								}
							}
							if (isCalled && timeoutId) {
								timeoutId = clearTimeout(timeoutId);
							}
							else if (!timeoutId && wait !== maxWait) {
								timeoutId = setTimeout(delayed, wait);
							}
							if (leadingCall) {
								isCalled = true;
								result = func.apply(thisArg, args);
							}
							if (isCalled && !timeoutId && !maxTimeoutId) {
								args = thisArg = undefined;
							}
							return result;
						}

						debounced.cancel = cancel;
						return debounced;
					}

					/**
					 * Defers invoking the `func` until the current call stack has cleared. Any
					 * additional arguments are provided to `func` when it is invoked.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to defer.
					 * @param {...*} [args] The arguments to invoke the function with.
					 * @returns {number} Returns the timer id.
					 * @example
					 *
					 * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
					 * // logs 'deferred' after one or more milliseconds
					 */
					var defer = restParam(function (func, args) {
						return baseDelay(func, 1, args);
					});

					/**
					 * Invokes `func` after `wait` milliseconds. Any additional arguments are
					 * provided to `func` when it is invoked.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to delay.
					 * @param {number} wait The number of milliseconds to delay invocation.
					 * @param {...*} [args] The arguments to invoke the function with.
					 * @returns {number} Returns the timer id.
					 * @example
					 *
					 * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
					 * // => logs 'later' after one second
					 */
					var delay = restParam(function (func, wait, args) {
						return baseDelay(func, wait, args);
					});

					/**
					 * Creates a function that returns the result of invoking the provided
					 * functions with the `this` binding of the created function, where each
					 * successive invocation is supplied the return value of the previous.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {...Function} [funcs] Functions to invoke.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * function square(n) {
	     *   return n * n;
	     * }
					 *
					 * var addSquare = _.flow(_.add, square);
					 * addSquare(1, 2);
					 * // => 9
					 */
					var flow = createFlow();

					/**
					 * This method is like `_.flow` except that it creates a function that
					 * invokes the provided functions from right to left.
					 *
					 * @static
					 * @memberOf _
					 * @alias backflow, compose
					 * @category Function
					 * @param {...Function} [funcs] Functions to invoke.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * function square(n) {
	     *   return n * n;
	     * }
					 *
					 * var addSquare = _.flowRight(square, _.add);
					 * addSquare(1, 2);
					 * // => 9
					 */
					var flowRight = createFlow(true);

					/**
					 * Creates a function that memoizes the result of `func`. If `resolver` is
					 * provided it determines the cache key for storing the result based on the
					 * arguments provided to the memoized function. By default, the first argument
					 * provided to the memoized function is coerced to a string and used as the
					 * cache key. The `func` is invoked with the `this` binding of the memoized
					 * function.
					 *
					 * **Note:** The cache is exposed as the `cache` property on the memoized
					 * function. Its creation may be customized by replacing the `_.memoize.Cache`
					 * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
					 * method interface of `get`, `has`, and `set`.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to have its output memoized.
					 * @param {Function} [resolver] The function to resolve the cache key.
					 * @returns {Function} Returns the new memoizing function.
					 * @example
					 *
					 * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
					 *
					 * upperCase('fred');
					 * // => 'FRED'
					 *
					 * // modifying the result cache
					 * upperCase.cache.set('fred', 'BARNEY');
					 * upperCase('fred');
					 * // => 'BARNEY'
					 *
					 * // replacing `_.memoize.Cache`
					 * var object = { 'user': 'fred' };
					 * var other = { 'user': 'barney' };
					 * var identity = _.memoize(_.identity);
					 *
					 * identity(object);
					 * // => { 'user': 'fred' }
					 * identity(other);
					 * // => { 'user': 'fred' }
					 *
					 * _.memoize.Cache = WeakMap;
					 * var identity = _.memoize(_.identity);
					 *
					 * identity(object);
					 * // => { 'user': 'fred' }
					 * identity(other);
					 * // => { 'user': 'barney' }
					 */
					function memoize(func, resolver) {
						if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
							throw new TypeError(FUNC_ERROR_TEXT);
						}
						var memoized = function () {
							var args = arguments,
								key = resolver ? resolver.apply(this, args) : args[0],
								cache = memoized.cache;

							if (cache.has(key)) {
								return cache.get(key);
							}
							var result = func.apply(this, args);
							memoized.cache = cache.set(key, result);
							return result;
						};
						memoized.cache = new memoize.Cache;
						return memoized;
					}

					/**
					 * Creates a function that runs each argument through a corresponding
					 * transform function.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to wrap.
					 * @param {...(Function|Function[])} [transforms] The functions to transform
					 * arguments, specified as individual functions or arrays of functions.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * function doubled(n) {
	     *   return n * 2;
	     * }
					 *
					 * function square(n) {
	     *   return n * n;
	     * }
					 *
					 * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
					 *
					 * modded(1, 2);
					 * // => [1, 4]
					 *
					 * modded(5, 10);
					 * // => [25, 20]
					 */
					var modArgs = restParam(function (func, transforms) {
						transforms = baseFlatten(transforms);
						if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
							throw new TypeError(FUNC_ERROR_TEXT);
						}
						var length = transforms.length;
						return restParam(function (args) {
							var index = nativeMin(args.length, length);
							while (index--) {
								args[index] = transforms[index](args[index]);
							}
							return func.apply(this, args);
						});
					});

					/**
					 * Creates a function that negates the result of the predicate `func`. The
					 * `func` predicate is invoked with the `this` binding and arguments of the
					 * created function.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} predicate The predicate to negate.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
					 *
					 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
					 * // => [1, 3, 5]
					 */
					function negate(predicate) {
						if (typeof predicate != 'function') {
							throw new TypeError(FUNC_ERROR_TEXT);
						}
						return function () {
							return !predicate.apply(this, arguments);
						};
					}

					/**
					 * Creates a function that is restricted to invoking `func` once. Repeat calls
					 * to the function return the value of the first call. The `func` is invoked
					 * with the `this` binding and arguments of the created function.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to restrict.
					 * @returns {Function} Returns the new restricted function.
					 * @example
					 *
					 * var initialize = _.once(createApplication);
					 * initialize();
					 * initialize();
					 * // `initialize` invokes `createApplication` once
					 */
					function once(func) {
						return before(2, func);
					}

					/**
					 * Creates a function that invokes `func` with `partial` arguments prepended
					 * to those provided to the new function. This method is like `_.bind` except
					 * it does **not** alter the `this` binding.
					 *
					 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
					 * builds, may be used as a placeholder for partially applied arguments.
					 *
					 * **Note:** This method does not set the "length" property of partially
					 * applied functions.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to partially apply arguments to.
					 * @param {...*} [partials] The arguments to be partially applied.
					 * @returns {Function} Returns the new partially applied function.
					 * @example
					 *
					 * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
					 *
					 * var sayHelloTo = _.partial(greet, 'hello');
					 * sayHelloTo('fred');
					 * // => 'hello fred'
					 *
					 * // using placeholders
					 * var greetFred = _.partial(greet, _, 'fred');
					 * greetFred('hi');
					 * // => 'hi fred'
					 */
					var partial = createPartial(PARTIAL_FLAG);

					/**
					 * This method is like `_.partial` except that partially applied arguments
					 * are appended to those provided to the new function.
					 *
					 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
					 * builds, may be used as a placeholder for partially applied arguments.
					 *
					 * **Note:** This method does not set the "length" property of partially
					 * applied functions.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to partially apply arguments to.
					 * @param {...*} [partials] The arguments to be partially applied.
					 * @returns {Function} Returns the new partially applied function.
					 * @example
					 *
					 * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
					 *
					 * var greetFred = _.partialRight(greet, 'fred');
					 * greetFred('hi');
					 * // => 'hi fred'
					 *
					 * // using placeholders
					 * var sayHelloTo = _.partialRight(greet, 'hello', _);
					 * sayHelloTo('fred');
					 * // => 'hello fred'
					 */
					var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

					/**
					 * Creates a function that invokes `func` with arguments arranged according
					 * to the specified indexes where the argument value at the first index is
					 * provided as the first argument, the argument value at the second index is
					 * provided as the second argument, and so on.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to rearrange arguments for.
					 * @param {...(number|number[])} indexes The arranged argument indexes,
					 *  specified as individual indexes or arrays of indexes.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
					 *
					 * rearged('b', 'c', 'a')
					 * // => ['a', 'b', 'c']
					 *
					 * var map = _.rearg(_.map, [1, 0]);
					 * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
					 * // => [3, 6, 9]
					 */
					var rearg = restParam(function (func, indexes) {
						return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
					});

					/**
					 * Creates a function that invokes `func` with the `this` binding of the
					 * created function and arguments from `start` and beyond provided as an array.
					 *
					 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to apply a rest parameter to.
					 * @param {number} [start=func.length-1] The start position of the rest parameter.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
					 *
					 * say('hello', 'fred', 'barney', 'pebbles');
					 * // => 'hello fred, barney, & pebbles'
					 */
					function restParam(func, start) {
						if (typeof func != 'function') {
							throw new TypeError(FUNC_ERROR_TEXT);
						}
						start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
						return function () {
							var args = arguments,
								index = -1,
								length = nativeMax(args.length - start, 0),
								rest = Array(length);

							while (++index < length) {
								rest[index] = args[start + index];
							}
							switch (start) {
								case 0:
									return func.call(this, rest);
								case 1:
									return func.call(this, args[0], rest);
								case 2:
									return func.call(this, args[0], args[1], rest);
							}
							var otherArgs = Array(start + 1);
							index = -1;
							while (++index < start) {
								otherArgs[index] = args[index];
							}
							otherArgs[start] = rest;
							return func.apply(this, otherArgs);
						};
					}

					/**
					 * Creates a function that invokes `func` with the `this` binding of the created
					 * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
					 *
					 * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to spread arguments over.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
					 *
					 * say(['fred', 'hello']);
					 * // => 'fred says hello'
					 *
					 * // with a Promise
					 * var numbers = Promise.all([
					 *   Promise.resolve(40),
					 *   Promise.resolve(36)
					 * ]);
					 *
					 * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
					 * // => a Promise of 76
					 */
					function spread(func) {
						if (typeof func != 'function') {
							throw new TypeError(FUNC_ERROR_TEXT);
						}
						return function (array) {
							return func.apply(this, array);
						};
					}

					/**
					 * Creates a throttled function that only invokes `func` at most once per
					 * every `wait` milliseconds. The throttled function comes with a `cancel`
					 * method to cancel delayed invocations. Provide an options object to indicate
					 * that `func` should be invoked on the leading and/or trailing edge of the
					 * `wait` timeout. Subsequent calls to the throttled function return the
					 * result of the last `func` call.
					 *
					 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
					 * on the trailing edge of the timeout only if the the throttled function is
					 * invoked more than once during the `wait` timeout.
					 *
					 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
					 * for details over the differences between `_.throttle` and `_.debounce`.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {Function} func The function to throttle.
					 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
					 * @param {Object} [options] The options object.
					 * @param {boolean} [options.leading=true] Specify invoking on the leading
					 *  edge of the timeout.
					 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
					 *  edge of the timeout.
					 * @returns {Function} Returns the new throttled function.
					 * @example
					 *
					 * // avoid excessively updating the position while scrolling
					 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
					 *
					 * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
					 * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
					 *
					 * // cancel a trailing throttled call
					 * jQuery(window).on('popstate', throttled.cancel);
					 */
					function throttle(func, wait, options) {
						var leading = true,
							trailing = true;

						if (typeof func != 'function') {
							throw new TypeError(FUNC_ERROR_TEXT);
						}
						if (options === false) {
							leading = false;
						} else if (isObject(options)) {
							leading = 'leading' in options ? !!options.leading : leading;
							trailing = 'trailing' in options ? !!options.trailing : trailing;
						}
						return debounce(func, wait, {'leading': leading, 'maxWait': +wait, 'trailing': trailing});
					}

					/**
					 * Creates a function that provides `value` to the wrapper function as its
					 * first argument. Any additional arguments provided to the function are
					 * appended to those provided to the wrapper function. The wrapper is invoked
					 * with the `this` binding of the created function.
					 *
					 * @static
					 * @memberOf _
					 * @category Function
					 * @param {*} value The value to wrap.
					 * @param {Function} wrapper The wrapper function.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
					 *
					 * p('fred, barney, & pebbles');
					 * // => '<p>fred, barney, &amp; pebbles</p>'
					 */
					function wrap(value, wrapper) {
						wrapper = wrapper == null ? identity : wrapper;
						return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
					 * otherwise they are assigned by reference. If `customizer` is provided it is
					 * invoked to produce the cloned values. If `customizer` returns `undefined`
					 * cloning is handled by the method instead. The `customizer` is bound to
					 * `thisArg` and invoked with two argument; (value [, index|key, object]).
					 *
					 * **Note:** This method is loosely based on the
					 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
					 * The enumerable properties of `arguments` objects and objects created by
					 * constructors other than `Object` are cloned to plain `Object` objects. An
					 * empty object is returned for uncloneable values such as functions, DOM nodes,
					 * Maps, Sets, and WeakMaps.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to clone.
					 * @param {boolean} [isDeep] Specify a deep clone.
					 * @param {Function} [customizer] The function to customize cloning values.
					 * @param {*} [thisArg] The `this` binding of `customizer`.
					 * @returns {*} Returns the cloned value.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney' },
					 *   { 'user': 'fred' }
					 * ];
					 *
					 * var shallow = _.clone(users);
					 * shallow[0] === users[0];
					 * // => true
					 *
					 * var deep = _.clone(users, true);
					 * deep[0] === users[0];
					 * // => false
					 *
					 * // using a customizer callback
					 * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
					 *
					 * el === document.body
					 * // => false
					 * el.nodeName
					 * // => BODY
					 * el.childNodes.length;
					 * // => 0
					 */
					function clone(value, isDeep, customizer, thisArg) {
						if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
							isDeep = false;
						}
						else if (typeof isDeep == 'function') {
							thisArg = customizer;
							customizer = isDeep;
							isDeep = false;
						}
						return typeof customizer == 'function'
							? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
							: baseClone(value, isDeep);
					}

					/**
					 * Creates a deep clone of `value`. If `customizer` is provided it is invoked
					 * to produce the cloned values. If `customizer` returns `undefined` cloning
					 * is handled by the method instead. The `customizer` is bound to `thisArg`
					 * and invoked with two argument; (value [, index|key, object]).
					 *
					 * **Note:** This method is loosely based on the
					 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
					 * The enumerable properties of `arguments` objects and objects created by
					 * constructors other than `Object` are cloned to plain `Object` objects. An
					 * empty object is returned for uncloneable values such as functions, DOM nodes,
					 * Maps, Sets, and WeakMaps.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to deep clone.
					 * @param {Function} [customizer] The function to customize cloning values.
					 * @param {*} [thisArg] The `this` binding of `customizer`.
					 * @returns {*} Returns the deep cloned value.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney' },
					 *   { 'user': 'fred' }
					 * ];
					 *
					 * var deep = _.cloneDeep(users);
					 * deep[0] === users[0];
					 * // => false
					 *
					 * // using a customizer callback
					 * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
					 *
					 * el === document.body
					 * // => false
					 * el.nodeName
					 * // => BODY
					 * el.childNodes.length;
					 * // => 20
					 */
					function cloneDeep(value, customizer, thisArg) {
						return typeof customizer == 'function'
							? baseClone(value, true, bindCallback(customizer, thisArg, 1))
							: baseClone(value, true);
					}

					/**
					 * Checks if `value` is greater than `other`.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to compare.
					 * @param {*} other The other value to compare.
					 * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
					 * @example
					 *
					 * _.gt(3, 1);
					 * // => true
					 *
					 * _.gt(3, 3);
					 * // => false
					 *
					 * _.gt(1, 3);
					 * // => false
					 */
					function gt(value, other) {
						return value > other;
					}

					/**
					 * Checks if `value` is greater than or equal to `other`.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to compare.
					 * @param {*} other The other value to compare.
					 * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
					 * @example
					 *
					 * _.gte(3, 1);
					 * // => true
					 *
					 * _.gte(3, 3);
					 * // => true
					 *
					 * _.gte(1, 3);
					 * // => false
					 */
					function gte(value, other) {
						return value >= other;
					}

					/**
					 * Checks if `value` is classified as an `arguments` object.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
					 * @example
					 *
					 * _.isArguments(function() { return arguments; }());
					 * // => true
					 *
					 * _.isArguments([1, 2, 3]);
					 * // => false
					 */
					function isArguments(value) {
						return isObjectLike(value) && isArrayLike(value) &&
							hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
					}

					/**
					 * Checks if `value` is classified as an `Array` object.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
					 * @example
					 *
					 * _.isArray([1, 2, 3]);
					 * // => true
					 *
					 * _.isArray(function() { return arguments; }());
					 * // => false
					 */
					var isArray = nativeIsArray || function (value) {
							return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
						};

					/**
					 * Checks if `value` is classified as a boolean primitive or object.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
					 * @example
					 *
					 * _.isBoolean(false);
					 * // => true
					 *
					 * _.isBoolean(null);
					 * // => false
					 */
					function isBoolean(value) {
						return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
					}

					/**
					 * Checks if `value` is classified as a `Date` object.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
					 * @example
					 *
					 * _.isDate(new Date);
					 * // => true
					 *
					 * _.isDate('Mon April 23 2012');
					 * // => false
					 */
					function isDate(value) {
						return isObjectLike(value) && objToString.call(value) == dateTag;
					}

					/**
					 * Checks if `value` is a DOM element.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
					 * @example
					 *
					 * _.isElement(document.body);
					 * // => true
					 *
					 * _.isElement('<body>');
					 * // => false
					 */
					function isElement(value) {
						return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
					}

					/**
					 * Checks if `value` is empty. A value is considered empty unless it is an
					 * `arguments` object, array, string, or jQuery-like collection with a length
					 * greater than `0` or an object with own enumerable properties.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {Array|Object|string} value The value to inspect.
					 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
					 * @example
					 *
					 * _.isEmpty(null);
					 * // => true
					 *
					 * _.isEmpty(true);
					 * // => true
					 *
					 * _.isEmpty(1);
					 * // => true
					 *
					 * _.isEmpty([1, 2, 3]);
					 * // => false
					 *
					 * _.isEmpty({ 'a': 1 });
					 * // => false
					 */
					function isEmpty(value) {
						if (value == null) {
							return true;
						}
						if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
							(isObjectLike(value) && isFunction(value.splice)))) {
							return !value.length;
						}
						return !keys(value).length;
					}

					/**
					 * Performs a deep comparison between two values to determine if they are
					 * equivalent. If `customizer` is provided it is invoked to compare values.
					 * If `customizer` returns `undefined` comparisons are handled by the method
					 * instead. The `customizer` is bound to `thisArg` and invoked with three
					 * arguments: (value, other [, index|key]).
					 *
					 * **Note:** This method supports comparing arrays, booleans, `Date` objects,
					 * numbers, `Object` objects, regexes, and strings. Objects are compared by
					 * their own, not inherited, enumerable properties. Functions and DOM nodes
					 * are **not** supported. Provide a customizer function to extend support
					 * for comparing other values.
					 *
					 * @static
					 * @memberOf _
					 * @alias eq
					 * @category Lang
					 * @param {*} value The value to compare.
					 * @param {*} other The other value to compare.
					 * @param {Function} [customizer] The function to customize value comparisons.
					 * @param {*} [thisArg] The `this` binding of `customizer`.
					 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
					 * @example
					 *
					 * var object = { 'user': 'fred' };
					 * var other = { 'user': 'fred' };
					 *
					 * object == other;
					 * // => false
					 *
					 * _.isEqual(object, other);
					 * // => true
					 *
					 * // using a customizer callback
					 * var array = ['hello', 'goodbye'];
					 * var other = ['hi', 'goodbye'];
					 *
					 * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
					 * // => true
					 */
					function isEqual(value, other, customizer, thisArg) {
						customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
						var result = customizer ? customizer(value, other) : undefined;
						return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
					}

					/**
					 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
					 * `SyntaxError`, `TypeError`, or `URIError` object.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
					 * @example
					 *
					 * _.isError(new Error);
					 * // => true
					 *
					 * _.isError(Error);
					 * // => false
					 */
					function isError(value) {
						return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
					}

					/**
					 * Checks if `value` is a finite primitive number.
					 *
					 * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
					 * @example
					 *
					 * _.isFinite(10);
					 * // => true
					 *
					 * _.isFinite('10');
					 * // => false
					 *
					 * _.isFinite(true);
					 * // => false
					 *
					 * _.isFinite(Object(10));
					 * // => false
					 *
					 * _.isFinite(Infinity);
					 * // => false
					 */
					function isFinite(value) {
						return typeof value == 'number' && nativeIsFinite(value);
					}

					/**
					 * Checks if `value` is classified as a `Function` object.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
					 * @example
					 *
					 * _.isFunction(_);
					 * // => true
					 *
					 * _.isFunction(/abc/);
					 * // => false
					 */
					function isFunction(value) {
						// The use of `Object#toString` avoids issues with the `typeof` operator
						// in older versions of Chrome and Safari which return 'function' for regexes
						// and Safari 8 equivalents which return 'object' for typed array constructors.
						return isObject(value) && objToString.call(value) == funcTag;
					}

					/**
					 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
					 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
					 * @example
					 *
					 * _.isObject({});
					 * // => true
					 *
					 * _.isObject([1, 2, 3]);
					 * // => true
					 *
					 * _.isObject(1);
					 * // => false
					 */
					function isObject(value) {
						// Avoid a V8 JIT bug in Chrome 19-20.
						// See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
						var type = typeof value;
						return !!value && (type == 'object' || type == 'function');
					}

					/**
					 * Performs a deep comparison between `object` and `source` to determine if
					 * `object` contains equivalent property values. If `customizer` is provided
					 * it is invoked to compare values. If `customizer` returns `undefined`
					 * comparisons are handled by the method instead. The `customizer` is bound
					 * to `thisArg` and invoked with three arguments: (value, other, index|key).
					 *
					 * **Note:** This method supports comparing properties of arrays, booleans,
					 * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
					 * and DOM nodes are **not** supported. Provide a customizer function to extend
					 * support for comparing other values.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {Object} object The object to inspect.
					 * @param {Object} source The object of property values to match.
					 * @param {Function} [customizer] The function to customize value comparisons.
					 * @param {*} [thisArg] The `this` binding of `customizer`.
					 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
					 * @example
					 *
					 * var object = { 'user': 'fred', 'age': 40 };
					 *
					 * _.isMatch(object, { 'age': 40 });
					 * // => true
					 *
					 * _.isMatch(object, { 'age': 36 });
					 * // => false
					 *
					 * // using a customizer callback
					 * var object = { 'greeting': 'hello' };
					 * var source = { 'greeting': 'hi' };
					 *
					 * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
					 * // => true
					 */
					function isMatch(object, source, customizer, thisArg) {
						customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
						return baseIsMatch(object, getMatchData(source), customizer);
					}

					/**
					 * Checks if `value` is `NaN`.
					 *
					 * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
					 * which returns `true` for `undefined` and other non-numeric values.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
					 * @example
					 *
					 * _.isNaN(NaN);
					 * // => true
					 *
					 * _.isNaN(new Number(NaN));
					 * // => true
					 *
					 * isNaN(undefined);
					 * // => true
					 *
					 * _.isNaN(undefined);
					 * // => false
					 */
					function isNaN(value) {
						// An `NaN` primitive is the only value that is not equal to itself.
						// Perform the `toStringTag` check first to avoid errors with some host objects in IE.
						return isNumber(value) && value != +value;
					}

					/**
					 * Checks if `value` is a native function.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
					 * @example
					 *
					 * _.isNative(Array.prototype.push);
					 * // => true
					 *
					 * _.isNative(_);
					 * // => false
					 */
					function isNative(value) {
						if (value == null) {
							return false;
						}
						if (isFunction(value)) {
							return reIsNative.test(fnToString.call(value));
						}
						return isObjectLike(value) && reIsHostCtor.test(value);
					}

					/**
					 * Checks if `value` is `null`.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
					 * @example
					 *
					 * _.isNull(null);
					 * // => true
					 *
					 * _.isNull(void 0);
					 * // => false
					 */
					function isNull(value) {
						return value === null;
					}

					/**
					 * Checks if `value` is classified as a `Number` primitive or object.
					 *
					 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
					 * as numbers, use the `_.isFinite` method.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
					 * @example
					 *
					 * _.isNumber(8.4);
					 * // => true
					 *
					 * _.isNumber(NaN);
					 * // => true
					 *
					 * _.isNumber('8.4');
					 * // => false
					 */
					function isNumber(value) {
						return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
					}

					/**
					 * Checks if `value` is a plain object, that is, an object created by the
					 * `Object` constructor or one with a `[[Prototype]]` of `null`.
					 *
					 * **Note:** This method assumes objects created by the `Object` constructor
					 * have no inherited enumerable properties.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
					 * @example
					 *
					 * function Foo() {
	     *   this.a = 1;
	     * }
					 *
					 * _.isPlainObject(new Foo);
					 * // => false
					 *
					 * _.isPlainObject([1, 2, 3]);
					 * // => false
					 *
					 * _.isPlainObject({ 'x': 0, 'y': 0 });
					 * // => true
					 *
					 * _.isPlainObject(Object.create(null));
					 * // => true
					 */
					function isPlainObject(value) {
						var Ctor;

						// Exit early for non `Object` objects.
						if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
							(!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
							return false;
						}
						// IE < 9 iterates inherited properties before own properties. If the first
						// iterated property is an object's own property then there are no inherited
						// enumerable properties.
						var result;
						// In most environments an object's own properties are iterated before
						// its inherited properties. If the last iterated property is an object's
						// own property then there are no inherited enumerable properties.
						baseForIn(value, function (subValue, key) {
							result = key;
						});
						return result === undefined || hasOwnProperty.call(value, result);
					}

					/**
					 * Checks if `value` is classified as a `RegExp` object.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
					 * @example
					 *
					 * _.isRegExp(/abc/);
					 * // => true
					 *
					 * _.isRegExp('/abc/');
					 * // => false
					 */
					function isRegExp(value) {
						return isObject(value) && objToString.call(value) == regexpTag;
					}

					/**
					 * Checks if `value` is classified as a `String` primitive or object.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
					 * @example
					 *
					 * _.isString('abc');
					 * // => true
					 *
					 * _.isString(1);
					 * // => false
					 */
					function isString(value) {
						return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
					}

					/**
					 * Checks if `value` is classified as a typed array.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
					 * @example
					 *
					 * _.isTypedArray(new Uint8Array);
					 * // => true
					 *
					 * _.isTypedArray([]);
					 * // => false
					 */
					function isTypedArray(value) {
						return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
					}

					/**
					 * Checks if `value` is `undefined`.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to check.
					 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
					 * @example
					 *
					 * _.isUndefined(void 0);
					 * // => true
					 *
					 * _.isUndefined(null);
					 * // => false
					 */
					function isUndefined(value) {
						return value === undefined;
					}

					/**
					 * Checks if `value` is less than `other`.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to compare.
					 * @param {*} other The other value to compare.
					 * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
					 * @example
					 *
					 * _.lt(1, 3);
					 * // => true
					 *
					 * _.lt(3, 3);
					 * // => false
					 *
					 * _.lt(3, 1);
					 * // => false
					 */
					function lt(value, other) {
						return value < other;
					}

					/**
					 * Checks if `value` is less than or equal to `other`.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to compare.
					 * @param {*} other The other value to compare.
					 * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
					 * @example
					 *
					 * _.lte(1, 3);
					 * // => true
					 *
					 * _.lte(3, 3);
					 * // => true
					 *
					 * _.lte(3, 1);
					 * // => false
					 */
					function lte(value, other) {
						return value <= other;
					}

					/**
					 * Converts `value` to an array.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to convert.
					 * @returns {Array} Returns the converted array.
					 * @example
					 *
					 * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
					 * // => [2, 3]
					 */
					function toArray(value) {
						var length = value ? getLength(value) : 0;
						if (!isLength(length)) {
							return values(value);
						}
						if (!length) {
							return [];
						}
						return arrayCopy(value);
					}

					/**
					 * Converts `value` to a plain object flattening inherited enumerable
					 * properties of `value` to own properties of the plain object.
					 *
					 * @static
					 * @memberOf _
					 * @category Lang
					 * @param {*} value The value to convert.
					 * @returns {Object} Returns the converted plain object.
					 * @example
					 *
					 * function Foo() {
	     *   this.b = 2;
	     * }
					 *
					 * Foo.prototype.c = 3;
					 *
					 * _.assign({ 'a': 1 }, new Foo);
					 * // => { 'a': 1, 'b': 2 }
					 *
					 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
					 * // => { 'a': 1, 'b': 2, 'c': 3 }
					 */
					function toPlainObject(value) {
						return baseCopy(value, keysIn(value));
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Recursively merges own enumerable properties of the source object(s), that
					 * don't resolve to `undefined` into the destination object. Subsequent sources
					 * overwrite property assignments of previous sources. If `customizer` is
					 * provided it is invoked to produce the merged values of the destination and
					 * source properties. If `customizer` returns `undefined` merging is handled
					 * by the method instead. The `customizer` is bound to `thisArg` and invoked
					 * with five arguments: (objectValue, sourceValue, key, object, source).
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The destination object.
					 * @param {...Object} [sources] The source objects.
					 * @param {Function} [customizer] The function to customize assigned values.
					 * @param {*} [thisArg] The `this` binding of `customizer`.
					 * @returns {Object} Returns `object`.
					 * @example
					 *
					 * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
					 *
					 * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
					 *
					 * _.merge(users, ages);
					 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
					 *
					 * // using a customizer callback
					 * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
					 *
					 * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
					 *
					 * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
					 * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
					 */
					var merge = createAssigner(baseMerge);

					/**
					 * Assigns own enumerable properties of source object(s) to the destination
					 * object. Subsequent sources overwrite property assignments of previous sources.
					 * If `customizer` is provided it is invoked to produce the assigned values.
					 * The `customizer` is bound to `thisArg` and invoked with five arguments:
					 * (objectValue, sourceValue, key, object, source).
					 *
					 * **Note:** This method mutates `object` and is based on
					 * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
					 *
					 * @static
					 * @memberOf _
					 * @alias extend
					 * @category Object
					 * @param {Object} object The destination object.
					 * @param {...Object} [sources] The source objects.
					 * @param {Function} [customizer] The function to customize assigned values.
					 * @param {*} [thisArg] The `this` binding of `customizer`.
					 * @returns {Object} Returns `object`.
					 * @example
					 *
					 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
					 * // => { 'user': 'fred', 'age': 40 }
					 *
					 * // using a customizer callback
					 * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
					 *
					 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
					 * // => { 'user': 'barney', 'age': 36 }
					 */
					var assign = createAssigner(function (object, source, customizer) {
						return customizer
							? assignWith(object, source, customizer)
							: baseAssign(object, source);
					});

					/**
					 * Creates an object that inherits from the given `prototype` object. If a
					 * `properties` object is provided its own enumerable properties are assigned
					 * to the created object.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} prototype The object to inherit from.
					 * @param {Object} [properties] The properties to assign to the object.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Object} Returns the new object.
					 * @example
					 *
					 * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
					 *
					 * function Circle() {
	     *   Shape.call(this);
	     * }
					 *
					 * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
					 *
					 * var circle = new Circle;
					 * circle instanceof Circle;
					 * // => true
					 *
					 * circle instanceof Shape;
					 * // => true
					 */
					function create(prototype, properties, guard) {
						var result = baseCreate(prototype);
						if (guard && isIterateeCall(prototype, properties, guard)) {
							properties = undefined;
						}
						return properties ? baseAssign(result, properties) : result;
					}

					/**
					 * Assigns own enumerable properties of source object(s) to the destination
					 * object for all destination properties that resolve to `undefined`. Once a
					 * property is set, additional values of the same property are ignored.
					 *
					 * **Note:** This method mutates `object`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The destination object.
					 * @param {...Object} [sources] The source objects.
					 * @returns {Object} Returns `object`.
					 * @example
					 *
					 * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
					 * // => { 'user': 'barney', 'age': 36 }
					 */
					var defaults = createDefaults(assign, assignDefaults);

					/**
					 * This method is like `_.defaults` except that it recursively assigns
					 * default properties.
					 *
					 * **Note:** This method mutates `object`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The destination object.
					 * @param {...Object} [sources] The source objects.
					 * @returns {Object} Returns `object`.
					 * @example
					 *
					 * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
					 * // => { 'user': { 'name': 'barney', 'age': 36 } }
					 *
					 */
					var defaultsDeep = createDefaults(merge, mergeDefaults);

					/**
					 * This method is like `_.find` except that it returns the key of the first
					 * element `predicate` returns truthy for instead of the element itself.
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to search.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
					 * @example
					 *
					 * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
					 *
					 * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
					 * // => 'barney' (iteration order is not guaranteed)
					 *
					 * // using the `_.matches` callback shorthand
					 * _.findKey(users, { 'age': 1, 'active': true });
					 * // => 'pebbles'
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.findKey(users, 'active', false);
					 * // => 'fred'
					 *
					 * // using the `_.property` callback shorthand
					 * _.findKey(users, 'active');
					 * // => 'barney'
					 */
					var findKey = createFindKey(baseForOwn);

					/**
					 * This method is like `_.findKey` except that it iterates over elements of
					 * a collection in the opposite order.
					 *
					 * If a property name is provided for `predicate` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `predicate` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to search.
					 * @param {Function|Object|string} [predicate=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
					 * @example
					 *
					 * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
					 *
					 * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
					 * // => returns `pebbles` assuming `_.findKey` returns `barney`
					 *
					 * // using the `_.matches` callback shorthand
					 * _.findLastKey(users, { 'age': 36, 'active': true });
					 * // => 'barney'
					 *
					 * // using the `_.matchesProperty` callback shorthand
					 * _.findLastKey(users, 'active', false);
					 * // => 'fred'
					 *
					 * // using the `_.property` callback shorthand
					 * _.findLastKey(users, 'active');
					 * // => 'pebbles'
					 */
					var findLastKey = createFindKey(baseForOwnRight);

					/**
					 * Iterates over own and inherited enumerable properties of an object invoking
					 * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
					 * with three arguments: (value, key, object). Iteratee functions may exit
					 * iteration early by explicitly returning `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to iterate over.
					 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Object} Returns `object`.
					 * @example
					 *
					 * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
					 *
					 * Foo.prototype.c = 3;
					 *
					 * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
					 * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
					 */
					var forIn = createForIn(baseFor);

					/**
					 * This method is like `_.forIn` except that it iterates over properties of
					 * `object` in the opposite order.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to iterate over.
					 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Object} Returns `object`.
					 * @example
					 *
					 * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
					 *
					 * Foo.prototype.c = 3;
					 *
					 * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
					 * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
					 */
					var forInRight = createForIn(baseForRight);

					/**
					 * Iterates over own enumerable properties of an object invoking `iteratee`
					 * for each property. The `iteratee` is bound to `thisArg` and invoked with
					 * three arguments: (value, key, object). Iteratee functions may exit iteration
					 * early by explicitly returning `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to iterate over.
					 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Object} Returns `object`.
					 * @example
					 *
					 * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
					 *
					 * Foo.prototype.c = 3;
					 *
					 * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
					 * // => logs 'a' and 'b' (iteration order is not guaranteed)
					 */
					var forOwn = createForOwn(baseForOwn);

					/**
					 * This method is like `_.forOwn` except that it iterates over properties of
					 * `object` in the opposite order.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to iterate over.
					 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Object} Returns `object`.
					 * @example
					 *
					 * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
					 *
					 * Foo.prototype.c = 3;
					 *
					 * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
					 * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
					 */
					var forOwnRight = createForOwn(baseForOwnRight);

					/**
					 * Creates an array of function property names from all enumerable properties,
					 * own and inherited, of `object`.
					 *
					 * @static
					 * @memberOf _
					 * @alias methods
					 * @category Object
					 * @param {Object} object The object to inspect.
					 * @returns {Array} Returns the new array of property names.
					 * @example
					 *
					 * _.functions(_);
					 * // => ['after', 'ary', 'assign', ...]
					 */
					function functions(object) {
						return baseFunctions(object, keysIn(object));
					}

					/**
					 * Gets the property value at `path` of `object`. If the resolved value is
					 * `undefined` the `defaultValue` is used in its place.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to query.
					 * @param {Array|string} path The path of the property to get.
					 * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
					 * @returns {*} Returns the resolved value.
					 * @example
					 *
					 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
					 *
					 * _.get(object, 'a[0].b.c');
					 * // => 3
					 *
					 * _.get(object, ['a', '0', 'b', 'c']);
					 * // => 3
					 *
					 * _.get(object, 'a.b.c', 'default');
					 * // => 'default'
					 */
					function get(object, path, defaultValue) {
						var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
						return result === undefined ? defaultValue : result;
					}

					/**
					 * Checks if `path` is a direct property.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to query.
					 * @param {Array|string} path The path to check.
					 * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
					 * @example
					 *
					 * var object = { 'a': { 'b': { 'c': 3 } } };
					 *
					 * _.has(object, 'a');
					 * // => true
					 *
					 * _.has(object, 'a.b.c');
					 * // => true
					 *
					 * _.has(object, ['a', 'b', 'c']);
					 * // => true
					 */
					function has(object, path) {
						if (object == null) {
							return false;
						}
						var result = hasOwnProperty.call(object, path);
						if (!result && !isKey(path)) {
							path = toPath(path);
							object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
							if (object == null) {
								return false;
							}
							path = last(path);
							result = hasOwnProperty.call(object, path);
						}
						return result || (isLength(object.length) && isIndex(path, object.length) &&
							(isArray(object) || isArguments(object)));
					}

					/**
					 * Creates an object composed of the inverted keys and values of `object`.
					 * If `object` contains duplicate values, subsequent values overwrite property
					 * assignments of previous values unless `multiValue` is `true`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to invert.
					 * @param {boolean} [multiValue] Allow multiple values per key.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Object} Returns the new inverted object.
					 * @example
					 *
					 * var object = { 'a': 1, 'b': 2, 'c': 1 };
					 *
					 * _.invert(object);
					 * // => { '1': 'c', '2': 'b' }
					 *
					 * // with `multiValue`
					 * _.invert(object, true);
					 * // => { '1': ['a', 'c'], '2': ['b'] }
					 */
					function invert(object, multiValue, guard) {
						if (guard && isIterateeCall(object, multiValue, guard)) {
							multiValue = undefined;
						}
						var index = -1,
							props = keys(object),
							length = props.length,
							result = {};

						while (++index < length) {
							var key = props[index],
								value = object[key];

							if (multiValue) {
								if (hasOwnProperty.call(result, value)) {
									result[value].push(key);
								} else {
									result[value] = [key];
								}
							}
							else {
								result[value] = key;
							}
						}
						return result;
					}

					/**
					 * Creates an array of the own enumerable property names of `object`.
					 *
					 * **Note:** Non-object values are coerced to objects. See the
					 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
					 * for more details.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to query.
					 * @returns {Array} Returns the array of property names.
					 * @example
					 *
					 * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
					 *
					 * Foo.prototype.c = 3;
					 *
					 * _.keys(new Foo);
					 * // => ['a', 'b'] (iteration order is not guaranteed)
					 *
					 * _.keys('hi');
					 * // => ['0', '1']
					 */
					var keys = !nativeKeys ? shimKeys : function (object) {
						var Ctor = object == null ? undefined : object.constructor;
						if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
							(typeof object != 'function' && isArrayLike(object))) {
							return shimKeys(object);
						}
						return isObject(object) ? nativeKeys(object) : [];
					};

					/**
					 * Creates an array of the own and inherited enumerable property names of `object`.
					 *
					 * **Note:** Non-object values are coerced to objects.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to query.
					 * @returns {Array} Returns the array of property names.
					 * @example
					 *
					 * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
					 *
					 * Foo.prototype.c = 3;
					 *
					 * _.keysIn(new Foo);
					 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
					 */
					function keysIn(object) {
						if (object == null) {
							return [];
						}
						if (!isObject(object)) {
							object = Object(object);
						}
						var length = object.length;
						length = (length && isLength(length) &&
							(isArray(object) || isArguments(object)) && length) || 0;

						var Ctor = object.constructor,
							index = -1,
							isProto = typeof Ctor == 'function' && Ctor.prototype === object,
							result = Array(length),
							skipIndexes = length > 0;

						while (++index < length) {
							result[index] = (index + '');
						}
						for (var key in object) {
							if (!(skipIndexes && isIndex(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
								result.push(key);
							}
						}
						return result;
					}

					/**
					 * The opposite of `_.mapValues`; this method creates an object with the
					 * same values as `object` and keys generated by running each own enumerable
					 * property of `object` through `iteratee`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to iterate over.
					 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Object} Returns the new mapped object.
					 * @example
					 *
					 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
					 * // => { 'a1': 1, 'b2': 2 }
					 */
					var mapKeys = createObjectMapper(true);

					/**
					 * Creates an object with the same keys as `object` and values generated by
					 * running each own enumerable property of `object` through `iteratee`. The
					 * iteratee function is bound to `thisArg` and invoked with three arguments:
					 * (value, key, object).
					 *
					 * If a property name is provided for `iteratee` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `iteratee` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to iterate over.
					 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
					 *  per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Object} Returns the new mapped object.
					 * @example
					 *
					 * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
					 * // => { 'a': 3, 'b': 6 }
					 *
					 * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
					 *
					 * // using the `_.property` callback shorthand
					 * _.mapValues(users, 'age');
					 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
					 */
					var mapValues = createObjectMapper();

					/**
					 * The opposite of `_.pick`; this method creates an object composed of the
					 * own and inherited enumerable properties of `object` that are not omitted.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The source object.
					 * @param {Function|...(string|string[])} [predicate] The function invoked per
					 *  iteration or property names to omit, specified as individual property
					 *  names or arrays of property names.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {Object} Returns the new object.
					 * @example
					 *
					 * var object = { 'user': 'fred', 'age': 40 };
					 *
					 * _.omit(object, 'age');
					 * // => { 'user': 'fred' }
					 *
					 * _.omit(object, _.isNumber);
					 * // => { 'user': 'fred' }
					 */
					var omit = restParam(function (object, props) {
						if (object == null) {
							return {};
						}
						if (typeof props[0] != 'function') {
							var props = arrayMap(baseFlatten(props), String);
							return pickByArray(object, baseDifference(keysIn(object), props));
						}
						var predicate = bindCallback(props[0], props[1], 3);
						return pickByCallback(object, function (value, key, object) {
							return !predicate(value, key, object);
						});
					});

					/**
					 * Creates a two dimensional array of the key-value pairs for `object`,
					 * e.g. `[[key1, value1], [key2, value2]]`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to query.
					 * @returns {Array} Returns the new array of key-value pairs.
					 * @example
					 *
					 * _.pairs({ 'barney': 36, 'fred': 40 });
					 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
					 */
					function pairs(object) {
						object = toObject(object);

						var index = -1,
							props = keys(object),
							length = props.length,
							result = Array(length);

						while (++index < length) {
							var key = props[index];
							result[index] = [key, object[key]];
						}
						return result;
					}

					/**
					 * Creates an object composed of the picked `object` properties. Property
					 * names may be specified as individual arguments or as arrays of property
					 * names. If `predicate` is provided it is invoked for each property of `object`
					 * picking the properties `predicate` returns truthy for. The predicate is
					 * bound to `thisArg` and invoked with three arguments: (value, key, object).
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The source object.
					 * @param {Function|...(string|string[])} [predicate] The function invoked per
					 *  iteration or property names to pick, specified as individual property
					 *  names or arrays of property names.
					 * @param {*} [thisArg] The `this` binding of `predicate`.
					 * @returns {Object} Returns the new object.
					 * @example
					 *
					 * var object = { 'user': 'fred', 'age': 40 };
					 *
					 * _.pick(object, 'user');
					 * // => { 'user': 'fred' }
					 *
					 * _.pick(object, _.isString);
					 * // => { 'user': 'fred' }
					 */
					var pick = restParam(function (object, props) {
						if (object == null) {
							return {};
						}
						return typeof props[0] == 'function'
							? pickByCallback(object, bindCallback(props[0], props[1], 3))
							: pickByArray(object, baseFlatten(props));
					});

					/**
					 * This method is like `_.get` except that if the resolved value is a function
					 * it is invoked with the `this` binding of its parent object and its result
					 * is returned.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to query.
					 * @param {Array|string} path The path of the property to resolve.
					 * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
					 * @returns {*} Returns the resolved value.
					 * @example
					 *
					 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
					 *
					 * _.result(object, 'a[0].b.c1');
					 * // => 3
					 *
					 * _.result(object, 'a[0].b.c2');
					 * // => 4
					 *
					 * _.result(object, 'a.b.c', 'default');
					 * // => 'default'
					 *
					 * _.result(object, 'a.b.c', _.constant('default'));
					 * // => 'default'
					 */
					function result(object, path, defaultValue) {
						var result = object == null ? undefined : object[path];
						if (result === undefined) {
							if (object != null && !isKey(path, object)) {
								path = toPath(path);
								object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
								result = object == null ? undefined : object[last(path)];
							}
							result = result === undefined ? defaultValue : result;
						}
						return isFunction(result) ? result.call(object) : result;
					}

					/**
					 * Sets the property value of `path` on `object`. If a portion of `path`
					 * does not exist it is created.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to augment.
					 * @param {Array|string} path The path of the property to set.
					 * @param {*} value The value to set.
					 * @returns {Object} Returns `object`.
					 * @example
					 *
					 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
					 *
					 * _.set(object, 'a[0].b.c', 4);
					 * console.log(object.a[0].b.c);
					 * // => 4
					 *
					 * _.set(object, 'x[0].y.z', 5);
					 * console.log(object.x[0].y.z);
					 * // => 5
					 */
					function set(object, path, value) {
						if (object == null) {
							return object;
						}
						var pathKey = (path + '');
						path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

						var index = -1,
							length = path.length,
							lastIndex = length - 1,
							nested = object;

						while (nested != null && ++index < length) {
							var key = path[index];
							if (isObject(nested)) {
								if (index == lastIndex) {
									nested[key] = value;
								} else if (nested[key] == null) {
									nested[key] = isIndex(path[index + 1]) ? [] : {};
								}
							}
							nested = nested[key];
						}
						return object;
					}

					/**
					 * An alternative to `_.reduce`; this method transforms `object` to a new
					 * `accumulator` object which is the result of running each of its own enumerable
					 * properties through `iteratee`, with each invocation potentially mutating
					 * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
					 * with four arguments: (accumulator, value, key, object). Iteratee functions
					 * may exit iteration early by explicitly returning `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Array|Object} object The object to iterate over.
					 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
					 * @param {*} [accumulator] The custom accumulator value.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {*} Returns the accumulated value.
					 * @example
					 *
					 * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
					 * // => [4, 9]
					 *
					 * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
					 * // => { 'a': 3, 'b': 6 }
					 */
					function transform(object, iteratee, accumulator, thisArg) {
						var isArr = isArray(object) || isTypedArray(object);
						iteratee = getCallback(iteratee, thisArg, 4);

						if (accumulator == null) {
							if (isArr || isObject(object)) {
								var Ctor = object.constructor;
								if (isArr) {
									accumulator = isArray(object) ? new Ctor : [];
								} else {
									accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
								}
							} else {
								accumulator = {};
							}
						}
						(isArr ? arrayEach : baseForOwn)(object, function (value, index, object) {
							return iteratee(accumulator, value, index, object);
						});
						return accumulator;
					}

					/**
					 * Creates an array of the own enumerable property values of `object`.
					 *
					 * **Note:** Non-object values are coerced to objects.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to query.
					 * @returns {Array} Returns the array of property values.
					 * @example
					 *
					 * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
					 *
					 * Foo.prototype.c = 3;
					 *
					 * _.values(new Foo);
					 * // => [1, 2] (iteration order is not guaranteed)
					 *
					 * _.values('hi');
					 * // => ['h', 'i']
					 */
					function values(object) {
						return baseValues(object, keys(object));
					}

					/**
					 * Creates an array of the own and inherited enumerable property values
					 * of `object`.
					 *
					 * **Note:** Non-object values are coerced to objects.
					 *
					 * @static
					 * @memberOf _
					 * @category Object
					 * @param {Object} object The object to query.
					 * @returns {Array} Returns the array of property values.
					 * @example
					 *
					 * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
					 *
					 * Foo.prototype.c = 3;
					 *
					 * _.valuesIn(new Foo);
					 * // => [1, 2, 3] (iteration order is not guaranteed)
					 */
					function valuesIn(object) {
						return baseValues(object, keysIn(object));
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Checks if `n` is between `start` and up to but not including, `end`. If
					 * `end` is not specified it is set to `start` with `start` then set to `0`.
					 *
					 * @static
					 * @memberOf _
					 * @category Number
					 * @param {number} n The number to check.
					 * @param {number} [start=0] The start of the range.
					 * @param {number} end The end of the range.
					 * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
					 * @example
					 *
					 * _.inRange(3, 2, 4);
					 * // => true
					 *
					 * _.inRange(4, 8);
					 * // => true
					 *
					 * _.inRange(4, 2);
					 * // => false
					 *
					 * _.inRange(2, 2);
					 * // => false
					 *
					 * _.inRange(1.2, 2);
					 * // => true
					 *
					 * _.inRange(5.2, 4);
					 * // => false
					 */
					function inRange(value, start, end) {
						start = +start || 0;
						if (end === undefined) {
							end = start;
							start = 0;
						} else {
							end = +end || 0;
						}
						return value >= nativeMin(start, end) && value < nativeMax(start, end);
					}

					/**
					 * Produces a random number between `min` and `max` (inclusive). If only one
					 * argument is provided a number between `0` and the given number is returned.
					 * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
					 * number is returned instead of an integer.
					 *
					 * @static
					 * @memberOf _
					 * @category Number
					 * @param {number} [min=0] The minimum possible value.
					 * @param {number} [max=1] The maximum possible value.
					 * @param {boolean} [floating] Specify returning a floating-point number.
					 * @returns {number} Returns the random number.
					 * @example
					 *
					 * _.random(0, 5);
					 * // => an integer between 0 and 5
					 *
					 * _.random(5);
					 * // => also an integer between 0 and 5
					 *
					 * _.random(5, true);
					 * // => a floating-point number between 0 and 5
					 *
					 * _.random(1.2, 5.2);
					 * // => a floating-point number between 1.2 and 5.2
					 */
					function random(min, max, floating) {
						if (floating && isIterateeCall(min, max, floating)) {
							max = floating = undefined;
						}
						var noMin = min == null,
							noMax = max == null;

						if (floating == null) {
							if (noMax && typeof min == 'boolean') {
								floating = min;
								min = 1;
							}
							else if (typeof max == 'boolean') {
								floating = max;
								noMax = true;
							}
						}
						if (noMin && noMax) {
							max = 1;
							noMax = false;
						}
						min = +min || 0;
						if (noMax) {
							max = min;
							min = 0;
						} else {
							max = +max || 0;
						}
						if (floating || min % 1 || max % 1) {
							var rand = nativeRandom();
							return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
						}
						return baseRandom(min, max);
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to convert.
					 * @returns {string} Returns the camel cased string.
					 * @example
					 *
					 * _.camelCase('Foo Bar');
					 * // => 'fooBar'
					 *
					 * _.camelCase('--foo-bar');
					 * // => 'fooBar'
					 *
					 * _.camelCase('__foo_bar__');
					 * // => 'fooBar'
					 */
					var camelCase = createCompounder(function (result, word, index) {
						word = word.toLowerCase();
						return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
					});

					/**
					 * Capitalizes the first character of `string`.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to capitalize.
					 * @returns {string} Returns the capitalized string.
					 * @example
					 *
					 * _.capitalize('fred');
					 * // => 'Fred'
					 */
					function capitalize(string) {
						string = baseToString(string);
						return string && (string.charAt(0).toUpperCase() + string.slice(1));
					}

					/**
					 * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
					 * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to deburr.
					 * @returns {string} Returns the deburred string.
					 * @example
					 *
					 * _.deburr('déjà vu');
					 * // => 'deja vu'
					 */
					function deburr(string) {
						string = baseToString(string);
						return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
					}

					/**
					 * Checks if `string` ends with the given target string.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to search.
					 * @param {string} [target] The string to search for.
					 * @param {number} [position=string.length] The position to search from.
					 * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
					 * @example
					 *
					 * _.endsWith('abc', 'c');
					 * // => true
					 *
					 * _.endsWith('abc', 'b');
					 * // => false
					 *
					 * _.endsWith('abc', 'b', 2);
					 * // => true
					 */
					function endsWith(string, target, position) {
						string = baseToString(string);
						target = (target + '');

						var length = string.length;
						position = position === undefined
							? length
							: nativeMin(position < 0 ? 0 : (+position || 0), length);

						position -= target.length;
						return position >= 0 && string.indexOf(target, position) == position;
					}

					/**
					 * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
					 * their corresponding HTML entities.
					 *
					 * **Note:** No other characters are escaped. To escape additional characters
					 * use a third-party library like [_he_](https://mths.be/he).
					 *
					 * Though the ">" character is escaped for symmetry, characters like
					 * ">" and "/" don't need escaping in HTML and have no special meaning
					 * unless they're part of a tag or unquoted attribute value.
					 * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
					 * (under "semi-related fun fact") for more details.
					 *
					 * Backticks are escaped because in Internet Explorer < 9, they can break out
					 * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
					 * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
					 * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
					 * for more details.
					 *
					 * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
					 * to reduce XSS vectors.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to escape.
					 * @returns {string} Returns the escaped string.
					 * @example
					 *
					 * _.escape('fred, barney, & pebbles');
					 * // => 'fred, barney, &amp; pebbles'
					 */
					function escape(string) {
						// Reset `lastIndex` because in IE < 9 `String#replace` does not.
						string = baseToString(string);
						return (string && reHasUnescapedHtml.test(string))
							? string.replace(reUnescapedHtml, escapeHtmlChar)
							: string;
					}

					/**
					 * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
					 * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to escape.
					 * @returns {string} Returns the escaped string.
					 * @example
					 *
					 * _.escapeRegExp('[lodash](https://lodash.com/)');
					 * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
					 */
					function escapeRegExp(string) {
						string = baseToString(string);
						return (string && reHasRegExpChars.test(string))
							? string.replace(reRegExpChars, escapeRegExpChar)
							: (string || '(?:)');
					}

					/**
					 * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to convert.
					 * @returns {string} Returns the kebab cased string.
					 * @example
					 *
					 * _.kebabCase('Foo Bar');
					 * // => 'foo-bar'
					 *
					 * _.kebabCase('fooBar');
					 * // => 'foo-bar'
					 *
					 * _.kebabCase('__foo_bar__');
					 * // => 'foo-bar'
					 */
					var kebabCase = createCompounder(function (result, word, index) {
						return result + (index ? '-' : '') + word.toLowerCase();
					});

					/**
					 * Pads `string` on the left and right sides if it's shorter than `length`.
					 * Padding characters are truncated if they can't be evenly divided by `length`.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to pad.
					 * @param {number} [length=0] The padding length.
					 * @param {string} [chars=' '] The string used as padding.
					 * @returns {string} Returns the padded string.
					 * @example
					 *
					 * _.pad('abc', 8);
					 * // => '  abc   '
					 *
					 * _.pad('abc', 8, '_-');
					 * // => '_-abc_-_'
					 *
					 * _.pad('abc', 3);
					 * // => 'abc'
					 */
					function pad(string, length, chars) {
						string = baseToString(string);
						length = +length;

						var strLength = string.length;
						if (strLength >= length || !nativeIsFinite(length)) {
							return string;
						}
						var mid = (length - strLength) / 2,
							leftLength = nativeFloor(mid),
							rightLength = nativeCeil(mid);

						chars = createPadding('', rightLength, chars);
						return chars.slice(0, leftLength) + string + chars;
					}

					/**
					 * Pads `string` on the left side if it's shorter than `length`. Padding
					 * characters are truncated if they exceed `length`.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to pad.
					 * @param {number} [length=0] The padding length.
					 * @param {string} [chars=' '] The string used as padding.
					 * @returns {string} Returns the padded string.
					 * @example
					 *
					 * _.padLeft('abc', 6);
					 * // => '   abc'
					 *
					 * _.padLeft('abc', 6, '_-');
					 * // => '_-_abc'
					 *
					 * _.padLeft('abc', 3);
					 * // => 'abc'
					 */
					var padLeft = createPadDir();

					/**
					 * Pads `string` on the right side if it's shorter than `length`. Padding
					 * characters are truncated if they exceed `length`.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to pad.
					 * @param {number} [length=0] The padding length.
					 * @param {string} [chars=' '] The string used as padding.
					 * @returns {string} Returns the padded string.
					 * @example
					 *
					 * _.padRight('abc', 6);
					 * // => 'abc   '
					 *
					 * _.padRight('abc', 6, '_-');
					 * // => 'abc_-_'
					 *
					 * _.padRight('abc', 3);
					 * // => 'abc'
					 */
					var padRight = createPadDir(true);

					/**
					 * Converts `string` to an integer of the specified radix. If `radix` is
					 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
					 * in which case a `radix` of `16` is used.
					 *
					 * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
					 * of `parseInt`.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} string The string to convert.
					 * @param {number} [radix] The radix to interpret `value` by.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {number} Returns the converted integer.
					 * @example
					 *
					 * _.parseInt('08');
					 * // => 8
					 *
					 * _.map(['6', '08', '10'], _.parseInt);
					 * // => [6, 8, 10]
					 */
					function parseInt(string, radix, guard) {
						// Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
						// Chrome fails to trim leading <BOM> whitespace characters.
						// See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
						if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
							radix = 0;
						} else if (radix) {
							radix = +radix;
						}
						string = trim(string);
						return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
					}

					/**
					 * Repeats the given string `n` times.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to repeat.
					 * @param {number} [n=0] The number of times to repeat the string.
					 * @returns {string} Returns the repeated string.
					 * @example
					 *
					 * _.repeat('*', 3);
					 * // => '***'
					 *
					 * _.repeat('abc', 2);
					 * // => 'abcabc'
					 *
					 * _.repeat('abc', 0);
					 * // => ''
					 */
					function repeat(string, n) {
						var result = '';
						string = baseToString(string);
						n = +n;
						if (n < 1 || !string || !nativeIsFinite(n)) {
							return result;
						}
						// Leverage the exponentiation by squaring algorithm for a faster repeat.
						// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
						do {
							if (n % 2) {
								result += string;
							}
							n = nativeFloor(n / 2);
							string += string;
						} while (n);

						return result;
					}

					/**
					 * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to convert.
					 * @returns {string} Returns the snake cased string.
					 * @example
					 *
					 * _.snakeCase('Foo Bar');
					 * // => 'foo_bar'
					 *
					 * _.snakeCase('fooBar');
					 * // => 'foo_bar'
					 *
					 * _.snakeCase('--foo-bar');
					 * // => 'foo_bar'
					 */
					var snakeCase = createCompounder(function (result, word, index) {
						return result + (index ? '_' : '') + word.toLowerCase();
					});

					/**
					 * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to convert.
					 * @returns {string} Returns the start cased string.
					 * @example
					 *
					 * _.startCase('--foo-bar');
					 * // => 'Foo Bar'
					 *
					 * _.startCase('fooBar');
					 * // => 'Foo Bar'
					 *
					 * _.startCase('__foo_bar__');
					 * // => 'Foo Bar'
					 */
					var startCase = createCompounder(function (result, word, index) {
						return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
					});

					/**
					 * Checks if `string` starts with the given target string.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to search.
					 * @param {string} [target] The string to search for.
					 * @param {number} [position=0] The position to search from.
					 * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
					 * @example
					 *
					 * _.startsWith('abc', 'a');
					 * // => true
					 *
					 * _.startsWith('abc', 'b');
					 * // => false
					 *
					 * _.startsWith('abc', 'b', 1);
					 * // => true
					 */
					function startsWith(string, target, position) {
						string = baseToString(string);
						position = position == null
							? 0
							: nativeMin(position < 0 ? 0 : (+position || 0), string.length);

						return string.lastIndexOf(target, position) == position;
					}

					/**
					 * Creates a compiled template function that can interpolate data properties
					 * in "interpolate" delimiters, HTML-escape interpolated data properties in
					 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
					 * properties may be accessed as free variables in the template. If a setting
					 * object is provided it takes precedence over `_.templateSettings` values.
					 *
					 * **Note:** In the development build `_.template` utilizes
					 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
					 * for easier debugging.
					 *
					 * For more information on precompiling templates see
					 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
					 *
					 * For more information on Chrome extension sandboxes see
					 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The template string.
					 * @param {Object} [options] The options object.
					 * @param {RegExp} [options.escape] The HTML "escape" delimiter.
					 * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
					 * @param {Object} [options.imports] An object to import into the template as free variables.
					 * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
					 * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
					 * @param {string} [options.variable] The data object variable name.
					 * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
					 * @returns {Function} Returns the compiled template function.
					 * @example
					 *
					 * // using the "interpolate" delimiter to create a compiled template
					 * var compiled = _.template('hello <%= user %>!');
					 * compiled({ 'user': 'fred' });
					 * // => 'hello fred!'
					 *
					 * // using the HTML "escape" delimiter to escape data property values
					 * var compiled = _.template('<b><%- value %></b>');
					 * compiled({ 'value': '<script>' });
					 * // => '<b>&lt;script&gt;</b>'
					 *
					 * // using the "evaluate" delimiter to execute JavaScript and generate HTML
					 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
					 * compiled({ 'users': ['fred', 'barney'] });
					 * // => '<li>fred</li><li>barney</li>'
					 *
					 * // using the internal `print` function in "evaluate" delimiters
					 * var compiled = _.template('<% print("hello " + user); %>!');
					 * compiled({ 'user': 'barney' });
					 * // => 'hello barney!'
					 *
					 * // using the ES delimiter as an alternative to the default "interpolate" delimiter
					 * var compiled = _.template('hello ${ user }!');
					 * compiled({ 'user': 'pebbles' });
					 * // => 'hello pebbles!'
					 *
					 * // using custom template delimiters
					 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
					 * var compiled = _.template('hello {{ user }}!');
					 * compiled({ 'user': 'mustache' });
					 * // => 'hello mustache!'
					 *
					 * // using backslashes to treat delimiters as plain text
					 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
					 * compiled({ 'value': 'ignored' });
					 * // => '<%- value %>'
					 *
					 * // using the `imports` option to import `jQuery` as `jq`
					 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
					 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
					 * compiled({ 'users': ['fred', 'barney'] });
					 * // => '<li>fred</li><li>barney</li>'
					 *
					 * // using the `sourceURL` option to specify a custom sourceURL for the template
					 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
					 * compiled(data);
					 * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
					 *
					 * // using the `variable` option to ensure a with-statement isn't used in the compiled template
					 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
					 * compiled.source;
					 * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
					 *
					 * // using the `source` property to inline compiled templates for meaningful
					 * // line numbers in error messages and a stack trace
					 * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
					 *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
					 * ');
					 */
					function template(string, options, otherOptions) {
						// Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
						// and Laura Doktorova's doT.js (https://github.com/olado/doT).
						var settings = lodash.templateSettings;

						if (otherOptions && isIterateeCall(string, options, otherOptions)) {
							options = otherOptions = undefined;
						}
						string = baseToString(string);
						options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

						var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
							importsKeys = keys(imports),
							importsValues = baseValues(imports, importsKeys);

						var isEscaping,
							isEvaluating,
							index = 0,
							interpolate = options.interpolate || reNoMatch,
							source = "__p += '";

						// Compile the regexp to match each delimiter.
						var reDelimiters = RegExp(
							(options.escape || reNoMatch).source + '|' +
							interpolate.source + '|' +
							(interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
							(options.evaluate || reNoMatch).source + '|$'
							, 'g');

						// Use a sourceURL for easier debugging.
						var sourceURL = '//# sourceURL=' +
							('sourceURL' in options
									? options.sourceURL
									: ('lodash.templateSources[' + (++templateCounter) + ']')
							) + '\n';

						string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
							interpolateValue || (interpolateValue = esTemplateValue);

							// Escape characters that can't be included in string literals.
							source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

							// Replace delimiters with snippets.
							if (escapeValue) {
								isEscaping = true;
								source += "' +\n__e(" + escapeValue + ") +\n'";
							}
							if (evaluateValue) {
								isEvaluating = true;
								source += "';\n" + evaluateValue + ";\n__p += '";
							}
							if (interpolateValue) {
								source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
							}
							index = offset + match.length;

							// The JS engine embedded in Adobe products requires returning the `match`
							// string in order to produce the correct `offset` value.
							return match;
						});

						source += "';\n";

						// If `variable` is not specified wrap a with-statement around the generated
						// code to add the data object to the top of the scope chain.
						var variable = options.variable;
						if (!variable) {
							source = 'with (obj) {\n' + source + '\n}\n';
						}
						// Cleanup code by stripping empty strings.
						source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
							.replace(reEmptyStringMiddle, '$1')
							.replace(reEmptyStringTrailing, '$1;');

						// Frame code as the function body.
						source = 'function(' + (variable || 'obj') + ') {\n' +
							(variable
									? ''
									: 'obj || (obj = {});\n'
							) +
							"var __t, __p = ''" +
							(isEscaping
									? ', __e = _.escape'
									: ''
							) +
							(isEvaluating
									? ', __j = Array.prototype.join;\n' +
								"function print() { __p += __j.call(arguments, '') }\n"
									: ';\n'
							) +
							source +
							'return __p\n}';

						var result = attempt(function () {
							return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
						});

						// Provide the compiled function's source by its `toString` method or
						// the `source` property as a convenience for inlining compiled templates.
						result.source = source;
						if (isError(result)) {
							throw result;
						}
						return result;
					}

					/**
					 * Removes leading and trailing whitespace or specified characters from `string`.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to trim.
					 * @param {string} [chars=whitespace] The characters to trim.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {string} Returns the trimmed string.
					 * @example
					 *
					 * _.trim('  abc  ');
					 * // => 'abc'
					 *
					 * _.trim('-_-abc-_-', '_-');
					 * // => 'abc'
					 *
					 * _.map(['  foo  ', '  bar  '], _.trim);
					 * // => ['foo', 'bar']
					 */
					function trim(string, chars, guard) {
						var value = string;
						string = baseToString(string);
						if (!string) {
							return string;
						}
						if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
							return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
						}
						chars = (chars + '');
						return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
					}

					/**
					 * Removes leading whitespace or specified characters from `string`.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to trim.
					 * @param {string} [chars=whitespace] The characters to trim.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {string} Returns the trimmed string.
					 * @example
					 *
					 * _.trimLeft('  abc  ');
					 * // => 'abc  '
					 *
					 * _.trimLeft('-_-abc-_-', '_-');
					 * // => 'abc-_-'
					 */
					function trimLeft(string, chars, guard) {
						var value = string;
						string = baseToString(string);
						if (!string) {
							return string;
						}
						if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
							return string.slice(trimmedLeftIndex(string));
						}
						return string.slice(charsLeftIndex(string, (chars + '')));
					}

					/**
					 * Removes trailing whitespace or specified characters from `string`.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to trim.
					 * @param {string} [chars=whitespace] The characters to trim.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {string} Returns the trimmed string.
					 * @example
					 *
					 * _.trimRight('  abc  ');
					 * // => '  abc'
					 *
					 * _.trimRight('-_-abc-_-', '_-');
					 * // => '-_-abc'
					 */
					function trimRight(string, chars, guard) {
						var value = string;
						string = baseToString(string);
						if (!string) {
							return string;
						}
						if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
							return string.slice(0, trimmedRightIndex(string) + 1);
						}
						return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
					}

					/**
					 * Truncates `string` if it's longer than the given maximum string length.
					 * The last characters of the truncated string are replaced with the omission
					 * string which defaults to "...".
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to truncate.
					 * @param {Object|number} [options] The options object or maximum string length.
					 * @param {number} [options.length=30] The maximum string length.
					 * @param {string} [options.omission='...'] The string to indicate text is omitted.
					 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {string} Returns the truncated string.
					 * @example
					 *
					 * _.trunc('hi-diddly-ho there, neighborino');
					 * // => 'hi-diddly-ho there, neighbo...'
					 *
					 * _.trunc('hi-diddly-ho there, neighborino', 24);
					 * // => 'hi-diddly-ho there, n...'
					 *
					 * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
					 * // => 'hi-diddly-ho there,...'
					 *
					 * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
					 * // => 'hi-diddly-ho there...'
					 *
					 * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
					 * // => 'hi-diddly-ho there, neig [...]'
					 */
					function trunc(string, options, guard) {
						if (guard && isIterateeCall(string, options, guard)) {
							options = undefined;
						}
						var length = DEFAULT_TRUNC_LENGTH,
							omission = DEFAULT_TRUNC_OMISSION;

						if (options != null) {
							if (isObject(options)) {
								var separator = 'separator' in options ? options.separator : separator;
								length = 'length' in options ? (+options.length || 0) : length;
								omission = 'omission' in options ? baseToString(options.omission) : omission;
							} else {
								length = +options || 0;
							}
						}
						string = baseToString(string);
						if (length >= string.length) {
							return string;
						}
						var end = length - omission.length;
						if (end < 1) {
							return omission;
						}
						var result = string.slice(0, end);
						if (separator == null) {
							return result + omission;
						}
						if (isRegExp(separator)) {
							if (string.slice(end).search(separator)) {
								var match,
									newEnd,
									substring = string.slice(0, end);

								if (!separator.global) {
									separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
								}
								separator.lastIndex = 0;
								while ((match = separator.exec(substring))) {
									newEnd = match.index;
								}
								result = result.slice(0, newEnd == null ? end : newEnd);
							}
						} else if (string.indexOf(separator, end) != end) {
							var index = result.lastIndexOf(separator);
							if (index > -1) {
								result = result.slice(0, index);
							}
						}
						return result + omission;
					}

					/**
					 * The inverse of `_.escape`; this method converts the HTML entities
					 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
					 * corresponding characters.
					 *
					 * **Note:** No other HTML entities are unescaped. To unescape additional HTML
					 * entities use a third-party library like [_he_](https://mths.be/he).
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to unescape.
					 * @returns {string} Returns the unescaped string.
					 * @example
					 *
					 * _.unescape('fred, barney, &amp; pebbles');
					 * // => 'fred, barney, & pebbles'
					 */
					function unescape(string) {
						string = baseToString(string);
						return (string && reHasEscapedHtml.test(string))
							? string.replace(reEscapedHtml, unescapeHtmlChar)
							: string;
					}

					/**
					 * Splits `string` into an array of its words.
					 *
					 * @static
					 * @memberOf _
					 * @category String
					 * @param {string} [string=''] The string to inspect.
					 * @param {RegExp|string} [pattern] The pattern to match words.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Array} Returns the words of `string`.
					 * @example
					 *
					 * _.words('fred, barney, & pebbles');
					 * // => ['fred', 'barney', 'pebbles']
					 *
					 * _.words('fred, barney, & pebbles', /[^, ]+/g);
					 * // => ['fred', 'barney', '&', 'pebbles']
					 */
					function words(string, pattern, guard) {
						if (guard && isIterateeCall(string, pattern, guard)) {
							pattern = undefined;
						}
						string = baseToString(string);
						return string.match(pattern || reWords) || [];
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Attempts to invoke `func`, returning either the result or the caught error
					 * object. Any additional arguments are provided to `func` when it is invoked.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {Function} func The function to attempt.
					 * @returns {*} Returns the `func` result or error object.
					 * @example
					 *
					 * // avoid throwing errors for invalid selectors
					 * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
					 *
					 * if (_.isError(elements)) {
	     *   elements = [];
	     * }
					 */
					var attempt = restParam(function (func, args) {
						try {
							return func.apply(undefined, args);
						} catch (e) {
							return isError(e) ? e : new Error(e);
						}
					});

					/**
					 * Creates a function that invokes `func` with the `this` binding of `thisArg`
					 * and arguments of the created function. If `func` is a property name the
					 * created callback returns the property value for a given element. If `func`
					 * is an object the created callback returns `true` for elements that contain
					 * the equivalent object properties, otherwise it returns `false`.
					 *
					 * @static
					 * @memberOf _
					 * @alias iteratee
					 * @category Utility
					 * @param {*} [func=_.identity] The value to convert to a callback.
					 * @param {*} [thisArg] The `this` binding of `func`.
					 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
					 * @returns {Function} Returns the callback.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney', 'age': 36 },
					 *   { 'user': 'fred',   'age': 40 }
					 * ];
					 *
					 * // wrap to create custom callback shorthands
					 * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
					 *
					 * _.filter(users, 'age__gt36');
					 * // => [{ 'user': 'fred', 'age': 40 }]
					 */
					function callback(func, thisArg, guard) {
						if (guard && isIterateeCall(func, thisArg, guard)) {
							thisArg = undefined;
						}
						return isObjectLike(func)
							? matches(func)
							: baseCallback(func, thisArg);
					}

					/**
					 * Creates a function that returns `value`.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {*} value The value to return from the new function.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var object = { 'user': 'fred' };
					 * var getter = _.constant(object);
					 *
					 * getter() === object;
					 * // => true
					 */
					function constant(value) {
						return function () {
							return value;
						};
					}

					/**
					 * This method returns the first argument provided to it.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {*} value Any value.
					 * @returns {*} Returns `value`.
					 * @example
					 *
					 * var object = { 'user': 'fred' };
					 *
					 * _.identity(object) === object;
					 * // => true
					 */
					function identity(value) {
						return value;
					}

					/**
					 * Creates a function that performs a deep comparison between a given object
					 * and `source`, returning `true` if the given object has equivalent property
					 * values, else `false`.
					 *
					 * **Note:** This method supports comparing arrays, booleans, `Date` objects,
					 * numbers, `Object` objects, regexes, and strings. Objects are compared by
					 * their own, not inherited, enumerable properties. For comparing a single
					 * own or inherited property value see `_.matchesProperty`.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {Object} source The object of property values to match.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney', 'age': 36, 'active': true },
					 *   { 'user': 'fred',   'age': 40, 'active': false }
					 * ];
					 *
					 * _.filter(users, _.matches({ 'age': 40, 'active': false }));
					 * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
					 */
					function matches(source) {
						return baseMatches(baseClone(source, true));
					}

					/**
					 * Creates a function that compares the property value of `path` on a given
					 * object to `value`.
					 *
					 * **Note:** This method supports comparing arrays, booleans, `Date` objects,
					 * numbers, `Object` objects, regexes, and strings. Objects are compared by
					 * their own, not inherited, enumerable properties.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {Array|string} path The path of the property to get.
					 * @param {*} srcValue The value to match.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var users = [
					 *   { 'user': 'barney' },
					 *   { 'user': 'fred' }
					 * ];
					 *
					 * _.find(users, _.matchesProperty('user', 'fred'));
					 * // => { 'user': 'fred' }
					 */
					function matchesProperty(path, srcValue) {
						return baseMatchesProperty(path, baseClone(srcValue, true));
					}

					/**
					 * Creates a function that invokes the method at `path` on a given object.
					 * Any additional arguments are provided to the invoked method.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {Array|string} path The path of the method to invoke.
					 * @param {...*} [args] The arguments to invoke the method with.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var objects = [
					 *   { 'a': { 'b': { 'c': _.constant(2) } } },
					 *   { 'a': { 'b': { 'c': _.constant(1) } } }
					 * ];
					 *
					 * _.map(objects, _.method('a.b.c'));
					 * // => [2, 1]
					 *
					 * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
					 * // => [1, 2]
					 */
					var method = restParam(function (path, args) {
						return function (object) {
							return invokePath(object, path, args);
						};
					});

					/**
					 * The opposite of `_.method`; this method creates a function that invokes
					 * the method at a given path on `object`. Any additional arguments are
					 * provided to the invoked method.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {Object} object The object to query.
					 * @param {...*} [args] The arguments to invoke the method with.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var array = _.times(3, _.constant),
					 *     object = { 'a': array, 'b': array, 'c': array };
					 *
					 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
					 * // => [2, 0]
					 *
					 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
					 * // => [2, 0]
					 */
					var methodOf = restParam(function (object, args) {
						return function (path) {
							return invokePath(object, path, args);
						};
					});

					/**
					 * Adds all own enumerable function properties of a source object to the
					 * destination object. If `object` is a function then methods are added to
					 * its prototype as well.
					 *
					 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
					 * avoid conflicts caused by modifying the original.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {Function|Object} [object=lodash] The destination object.
					 * @param {Object} source The object of functions to add.
					 * @param {Object} [options] The options object.
					 * @param {boolean} [options.chain=true] Specify whether the functions added
					 *  are chainable.
					 * @returns {Function|Object} Returns `object`.
					 * @example
					 *
					 * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
					 *
					 * _.mixin({ 'vowels': vowels });
					 * _.vowels('fred');
					 * // => ['e']
					 *
					 * _('fred').vowels().value();
					 * // => ['e']
					 *
					 * _.mixin({ 'vowels': vowels }, { 'chain': false });
					 * _('fred').vowels();
					 * // => ['e']
					 */
					function mixin(object, source, options) {
						if (options == null) {
							var isObj = isObject(source),
								props = isObj ? keys(source) : undefined,
								methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

							if (!(methodNames ? methodNames.length : isObj)) {
								methodNames = false;
								options = source;
								source = object;
								object = this;
							}
						}
						if (!methodNames) {
							methodNames = baseFunctions(source, keys(source));
						}
						var chain = true,
							index = -1,
							isFunc = isFunction(object),
							length = methodNames.length;

						if (options === false) {
							chain = false;
						} else if (isObject(options) && 'chain' in options) {
							chain = options.chain;
						}
						while (++index < length) {
							var methodName = methodNames[index],
								func = source[methodName];

							object[methodName] = func;
							if (isFunc) {
								object.prototype[methodName] = (function (func) {
									return function () {
										var chainAll = this.__chain__;
										if (chain || chainAll) {
											var result = object(this.__wrapped__),
												actions = result.__actions__ = arrayCopy(this.__actions__);

											actions.push({'func': func, 'args': arguments, 'thisArg': object});
											result.__chain__ = chainAll;
											return result;
										}
										return func.apply(object, arrayPush([this.value()], arguments));
									};
								}(func));
							}
						}
						return object;
					}

					/**
					 * Reverts the `_` variable to its previous value and returns a reference to
					 * the `lodash` function.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @returns {Function} Returns the `lodash` function.
					 * @example
					 *
					 * var lodash = _.noConflict();
					 */
					function noConflict() {
						root._ = oldDash;
						return this;
					}

					/**
					 * A no-operation function that returns `undefined` regardless of the
					 * arguments it receives.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @example
					 *
					 * var object = { 'user': 'fred' };
					 *
					 * _.noop(object) === undefined;
					 * // => true
					 */
					function noop() {
						// No operation performed.
					}

					/**
					 * Creates a function that returns the property value at `path` on a
					 * given object.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {Array|string} path The path of the property to get.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var objects = [
					 *   { 'a': { 'b': { 'c': 2 } } },
					 *   { 'a': { 'b': { 'c': 1 } } }
					 * ];
					 *
					 * _.map(objects, _.property('a.b.c'));
					 * // => [2, 1]
					 *
					 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
					 * // => [1, 2]
					 */
					function property(path) {
						return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
					}

					/**
					 * The opposite of `_.property`; this method creates a function that returns
					 * the property value at a given path on `object`.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {Object} object The object to query.
					 * @returns {Function} Returns the new function.
					 * @example
					 *
					 * var array = [0, 1, 2],
					 *     object = { 'a': array, 'b': array, 'c': array };
					 *
					 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
					 * // => [2, 0]
					 *
					 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
					 * // => [2, 0]
					 */
					function propertyOf(object) {
						return function (path) {
							return baseGet(object, toPath(path), path + '');
						};
					}

					/**
					 * Creates an array of numbers (positive and/or negative) progressing from
					 * `start` up to, but not including, `end`. If `end` is not specified it is
					 * set to `start` with `start` then set to `0`. If `end` is less than `start`
					 * a zero-length range is created unless a negative `step` is specified.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {number} [start=0] The start of the range.
					 * @param {number} end The end of the range.
					 * @param {number} [step=1] The value to increment or decrement by.
					 * @returns {Array} Returns the new array of numbers.
					 * @example
					 *
					 * _.range(4);
					 * // => [0, 1, 2, 3]
					 *
					 * _.range(1, 5);
					 * // => [1, 2, 3, 4]
					 *
					 * _.range(0, 20, 5);
					 * // => [0, 5, 10, 15]
					 *
					 * _.range(0, -4, -1);
					 * // => [0, -1, -2, -3]
					 *
					 * _.range(1, 4, 0);
					 * // => [1, 1, 1]
					 *
					 * _.range(0);
					 * // => []
					 */
					function range(start, end, step) {
						if (step && isIterateeCall(start, end, step)) {
							end = step = undefined;
						}
						start = +start || 0;
						step = step == null ? 1 : (+step || 0);

						if (end == null) {
							end = start;
							start = 0;
						} else {
							end = +end || 0;
						}
						// Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
						// See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
						var index = -1,
							length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
							result = Array(length);

						while (++index < length) {
							result[index] = start;
							start += step;
						}
						return result;
					}

					/**
					 * Invokes the iteratee function `n` times, returning an array of the results
					 * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
					 * one argument; (index).
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {number} n The number of times to invoke `iteratee`.
					 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {Array} Returns the array of results.
					 * @example
					 *
					 * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
					 * // => [3, 6, 4]
					 *
					 * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
					 * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
					 *
					 * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
					 * // => also invokes `mage.castSpell(n)` three times
					 */
					function times(n, iteratee, thisArg) {
						n = nativeFloor(n);

						// Exit early to avoid a JSC JIT bug in Safari 8
						// where `Array(0)` is treated as `Array(1)`.
						if (n < 1 || !nativeIsFinite(n)) {
							return [];
						}
						var index = -1,
							result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

						iteratee = bindCallback(iteratee, thisArg, 1);
						while (++index < n) {
							if (index < MAX_ARRAY_LENGTH) {
								result[index] = iteratee(index);
							} else {
								iteratee(index);
							}
						}
						return result;
					}

					/**
					 * Generates a unique ID. If `prefix` is provided the ID is appended to it.
					 *
					 * @static
					 * @memberOf _
					 * @category Utility
					 * @param {string} [prefix] The value to prefix the ID with.
					 * @returns {string} Returns the unique ID.
					 * @example
					 *
					 * _.uniqueId('contact_');
					 * // => 'contact_104'
					 *
					 * _.uniqueId();
					 * // => '105'
					 */
					function uniqueId(prefix) {
						var id = ++idCounter;
						return baseToString(prefix) + id;
					}

					/*------------------------------------------------------------------------*/

					/**
					 * Adds two numbers.
					 *
					 * @static
					 * @memberOf _
					 * @category Math
					 * @param {number} augend The first number to add.
					 * @param {number} addend The second number to add.
					 * @returns {number} Returns the sum.
					 * @example
					 *
					 * _.add(6, 4);
					 * // => 10
					 */
					function add(augend, addend) {
						return (+augend || 0) + (+addend || 0);
					}

					/**
					 * Calculates `n` rounded up to `precision`.
					 *
					 * @static
					 * @memberOf _
					 * @category Math
					 * @param {number} n The number to round up.
					 * @param {number} [precision=0] The precision to round up to.
					 * @returns {number} Returns the rounded up number.
					 * @example
					 *
					 * _.ceil(4.006);
					 * // => 5
					 *
					 * _.ceil(6.004, 2);
					 * // => 6.01
					 *
					 * _.ceil(6040, -2);
					 * // => 6100
					 */
					var ceil = createRound('ceil');

					/**
					 * Calculates `n` rounded down to `precision`.
					 *
					 * @static
					 * @memberOf _
					 * @category Math
					 * @param {number} n The number to round down.
					 * @param {number} [precision=0] The precision to round down to.
					 * @returns {number} Returns the rounded down number.
					 * @example
					 *
					 * _.floor(4.006);
					 * // => 4
					 *
					 * _.floor(0.046, 2);
					 * // => 0.04
					 *
					 * _.floor(4060, -2);
					 * // => 4000
					 */
					var floor = createRound('floor');

					/**
					 * Gets the maximum value of `collection`. If `collection` is empty or falsey
					 * `-Infinity` is returned. If an iteratee function is provided it is invoked
					 * for each value in `collection` to generate the criterion by which the value
					 * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
					 * arguments: (value, index, collection).
					 *
					 * If a property name is provided for `iteratee` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `iteratee` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Math
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {*} Returns the maximum value.
					 * @example
					 *
					 * _.max([4, 2, 8, 6]);
					 * // => 8
					 *
					 * _.max([]);
					 * // => -Infinity
					 *
					 * var users = [
					 *   { 'user': 'barney', 'age': 36 },
					 *   { 'user': 'fred',   'age': 40 }
					 * ];
					 *
					 * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
					 * // => { 'user': 'fred', 'age': 40 }
					 *
					 * // using the `_.property` callback shorthand
					 * _.max(users, 'age');
					 * // => { 'user': 'fred', 'age': 40 }
					 */
					var max = createExtremum(gt, NEGATIVE_INFINITY);

					/**
					 * Gets the minimum value of `collection`. If `collection` is empty or falsey
					 * `Infinity` is returned. If an iteratee function is provided it is invoked
					 * for each value in `collection` to generate the criterion by which the value
					 * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
					 * arguments: (value, index, collection).
					 *
					 * If a property name is provided for `iteratee` the created `_.property`
					 * style callback returns the property value of the given element.
					 *
					 * If a value is also provided for `thisArg` the created `_.matchesProperty`
					 * style callback returns `true` for elements that have a matching property
					 * value, else `false`.
					 *
					 * If an object is provided for `iteratee` the created `_.matches` style
					 * callback returns `true` for elements that have the properties of the given
					 * object, else `false`.
					 *
					 * @static
					 * @memberOf _
					 * @category Math
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {*} Returns the minimum value.
					 * @example
					 *
					 * _.min([4, 2, 8, 6]);
					 * // => 2
					 *
					 * _.min([]);
					 * // => Infinity
					 *
					 * var users = [
					 *   { 'user': 'barney', 'age': 36 },
					 *   { 'user': 'fred',   'age': 40 }
					 * ];
					 *
					 * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
					 * // => { 'user': 'barney', 'age': 36 }
					 *
					 * // using the `_.property` callback shorthand
					 * _.min(users, 'age');
					 * // => { 'user': 'barney', 'age': 36 }
					 */
					var min = createExtremum(lt, POSITIVE_INFINITY);

					/**
					 * Calculates `n` rounded to `precision`.
					 *
					 * @static
					 * @memberOf _
					 * @category Math
					 * @param {number} n The number to round.
					 * @param {number} [precision=0] The precision to round to.
					 * @returns {number} Returns the rounded number.
					 * @example
					 *
					 * _.round(4.006);
					 * // => 4
					 *
					 * _.round(4.006, 2);
					 * // => 4.01
					 *
					 * _.round(4060, -2);
					 * // => 4100
					 */
					var round = createRound('round');

					/**
					 * Gets the sum of the values in `collection`.
					 *
					 * @static
					 * @memberOf _
					 * @category Math
					 * @param {Array|Object|string} collection The collection to iterate over.
					 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
					 * @param {*} [thisArg] The `this` binding of `iteratee`.
					 * @returns {number} Returns the sum.
					 * @example
					 *
					 * _.sum([4, 6]);
					 * // => 10
					 *
					 * _.sum({ 'a': 4, 'b': 6 });
					 * // => 10
					 *
					 * var objects = [
					 *   { 'n': 4 },
					 *   { 'n': 6 }
					 * ];
					 *
					 * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
					 * // => 10
					 *
					 * // using the `_.property` callback shorthand
					 * _.sum(objects, 'n');
					 * // => 10
					 */
					function sum(collection, iteratee, thisArg) {
						if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
							iteratee = undefined;
						}
						iteratee = getCallback(iteratee, thisArg, 3);
						return iteratee.length == 1
							? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
							: baseSum(collection, iteratee);
					}

					/*------------------------------------------------------------------------*/

					// Ensure wrappers are instances of `baseLodash`.
					lodash.prototype = baseLodash.prototype;

					LodashWrapper.prototype = baseCreate(baseLodash.prototype);
					LodashWrapper.prototype.constructor = LodashWrapper;

					LazyWrapper.prototype = baseCreate(baseLodash.prototype);
					LazyWrapper.prototype.constructor = LazyWrapper;

					// Add functions to the `Map` cache.
					MapCache.prototype['delete'] = mapDelete;
					MapCache.prototype.get = mapGet;
					MapCache.prototype.has = mapHas;
					MapCache.prototype.set = mapSet;

					// Add functions to the `Set` cache.
					SetCache.prototype.push = cachePush;

					// Assign cache to `_.memoize`.
					memoize.Cache = MapCache;

					// Add functions that return wrapped values when chaining.
					lodash.after = after;
					lodash.ary = ary;
					lodash.assign = assign;
					lodash.at = at;
					lodash.before = before;
					lodash.bind = bind;
					lodash.bindAll = bindAll;
					lodash.bindKey = bindKey;
					lodash.callback = callback;
					lodash.chain = chain;
					lodash.chunk = chunk;
					lodash.compact = compact;
					lodash.constant = constant;
					lodash.countBy = countBy;
					lodash.create = create;
					lodash.curry = curry;
					lodash.curryRight = curryRight;
					lodash.debounce = debounce;
					lodash.defaults = defaults;
					lodash.defaultsDeep = defaultsDeep;
					lodash.defer = defer;
					lodash.delay = delay;
					lodash.difference = difference;
					lodash.drop = drop;
					lodash.dropRight = dropRight;
					lodash.dropRightWhile = dropRightWhile;
					lodash.dropWhile = dropWhile;
					lodash.fill = fill;
					lodash.filter = filter;
					lodash.flatten = flatten;
					lodash.flattenDeep = flattenDeep;
					lodash.flow = flow;
					lodash.flowRight = flowRight;
					lodash.forEach = forEach;
					lodash.forEachRight = forEachRight;
					lodash.forIn = forIn;
					lodash.forInRight = forInRight;
					lodash.forOwn = forOwn;
					lodash.forOwnRight = forOwnRight;
					lodash.functions = functions;
					lodash.groupBy = groupBy;
					lodash.indexBy = indexBy;
					lodash.initial = initial;
					lodash.intersection = intersection;
					lodash.invert = invert;
					lodash.invoke = invoke;
					lodash.keys = keys;
					lodash.keysIn = keysIn;
					lodash.map = map;
					lodash.mapKeys = mapKeys;
					lodash.mapValues = mapValues;
					lodash.matches = matches;
					lodash.matchesProperty = matchesProperty;
					lodash.memoize = memoize;
					lodash.merge = merge;
					lodash.method = method;
					lodash.methodOf = methodOf;
					lodash.mixin = mixin;
					lodash.modArgs = modArgs;
					lodash.negate = negate;
					lodash.omit = omit;
					lodash.once = once;
					lodash.pairs = pairs;
					lodash.partial = partial;
					lodash.partialRight = partialRight;
					lodash.partition = partition;
					lodash.pick = pick;
					lodash.pluck = pluck;
					lodash.property = property;
					lodash.propertyOf = propertyOf;
					lodash.pull = pull;
					lodash.pullAt = pullAt;
					lodash.range = range;
					lodash.rearg = rearg;
					lodash.reject = reject;
					lodash.remove = remove;
					lodash.rest = rest;
					lodash.restParam = restParam;
					lodash.set = set;
					lodash.shuffle = shuffle;
					lodash.slice = slice;
					lodash.sortBy = sortBy;
					lodash.sortByAll = sortByAll;
					lodash.sortByOrder = sortByOrder;
					lodash.spread = spread;
					lodash.take = take;
					lodash.takeRight = takeRight;
					lodash.takeRightWhile = takeRightWhile;
					lodash.takeWhile = takeWhile;
					lodash.tap = tap;
					lodash.throttle = throttle;
					lodash.thru = thru;
					lodash.times = times;
					lodash.toArray = toArray;
					lodash.toPlainObject = toPlainObject;
					lodash.transform = transform;
					lodash.union = union;
					lodash.uniq = uniq;
					lodash.unzip = unzip;
					lodash.unzipWith = unzipWith;
					lodash.values = values;
					lodash.valuesIn = valuesIn;
					lodash.where = where;
					lodash.without = without;
					lodash.wrap = wrap;
					lodash.xor = xor;
					lodash.zip = zip;
					lodash.zipObject = zipObject;
					lodash.zipWith = zipWith;

					// Add aliases.
					lodash.backflow = flowRight;
					lodash.collect = map;
					lodash.compose = flowRight;
					lodash.each = forEach;
					lodash.eachRight = forEachRight;
					lodash.extend = assign;
					lodash.iteratee = callback;
					lodash.methods = functions;
					lodash.object = zipObject;
					lodash.select = filter;
					lodash.tail = rest;
					lodash.unique = uniq;

					// Add functions to `lodash.prototype`.
					mixin(lodash, lodash);

					/*------------------------------------------------------------------------*/

					// Add functions that return unwrapped values when chaining.
					lodash.add = add;
					lodash.attempt = attempt;
					lodash.camelCase = camelCase;
					lodash.capitalize = capitalize;
					lodash.ceil = ceil;
					lodash.clone = clone;
					lodash.cloneDeep = cloneDeep;
					lodash.deburr = deburr;
					lodash.endsWith = endsWith;
					lodash.escape = escape;
					lodash.escapeRegExp = escapeRegExp;
					lodash.every = every;
					lodash.find = find;
					lodash.findIndex = findIndex;
					lodash.findKey = findKey;
					lodash.findLast = findLast;
					lodash.findLastIndex = findLastIndex;
					lodash.findLastKey = findLastKey;
					lodash.findWhere = findWhere;
					lodash.first = first;
					lodash.floor = floor;
					lodash.get = get;
					lodash.gt = gt;
					lodash.gte = gte;
					lodash.has = has;
					lodash.identity = identity;
					lodash.includes = includes;
					lodash.indexOf = indexOf;
					lodash.inRange = inRange;
					lodash.isArguments = isArguments;
					lodash.isArray = isArray;
					lodash.isBoolean = isBoolean;
					lodash.isDate = isDate;
					lodash.isElement = isElement;
					lodash.isEmpty = isEmpty;
					lodash.isEqual = isEqual;
					lodash.isError = isError;
					lodash.isFinite = isFinite;
					lodash.isFunction = isFunction;
					lodash.isMatch = isMatch;
					lodash.isNaN = isNaN;
					lodash.isNative = isNative;
					lodash.isNull = isNull;
					lodash.isNumber = isNumber;
					lodash.isObject = isObject;
					lodash.isPlainObject = isPlainObject;
					lodash.isRegExp = isRegExp;
					lodash.isString = isString;
					lodash.isTypedArray = isTypedArray;
					lodash.isUndefined = isUndefined;
					lodash.kebabCase = kebabCase;
					lodash.last = last;
					lodash.lastIndexOf = lastIndexOf;
					lodash.lt = lt;
					lodash.lte = lte;
					lodash.max = max;
					lodash.min = min;
					lodash.noConflict = noConflict;
					lodash.noop = noop;
					lodash.now = now;
					lodash.pad = pad;
					lodash.padLeft = padLeft;
					lodash.padRight = padRight;
					lodash.parseInt = parseInt;
					lodash.random = random;
					lodash.reduce = reduce;
					lodash.reduceRight = reduceRight;
					lodash.repeat = repeat;
					lodash.result = result;
					lodash.round = round;
					lodash.runInContext = runInContext;
					lodash.size = size;
					lodash.snakeCase = snakeCase;
					lodash.some = some;
					lodash.sortedIndex = sortedIndex;
					lodash.sortedLastIndex = sortedLastIndex;
					lodash.startCase = startCase;
					lodash.startsWith = startsWith;
					lodash.sum = sum;
					lodash.template = template;
					lodash.trim = trim;
					lodash.trimLeft = trimLeft;
					lodash.trimRight = trimRight;
					lodash.trunc = trunc;
					lodash.unescape = unescape;
					lodash.uniqueId = uniqueId;
					lodash.words = words;

					// Add aliases.
					lodash.all = every;
					lodash.any = some;
					lodash.contains = includes;
					lodash.eq = isEqual;
					lodash.detect = find;
					lodash.foldl = reduce;
					lodash.foldr = reduceRight;
					lodash.head = first;
					lodash.include = includes;
					lodash.inject = reduce;

					mixin(lodash, (function () {
						var source = {};
						baseForOwn(lodash, function (func, methodName) {
							if (!lodash.prototype[methodName]) {
								source[methodName] = func;
							}
						});
						return source;
					}()), false);

					/*------------------------------------------------------------------------*/

					// Add functions capable of returning wrapped and unwrapped values when chaining.
					lodash.sample = sample;

					lodash.prototype.sample = function (n) {
						if (!this.__chain__ && n == null) {
							return sample(this.value());
						}
						return this.thru(function (value) {
							return sample(value, n);
						});
					};

					/*------------------------------------------------------------------------*/

					/**
					 * The semantic version number.
					 *
					 * @static
					 * @memberOf _
					 * @type string
					 */
					lodash.VERSION = VERSION;

					// Assign default placeholders.
					arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
						lodash[methodName].placeholder = lodash;
					});

					// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
					arrayEach(['drop', 'take'], function (methodName, index) {
						LazyWrapper.prototype[methodName] = function (n) {
							var filtered = this.__filtered__;
							if (filtered && !index) {
								return new LazyWrapper(this);
							}
							n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

							var result = this.clone();
							if (filtered) {
								result.__takeCount__ = nativeMin(result.__takeCount__, n);
							} else {
								result.__views__.push({
									'size': n,
									'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
								});
							}
							return result;
						};

						LazyWrapper.prototype[methodName + 'Right'] = function (n) {
							return this.reverse()[methodName](n).reverse();
						};
					});

					// Add `LazyWrapper` methods that accept an `iteratee` value.
					arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
						var type = index + 1,
							isFilter = type != LAZY_MAP_FLAG;

						LazyWrapper.prototype[methodName] = function (iteratee, thisArg) {
							var result = this.clone();
							result.__iteratees__.push({'iteratee': getCallback(iteratee, thisArg, 1), 'type': type});
							result.__filtered__ = result.__filtered__ || isFilter;
							return result;
						};
					});

					// Add `LazyWrapper` methods for `_.first` and `_.last`.
					arrayEach(['first', 'last'], function (methodName, index) {
						var takeName = 'take' + (index ? 'Right' : '');

						LazyWrapper.prototype[methodName] = function () {
							return this[takeName](1).value()[0];
						};
					});

					// Add `LazyWrapper` methods for `_.initial` and `_.rest`.
					arrayEach(['initial', 'rest'], function (methodName, index) {
						var dropName = 'drop' + (index ? '' : 'Right');

						LazyWrapper.prototype[methodName] = function () {
							return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
						};
					});

					// Add `LazyWrapper` methods for `_.pluck` and `_.where`.
					arrayEach(['pluck', 'where'], function (methodName, index) {
						var operationName = index ? 'filter' : 'map',
							createCallback = index ? baseMatches : property;

						LazyWrapper.prototype[methodName] = function (value) {
							return this[operationName](createCallback(value));
						};
					});

					LazyWrapper.prototype.compact = function () {
						return this.filter(identity);
					};

					LazyWrapper.prototype.reject = function (predicate, thisArg) {
						predicate = getCallback(predicate, thisArg, 1);
						return this.filter(function (value) {
							return !predicate(value);
						});
					};

					LazyWrapper.prototype.slice = function (start, end) {
						start = start == null ? 0 : (+start || 0);

						var result = this;
						if (result.__filtered__ && (start > 0 || end < 0)) {
							return new LazyWrapper(result);
						}
						if (start < 0) {
							result = result.takeRight(-start);
						} else if (start) {
							result = result.drop(start);
						}
						if (end !== undefined) {
							end = (+end || 0);
							result = end < 0 ? result.dropRight(-end) : result.take(end - start);
						}
						return result;
					};

					LazyWrapper.prototype.takeRightWhile = function (predicate, thisArg) {
						return this.reverse().takeWhile(predicate, thisArg).reverse();
					};

					LazyWrapper.prototype.toArray = function () {
						return this.take(POSITIVE_INFINITY);
					};

					// Add `LazyWrapper` methods to `lodash.prototype`.
					baseForOwn(LazyWrapper.prototype, function (func, methodName) {
						var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
							retUnwrapped = /^(?:first|last)$/.test(methodName),
							lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

						if (!lodashFunc) {
							return;
						}
						lodash.prototype[methodName] = function () {
							var args = retUnwrapped ? [1] : arguments,
								chainAll = this.__chain__,
								value = this.__wrapped__,
								isHybrid = !!this.__actions__.length,
								isLazy = value instanceof LazyWrapper,
								iteratee = args[0],
								useLazy = isLazy || isArray(value);

							if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
								// Avoid lazy use if the iteratee has a "length" value other than `1`.
								isLazy = useLazy = false;
							}
							var interceptor = function (value) {
								return (retUnwrapped && chainAll)
									? lodashFunc(value, 1)[0]
									: lodashFunc.apply(undefined, arrayPush([value], args));
							};

							var action = {'func': thru, 'args': [interceptor], 'thisArg': undefined},
								onlyLazy = isLazy && !isHybrid;

							if (retUnwrapped && !chainAll) {
								if (onlyLazy) {
									value = value.clone();
									value.__actions__.push(action);
									return func.call(value);
								}
								return lodashFunc.call(undefined, this.value())[0];
							}
							if (!retUnwrapped && useLazy) {
								value = onlyLazy ? value : new LazyWrapper(this);
								var result = func.apply(value, args);
								result.__actions__.push(action);
								return new LodashWrapper(result, chainAll);
							}
							return this.thru(interceptor);
						};
					});

					// Add `Array` and `String` methods to `lodash.prototype`.
					arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function (methodName) {
						var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
							chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
							retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

						lodash.prototype[methodName] = function () {
							var args = arguments;
							if (retUnwrapped && !this.__chain__) {
								return func.apply(this.value(), args);
							}
							return this[chainName](function (value) {
								return func.apply(value, args);
							});
						};
					});

					// Map minified function names to their real names.
					baseForOwn(LazyWrapper.prototype, function (func, methodName) {
						var lodashFunc = lodash[methodName];
						if (lodashFunc) {
							var key = lodashFunc.name,
								names = realNames[key] || (realNames[key] = []);

							names.push({'name': methodName, 'func': lodashFunc});
						}
					});

					realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
						'name': 'wrapper',
						'func': undefined
					}];

					// Add functions to the lazy wrapper.
					LazyWrapper.prototype.clone = lazyClone;
					LazyWrapper.prototype.reverse = lazyReverse;
					LazyWrapper.prototype.value = lazyValue;

					// Add chaining functions to the `lodash` wrapper.
					lodash.prototype.chain = wrapperChain;
					lodash.prototype.commit = wrapperCommit;
					lodash.prototype.concat = wrapperConcat;
					lodash.prototype.plant = wrapperPlant;
					lodash.prototype.reverse = wrapperReverse;
					lodash.prototype.toString = wrapperToString;
					lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

					// Add function aliases to the `lodash` wrapper.
					lodash.prototype.collect = lodash.prototype.map;
					lodash.prototype.head = lodash.prototype.first;
					lodash.prototype.select = lodash.prototype.filter;
					lodash.prototype.tail = lodash.prototype.rest;

					return lodash;
				}

				/*--------------------------------------------------------------------------*/

				// Export lodash.
				var _ = runInContext();

				// Some AMD build optimizers like r.js check for condition patterns like the following:
				if (true) {
					// Expose lodash to the global object when an AMD loader is present to avoid
					// errors in cases where lodash is loaded by a script tag and not intended
					// as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
					// more details.
					root._ = _;

					// Define as an anonymous module so, through path mapping, it can be
					// referenced as the "underscore" module.
					!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
						return _;
					}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
				}
				// Check for `exports` after `define` in case a build optimizer adds an `exports` object.
				else if (freeExports && freeModule) {
					// Export for Node.js or RingoJS.
					if (moduleExports) {
						(freeModule.exports = _)._ = _;
					}
					// Export for Rhino with CommonJS support.
					else {
						freeExports._ = _;
					}
				}
				else {
					// Export for a browser or Rhino.
					root._ = _;
				}
			}.call(this));

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(241)(module), (function () {
				return this;
			}()), __webpack_require__(240)))

		/***/
	},
	/* 241 */
	/***/ function (module, exports) {

		module.exports = function (module) {
			if (!module.webpackPolyfill) {
				module.deprecate = function () {
				};
				module.paths = [];
				// module.parent = undefined by default
				module.children = [];
				module.webpackPolyfill = 1;
			}
			return module;
		}


		/***/
	},
	/* 242 */
	/***/ function (module, exports, __webpack_require__) {

		__webpack_require__(243);
		module.exports = angular;


		/***/
	},
	/* 243 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (__webpack_provided_window_dot_jQuery) {
			/**
			 * @license AngularJS v1.4.3
			 * (c) 2010-2015 Google, Inc. http://angularjs.org
			 * License: MIT
			 */
			(function (window, document, undefined) {
				'use strict';

				/**
				 * @description
				 *
				 * This object provides a utility for producing rich Error messages within
				 * Angular. It can be called as follows:
				 *
				 * var exampleMinErr = minErr('example');
				 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
				 *
				 * The above creates an instance of minErr in the example namespace. The
				 * resulting error will have a namespaced error code of example.one.  The
				 * resulting error will replace {0} with the value of foo, and {1} with the
				 * value of bar. The object is not restricted in the number of arguments it can
				 * take.
				 *
				 * If fewer arguments are specified than necessary for interpolation, the extra
				 * interpolation markers will be preserved in the final string.
				 *
				 * Since data will be parsed statically during a build step, some restrictions
				 * are applied with respect to how minErr instances are created and called.
				 * Instances should have names of the form namespaceMinErr for a minErr created
				 * using minErr('namespace') . Error codes, namespaces and template strings
				 * should all be static strings, not variables or general expressions.
				 *
				 * @param {string} module The namespace to use for the new minErr instance.
				 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
				 *   error from returned function, for cases when a particular type of error is useful.
				 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
				 */

				function minErr(module, ErrorConstructor) {
					ErrorConstructor = ErrorConstructor || Error;
					return function () {
						var SKIP_INDEXES = 2;

						var templateArgs = arguments,
							code = templateArgs[0],
							message = '[' + (module ? module + ':' : '') + code + '] ',
							template = templateArgs[1],
							paramPrefix, i;

						message += template.replace(/\{\d+\}/g, function (match) {
							var index = +match.slice(1, -1),
								shiftedIndex = index + SKIP_INDEXES;

							if (shiftedIndex < templateArgs.length) {
								return toDebugString(templateArgs[shiftedIndex]);
							}

							return match;
						});

						message += '\nhttp://errors.angularjs.org/1.4.3/' +
							(module ? module + '/' : '') + code;

						for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
							message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
								encodeURIComponent(toDebugString(templateArgs[i]));
						}

						return new ErrorConstructor(message);
					};
				}

				/* We need to tell jshint what variables are being exported */
				/* global angular: true,
				 msie: true,
				 jqLite: true,
				 jQuery: true,
				 slice: true,
				 splice: true,
				 push: true,
				 toString: true,
				 ngMinErr: true,
				 angularModule: true,
				 uid: true,
				 REGEX_STRING_REGEXP: true,
				 VALIDITY_STATE_PROPERTY: true,

				 lowercase: true,
				 uppercase: true,
				 manualLowercase: true,
				 manualUppercase: true,
				 nodeName_: true,
				 isArrayLike: true,
				 forEach: true,
				 forEachSorted: true,
				 reverseParams: true,
				 nextUid: true,
				 setHashKey: true,
				 extend: true,
				 toInt: true,
				 inherit: true,
				 merge: true,
				 noop: true,
				 identity: true,
				 valueFn: true,
				 isUndefined: true,
				 isDefined: true,
				 isObject: true,
				 isBlankObject: true,
				 isString: true,
				 isNumber: true,
				 isDate: true,
				 isArray: true,
				 isFunction: true,
				 isRegExp: true,
				 isWindow: true,
				 isScope: true,
				 isFile: true,
				 isFormData: true,
				 isBlob: true,
				 isBoolean: true,
				 isPromiseLike: true,
				 trim: true,
				 escapeForRegexp: true,
				 isElement: true,
				 makeMap: true,
				 includes: true,
				 arrayRemove: true,
				 copy: true,
				 shallowCopy: true,
				 equals: true,
				 csp: true,
				 jq: true,
				 concat: true,
				 sliceArgs: true,
				 bind: true,
				 toJsonReplacer: true,
				 toJson: true,
				 fromJson: true,
				 convertTimezoneToLocal: true,
				 timezoneToOffset: true,
				 startingTag: true,
				 tryDecodeURIComponent: true,
				 parseKeyValue: true,
				 toKeyValue: true,
				 encodeUriSegment: true,
				 encodeUriQuery: true,
				 angularInit: true,
				 bootstrap: true,
				 getTestability: true,
				 snake_case: true,
				 bindJQuery: true,
				 assertArg: true,
				 assertArgFn: true,
				 assertNotHasOwnProperty: true,
				 getter: true,
				 getBlockNodes: true,
				 hasOwnProperty: true,
				 createMap: true,

				 NODE_TYPE_ELEMENT: true,
				 NODE_TYPE_ATTRIBUTE: true,
				 NODE_TYPE_TEXT: true,
				 NODE_TYPE_COMMENT: true,
				 NODE_TYPE_DOCUMENT: true,
				 NODE_TYPE_DOCUMENT_FRAGMENT: true,
				 */

				////////////////////////////////////

				/**
				 * @ngdoc module
				 * @name ng
				 * @module ng
				 * @description
				 *
				 * # ng (core module)
				 * The ng module is loaded by default when an AngularJS application is started. The module itself
				 * contains the essential components for an AngularJS application to function. The table below
				 * lists a high level breakdown of each of the services/factories, filters, directives and testing
				 * components available within this core module.
				 *
				 * <div doc-module-components="ng"></div>
				 */

				var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

				// The name of a form control's ValidityState property.
				// This is used so that it's possible for internal tests to create mock ValidityStates.
				var VALIDITY_STATE_PROPERTY = 'validity';

				/**
				 * @ngdoc function
				 * @name angular.lowercase
				 * @module ng
				 * @kind function
				 *
				 * @description Converts the specified string to lowercase.
				 * @param {string} string String to be converted to lowercase.
				 * @returns {string} Lowercased string.
				 */
				var lowercase = function (string) {
					return isString(string) ? string.toLowerCase() : string;
				};
				var hasOwnProperty = Object.prototype.hasOwnProperty;

				/**
				 * @ngdoc function
				 * @name angular.uppercase
				 * @module ng
				 * @kind function
				 *
				 * @description Converts the specified string to uppercase.
				 * @param {string} string String to be converted to uppercase.
				 * @returns {string} Uppercased string.
				 */
				var uppercase = function (string) {
					return isString(string) ? string.toUpperCase() : string;
				};


				var manualLowercase = function (s) {
					/* jshint bitwise: false */
					return isString(s)
						? s.replace(/[A-Z]/g, function (ch) {
						return String.fromCharCode(ch.charCodeAt(0) | 32);
					})
						: s;
				};
				var manualUppercase = function (s) {
					/* jshint bitwise: false */
					return isString(s)
						? s.replace(/[a-z]/g, function (ch) {
						return String.fromCharCode(ch.charCodeAt(0) & ~32);
					})
						: s;
				};


				// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
				// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
				// with correct but slower alternatives.
				if ('i' !== 'I'.toLowerCase()) {
					lowercase = manualLowercase;
					uppercase = manualUppercase;
				}


				var
					msie,             // holds major version number for IE, or NaN if UA is not IE.
					jqLite,           // delay binding since jQuery could be loaded after us.
					jQuery,           // delay binding
					slice = [].slice,
					splice = [].splice,
					push = [].push,
					toString = Object.prototype.toString,
					getPrototypeOf = Object.getPrototypeOf,
					ngMinErr = minErr('ng'),

					/** @name angular */
					angular = window.angular || (window.angular = {}),
					angularModule,
					uid = 0;

				/**
				 * documentMode is an IE-only property
				 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
				 */
				msie = document.documentMode;


				/**
				 * @private
				 * @param {*} obj
				 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
				 *                   String ...)
				 */
				function isArrayLike(obj) {
					if (obj == null || isWindow(obj)) {
						return false;
					}

					// Support: iOS 8.2 (not reproducible in simulator)
					// "length" in obj used to prevent JIT error (gh-11508)
					var length = "length" in Object(obj) && obj.length;

					if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
						return true;
					}

					return isString(obj) || isArray(obj) || length === 0 ||
						typeof length === 'number' && length > 0 && (length - 1) in obj;
				}

				/**
				 * @ngdoc function
				 * @name angular.forEach
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
				 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
				 * is the value of an object property or an array element, `key` is the object property key or
				 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
				 *
				 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
				 * using the `hasOwnProperty` method.
				 *
				 * Unlike ES262's
				 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
				 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
				 * return the value provided.
				 *
				 ```js
				 var values = {name: 'misko', gender: 'male'};
				 var log = [];
				 angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
				 expect(log).toEqual(['name: misko', 'gender: male']);
				 ```
				 *
				 * @param {Object|Array} obj Object to iterate over.
				 * @param {Function} iterator Iterator function.
				 * @param {Object=} context Object to become context (`this`) for the iterator function.
				 * @returns {Object|Array} Reference to `obj`.
				 */

				function forEach(obj, iterator, context) {
					var key, length;
					if (obj) {
						if (isFunction(obj)) {
							for (key in obj) {
								// Need to check if hasOwnProperty exists,
								// as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
								if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
									iterator.call(context, obj[key], key, obj);
								}
							}
						} else if (isArray(obj) || isArrayLike(obj)) {
							var isPrimitive = typeof obj !== 'object';
							for (key = 0, length = obj.length; key < length; key++) {
								if (isPrimitive || key in obj) {
									iterator.call(context, obj[key], key, obj);
								}
							}
						} else if (obj.forEach && obj.forEach !== forEach) {
							obj.forEach(iterator, context, obj);
						} else if (isBlankObject(obj)) {
							// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
							for (key in obj) {
								iterator.call(context, obj[key], key, obj);
							}
						} else if (typeof obj.hasOwnProperty === 'function') {
							// Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
							for (key in obj) {
								if (obj.hasOwnProperty(key)) {
									iterator.call(context, obj[key], key, obj);
								}
							}
						} else {
							// Slow path for objects which do not have a method `hasOwnProperty`
							for (key in obj) {
								if (hasOwnProperty.call(obj, key)) {
									iterator.call(context, obj[key], key, obj);
								}
							}
						}
					}
					return obj;
				}

				function forEachSorted(obj, iterator, context) {
					var keys = Object.keys(obj).sort();
					for (var i = 0; i < keys.length; i++) {
						iterator.call(context, obj[keys[i]], keys[i]);
					}
					return keys;
				}


				/**
				 * when using forEach the params are value, key, but it is often useful to have key, value.
				 * @param {function(string, *)} iteratorFn
				 * @returns {function(*, string)}
				 */
				function reverseParams(iteratorFn) {
					return function (value, key) {
						iteratorFn(key, value);
					};
				}

				/**
				 * A consistent way of creating unique IDs in angular.
				 *
				 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
				 * we hit number precision issues in JavaScript.
				 *
				 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
				 *
				 * @returns {number} an unique alpha-numeric string
				 */
				function nextUid() {
					return ++uid;
				}


				/**
				 * Set or clear the hashkey for an object.
				 * @param obj object
				 * @param h the hashkey (!truthy to delete the hashkey)
				 */
				function setHashKey(obj, h) {
					if (h) {
						obj.$$hashKey = h;
					} else {
						delete obj.$$hashKey;
					}
				}


				function baseExtend(dst, objs, deep) {
					var h = dst.$$hashKey;

					for (var i = 0, ii = objs.length; i < ii; ++i) {
						var obj = objs[i];
						if (!isObject(obj) && !isFunction(obj)) continue;
						var keys = Object.keys(obj);
						for (var j = 0, jj = keys.length; j < jj; j++) {
							var key = keys[j];
							var src = obj[key];

							if (deep && isObject(src)) {
								if (isDate(src)) {
									dst[key] = new Date(src.valueOf());
								} else {
									if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
									baseExtend(dst[key], [src], true);
								}
							} else {
								dst[key] = src;
							}
						}
					}

					setHashKey(dst, h);
					return dst;
				}

				/**
				 * @ngdoc function
				 * @name angular.extend
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
				 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
				 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
				 *
				 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
				 * {@link angular.merge} for this.
				 *
				 * @param {Object} dst Destination object.
				 * @param {...Object} src Source object(s).
				 * @returns {Object} Reference to `dst`.
				 */
				function extend(dst) {
					return baseExtend(dst, slice.call(arguments, 1), false);
				}


				/**
				 * @ngdoc function
				 * @name angular.merge
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
				 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
				 * by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
				 *
				 * Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
				 * objects, performing a deep copy.
				 *
				 * @param {Object} dst Destination object.
				 * @param {...Object} src Source object(s).
				 * @returns {Object} Reference to `dst`.
				 */
				function merge(dst) {
					return baseExtend(dst, slice.call(arguments, 1), true);
				}


				function toInt(str) {
					return parseInt(str, 10);
				}


				function inherit(parent, extra) {
					return extend(Object.create(parent), extra);
				}

				/**
				 * @ngdoc function
				 * @name angular.noop
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * A function that performs no operations. This function can be useful when writing code in the
				 * functional style.
				 ```js
				 function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
				 ```
				 */
				function noop() {
				}

				noop.$inject = [];


				/**
				 * @ngdoc function
				 * @name angular.identity
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * A function that returns its first argument. This function is useful when writing code in the
				 * functional style.
				 *
				 ```js
				 function transformer(transformationFn, value) {
	       return (transformationFn || angular.identity)(value);
	     };
				 ```
				 * @param {*} value to be returned.
				 * @returns {*} the value passed in.
				 */
				function identity($) {
					return $;
				}

				identity.$inject = [];


				function valueFn(value) {
					return function () {
						return value;
					};
				}

				function hasCustomToString(obj) {
					return isFunction(obj.toString) && obj.toString !== Object.prototype.toString;
				}


				/**
				 * @ngdoc function
				 * @name angular.isUndefined
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Determines if a reference is undefined.
				 *
				 * @param {*} value Reference to check.
				 * @returns {boolean} True if `value` is undefined.
				 */
				function isUndefined(value) {
					return typeof value === 'undefined';
				}


				/**
				 * @ngdoc function
				 * @name angular.isDefined
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Determines if a reference is defined.
				 *
				 * @param {*} value Reference to check.
				 * @returns {boolean} True if `value` is defined.
				 */
				function isDefined(value) {
					return typeof value !== 'undefined';
				}


				/**
				 * @ngdoc function
				 * @name angular.isObject
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
				 * considered to be objects. Note that JavaScript arrays are objects.
				 *
				 * @param {*} value Reference to check.
				 * @returns {boolean} True if `value` is an `Object` but not `null`.
				 */
				function isObject(value) {
					// http://jsperf.com/isobject4
					return value !== null && typeof value === 'object';
				}


				/**
				 * Determine if a value is an object with a null prototype
				 *
				 * @returns {boolean} True if `value` is an `Object` with a null prototype
				 */
				function isBlankObject(value) {
					return value !== null && typeof value === 'object' && !getPrototypeOf(value);
				}


				/**
				 * @ngdoc function
				 * @name angular.isString
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Determines if a reference is a `String`.
				 *
				 * @param {*} value Reference to check.
				 * @returns {boolean} True if `value` is a `String`.
				 */
				function isString(value) {
					return typeof value === 'string';
				}


				/**
				 * @ngdoc function
				 * @name angular.isNumber
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Determines if a reference is a `Number`.
				 *
				 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
				 *
				 * If you wish to exclude these then you can use the native
				 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
				 * method.
				 *
				 * @param {*} value Reference to check.
				 * @returns {boolean} True if `value` is a `Number`.
				 */
				function isNumber(value) {
					return typeof value === 'number';
				}


				/**
				 * @ngdoc function
				 * @name angular.isDate
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Determines if a value is a date.
				 *
				 * @param {*} value Reference to check.
				 * @returns {boolean} True if `value` is a `Date`.
				 */
				function isDate(value) {
					return toString.call(value) === '[object Date]';
				}


				/**
				 * @ngdoc function
				 * @name angular.isArray
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Determines if a reference is an `Array`.
				 *
				 * @param {*} value Reference to check.
				 * @returns {boolean} True if `value` is an `Array`.
				 */
				var isArray = Array.isArray;

				/**
				 * @ngdoc function
				 * @name angular.isFunction
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Determines if a reference is a `Function`.
				 *
				 * @param {*} value Reference to check.
				 * @returns {boolean} True if `value` is a `Function`.
				 */
				function isFunction(value) {
					return typeof value === 'function';
				}


				/**
				 * Determines if a value is a regular expression object.
				 *
				 * @private
				 * @param {*} value Reference to check.
				 * @returns {boolean} True if `value` is a `RegExp`.
				 */
				function isRegExp(value) {
					return toString.call(value) === '[object RegExp]';
				}


				/**
				 * Checks if `obj` is a window object.
				 *
				 * @private
				 * @param {*} obj Object to check
				 * @returns {boolean} True if `obj` is a window obj.
				 */
				function isWindow(obj) {
					return obj && obj.window === obj;
				}


				function isScope(obj) {
					return obj && obj.$evalAsync && obj.$watch;
				}


				function isFile(obj) {
					return toString.call(obj) === '[object File]';
				}


				function isFormData(obj) {
					return toString.call(obj) === '[object FormData]';
				}


				function isBlob(obj) {
					return toString.call(obj) === '[object Blob]';
				}


				function isBoolean(value) {
					return typeof value === 'boolean';
				}


				function isPromiseLike(obj) {
					return obj && isFunction(obj.then);
				}


				var TYPED_ARRAY_REGEXP = /^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/;

				function isTypedArray(value) {
					return TYPED_ARRAY_REGEXP.test(toString.call(value));
				}


				var trim = function (value) {
					return isString(value) ? value.trim() : value;
				};

				// Copied from:
				// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
				// Prereq: s is a string.
				var escapeForRegexp = function (s) {
					return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
						replace(/\x08/g, '\\x08');
				};


				/**
				 * @ngdoc function
				 * @name angular.isElement
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Determines if a reference is a DOM element (or wrapped jQuery element).
				 *
				 * @param {*} value Reference to check.
				 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
				 */
				function isElement(node) {
					return !!(node &&
					(node.nodeName  // we are a direct element
					|| (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
				}

				/**
				 * @param str 'key1,key2,...'
				 * @returns {object} in the form of {key1:true, key2:true, ...}
				 */
				function makeMap(str) {
					var obj = {}, items = str.split(","), i;
					for (i = 0; i < items.length; i++) {
						obj[items[i]] = true;
					}
					return obj;
				}


				function nodeName_(element) {
					return lowercase(element.nodeName || (element[0] && element[0].nodeName));
				}

				function includes(array, obj) {
					return Array.prototype.indexOf.call(array, obj) != -1;
				}

				function arrayRemove(array, value) {
					var index = array.indexOf(value);
					if (index >= 0) {
						array.splice(index, 1);
					}
					return index;
				}

				/**
				 * @ngdoc function
				 * @name angular.copy
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Creates a deep copy of `source`, which should be an object or an array.
				 *
				 * * If no destination is supplied, a copy of the object or array is created.
				 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
				 *   are deleted and then all elements/properties from the source are copied to it.
				 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
				 * * If `source` is identical to 'destination' an exception will be thrown.
				 *
				 * @param {*} source The source that will be used to make a copy.
				 *                   Can be any type, including primitives, `null`, and `undefined`.
				 * @param {(Object|Array)=} destination Destination into which the source is copied. If
				 *     provided, must be of the same type as `source`.
				 * @returns {*} The copy or updated `destination`, if `destination` was specified.
				 *
				 * @example
				 <example module="copyExample">
				 <file name="index.html">
				 <div ng-controller="ExampleController">
				 <form novalidate class="simple-form">
				 Name: <input type="text" ng-model="user.name" /><br />
				 E-mail: <input type="email" ng-model="user.email" /><br />
				 Gender: <input type="radio" ng-model="user.gender" value="male" />male
				 <input type="radio" ng-model="user.gender" value="female" />female<br />
				 <button ng-click="reset()">RESET</button>
				 <button ng-click="update(user)">SAVE</button>
				 </form>
				 <pre>form = {{user | json}}</pre>
				 <pre>master = {{master | json}}</pre>
				 </div>

				 <script>
				 angular.module('copyExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	      $scope.master= {};
	
	      $scope.update = function(user) {
	        // Example with 1 argument
	        $scope.master= angular.copy(user);
	      };
	
	      $scope.reset = function() {
	        // Example with 2 arguments
	        angular.copy($scope.master, $scope.user);
	      };
	
	      $scope.reset();
	    }]);
				 </script>
				 </file>
				 </example>
				 */
				function copy(source, destination, stackSource, stackDest) {
					if (isWindow(source) || isScope(source)) {
						throw ngMinErr('cpws',
							"Can't copy! Making copies of Window or Scope instances is not supported.");
					}
					if (isTypedArray(destination)) {
						throw ngMinErr('cpta',
							"Can't copy! TypedArray destination cannot be mutated.");
					}

					if (!destination) {
						destination = source;
						if (isObject(source)) {
							var index;
							if (stackSource && (index = stackSource.indexOf(source)) !== -1) {
								return stackDest[index];
							}

							// TypedArray, Date and RegExp have specific copy functionality and must be
							// pushed onto the stack before returning.
							// Array and other objects create the base object and recurse to copy child
							// objects. The array/object will be pushed onto the stack when recursed.
							if (isArray(source)) {
								return copy(source, [], stackSource, stackDest);
							} else if (isTypedArray(source)) {
								destination = new source.constructor(source);
							} else if (isDate(source)) {
								destination = new Date(source.getTime());
							} else if (isRegExp(source)) {
								destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
								destination.lastIndex = source.lastIndex;
							} else {
								var emptyObject = Object.create(getPrototypeOf(source));
								return copy(source, emptyObject, stackSource, stackDest);
							}

							if (stackDest) {
								stackSource.push(source);
								stackDest.push(destination);
							}
						}
					} else {
						if (source === destination) throw ngMinErr('cpi',
							"Can't copy! Source and destination are identical.");

						stackSource = stackSource || [];
						stackDest = stackDest || [];

						if (isObject(source)) {
							stackSource.push(source);
							stackDest.push(destination);
						}

						var result, key;
						if (isArray(source)) {
							destination.length = 0;
							for (var i = 0; i < source.length; i++) {
								destination.push(copy(source[i], null, stackSource, stackDest));
							}
						} else {
							var h = destination.$$hashKey;
							if (isArray(destination)) {
								destination.length = 0;
							} else {
								forEach(destination, function (value, key) {
									delete destination[key];
								});
							}
							if (isBlankObject(source)) {
								// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
								for (key in source) {
									destination[key] = copy(source[key], null, stackSource, stackDest);
								}
							} else if (source && typeof source.hasOwnProperty === 'function') {
								// Slow path, which must rely on hasOwnProperty
								for (key in source) {
									if (source.hasOwnProperty(key)) {
										destination[key] = copy(source[key], null, stackSource, stackDest);
									}
								}
							} else {
								// Slowest path --- hasOwnProperty can't be called as a method
								for (key in source) {
									if (hasOwnProperty.call(source, key)) {
										destination[key] = copy(source[key], null, stackSource, stackDest);
									}
								}
							}
							setHashKey(destination, h);
						}
					}
					return destination;
				}

				/**
				 * Creates a shallow copy of an object, an array or a primitive.
				 *
				 * Assumes that there are no proto properties for objects.
				 */
				function shallowCopy(src, dst) {
					if (isArray(src)) {
						dst = dst || [];

						for (var i = 0, ii = src.length; i < ii; i++) {
							dst[i] = src[i];
						}
					} else if (isObject(src)) {
						dst = dst || {};

						for (var key in src) {
							if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
								dst[key] = src[key];
							}
						}
					}

					return dst || src;
				}


				/**
				 * @ngdoc function
				 * @name angular.equals
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Determines if two objects or two values are equivalent. Supports value types, regular
				 * expressions, arrays and objects.
				 *
				 * Two objects or values are considered equivalent if at least one of the following is true:
				 *
				 * * Both objects or values pass `===` comparison.
				 * * Both objects or values are of the same type and all of their properties are equal by
				 *   comparing them with `angular.equals`.
				 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
				 * * Both values represent the same regular expression (In JavaScript,
				 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
				 *   representation matches).
				 *
				 * During a property comparison, properties of `function` type and properties with names
				 * that begin with `$` are ignored.
				 *
				 * Scope and DOMWindow objects are being compared only by identify (`===`).
				 *
				 * @param {*} o1 Object or value to compare.
				 * @param {*} o2 Object or value to compare.
				 * @returns {boolean} True if arguments are equal.
				 */
				function equals(o1, o2) {
					if (o1 === o2) return true;
					if (o1 === null || o2 === null) return false;
					if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
					var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
					if (t1 == t2) {
						if (t1 == 'object') {
							if (isArray(o1)) {
								if (!isArray(o2)) return false;
								if ((length = o1.length) == o2.length) {
									for (key = 0; key < length; key++) {
										if (!equals(o1[key], o2[key])) return false;
									}
									return true;
								}
							} else if (isDate(o1)) {
								if (!isDate(o2)) return false;
								return equals(o1.getTime(), o2.getTime());
							} else if (isRegExp(o1)) {
								return isRegExp(o2) ? o1.toString() == o2.toString() : false;
							} else {
								if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
									isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
								keySet = createMap();
								for (key in o1) {
									if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
									if (!equals(o1[key], o2[key])) return false;
									keySet[key] = true;
								}
								for (key in o2) {
									if (!(key in keySet) &&
										key.charAt(0) !== '$' &&
										o2[key] !== undefined && !isFunction(o2[key])) return false;
								}
								return true;
							}
						}
					}
					return false;
				}

				var csp = function () {
					if (isDefined(csp.isActive_)) return csp.isActive_;

					var active = !!(document.querySelector('[ng-csp]') ||
					document.querySelector('[data-ng-csp]'));

					if (!active) {
						try {
							/* jshint -W031, -W054 */
							new Function('');
							/* jshint +W031, +W054 */
						} catch (e) {
							active = true;
						}
					}

					return (csp.isActive_ = active);
				};

				/**
				 * @ngdoc directive
				 * @module ng
				 * @name ngJq
				 *
				 * @element ANY
				 * @param {string=} ngJq the name of the library available under `window`
				 * to be used for angular.element
				 * @description
				 * Use this directive to force the angular.element library.  This should be
				 * used to force either jqLite by leaving ng-jq blank or setting the name of
				 * the jquery variable under window (eg. jQuery).
				 *
				 * Since angular looks for this directive when it is loaded (doesn't wait for the
				 * DOMContentLoaded event), it must be placed on an element that comes before the script
				 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
				 * others ignored.
				 *
				 * @example
				 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
				 ```html
				 <!doctype html>
				 <html ng-app ng-jq>
				 ...
				 ...
				 </html>
				 ```
				 * @example
				 * This example shows how to use a jQuery based library of a different name.
				 * The library name must be available at the top most 'window'.
				 ```html
				 <!doctype html>
				 <html ng-app ng-jq="jQueryLib">
				 ...
				 ...
				 </html>
				 ```
				 */
				var jq = function () {
					if (isDefined(jq.name_)) return jq.name_;
					var el;
					var i, ii = ngAttrPrefixes.length, prefix, name;
					for (i = 0; i < ii; ++i) {
						prefix = ngAttrPrefixes[i];
						if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
							name = el.getAttribute(prefix + 'jq');
							break;
						}
					}

					return (jq.name_ = name);
				};

				function concat(array1, array2, index) {
					return array1.concat(slice.call(array2, index));
				}

				function sliceArgs(args, startIndex) {
					return slice.call(args, startIndex || 0);
				}


				/* jshint -W101 */
				/**
				 * @ngdoc function
				 * @name angular.bind
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
				 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
				 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
				 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
				 *
				 * @param {Object} self Context which `fn` should be evaluated in.
				 * @param {function()} fn Function to be bound.
				 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
				 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
				 */
				/* jshint +W101 */
				function bind(self, fn) {
					var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
					if (isFunction(fn) && !(fn instanceof RegExp)) {
						return curryArgs.length
							? function () {
							return arguments.length
								? fn.apply(self, concat(curryArgs, arguments, 0))
								: fn.apply(self, curryArgs);
						}
							: function () {
							return arguments.length
								? fn.apply(self, arguments)
								: fn.call(self);
						};
					} else {
						// in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
						return fn;
					}
				}


				function toJsonReplacer(key, value) {
					var val = value;

					if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
						val = undefined;
					} else if (isWindow(value)) {
						val = '$WINDOW';
					} else if (value && document === value) {
						val = '$DOCUMENT';
					} else if (isScope(value)) {
						val = '$SCOPE';
					}

					return val;
				}


				/**
				 * @ngdoc function
				 * @name angular.toJson
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
				 * stripped since angular uses this notation internally.
				 *
				 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
				 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
				 *    If set to an integer, the JSON output will contain that many spaces per indentation.
				 * @returns {string|undefined} JSON-ified string representing `obj`.
				 */
				function toJson(obj, pretty) {
					if (typeof obj === 'undefined') return undefined;
					if (!isNumber(pretty)) {
						pretty = pretty ? 2 : null;
					}
					return JSON.stringify(obj, toJsonReplacer, pretty);
				}


				/**
				 * @ngdoc function
				 * @name angular.fromJson
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Deserializes a JSON string.
				 *
				 * @param {string} json JSON string to deserialize.
				 * @returns {Object|Array|string|number} Deserialized JSON string.
				 */
				function fromJson(json) {
					return isString(json)
						? JSON.parse(json)
						: json;
				}


				function timezoneToOffset(timezone, fallback) {
					var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
					return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
				}


				function addDateMinutes(date, minutes) {
					date = new Date(date.getTime());
					date.setMinutes(date.getMinutes() + minutes);
					return date;
				}


				function convertTimezoneToLocal(date, timezone, reverse) {
					reverse = reverse ? -1 : 1;
					var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
					return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));
				}


				/**
				 * @returns {string} Returns the string representation of the element.
				 */
				function startingTag(element) {
					element = jqLite(element).clone();
					try {
						// turns out IE does not let you set .html() on elements which
						// are not allowed to have children. So we just ignore it.
						element.empty();
					} catch (e) {
					}
					var elemHtml = jqLite('<div>').append(element).html();
					try {
						return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
							elemHtml.
								match(/^(<[^>]+>)/)[1].
								replace(/^<([\w\-]+)/, function (match, nodeName) {
									return '<' + lowercase(nodeName);
								});
					} catch (e) {
						return lowercase(elemHtml);
					}

				}


				/////////////////////////////////////////////////

				/**
				 * Tries to decode the URI component without throwing an exception.
				 *
				 * @private
				 * @param str value potential URI component to check.
				 * @returns {boolean} True if `value` can be decoded
				 * with the decodeURIComponent function.
				 */
				function tryDecodeURIComponent(value) {
					try {
						return decodeURIComponent(value);
					} catch (e) {
						// Ignore any invalid uri component
					}
				}


				/**
				 * Parses an escaped url query string into key-value pairs.
				 * @returns {Object.<string,boolean|Array>}
				 */
				function parseKeyValue(/**string*/keyValue) {
					var obj = {}, key_value, key;
					forEach((keyValue || "").split('&'), function (keyValue) {
						if (keyValue) {
							key_value = keyValue.replace(/\+/g, '%20').split('=');
							key = tryDecodeURIComponent(key_value[0]);
							if (isDefined(key)) {
								var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
								if (!hasOwnProperty.call(obj, key)) {
									obj[key] = val;
								} else if (isArray(obj[key])) {
									obj[key].push(val);
								} else {
									obj[key] = [obj[key], val];
								}
							}
						}
					});
					return obj;
				}

				function toKeyValue(obj) {
					var parts = [];
					forEach(obj, function (value, key) {
						if (isArray(value)) {
							forEach(value, function (arrayValue) {
								parts.push(encodeUriQuery(key, true) +
									(arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
							});
						} else {
							parts.push(encodeUriQuery(key, true) +
								(value === true ? '' : '=' + encodeUriQuery(value, true)));
						}
					});
					return parts.length ? parts.join('&') : '';
				}


				/**
				 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
				 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
				 * segments:
				 *    segment       = *pchar
				 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
				 *    pct-encoded   = "%" HEXDIG HEXDIG
				 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
				 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
				 *                     / "*" / "+" / "," / ";" / "="
				 */
				function encodeUriSegment(val) {
					return encodeUriQuery(val, true).
						replace(/%26/gi, '&').
						replace(/%3D/gi, '=').
						replace(/%2B/gi, '+');
				}


				/**
				 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
				 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
				 * encoded per http://tools.ietf.org/html/rfc3986:
				 *    query       = *( pchar / "/" / "?" )
				 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
				 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
				 *    pct-encoded   = "%" HEXDIG HEXDIG
				 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
				 *                     / "*" / "+" / "," / ";" / "="
				 */
				function encodeUriQuery(val, pctEncodeSpaces) {
					return encodeURIComponent(val).
						replace(/%40/gi, '@').
						replace(/%3A/gi, ':').
						replace(/%24/g, '$').
						replace(/%2C/gi, ',').
						replace(/%3B/gi, ';').
						replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
				}

				var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

				function getNgAttribute(element, ngAttr) {
					var attr, i, ii = ngAttrPrefixes.length;
					for (i = 0; i < ii; ++i) {
						attr = ngAttrPrefixes[i] + ngAttr;
						if (isString(attr = element.getAttribute(attr))) {
							return attr;
						}
					}
					return null;
				}

				/**
				 * @ngdoc directive
				 * @name ngApp
				 * @module ng
				 *
				 * @element ANY
				 * @param {angular.Module} ngApp an optional application
				 *   {@link angular.module module} name to load.
				 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
				 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
				 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
				 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
				 *   tracking down the root of these bugs.
				 *
				 * @description
				 *
				 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
				 * designates the **root element** of the application and is typically placed near the root element
				 * of the page - e.g. on the `<body>` or `<html>` tags.
				 *
				 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
				 * found in the document will be used to define the root element to auto-bootstrap as an
				 * application. To run multiple applications in an HTML document you must manually bootstrap them using
				 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
				 *
				 * You can specify an **AngularJS module** to be used as the root module for the application.  This
				 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
				 * should contain the application code needed or have dependencies on other modules that will
				 * contain the code. See {@link angular.module} for more information.
				 *
				 * In the example below if the `ngApp` directive were not placed on the `html` element then the
				 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
				 * would not be resolved to `3`.
				 *
				 * `ngApp` is the easiest, and most common way to bootstrap an application.
				 *
				 <example module="ngAppDemo">
				 <file name="index.html">
				 <div ng-controller="ngAppDemoController">
				 I can add: {{a}} + {{b}} =  {{ a+b }}
				 </div>
				 </file>
				 <file name="script.js">
				 angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
				 </file>
				 </example>
				 *
				 * Using `ngStrictDi`, you would see something like this:
				 *
				 <example ng-app-included="true">
				 <file name="index.html">
				 <div ng-app="ngAppStrictDemo" ng-strict-di>
				 <div ng-controller="GoodController1">
				 I can add: {{a}} + {{b}} =  {{ a+b }}

				 <p>This renders because the controller does not fail to
				 instantiate, by using explicit annotation style (see
				 script.js for details)
				 </p>
				 </div>

				 <div ng-controller="GoodController2">
				 Name: <input ng-model="name"><br />
				 Hello, {{name}}!

				 <p>This renders because the controller does not fail to
				 instantiate, by using explicit annotation style
				 (see script.js for details)
				 </p>
				 </div>

				 <div ng-controller="BadController">
				 I can add: {{a}} + {{b}} =  {{ a+b }}

				 <p>The controller could not be instantiated, due to relying
				 on automatic function annotations (which are disabled in
				 strict mode). As such, the content of this section is not
				 interpolated, and there should be an error in your web console.
				 </p>
				 </div>
				 </div>
				 </file>
				 <file name="script.js">
				 angular.module('ngAppStrictDemo', [])
				 // BadController will fail to instantiate, due to relying on automatic function annotation,
				 // rather than an explicit annotation
				 .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
				 // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
				 // due to using explicit annotations using the array style and $inject property, respectively.
				 .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
				 .controller('GoodController2', GoodController2);
				 function GoodController2($scope) {
	       $scope.name = "World";
	     }
				 GoodController2.$inject = ['$scope'];
				 </file>
				 <file name="style.css">
				 div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
				 div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
				 div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
				 </file>
				 </example>
				 */
				function angularInit(element, bootstrap) {
					var appElement,
						module,
						config = {};

					// The element `element` has priority over any other element
					forEach(ngAttrPrefixes, function (prefix) {
						var name = prefix + 'app';

						if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
							appElement = element;
							module = element.getAttribute(name);
						}
					});
					forEach(ngAttrPrefixes, function (prefix) {
						var name = prefix + 'app';
						var candidate;

						if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
							appElement = candidate;
							module = candidate.getAttribute(name);
						}
					});
					if (appElement) {
						config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
						bootstrap(appElement, module ? [module] : [], config);
					}
				}

				/**
				 * @ngdoc function
				 * @name angular.bootstrap
				 * @module ng
				 * @description
				 * Use this function to manually start up angular application.
				 *
				 * See: {@link guide/bootstrap Bootstrap}
				 *
				 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
				 * They must use {@link ng.directive:ngApp ngApp}.
				 *
				 * Angular will detect if it has been loaded into the browser more than once and only allow the
				 * first loaded script to be bootstrapped and will report a warning to the browser console for
				 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
				 * multiple instances of Angular try to work on the DOM.
				 *
				 * ```html
				 * <!doctype html>
				 * <html>
				 * <body>
				 * <div ng-controller="WelcomeController">
				 *   {{greeting}}
				 * </div>
				 *
				 * <script src="angular.js"></script>
				 * <script>
				 *   var app = angular.module('demo', [])
				 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
				 *   angular.bootstrap(document, ['demo']);
				 * </script>
				 * </body>
				 * </html>
				 * ```
				 *
				 * @param {DOMElement} element DOM element which is the root of angular application.
				 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
				 *     Each item in the array should be the name of a predefined module or a (DI annotated)
				 *     function that will be invoked by the injector as a `config` block.
				 *     See: {@link angular.module modules}
				 * @param {Object=} config an object for defining configuration options for the application. The
				 *     following keys are supported:
				 *
				 * * `strictDi` - disable automatic function annotation for the application. This is meant to
				 *   assist in finding bugs which break minified code. Defaults to `false`.
				 *
				 * @returns {auto.$injector} Returns the newly created injector for this app.
				 */
				function bootstrap(element, modules, config) {
					if (!isObject(config)) config = {};
					var defaultConfig = {
						strictDi: false
					};
					config = extend(defaultConfig, config);
					var doBootstrap = function () {
						element = jqLite(element);

						if (element.injector()) {
							var tag = (element[0] === document) ? 'document' : startingTag(element);
							//Encode angle brackets to prevent input from being sanitized to empty string #8683
							throw ngMinErr(
								'btstrpd',
								"App Already Bootstrapped with this Element '{0}'",
								tag.replace(/</, '&lt;').replace(/>/, '&gt;'));
						}

						modules = modules || [];
						modules.unshift(['$provide', function ($provide) {
							$provide.value('$rootElement', element);
						}]);

						if (config.debugInfoEnabled) {
							// Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
							modules.push(['$compileProvider', function ($compileProvider) {
								$compileProvider.debugInfoEnabled(true);
							}]);
						}

						modules.unshift('ng');
						var injector = createInjector(modules, config.strictDi);
						injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
								function bootstrapApply(scope, element, compile, injector) {
									scope.$apply(function () {
										element.data('$injector', injector);
										compile(element)(scope);
									});
								}]
						);
						return injector;
					};

					var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
					var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

					if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
						config.debugInfoEnabled = true;
						window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
					}

					if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
						return doBootstrap();
					}

					window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
					angular.resumeBootstrap = function (extraModules) {
						forEach(extraModules, function (module) {
							modules.push(module);
						});
						return doBootstrap();
					};

					if (isFunction(angular.resumeDeferredBootstrap)) {
						angular.resumeDeferredBootstrap();
					}
				}

				/**
				 * @ngdoc function
				 * @name angular.reloadWithDebugInfo
				 * @module ng
				 * @description
				 * Use this function to reload the current application with debug information turned on.
				 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
				 *
				 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
				 */
				function reloadWithDebugInfo() {
					window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
					window.location.reload();
				}

				/**
				 * @name angular.getTestability
				 * @module ng
				 * @description
				 * Get the testability service for the instance of Angular on the given
				 * element.
				 * @param {DOMElement} element DOM element which is the root of angular application.
				 */
				function getTestability(rootElement) {
					var injector = angular.element(rootElement).injector();
					if (!injector) {
						throw ngMinErr('test',
							'no injector found for element argument to getTestability');
					}
					return injector.get('$$testability');
				}

				var SNAKE_CASE_REGEXP = /[A-Z]/g;

				function snake_case(name, separator) {
					separator = separator || '_';
					return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
						return (pos ? separator : '') + letter.toLowerCase();
					});
				}

				var bindJQueryFired = false;
				var skipDestroyOnNextJQueryCleanData;

				function bindJQuery() {
					var originalCleanData;

					if (bindJQueryFired) {
						return;
					}

					// bind to jQuery if present;
					var jqName = jq();
					jQuery = __webpack_provided_window_dot_jQuery; // use default jQuery.
					if (isDefined(jqName)) { // `ngJq` present
						jQuery = jqName === null ? undefined : window[jqName]; // if empty; use jqLite. if not empty, use jQuery specified by `ngJq`.
					}

					// Use jQuery if it exists with proper functionality, otherwise default to us.
					// Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
					// Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
					// versions. It will not work for sure with jQuery <1.7, though.
					if (jQuery && jQuery.fn.on) {
						jqLite = jQuery;
						extend(jQuery.fn, {
							scope: JQLitePrototype.scope,
							isolateScope: JQLitePrototype.isolateScope,
							controller: JQLitePrototype.controller,
							injector: JQLitePrototype.injector,
							inheritedData: JQLitePrototype.inheritedData
						});

						// All nodes removed from the DOM via various jQuery APIs like .remove()
						// are passed through jQuery.cleanData. Monkey-patch this method to fire
						// the $destroy event on all removed nodes.
						originalCleanData = jQuery.cleanData;
						jQuery.cleanData = function (elems) {
							var events;
							if (!skipDestroyOnNextJQueryCleanData) {
								for (var i = 0, elem; (elem = elems[i]) != null; i++) {
									events = jQuery._data(elem, "events");
									if (events && events.$destroy) {
										jQuery(elem).triggerHandler('$destroy');
									}
								}
							} else {
								skipDestroyOnNextJQueryCleanData = false;
							}
							originalCleanData(elems);
						};
					} else {
						jqLite = JQLite;
					}

					angular.element = jqLite;

					// Prevent double-proxying.
					bindJQueryFired = true;
				}

				/**
				 * throw error if the argument is falsy.
				 */
				function assertArg(arg, name, reason) {
					if (!arg) {
						throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
					}
					return arg;
				}

				function assertArgFn(arg, name, acceptArrayAnnotation) {
					if (acceptArrayAnnotation && isArray(arg)) {
						arg = arg[arg.length - 1];
					}

					assertArg(isFunction(arg), name, 'not a function, got ' +
						(arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
					return arg;
				}

				/**
				 * throw error if the name given is hasOwnProperty
				 * @param  {String} name    the name to test
				 * @param  {String} context the context in which the name is used, such as module or directive
				 */
				function assertNotHasOwnProperty(name, context) {
					if (name === 'hasOwnProperty') {
						throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
					}
				}

				/**
				 * Return the value accessible from the object by path. Any undefined traversals are ignored
				 * @param {Object} obj starting object
				 * @param {String} path path to traverse
				 * @param {boolean} [bindFnToScope=true]
				 * @returns {Object} value as accessible by path
				 */
				//TODO(misko): this function needs to be removed
				function getter(obj, path, bindFnToScope) {
					if (!path) return obj;
					var keys = path.split('.');
					var key;
					var lastInstance = obj;
					var len = keys.length;

					for (var i = 0; i < len; i++) {
						key = keys[i];
						if (obj) {
							obj = (lastInstance = obj)[key];
						}
					}
					if (!bindFnToScope && isFunction(obj)) {
						return bind(lastInstance, obj);
					}
					return obj;
				}

				/**
				 * Return the DOM siblings between the first and last node in the given array.
				 * @param {Array} array like object
				 * @returns {jqLite} jqLite collection containing the nodes
				 */
				function getBlockNodes(nodes) {
					// TODO(perf): just check if all items in `nodes` are siblings and if they are return the original
					//             collection, otherwise update the original collection.
					var node = nodes[0];
					var endNode = nodes[nodes.length - 1];
					var blockNodes = [node];

					do {
						node = node.nextSibling;
						if (!node) break;
						blockNodes.push(node);
					} while (node !== endNode);

					return jqLite(blockNodes);
				}


				/**
				 * Creates a new object without a prototype. This object is useful for lookup without having to
				 * guard against prototypically inherited properties via hasOwnProperty.
				 *
				 * Related micro-benchmarks:
				 * - http://jsperf.com/object-create2
				 * - http://jsperf.com/proto-map-lookup/2
				 * - http://jsperf.com/for-in-vs-object-keys2
				 *
				 * @returns {Object}
				 */
				function createMap() {
					return Object.create(null);
				}

				var NODE_TYPE_ELEMENT = 1;
				var NODE_TYPE_ATTRIBUTE = 2;
				var NODE_TYPE_TEXT = 3;
				var NODE_TYPE_COMMENT = 8;
				var NODE_TYPE_DOCUMENT = 9;
				var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

				/**
				 * @ngdoc type
				 * @name angular.Module
				 * @module ng
				 * @description
				 *
				 * Interface for configuring angular {@link angular.module modules}.
				 */

				function setupModuleLoader(window) {

					var $injectorMinErr = minErr('$injector');
					var ngMinErr = minErr('ng');

					function ensure(obj, name, factory) {
						return obj[name] || (obj[name] = factory());
					}

					var angular = ensure(window, 'angular', Object);

					// We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
					angular.$$minErr = angular.$$minErr || minErr;

					return ensure(angular, 'module', function () {
						/** @type {Object.<string, angular.Module>} */
						var modules = {};

						/**
						 * @ngdoc function
						 * @name angular.module
						 * @module ng
						 * @description
						 *
						 * The `angular.module` is a global place for creating, registering and retrieving Angular
						 * modules.
						 * All modules (angular core or 3rd party) that should be available to an application must be
						 * registered using this mechanism.
						 *
						 * When passed two or more arguments, a new module is created.  If passed only one argument, an
						 * existing module (the name passed as the first argument to `module`) is retrieved.
						 *
						 *
						 * # Module
						 *
						 * A module is a collection of services, directives, controllers, filters, and configuration information.
						 * `angular.module` is used to configure the {@link auto.$injector $injector}.
						 *
						 * ```js
						 * // Create a new module
						 * var myModule = angular.module('myModule', []);
						 *
						 * // register a new service
						 * myModule.value('appName', 'MyCoolApp');
						 *
						 * // configure existing services inside initialization blocks.
						 * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
						 * ```
						 *
						 * Then you can create an injector and load your modules like this:
						 *
						 * ```js
						 * var injector = angular.injector(['ng', 'myModule'])
						 * ```
						 *
						 * However it's more likely that you'll just use
						 * {@link ng.directive:ngApp ngApp} or
						 * {@link angular.bootstrap} to simplify this process for you.
						 *
						 * @param {!string} name The name of the module to create or retrieve.
						 * @param {!Array.<string>=} requires If specified then new module is being created. If
						 *        unspecified then the module is being retrieved for further configuration.
						 * @param {Function=} configFn Optional configuration function for the module. Same as
						 *        {@link angular.Module#config Module#config()}.
						 * @returns {module} new module with the {@link angular.Module} api.
						 */
						return function module(name, requires, configFn) {
							var assertNotHasOwnProperty = function (name, context) {
								if (name === 'hasOwnProperty') {
									throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
								}
							};

							assertNotHasOwnProperty(name, 'module');
							if (requires && modules.hasOwnProperty(name)) {
								modules[name] = null;
							}
							return ensure(modules, name, function () {
								if (!requires) {
									throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
										"the module name or forgot to load it. If registering a module ensure that you " +
										"specify the dependencies as the second argument.", name);
								}

								/** @type {!Array.<Array.<*>>} */
								var invokeQueue = [];

								/** @type {!Array.<Function>} */
								var configBlocks = [];

								/** @type {!Array.<Function>} */
								var runBlocks = [];

								var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

								/** @type {angular.Module} */
								var moduleInstance = {
									// Private state
									_invokeQueue: invokeQueue,
									_configBlocks: configBlocks,
									_runBlocks: runBlocks,

									/**
									 * @ngdoc property
									 * @name angular.Module#requires
									 * @module ng
									 *
									 * @description
									 * Holds the list of modules which the injector will load before the current module is
									 * loaded.
									 */
									requires: requires,

									/**
									 * @ngdoc property
									 * @name angular.Module#name
									 * @module ng
									 *
									 * @description
									 * Name of the module.
									 */
									name: name,


									/**
									 * @ngdoc method
									 * @name angular.Module#provider
									 * @module ng
									 * @param {string} name service name
									 * @param {Function} providerType Construction function for creating new instance of the
									 *                                service.
									 * @description
									 * See {@link auto.$provide#provider $provide.provider()}.
									 */
									provider: invokeLaterAndSetModuleName('$provide', 'provider'),

									/**
									 * @ngdoc method
									 * @name angular.Module#factory
									 * @module ng
									 * @param {string} name service name
									 * @param {Function} providerFunction Function for creating new instance of the service.
									 * @description
									 * See {@link auto.$provide#factory $provide.factory()}.
									 */
									factory: invokeLaterAndSetModuleName('$provide', 'factory'),

									/**
									 * @ngdoc method
									 * @name angular.Module#service
									 * @module ng
									 * @param {string} name service name
									 * @param {Function} constructor A constructor function that will be instantiated.
									 * @description
									 * See {@link auto.$provide#service $provide.service()}.
									 */
									service: invokeLaterAndSetModuleName('$provide', 'service'),

									/**
									 * @ngdoc method
									 * @name angular.Module#value
									 * @module ng
									 * @param {string} name service name
									 * @param {*} object Service instance object.
									 * @description
									 * See {@link auto.$provide#value $provide.value()}.
									 */
									value: invokeLater('$provide', 'value'),

									/**
									 * @ngdoc method
									 * @name angular.Module#constant
									 * @module ng
									 * @param {string} name constant name
									 * @param {*} object Constant value.
									 * @description
									 * Because the constant are fixed, they get applied before other provide methods.
									 * See {@link auto.$provide#constant $provide.constant()}.
									 */
									constant: invokeLater('$provide', 'constant', 'unshift'),

									/**
									 * @ngdoc method
									 * @name angular.Module#decorator
									 * @module ng
									 * @param {string} The name of the service to decorate.
									 * @param {Function} This function will be invoked when the service needs to be
									 *                                    instantiated and should return the decorated service instance.
									 * @description
									 * See {@link auto.$provide#decorator $provide.decorator()}.
									 */
									decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),

									/**
									 * @ngdoc method
									 * @name angular.Module#animation
									 * @module ng
									 * @param {string} name animation name
									 * @param {Function} animationFactory Factory function for creating new instance of an
									 *                                    animation.
									 * @description
									 *
									 * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
									 *
									 *
									 * Defines an animation hook that can be later used with
									 * {@link $animate $animate} service and directives that use this service.
									 *
									 * ```js
									 * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
									 * ```
									 *
									 * See {@link ng.$animateProvider#register $animateProvider.register()} and
									 * {@link ngAnimate ngAnimate module} for more information.
									 */
									animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),

									/**
									 * @ngdoc method
									 * @name angular.Module#filter
									 * @module ng
									 * @param {string} name Filter name - this must be a valid angular expression identifier
									 * @param {Function} filterFactory Factory function for creating new instance of filter.
									 * @description
									 * See {@link ng.$filterProvider#register $filterProvider.register()}.
									 *
									 * <div class="alert alert-warning">
									 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
									 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
									 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
									 * (`myapp_subsection_filterx`).
									 * </div>
									 */
									filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),

									/**
									 * @ngdoc method
									 * @name angular.Module#controller
									 * @module ng
									 * @param {string|Object} name Controller name, or an object map of controllers where the
									 *    keys are the names and the values are the constructors.
									 * @param {Function} constructor Controller constructor function.
									 * @description
									 * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
									 */
									controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),

									/**
									 * @ngdoc method
									 * @name angular.Module#directive
									 * @module ng
									 * @param {string|Object} name Directive name, or an object map of directives where the
									 *    keys are the names and the values are the factories.
									 * @param {Function} directiveFactory Factory function for creating new instance of
									 * directives.
									 * @description
									 * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
									 */
									directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),

									/**
									 * @ngdoc method
									 * @name angular.Module#config
									 * @module ng
									 * @param {Function} configFn Execute this function on module load. Useful for service
									 *    configuration.
									 * @description
									 * Use this method to register work which needs to be performed on module loading.
									 * For more about how to configure services, see
									 * {@link providers#provider-recipe Provider Recipe}.
									 */
									config: config,

									/**
									 * @ngdoc method
									 * @name angular.Module#run
									 * @module ng
									 * @param {Function} initializationFn Execute this function after injector creation.
									 *    Useful for application initialization.
									 * @description
									 * Use this method to register work which should be performed when the injector is done
									 * loading all modules.
									 */
									run: function (block) {
										runBlocks.push(block);
										return this;
									}
								};

								if (configFn) {
									config(configFn);
								}

								return moduleInstance;

								/**
								 * @param {string} provider
								 * @param {string} method
								 * @param {String=} insertMethod
								 * @returns {angular.Module}
								 */
								function invokeLater(provider, method, insertMethod, queue) {
									if (!queue) queue = invokeQueue;
									return function () {
										queue[insertMethod || 'push']([provider, method, arguments]);
										return moduleInstance;
									};
								}

								/**
								 * @param {string} provider
								 * @param {string} method
								 * @returns {angular.Module}
								 */
								function invokeLaterAndSetModuleName(provider, method) {
									return function (recipeName, factoryFunction) {
										if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
										invokeQueue.push([provider, method, arguments]);
										return moduleInstance;
									};
								}
							});
						};
					});

				}

				/* global: toDebugString: true */

				function serializeObject(obj) {
					var seen = [];

					return JSON.stringify(obj, function (key, val) {
						val = toJsonReplacer(key, val);
						if (isObject(val)) {

							if (seen.indexOf(val) >= 0) return '<<already seen>>';

							seen.push(val);
						}
						return val;
					});
				}

				function toDebugString(obj) {
					if (typeof obj === 'function') {
						return obj.toString().replace(/ \{[\s\S]*$/, '');
					} else if (typeof obj === 'undefined') {
						return 'undefined';
					} else if (typeof obj !== 'string') {
						return serializeObject(obj);
					}
					return obj;
				}

				/* global angularModule: true,
				 version: true,

				 $LocaleProvider,
				 $CompileProvider,

				 htmlAnchorDirective,
				 inputDirective,
				 inputDirective,
				 formDirective,
				 scriptDirective,
				 selectDirective,
				 styleDirective,
				 optionDirective,
				 ngBindDirective,
				 ngBindHtmlDirective,
				 ngBindTemplateDirective,
				 ngClassDirective,
				 ngClassEvenDirective,
				 ngClassOddDirective,
				 ngCspDirective,
				 ngCloakDirective,
				 ngControllerDirective,
				 ngFormDirective,
				 ngHideDirective,
				 ngIfDirective,
				 ngIncludeDirective,
				 ngIncludeFillContentDirective,
				 ngInitDirective,
				 ngNonBindableDirective,
				 ngPluralizeDirective,
				 ngRepeatDirective,
				 ngShowDirective,
				 ngStyleDirective,
				 ngSwitchDirective,
				 ngSwitchWhenDirective,
				 ngSwitchDefaultDirective,
				 ngOptionsDirective,
				 ngTranscludeDirective,
				 ngModelDirective,
				 ngListDirective,
				 ngChangeDirective,
				 patternDirective,
				 patternDirective,
				 requiredDirective,
				 requiredDirective,
				 minlengthDirective,
				 minlengthDirective,
				 maxlengthDirective,
				 maxlengthDirective,
				 ngValueDirective,
				 ngModelOptionsDirective,
				 ngAttributeAliasDirectives,
				 ngEventDirectives,

				 $AnchorScrollProvider,
				 $AnimateProvider,
				 $$CoreAnimateQueueProvider,
				 $$CoreAnimateRunnerProvider,
				 $BrowserProvider,
				 $CacheFactoryProvider,
				 $ControllerProvider,
				 $DocumentProvider,
				 $ExceptionHandlerProvider,
				 $FilterProvider,
				 $InterpolateProvider,
				 $IntervalProvider,
				 $$HashMapProvider,
				 $HttpProvider,
				 $HttpParamSerializerProvider,
				 $HttpParamSerializerJQLikeProvider,
				 $HttpBackendProvider,
				 $LocationProvider,
				 $LogProvider,
				 $ParseProvider,
				 $RootScopeProvider,
				 $QProvider,
				 $$QProvider,
				 $$SanitizeUriProvider,
				 $SceProvider,
				 $SceDelegateProvider,
				 $SnifferProvider,
				 $TemplateCacheProvider,
				 $TemplateRequestProvider,
				 $$TestabilityProvider,
				 $TimeoutProvider,
				 $$RAFProvider,
				 $WindowProvider,
				 $$jqLiteProvider,
				 $$CookieReaderProvider
				 */


				/**
				 * @ngdoc object
				 * @name angular.version
				 * @module ng
				 * @description
				 * An object that contains information about the current AngularJS version. This object has the
				 * following properties:
				 *
				 * - `full` – `{string}` – Full version string, such as "0.9.18".
				 * - `major` – `{number}` – Major version number, such as "0".
				 * - `minor` – `{number}` – Minor version number, such as "9".
				 * - `dot` – `{number}` – Dot version number, such as "18".
				 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
				 */
				var version = {
					full: '1.4.3',    // all of these placeholder strings will be replaced by grunt's
					major: 1,    // package task
					minor: 4,
					dot: 3,
					codeName: 'foam-acceleration'
				};


				function publishExternalAPI(angular) {
					extend(angular, {
						'bootstrap': bootstrap,
						'copy': copy,
						'extend': extend,
						'merge': merge,
						'equals': equals,
						'element': jqLite,
						'forEach': forEach,
						'injector': createInjector,
						'noop': noop,
						'bind': bind,
						'toJson': toJson,
						'fromJson': fromJson,
						'identity': identity,
						'isUndefined': isUndefined,
						'isDefined': isDefined,
						'isString': isString,
						'isFunction': isFunction,
						'isObject': isObject,
						'isNumber': isNumber,
						'isElement': isElement,
						'isArray': isArray,
						'version': version,
						'isDate': isDate,
						'lowercase': lowercase,
						'uppercase': uppercase,
						'callbacks': {counter: 0},
						'getTestability': getTestability,
						'$$minErr': minErr,
						'$$csp': csp,
						'reloadWithDebugInfo': reloadWithDebugInfo
					});

					angularModule = setupModuleLoader(window);
					try {
						angularModule('ngLocale');
					} catch (e) {
						angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
					}

					angularModule('ng', ['ngLocale'], ['$provide',
						function ngModule($provide) {
							// $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
							$provide.provider({
								$$sanitizeUri: $$SanitizeUriProvider
							});
							$provide.provider('$compile', $CompileProvider).
								directive({
									a: htmlAnchorDirective,
									input: inputDirective,
									textarea: inputDirective,
									form: formDirective,
									script: scriptDirective,
									select: selectDirective,
									style: styleDirective,
									option: optionDirective,
									ngBind: ngBindDirective,
									ngBindHtml: ngBindHtmlDirective,
									ngBindTemplate: ngBindTemplateDirective,
									ngClass: ngClassDirective,
									ngClassEven: ngClassEvenDirective,
									ngClassOdd: ngClassOddDirective,
									ngCloak: ngCloakDirective,
									ngController: ngControllerDirective,
									ngForm: ngFormDirective,
									ngHide: ngHideDirective,
									ngIf: ngIfDirective,
									ngInclude: ngIncludeDirective,
									ngInit: ngInitDirective,
									ngNonBindable: ngNonBindableDirective,
									ngPluralize: ngPluralizeDirective,
									ngRepeat: ngRepeatDirective,
									ngShow: ngShowDirective,
									ngStyle: ngStyleDirective,
									ngSwitch: ngSwitchDirective,
									ngSwitchWhen: ngSwitchWhenDirective,
									ngSwitchDefault: ngSwitchDefaultDirective,
									ngOptions: ngOptionsDirective,
									ngTransclude: ngTranscludeDirective,
									ngModel: ngModelDirective,
									ngList: ngListDirective,
									ngChange: ngChangeDirective,
									pattern: patternDirective,
									ngPattern: patternDirective,
									required: requiredDirective,
									ngRequired: requiredDirective,
									minlength: minlengthDirective,
									ngMinlength: minlengthDirective,
									maxlength: maxlengthDirective,
									ngMaxlength: maxlengthDirective,
									ngValue: ngValueDirective,
									ngModelOptions: ngModelOptionsDirective
								}).
								directive({
									ngInclude: ngIncludeFillContentDirective
								}).
								directive(ngAttributeAliasDirectives).
								directive(ngEventDirectives);
							$provide.provider({
								$anchorScroll: $AnchorScrollProvider,
								$animate: $AnimateProvider,
								$$animateQueue: $$CoreAnimateQueueProvider,
								$$AnimateRunner: $$CoreAnimateRunnerProvider,
								$browser: $BrowserProvider,
								$cacheFactory: $CacheFactoryProvider,
								$controller: $ControllerProvider,
								$document: $DocumentProvider,
								$exceptionHandler: $ExceptionHandlerProvider,
								$filter: $FilterProvider,
								$interpolate: $InterpolateProvider,
								$interval: $IntervalProvider,
								$http: $HttpProvider,
								$httpParamSerializer: $HttpParamSerializerProvider,
								$httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
								$httpBackend: $HttpBackendProvider,
								$location: $LocationProvider,
								$log: $LogProvider,
								$parse: $ParseProvider,
								$rootScope: $RootScopeProvider,
								$q: $QProvider,
								$$q: $$QProvider,
								$sce: $SceProvider,
								$sceDelegate: $SceDelegateProvider,
								$sniffer: $SnifferProvider,
								$templateCache: $TemplateCacheProvider,
								$templateRequest: $TemplateRequestProvider,
								$$testability: $$TestabilityProvider,
								$timeout: $TimeoutProvider,
								$window: $WindowProvider,
								$$rAF: $$RAFProvider,
								$$jqLite: $$jqLiteProvider,
								$$HashMap: $$HashMapProvider,
								$$cookieReader: $$CookieReaderProvider
							});
						}
					]);
				}

				/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
				 *     Any commits to this file should be reviewed with security in mind.  *
				 *   Changes to this file can potentially create security vulnerabilities. *
				 *          An approval from 2 Core members with history of modifying      *
				 *                         this file is required.                          *
				 *                                                                         *
				 *  Does the change somehow allow for arbitrary javascript to be executed? *
				 *    Or allows for someone to change the prototype of built-in objects?   *
				 *     Or gives undesired access to variables likes document or window?    *
				 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

				/* global JQLitePrototype: true,
				 addEventListenerFn: true,
				 removeEventListenerFn: true,
				 BOOLEAN_ATTR: true,
				 ALIASED_ATTR: true,
				 */

				//////////////////////////////////
				//JQLite
				//////////////////////////////////

				/**
				 * @ngdoc function
				 * @name angular.element
				 * @module ng
				 * @kind function
				 *
				 * @description
				 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
				 *
				 * If jQuery is available, `angular.element` is an alias for the
				 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
				 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
				 *
				 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
				 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
				 * commonly needed functionality with the goal of having a very small footprint.</div>
				 *
				 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.
				 *
				 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
				 * jqLite; they are never raw DOM references.</div>
				 *
				 * ## Angular's jqLite
				 * jqLite provides only the following jQuery methods:
				 *
				 * - [`addClass()`](http://api.jquery.com/addClass/)
				 * - [`after()`](http://api.jquery.com/after/)
				 * - [`append()`](http://api.jquery.com/append/)
				 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
				 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
				 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
				 * - [`clone()`](http://api.jquery.com/clone/)
				 * - [`contents()`](http://api.jquery.com/contents/)
				 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
				 * - [`data()`](http://api.jquery.com/data/)
				 * - [`detach()`](http://api.jquery.com/detach/)
				 * - [`empty()`](http://api.jquery.com/empty/)
				 * - [`eq()`](http://api.jquery.com/eq/)
				 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
				 * - [`hasClass()`](http://api.jquery.com/hasClass/)
				 * - [`html()`](http://api.jquery.com/html/)
				 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
				 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
				 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
				 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
				 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
				 * - [`prepend()`](http://api.jquery.com/prepend/)
				 * - [`prop()`](http://api.jquery.com/prop/)
				 * - [`ready()`](http://api.jquery.com/ready/)
				 * - [`remove()`](http://api.jquery.com/remove/)
				 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
				 * - [`removeClass()`](http://api.jquery.com/removeClass/)
				 * - [`removeData()`](http://api.jquery.com/removeData/)
				 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
				 * - [`text()`](http://api.jquery.com/text/)
				 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
				 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
				 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
				 * - [`val()`](http://api.jquery.com/val/)
				 * - [`wrap()`](http://api.jquery.com/wrap/)
				 *
				 * ## jQuery/jqLite Extras
				 * Angular also provides the following additional methods and events to both jQuery and jqLite:
				 *
				 * ### Events
				 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
				 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
				 *    element before it is removed.
				 *
				 * ### Methods
				 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
				 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
				 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
				 *   `'ngModel'`).
				 * - `injector()` - retrieves the injector of the current element or its parent.
				 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
				 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
				 *   be enabled.
				 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
				 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
				 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
				 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
				 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
				 *   parent element is reached.
				 *
				 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
				 * @returns {Object} jQuery object.
				 */

				JQLite.expando = 'ng339';

				var jqCache = JQLite.cache = {},
					jqId = 1,
					addEventListenerFn = function (element, type, fn) {
						element.addEventListener(type, fn, false);
					},
					removeEventListenerFn = function (element, type, fn) {
						element.removeEventListener(type, fn, false);
					};

				/*
				 * !!! This is an undocumented "private" function !!!
				 */
				JQLite._data = function (node) {
					//jQuery always returns an object on cache miss
					return this.cache[node[this.expando]] || {};
				};

				function jqNextId() {
					return ++jqId;
				}


				var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
				var MOZ_HACK_REGEXP = /^moz([A-Z])/;
				var MOUSE_EVENT_MAP = {mouseleave: "mouseout", mouseenter: "mouseover"};
				var jqLiteMinErr = minErr('jqLite');

				/**
				 * Converts snake_case to camelCase.
				 * Also there is special case for Moz prefix starting with upper case letter.
				 * @param name Name to normalize
				 */
				function camelCase(name) {
					return name.
						replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
							return offset ? letter.toUpperCase() : letter;
						}).
						replace(MOZ_HACK_REGEXP, 'Moz$1');
				}

				var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
				var HTML_REGEXP = /<|&#?\w+;/;
				var TAG_NAME_REGEXP = /<([\w:]+)/;
				var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;

				var wrapMap = {
					'option': [1, '<select multiple="multiple">', '</select>'],

					'thead': [1, '<table>', '</table>'],
					'col': [2, '<table><colgroup>', '</colgroup></table>'],
					'tr': [2, '<table><tbody>', '</tbody></table>'],
					'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
					'_default': [0, "", ""]
				};

				wrapMap.optgroup = wrapMap.option;
				wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
				wrapMap.th = wrapMap.td;


				function jqLiteIsTextNode(html) {
					return !HTML_REGEXP.test(html);
				}

				function jqLiteAcceptsData(node) {
					// The window object can accept data but has no nodeType
					// Otherwise we are only interested in elements (1) and documents (9)
					var nodeType = node.nodeType;
					return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
				}

				function jqLiteHasData(node) {
					for (var key in jqCache[node.ng339]) {
						return true;
					}
					return false;
				}

				function jqLiteBuildFragment(html, context) {
					var tmp, tag, wrap,
						fragment = context.createDocumentFragment(),
						nodes = [], i;

					if (jqLiteIsTextNode(html)) {
						// Convert non-html into a text node
						nodes.push(context.createTextNode(html));
					} else {
						// Convert html into DOM nodes
						tmp = tmp || fragment.appendChild(context.createElement("div"));
						tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;
						tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

						// Descend through wrappers to the right content
						i = wrap[0];
						while (i--) {
							tmp = tmp.lastChild;
						}

						nodes = concat(nodes, tmp.childNodes);

						tmp = fragment.firstChild;
						tmp.textContent = "";
					}

					// Remove wrapper from fragment
					fragment.textContent = "";
					fragment.innerHTML = ""; // Clear inner HTML
					forEach(nodes, function (node) {
						fragment.appendChild(node);
					});

					return fragment;
				}

				function jqLiteParseHTML(html, context) {
					context = context || document;
					var parsed;

					if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
						return [context.createElement(parsed[1])];
					}

					if ((parsed = jqLiteBuildFragment(html, context))) {
						return parsed.childNodes;
					}

					return [];
				}

				/////////////////////////////////////////////
				function JQLite(element) {
					if (element instanceof JQLite) {
						return element;
					}

					var argIsString;

					if (isString(element)) {
						element = trim(element);
						argIsString = true;
					}
					if (!(this instanceof JQLite)) {
						if (argIsString && element.charAt(0) != '<') {
							throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
						}
						return new JQLite(element);
					}

					if (argIsString) {
						jqLiteAddNodes(this, jqLiteParseHTML(element));
					} else {
						jqLiteAddNodes(this, element);
					}
				}

				function jqLiteClone(element) {
					return element.cloneNode(true);
				}

				function jqLiteDealoc(element, onlyDescendants) {
					if (!onlyDescendants) jqLiteRemoveData(element);

					if (element.querySelectorAll) {
						var descendants = element.querySelectorAll('*');
						for (var i = 0, l = descendants.length; i < l; i++) {
							jqLiteRemoveData(descendants[i]);
						}
					}
				}

				function jqLiteOff(element, type, fn, unsupported) {
					if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

					var expandoStore = jqLiteExpandoStore(element);
					var events = expandoStore && expandoStore.events;
					var handle = expandoStore && expandoStore.handle;

					if (!handle) return; //no listeners registered

					if (!type) {
						for (type in events) {
							if (type !== '$destroy') {
								removeEventListenerFn(element, type, handle);
							}
							delete events[type];
						}
					} else {
						forEach(type.split(' '), function (type) {
							if (isDefined(fn)) {
								var listenerFns = events[type];
								arrayRemove(listenerFns || [], fn);
								if (listenerFns && listenerFns.length > 0) {
									return;
								}
							}

							removeEventListenerFn(element, type, handle);
							delete events[type];
						});
					}
				}

				function jqLiteRemoveData(element, name) {
					var expandoId = element.ng339;
					var expandoStore = expandoId && jqCache[expandoId];

					if (expandoStore) {
						if (name) {
							delete expandoStore.data[name];
							return;
						}

						if (expandoStore.handle) {
							if (expandoStore.events.$destroy) {
								expandoStore.handle({}, '$destroy');
							}
							jqLiteOff(element);
						}
						delete jqCache[expandoId];
						element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
					}
				}


				function jqLiteExpandoStore(element, createIfNecessary) {
					var expandoId = element.ng339,
						expandoStore = expandoId && jqCache[expandoId];

					if (createIfNecessary && !expandoStore) {
						element.ng339 = expandoId = jqNextId();
						expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
					}

					return expandoStore;
				}


				function jqLiteData(element, key, value) {
					if (jqLiteAcceptsData(element)) {

						var isSimpleSetter = isDefined(value);
						var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
						var massGetter = !key;
						var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
						var data = expandoStore && expandoStore.data;

						if (isSimpleSetter) { // data('key', value)
							data[key] = value;
						} else {
							if (massGetter) {  // data()
								return data;
							} else {
								if (isSimpleGetter) { // data('key')
									// don't force creation of expandoStore if it doesn't exist yet
									return data && data[key];
								} else { // mass-setter: data({key1: val1, key2: val2})
									extend(data, key);
								}
							}
						}
					}
				}

				function jqLiteHasClass(element, selector) {
					if (!element.getAttribute) return false;
					return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
						indexOf(" " + selector + " ") > -1);
				}

				function jqLiteRemoveClass(element, cssClasses) {
					if (cssClasses && element.setAttribute) {
						forEach(cssClasses.split(' '), function (cssClass) {
							element.setAttribute('class', trim(
									(" " + (element.getAttribute('class') || '') + " ")
										.replace(/[\n\t]/g, " ")
										.replace(" " + trim(cssClass) + " ", " "))
							);
						});
					}
				}

				function jqLiteAddClass(element, cssClasses) {
					if (cssClasses && element.setAttribute) {
						var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
							.replace(/[\n\t]/g, " ");

						forEach(cssClasses.split(' '), function (cssClass) {
							cssClass = trim(cssClass);
							if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
								existingClasses += cssClass + ' ';
							}
						});

						element.setAttribute('class', trim(existingClasses));
					}
				}


				function jqLiteAddNodes(root, elements) {
					// THIS CODE IS VERY HOT. Don't make changes without benchmarking.

					if (elements) {

						// if a Node (the most common case)
						if (elements.nodeType) {
							root[root.length++] = elements;
						} else {
							var length = elements.length;

							// if an Array or NodeList and not a Window
							if (typeof length === 'number' && elements.window !== elements) {
								if (length) {
									for (var i = 0; i < length; i++) {
										root[root.length++] = elements[i];
									}
								}
							} else {
								root[root.length++] = elements;
							}
						}
					}
				}


				function jqLiteController(element, name) {
					return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
				}

				function jqLiteInheritedData(element, name, value) {
					// if element is the document object work with the html element instead
					// this makes $(document).scope() possible
					if (element.nodeType == NODE_TYPE_DOCUMENT) {
						element = element.documentElement;
					}
					var names = isArray(name) ? name : [name];

					while (element) {
						for (var i = 0, ii = names.length; i < ii; i++) {
							if ((value = jqLite.data(element, names[i])) !== undefined) return value;
						}

						// If dealing with a document fragment node with a host element, and no parent, use the host
						// element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
						// to lookup parent controllers.
						element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
					}
				}

				function jqLiteEmpty(element) {
					jqLiteDealoc(element, true);
					while (element.firstChild) {
						element.removeChild(element.firstChild);
					}
				}

				function jqLiteRemove(element, keepData) {
					if (!keepData) jqLiteDealoc(element);
					var parent = element.parentNode;
					if (parent) parent.removeChild(element);
				}


				function jqLiteDocumentLoaded(action, win) {
					win = win || window;
					if (win.document.readyState === 'complete') {
						// Force the action to be run async for consistent behaviour
						// from the action's point of view
						// i.e. it will definitely not be in a $apply
						win.setTimeout(action);
					} else {
						// No need to unbind this handler as load is only ever called once
						jqLite(win).on('load', action);
					}
				}

				//////////////////////////////////////////
				// Functions which are declared directly.
				//////////////////////////////////////////
				var JQLitePrototype = JQLite.prototype = {
					ready: function (fn) {
						var fired = false;

						function trigger() {
							if (fired) return;
							fired = true;
							fn();
						}

						// check if document is already loaded
						if (document.readyState === 'complete') {
							setTimeout(trigger);
						} else {
							this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
							// we can not use jqLite since we are not done loading and jQuery could be loaded later.
							// jshint -W064
							JQLite(window).on('load', trigger); // fallback to window.onload for others
							// jshint +W064
						}
					},
					toString: function () {
						var value = [];
						forEach(this, function (e) {
							value.push('' + e);
						});
						return '[' + value.join(', ') + ']';
					},

					eq: function (index) {
						return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
					},

					length: 0,
					push: push,
					sort: [].sort,
					splice: [].splice
				};

				//////////////////////////////////////////
				// Functions iterating getter/setters.
				// these functions return self on setter and
				// value on get.
				//////////////////////////////////////////
				var BOOLEAN_ATTR = {};
				forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function (value) {
					BOOLEAN_ATTR[lowercase(value)] = value;
				});
				var BOOLEAN_ELEMENTS = {};
				forEach('input,select,option,textarea,button,form,details'.split(','), function (value) {
					BOOLEAN_ELEMENTS[value] = true;
				});
				var ALIASED_ATTR = {
					'ngMinlength': 'minlength',
					'ngMaxlength': 'maxlength',
					'ngMin': 'min',
					'ngMax': 'max',
					'ngPattern': 'pattern'
				};

				function getBooleanAttrName(element, name) {
					// check dom last since we will most likely fail on name
					var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

					// booleanAttr is here twice to minimize DOM access
					return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
				}

				function getAliasedAttrName(element, name) {
					var nodeName = element.nodeName;
					return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];
				}

				forEach({
					data: jqLiteData,
					removeData: jqLiteRemoveData,
					hasData: jqLiteHasData
				}, function (fn, name) {
					JQLite[name] = fn;
				});

				forEach({
					data: jqLiteData,
					inheritedData: jqLiteInheritedData,

					scope: function (element) {
						// Can't use jqLiteData here directly so we stay compatible with jQuery!
						return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
					},

					isolateScope: function (element) {
						// Can't use jqLiteData here directly so we stay compatible with jQuery!
						return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
					},

					controller: jqLiteController,

					injector: function (element) {
						return jqLiteInheritedData(element, '$injector');
					},

					removeAttr: function (element, name) {
						element.removeAttribute(name);
					},

					hasClass: jqLiteHasClass,

					css: function (element, name, value) {
						name = camelCase(name);

						if (isDefined(value)) {
							element.style[name] = value;
						} else {
							return element.style[name];
						}
					},

					attr: function (element, name, value) {
						var nodeType = element.nodeType;
						if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
							return;
						}
						var lowercasedName = lowercase(name);
						if (BOOLEAN_ATTR[lowercasedName]) {
							if (isDefined(value)) {
								if (!!value) {
									element[name] = true;
									element.setAttribute(name, lowercasedName);
								} else {
									element[name] = false;
									element.removeAttribute(lowercasedName);
								}
							} else {
								return (element[name] ||
								(element.attributes.getNamedItem(name) || noop).specified)
									? lowercasedName
									: undefined;
							}
						} else if (isDefined(value)) {
							element.setAttribute(name, value);
						} else if (element.getAttribute) {
							// the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
							// some elements (e.g. Document) don't have get attribute, so return undefined
							var ret = element.getAttribute(name, 2);
							// normalize non-existing attributes to undefined (as jQuery)
							return ret === null ? undefined : ret;
						}
					},

					prop: function (element, name, value) {
						if (isDefined(value)) {
							element[name] = value;
						} else {
							return element[name];
						}
					},

					text: (function () {
						getText.$dv = '';
						return getText;

						function getText(element, value) {
							if (isUndefined(value)) {
								var nodeType = element.nodeType;
								return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
							}
							element.textContent = value;
						}
					})(),

					val: function (element, value) {
						if (isUndefined(value)) {
							if (element.multiple && nodeName_(element) === 'select') {
								var result = [];
								forEach(element.options, function (option) {
									if (option.selected) {
										result.push(option.value || option.text);
									}
								});
								return result.length === 0 ? null : result;
							}
							return element.value;
						}
						element.value = value;
					},

					html: function (element, value) {
						if (isUndefined(value)) {
							return element.innerHTML;
						}
						jqLiteDealoc(element, true);
						element.innerHTML = value;
					},

					empty: jqLiteEmpty
				}, function (fn, name) {
					/**
					 * Properties: writes return selection, reads return first value
					 */
					JQLite.prototype[name] = function (arg1, arg2) {
						var i, key;
						var nodeCount = this.length;

						// jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
						// in a way that survives minification.
						// jqLiteEmpty takes no arguments but is a setter.
						if (fn !== jqLiteEmpty &&
							(((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {
							if (isObject(arg1)) {

								// we are a write, but the object properties are the key/values
								for (i = 0; i < nodeCount; i++) {
									if (fn === jqLiteData) {
										// data() takes the whole object in jQuery
										fn(this[i], arg1);
									} else {
										for (key in arg1) {
											fn(this[i], key, arg1[key]);
										}
									}
								}
								// return self for chaining
								return this;
							} else {
								// we are a read, so read the first child.
								// TODO: do we still need this?
								var value = fn.$dv;
								// Only if we have $dv do we iterate over all, otherwise it is just the first element.
								var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;
								for (var j = 0; j < jj; j++) {
									var nodeValue = fn(this[j], arg1, arg2);
									value = value ? value + nodeValue : nodeValue;
								}
								return value;
							}
						} else {
							// we are a write, so apply to all children
							for (i = 0; i < nodeCount; i++) {
								fn(this[i], arg1, arg2);
							}
							// return self for chaining
							return this;
						}
					};
				});

				function createEventHandler(element, events) {
					var eventHandler = function (event, type) {
						// jQuery specific api
						event.isDefaultPrevented = function () {
							return event.defaultPrevented;
						};

						var eventFns = events[type || event.type];
						var eventFnsLength = eventFns ? eventFns.length : 0;

						if (!eventFnsLength) return;

						if (isUndefined(event.immediatePropagationStopped)) {
							var originalStopImmediatePropagation = event.stopImmediatePropagation;
							event.stopImmediatePropagation = function () {
								event.immediatePropagationStopped = true;

								if (event.stopPropagation) {
									event.stopPropagation();
								}

								if (originalStopImmediatePropagation) {
									originalStopImmediatePropagation.call(event);
								}
							};
						}

						event.isImmediatePropagationStopped = function () {
							return event.immediatePropagationStopped === true;
						};

						// Copy event handlers in case event handlers array is modified during execution.
						if ((eventFnsLength > 1)) {
							eventFns = shallowCopy(eventFns);
						}

						for (var i = 0; i < eventFnsLength; i++) {
							if (!event.isImmediatePropagationStopped()) {
								eventFns[i].call(element, event);
							}
						}
					};

					// TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
					//       events on `element`
					eventHandler.elem = element;
					return eventHandler;
				}

				//////////////////////////////////////////
				// Functions iterating traversal.
				// These functions chain results into a single
				// selector.
				//////////////////////////////////////////
				forEach({
					removeData: jqLiteRemoveData,

					on: function jqLiteOn(element, type, fn, unsupported) {
						if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

						// Do not add event handlers to non-elements because they will not be cleaned up.
						if (!jqLiteAcceptsData(element)) {
							return;
						}

						var expandoStore = jqLiteExpandoStore(element, true);
						var events = expandoStore.events;
						var handle = expandoStore.handle;

						if (!handle) {
							handle = expandoStore.handle = createEventHandler(element, events);
						}

						// http://jsperf.com/string-indexof-vs-split
						var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
						var i = types.length;

						while (i--) {
							type = types[i];
							var eventFns = events[type];

							if (!eventFns) {
								events[type] = [];

								if (type === 'mouseenter' || type === 'mouseleave') {
									// Refer to jQuery's implementation of mouseenter & mouseleave
									// Read about mouseenter and mouseleave:
									// http://www.quirksmode.org/js/events_mouse.html#link8

									jqLiteOn(element, MOUSE_EVENT_MAP[type], function (event) {
										var target = this, related = event.relatedTarget;
										// For mousenter/leave call the handler if related is outside the target.
										// NB: No relatedTarget if the mouse left/entered the browser window
										if (!related || (related !== target && !target.contains(related))) {
											handle(event, type);
										}
									});

								} else {
									if (type !== '$destroy') {
										addEventListenerFn(element, type, handle);
									}
								}
								eventFns = events[type];
							}
							eventFns.push(fn);
						}
					},

					off: jqLiteOff,

					one: function (element, type, fn) {
						element = jqLite(element);

						//add the listener twice so that when it is called
						//you can remove the original function and still be
						//able to call element.off(ev, fn) normally
						element.on(type, function onFn() {
							element.off(type, fn);
							element.off(type, onFn);
						});
						element.on(type, fn);
					},

					replaceWith: function (element, replaceNode) {
						var index, parent = element.parentNode;
						jqLiteDealoc(element);
						forEach(new JQLite(replaceNode), function (node) {
							if (index) {
								parent.insertBefore(node, index.nextSibling);
							} else {
								parent.replaceChild(node, element);
							}
							index = node;
						});
					},

					children: function (element) {
						var children = [];
						forEach(element.childNodes, function (element) {
							if (element.nodeType === NODE_TYPE_ELEMENT) {
								children.push(element);
							}
						});
						return children;
					},

					contents: function (element) {
						return element.contentDocument || element.childNodes || [];
					},

					append: function (element, node) {
						var nodeType = element.nodeType;
						if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

						node = new JQLite(node);

						for (var i = 0, ii = node.length; i < ii; i++) {
							var child = node[i];
							element.appendChild(child);
						}
					},

					prepend: function (element, node) {
						if (element.nodeType === NODE_TYPE_ELEMENT) {
							var index = element.firstChild;
							forEach(new JQLite(node), function (child) {
								element.insertBefore(child, index);
							});
						}
					},

					wrap: function (element, wrapNode) {
						wrapNode = jqLite(wrapNode).eq(0).clone()[0];
						var parent = element.parentNode;
						if (parent) {
							parent.replaceChild(wrapNode, element);
						}
						wrapNode.appendChild(element);
					},

					remove: jqLiteRemove,

					detach: function (element) {
						jqLiteRemove(element, true);
					},

					after: function (element, newElement) {
						var index = element, parent = element.parentNode;
						newElement = new JQLite(newElement);

						for (var i = 0, ii = newElement.length; i < ii; i++) {
							var node = newElement[i];
							parent.insertBefore(node, index.nextSibling);
							index = node;
						}
					},

					addClass: jqLiteAddClass,
					removeClass: jqLiteRemoveClass,

					toggleClass: function (element, selector, condition) {
						if (selector) {
							forEach(selector.split(' '), function (className) {
								var classCondition = condition;
								if (isUndefined(classCondition)) {
									classCondition = !jqLiteHasClass(element, className);
								}
								(classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
							});
						}
					},

					parent: function (element) {
						var parent = element.parentNode;
						return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
					},

					next: function (element) {
						return element.nextElementSibling;
					},

					find: function (element, selector) {
						if (element.getElementsByTagName) {
							return element.getElementsByTagName(selector);
						} else {
							return [];
						}
					},

					clone: jqLiteClone,

					triggerHandler: function (element, event, extraParameters) {

						var dummyEvent, eventFnsCopy, handlerArgs;
						var eventName = event.type || event;
						var expandoStore = jqLiteExpandoStore(element);
						var events = expandoStore && expandoStore.events;
						var eventFns = events && events[eventName];

						if (eventFns) {
							// Create a dummy event to pass to the handlers
							dummyEvent = {
								preventDefault: function () {
									this.defaultPrevented = true;
								},
								isDefaultPrevented: function () {
									return this.defaultPrevented === true;
								},
								stopImmediatePropagation: function () {
									this.immediatePropagationStopped = true;
								},
								isImmediatePropagationStopped: function () {
									return this.immediatePropagationStopped === true;
								},
								stopPropagation: noop,
								type: eventName,
								target: element
							};

							// If a custom event was provided then extend our dummy event with it
							if (event.type) {
								dummyEvent = extend(dummyEvent, event);
							}

							// Copy event handlers in case event handlers array is modified during execution.
							eventFnsCopy = shallowCopy(eventFns);
							handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

							forEach(eventFnsCopy, function (fn) {
								if (!dummyEvent.isImmediatePropagationStopped()) {
									fn.apply(element, handlerArgs);
								}
							});
						}
					}
				}, function (fn, name) {
					/**
					 * chaining functions
					 */
					JQLite.prototype[name] = function (arg1, arg2, arg3) {
						var value;

						for (var i = 0, ii = this.length; i < ii; i++) {
							if (isUndefined(value)) {
								value = fn(this[i], arg1, arg2, arg3);
								if (isDefined(value)) {
									// any function which returns a value needs to be wrapped
									value = jqLite(value);
								}
							} else {
								jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
							}
						}
						return isDefined(value) ? value : this;
					};

					// bind legacy bind/unbind to on/off
					JQLite.prototype.bind = JQLite.prototype.on;
					JQLite.prototype.unbind = JQLite.prototype.off;
				});


				// Provider for private $$jqLite service
				function $$jqLiteProvider() {
					this.$get = function $$jqLite() {
						return extend(JQLite, {
							hasClass: function (node, classes) {
								if (node.attr) node = node[0];
								return jqLiteHasClass(node, classes);
							},
							addClass: function (node, classes) {
								if (node.attr) node = node[0];
								return jqLiteAddClass(node, classes);
							},
							removeClass: function (node, classes) {
								if (node.attr) node = node[0];
								return jqLiteRemoveClass(node, classes);
							}
						});
					};
				}

				/**
				 * Computes a hash of an 'obj'.
				 * Hash of a:
				 *  string is string
				 *  number is number as string
				 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
				 *         that is also assigned to the $$hashKey property of the object.
				 *
				 * @param obj
				 * @returns {string} hash string such that the same input will have the same hash string.
				 *         The resulting string key is in 'type:hashKey' format.
				 */
				function hashKey(obj, nextUidFn) {
					var key = obj && obj.$$hashKey;

					if (key) {
						if (typeof key === 'function') {
							key = obj.$$hashKey();
						}
						return key;
					}

					var objType = typeof obj;
					if (objType == 'function' || (objType == 'object' && obj !== null)) {
						key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
					} else {
						key = objType + ':' + obj;
					}

					return key;
				}

				/**
				 * HashMap which can use objects as keys
				 */
				function HashMap(array, isolatedUid) {
					if (isolatedUid) {
						var uid = 0;
						this.nextUid = function () {
							return ++uid;
						};
					}
					forEach(array, this.put, this);
				}

				HashMap.prototype = {
					/**
					 * Store key value pair
					 * @param key key to store can be any type
					 * @param value value to store can be any type
					 */
					put: function (key, value) {
						this[hashKey(key, this.nextUid)] = value;
					},

					/**
					 * @param key
					 * @returns {Object} the value for the key
					 */
					get: function (key) {
						return this[hashKey(key, this.nextUid)];
					},

					/**
					 * Remove the key/value pair
					 * @param key
					 */
					remove: function (key) {
						var value = this[key = hashKey(key, this.nextUid)];
						delete this[key];
						return value;
					}
				};

				var $$HashMapProvider = [function () {
					this.$get = [function () {
						return HashMap;
					}];
				}];

				/**
				 * @ngdoc function
				 * @module ng
				 * @name angular.injector
				 * @kind function
				 *
				 * @description
				 * Creates an injector object that can be used for retrieving services as well as for
				 * dependency injection (see {@link guide/di dependency injection}).
				 *
				 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
				 *     {@link angular.module}. The `ng` module must be explicitly added.
				 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
				 *     disallows argument name annotation inference.
				 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
				 *
				 * @example
				 * Typical usage
				 * ```js
				 *   // create an injector
				 *   var $injector = angular.injector(['ng']);
				 *
				 *   // use the injector to kick off your application
				 *   // use the type inference to auto inject arguments, or use implicit injection
				 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
				 * ```
				 *
				 * Sometimes you want to get access to the injector of a currently running Angular app
				 * from outside Angular. Perhaps, you want to inject and compile some markup after the
				 * application has been bootstrapped. You can do this using the extra `injector()` added
				 * to JQuery/jqLite elements. See {@link angular.element}.
				 *
				 * *This is fairly rare but could be the case if a third party library is injecting the
				 * markup.*
				 *
				 * In the following example a new block of HTML containing a `ng-controller`
				 * directive is added to the end of the document body by JQuery. We then compile and link
				 * it into the current AngularJS scope.
				 *
				 * ```js
				 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
				 * $(document.body).append($div);
				 *
				 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
				 * ```
				 */


				/**
				 * @ngdoc module
				 * @name auto
				 * @description
				 *
				 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
				 */

				var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
				var FN_ARG_SPLIT = /,/;
				var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
				var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
				var $injectorMinErr = minErr('$injector');

				function anonFn(fn) {
					// For anonymous functions, showing at the very least the function signature can help in
					// debugging.
					var fnText = fn.toString().replace(STRIP_COMMENTS, ''),
						args = fnText.match(FN_ARGS);
					if (args) {
						return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
					}
					return 'fn';
				}

				function annotate(fn, strictDi, name) {
					var $inject,
						fnText,
						argDecl,
						last;

					if (typeof fn === 'function') {
						if (!($inject = fn.$inject)) {
							$inject = [];
							if (fn.length) {
								if (strictDi) {
									if (!isString(name) || !name) {
										name = fn.name || anonFn(fn);
									}
									throw $injectorMinErr('strictdi',
										'{0} is not using explicit annotation and cannot be invoked in strict mode', name);
								}
								fnText = fn.toString().replace(STRIP_COMMENTS, '');
								argDecl = fnText.match(FN_ARGS);
								forEach(argDecl[1].split(FN_ARG_SPLIT), function (arg) {
									arg.replace(FN_ARG, function (all, underscore, name) {
										$inject.push(name);
									});
								});
							}
							fn.$inject = $inject;
						}
					} else if (isArray(fn)) {
						last = fn.length - 1;
						assertArgFn(fn[last], 'fn');
						$inject = fn.slice(0, last);
					} else {
						assertArgFn(fn, 'fn', true);
					}
					return $inject;
				}

				///////////////////////////////////////

				/**
				 * @ngdoc service
				 * @name $injector
				 *
				 * @description
				 *
				 * `$injector` is used to retrieve object instances as defined by
				 * {@link auto.$provide provider}, instantiate types, invoke methods,
				 * and load modules.
				 *
				 * The following always holds true:
				 *
				 * ```js
				 *   var $injector = angular.injector();
				 *   expect($injector.get('$injector')).toBe($injector);
				 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
				 * ```
				 *
				 * # Injection Function Annotation
				 *
				 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
				 * following are all valid ways of annotating function with injection arguments and are equivalent.
				 *
				 * ```js
				 *   // inferred (only works if code not minified/obfuscated)
				 *   $injector.invoke(function(serviceA){});
				 *
				 *   // annotated
				 *   function explicit(serviceA) {};
				 *   explicit.$inject = ['serviceA'];
				 *   $injector.invoke(explicit);
				 *
				 *   // inline
				 *   $injector.invoke(['serviceA', function(serviceA){}]);
				 * ```
				 *
				 * ## Inference
				 *
				 * In JavaScript calling `toString()` on a function returns the function definition. The definition
				 * can then be parsed and the function arguments can be extracted. This method of discovering
				 * annotations is disallowed when the injector is in strict mode.
				 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
				 * argument names.
				 *
				 * ## `$inject` Annotation
				 * By adding an `$inject` property onto a function the injection parameters can be specified.
				 *
				 * ## Inline
				 * As an array of injection names, where the last item in the array is the function to call.
				 */

				/**
				 * @ngdoc method
				 * @name $injector#get
				 *
				 * @description
				 * Return an instance of the service.
				 *
				 * @param {string} name The name of the instance to retrieve.
				 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
				 * @return {*} The instance.
				 */

				/**
				 * @ngdoc method
				 * @name $injector#invoke
				 *
				 * @description
				 * Invoke the method and supply the method arguments from the `$injector`.
				 *
				 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
				 *   injected according to the {@link guide/di $inject Annotation} rules.
				 * @param {Object=} self The `this` for the invoked method.
				 * @param {Object=} locals Optional object. If preset then any argument names are read from this
				 *                         object first, before the `$injector` is consulted.
				 * @returns {*} the value returned by the invoked `fn` function.
				 */

				/**
				 * @ngdoc method
				 * @name $injector#has
				 *
				 * @description
				 * Allows the user to query if the particular service exists.
				 *
				 * @param {string} name Name of the service to query.
				 * @returns {boolean} `true` if injector has given service.
				 */

				/**
				 * @ngdoc method
				 * @name $injector#instantiate
				 * @description
				 * Create a new instance of JS type. The method takes a constructor function, invokes the new
				 * operator, and supplies all of the arguments to the constructor function as specified by the
				 * constructor annotation.
				 *
				 * @param {Function} Type Annotated constructor function.
				 * @param {Object=} locals Optional object. If preset then any argument names are read from this
				 * object first, before the `$injector` is consulted.
				 * @returns {Object} new instance of `Type`.
				 */

				/**
				 * @ngdoc method
				 * @name $injector#annotate
				 *
				 * @description
				 * Returns an array of service names which the function is requesting for injection. This API is
				 * used by the injector to determine which services need to be injected into the function when the
				 * function is invoked. There are three ways in which the function can be annotated with the needed
				 * dependencies.
				 *
				 * # Argument names
				 *
				 * The simplest form is to extract the dependencies from the arguments of the function. This is done
				 * by converting the function into a string using `toString()` method and extracting the argument
				 * names.
				 * ```js
				 *   // Given
				 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
				 *
				 *   // Then
				 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
				 * ```
				 *
				 * You can disallow this method by using strict injection mode.
				 *
				 * This method does not work with code minification / obfuscation. For this reason the following
				 * annotation strategies are supported.
				 *
				 * # The `$inject` property
				 *
				 * If a function has an `$inject` property and its value is an array of strings, then the strings
				 * represent names of services to be injected into the function.
				 * ```js
				 *   // Given
				 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
				 *   // Define function dependencies
				 *   MyController['$inject'] = ['$scope', '$route'];
				 *
				 *   // Then
				 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
				 * ```
				 *
				 * # The array notation
				 *
				 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
				 * is very inconvenient. In these situations using the array notation to specify the dependencies in
				 * a way that survives minification is a better choice:
				 *
				 * ```js
				 *   // We wish to write this (not minification / obfuscation safe)
				 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
				 *
				 *   // We are forced to write break inlining
				 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
				 *   tmpFn.$inject = ['$compile', '$rootScope'];
				 *   injector.invoke(tmpFn);
				 *
				 *   // To better support inline function the inline annotation is supported
				 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
				 *
				 *   // Therefore
				 *   expect(injector.annotate(
				 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
				 *    ).toEqual(['$compile', '$rootScope']);
				 * ```
				 *
				 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
				 * be retrieved as described above.
				 *
				 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
				 *
				 * @returns {Array.<string>} The names of the services which the function requires.
				 */


				/**
				 * @ngdoc service
				 * @name $provide
				 *
				 * @description
				 *
				 * The {@link auto.$provide $provide} service has a number of methods for registering components
				 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
				 * {@link angular.Module}.
				 *
				 * An Angular **service** is a singleton object created by a **service factory**.  These **service
				 * factories** are functions which, in turn, are created by a **service provider**.
				 * The **service providers** are constructor functions. When instantiated they must contain a
				 * property called `$get`, which holds the **service factory** function.
				 *
				 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
				 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
				 * function to get the instance of the **service**.
				 *
				 * Often services have no configuration options and there is no need to add methods to the service
				 * provider.  The provider will be no more than a constructor function with a `$get` property. For
				 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
				 * services without specifying a provider.
				 *
				 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
				 *     {@link auto.$injector $injector}
				 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
				 *     providers and services.
				 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
				 *     services, not providers.
				 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
				 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
				 *     given factory function.
				 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
				 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
				 *      a new object using the given constructor function.
				 *
				 * See the individual methods for more information and examples.
				 */

				/**
				 * @ngdoc method
				 * @name $provide#provider
				 * @description
				 *
				 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
				 * are constructor functions, whose instances are responsible for "providing" a factory for a
				 * service.
				 *
				 * Service provider names start with the name of the service they provide followed by `Provider`.
				 * For example, the {@link ng.$log $log} service has a provider called
				 * {@link ng.$logProvider $logProvider}.
				 *
				 * Service provider objects can have additional methods which allow configuration of the provider
				 * and its service. Importantly, you can configure what kind of service is created by the `$get`
				 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
				 * method {@link ng.$logProvider#debugEnabled debugEnabled}
				 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
				 * console or not.
				 *
				 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
				 'Provider'` key.
				 * @param {(Object|function())} provider If the provider is:
				 *
				 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
				 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
				 *   - `Constructor`: a new instance of the provider will be created using
				 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
				 *
				 * @returns {Object} registered provider instance

				 * @example
				 *
				 * The following example shows how to create a simple event tracking service and register it using
				 * {@link auto.$provide#provider $provide.provider()}.
				 *
				 * ```js
				 *  // Define the eventTracker provider
				 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
				 *
				 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
				 * ```
				 */

				/**
				 * @ngdoc method
				 * @name $provide#factory
				 * @description
				 *
				 * Register a **service factory**, which will be called to return the service instance.
				 * This is short for registering a service where its provider consists of only a `$get` property,
				 * which is the given service factory function.
				 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
				 * configure your service in a provider.
				 *
				 * @param {string} name The name of the instance.
				 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
				 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
				 * @returns {Object} registered provider instance
				 *
				 * @example
				 * Here is an example of registering a service
				 * ```js
				 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
				 * ```
				 * You would then inject and use this service like this:
				 * ```js
				 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
				 * ```
				 */


				/**
				 * @ngdoc method
				 * @name $provide#service
				 * @description
				 *
				 * Register a **service constructor**, which will be invoked with `new` to create the service
				 * instance.
				 * This is short for registering a service where its provider's `$get` property is the service
				 * constructor function that will be used to instantiate the service instance.
				 *
				 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
				 * as a type/class.
				 *
				 * @param {string} name The name of the instance.
				 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
				 *     that will be instantiated.
				 * @returns {Object} registered provider instance
				 *
				 * @example
				 * Here is an example of registering a service using
				 * {@link auto.$provide#service $provide.service(class)}.
				 * ```js
				 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
				 *
				 *   Ping.$inject = ['$http'];
				 *
				 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
				 *   $provide.service('ping', Ping);
				 * ```
				 * You would then inject and use this service like this:
				 * ```js
				 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
				 * ```
				 */


				/**
				 * @ngdoc method
				 * @name $provide#value
				 * @description
				 *
				 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
				 * number, an array, an object or a function.  This is short for registering a service where its
				 * provider's `$get` property is a factory function that takes no arguments and returns the **value
				 * service**.
				 *
				 * Value services are similar to constant services, except that they cannot be injected into a
				 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
				 * an Angular
				 * {@link auto.$provide#decorator decorator}.
				 *
				 * @param {string} name The name of the instance.
				 * @param {*} value The value.
				 * @returns {Object} registered provider instance
				 *
				 * @example
				 * Here are some examples of creating value services.
				 * ```js
				 *   $provide.value('ADMIN_USER', 'admin');
				 *
				 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
				 *
				 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
				 * ```
				 */


				/**
				 * @ngdoc method
				 * @name $provide#constant
				 * @description
				 *
				 * Register a **constant service**, such as a string, a number, an array, an object or a function,
				 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
				 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
				 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
				 *
				 * @param {string} name The name of the constant.
				 * @param {*} value The constant value.
				 * @returns {Object} registered instance
				 *
				 * @example
				 * Here a some examples of creating constants:
				 * ```js
				 *   $provide.constant('SHARD_HEIGHT', 306);
				 *
				 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
				 *
				 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
				 * ```
				 */


				/**
				 * @ngdoc method
				 * @name $provide#decorator
				 * @description
				 *
				 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
				 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
				 * service. The object returned by the decorator may be the original service, or a new service
				 * object which replaces or wraps and delegates to the original service.
				 *
				 * @param {string} name The name of the service to decorate.
				 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
				 *    instantiated and should return the decorated service instance. The function is called using
				 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
				 *    Local injection arguments:
				 *
				 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
				 *      decorated or delegated to.
				 *
				 * @example
				 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
				 * calls to {@link ng.$log#error $log.warn()}.
				 * ```js
				 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
				 * ```
				 */


				function createInjector(modulesToLoad, strictDi) {
					strictDi = (strictDi === true);
					var INSTANTIATING = {},
						providerSuffix = 'Provider',
						path = [],
						loadedModules = new HashMap([], true),
						providerCache = {
							$provide: {
								provider: supportObject(provider),
								factory: supportObject(factory),
								service: supportObject(service),
								value: supportObject(value),
								constant: supportObject(constant),
								decorator: decorator
							}
						},
						providerInjector = (providerCache.$injector =
							createInternalInjector(providerCache, function (serviceName, caller) {
								if (angular.isString(caller)) {
									path.push(caller);
								}
								throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
							})),
						instanceCache = {},
						instanceInjector = (instanceCache.$injector =
							createInternalInjector(instanceCache, function (serviceName, caller) {
								var provider = providerInjector.get(serviceName + providerSuffix, caller);
								return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
							}));


					forEach(loadModules(modulesToLoad), function (fn) {
						if (fn) instanceInjector.invoke(fn);
					});

					return instanceInjector;

					////////////////////////////////////
					// $provider
					////////////////////////////////////

					function supportObject(delegate) {
						return function (key, value) {
							if (isObject(key)) {
								forEach(key, reverseParams(delegate));
							} else {
								return delegate(key, value);
							}
						};
					}

					function provider(name, provider_) {
						assertNotHasOwnProperty(name, 'service');
						if (isFunction(provider_) || isArray(provider_)) {
							provider_ = providerInjector.instantiate(provider_);
						}
						if (!provider_.$get) {
							throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
						}
						return providerCache[name + providerSuffix] = provider_;
					}

					function enforceReturnValue(name, factory) {
						return function enforcedReturnValue() {
							var result = instanceInjector.invoke(factory, this);
							if (isUndefined(result)) {
								throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
							}
							return result;
						};
					}

					function factory(name, factoryFn, enforce) {
						return provider(name, {
							$get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
						});
					}

					function service(name, constructor) {
						return factory(name, ['$injector', function ($injector) {
							return $injector.instantiate(constructor);
						}]);
					}

					function value(name, val) {
						return factory(name, valueFn(val), false);
					}

					function constant(name, value) {
						assertNotHasOwnProperty(name, 'constant');
						providerCache[name] = value;
						instanceCache[name] = value;
					}

					function decorator(serviceName, decorFn) {
						var origProvider = providerInjector.get(serviceName + providerSuffix),
							orig$get = origProvider.$get;

						origProvider.$get = function () {
							var origInstance = instanceInjector.invoke(orig$get, origProvider);
							return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
						};
					}

					////////////////////////////////////
					// Module Loading
					////////////////////////////////////
					function loadModules(modulesToLoad) {
						var runBlocks = [], moduleFn;
						forEach(modulesToLoad, function (module) {
							if (loadedModules.get(module)) return;
							loadedModules.put(module, true);

							function runInvokeQueue(queue) {
								var i, ii;
								for (i = 0, ii = queue.length; i < ii; i++) {
									var invokeArgs = queue[i],
										provider = providerInjector.get(invokeArgs[0]);

									provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
								}
							}

							try {
								if (isString(module)) {
									moduleFn = angularModule(module);
									runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
									runInvokeQueue(moduleFn._invokeQueue);
									runInvokeQueue(moduleFn._configBlocks);
								} else if (isFunction(module)) {
									runBlocks.push(providerInjector.invoke(module));
								} else if (isArray(module)) {
									runBlocks.push(providerInjector.invoke(module));
								} else {
									assertArgFn(module, 'module');
								}
							} catch (e) {
								if (isArray(module)) {
									module = module[module.length - 1];
								}
								if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
									// Safari & FF's stack traces don't contain error.message content
									// unlike those of Chrome and IE
									// So if stack doesn't contain message, we create a new string that contains both.
									// Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
									/* jshint -W022 */
									e = e.message + '\n' + e.stack;
								}
								throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
									module, e.stack || e.message || e);
							}
						});
						return runBlocks;
					}

					////////////////////////////////////
					// internal Injector
					////////////////////////////////////

					function createInternalInjector(cache, factory) {

						function getService(serviceName, caller) {
							if (cache.hasOwnProperty(serviceName)) {
								if (cache[serviceName] === INSTANTIATING) {
									throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
										serviceName + ' <- ' + path.join(' <- '));
								}
								return cache[serviceName];
							} else {
								try {
									path.unshift(serviceName);
									cache[serviceName] = INSTANTIATING;
									return cache[serviceName] = factory(serviceName, caller);
								} catch (err) {
									if (cache[serviceName] === INSTANTIATING) {
										delete cache[serviceName];
									}
									throw err;
								} finally {
									path.shift();
								}
							}
						}

						function invoke(fn, self, locals, serviceName) {
							if (typeof locals === 'string') {
								serviceName = locals;
								locals = null;
							}

							var args = [],
								$inject = createInjector.$$annotate(fn, strictDi, serviceName),
								length, i,
								key;

							for (i = 0, length = $inject.length; i < length; i++) {
								key = $inject[i];
								if (typeof key !== 'string') {
									throw $injectorMinErr('itkn',
										'Incorrect injection token! Expected service name as string, got {0}', key);
								}
								args.push(
									locals && locals.hasOwnProperty(key)
										? locals[key]
										: getService(key, serviceName)
								);
							}
							if (isArray(fn)) {
								fn = fn[length];
							}

							// http://jsperf.com/angularjs-invoke-apply-vs-switch
							// #5388
							return fn.apply(self, args);
						}

						function instantiate(Type, locals, serviceName) {
							// Check if Type is annotated and use just the given function at n-1 as parameter
							// e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
							// Object creation: http://jsperf.com/create-constructor/2
							var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);
							var returnedValue = invoke(Type, instance, locals, serviceName);

							return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
						}

						return {
							invoke: invoke,
							instantiate: instantiate,
							get: getService,
							annotate: createInjector.$$annotate,
							has: function (name) {
								return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
							}
						};
					}
				}

				createInjector.$$annotate = annotate;

				/**
				 * @ngdoc provider
				 * @name $anchorScrollProvider
				 *
				 * @description
				 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
				 * {@link ng.$location#hash $location.hash()} changes.
				 */
				function $AnchorScrollProvider() {

					var autoScrollingEnabled = true;

					/**
					 * @ngdoc method
					 * @name $anchorScrollProvider#disableAutoScrolling
					 *
					 * @description
					 * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
					 * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
					 * Use this method to disable automatic scrolling.
					 *
					 * If automatic scrolling is disabled, one must explicitly call
					 * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
					 * current hash.
					 */
					this.disableAutoScrolling = function () {
						autoScrollingEnabled = false;
					};

					/**
					 * @ngdoc service
					 * @name $anchorScroll
					 * @kind function
					 * @requires $window
					 * @requires $location
					 * @requires $rootScope
					 *
					 * @description
					 * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
					 * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
					 * in the
					 * [HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
					 *
					 * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
					 * match any anchor whenever it changes. This can be disabled by calling
					 * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
					 *
					 * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
					 * vertical scroll-offset (either fixed or dynamic).
					 *
					 * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
					 *                       {@link ng.$location#hash $location.hash()} will be used.
					 *
					 * @property {(number|function|jqLite)} yOffset
					 * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
					 * positioned elements at the top of the page, such as navbars, headers etc.
					 *
					 * `yOffset` can be specified in various ways:
					 * - **number**: A fixed number of pixels to be used as offset.<br /><br />
					 * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
					 *   a number representing the offset (in pixels).<br /><br />
					 * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
					 *   the top of the page to the element's bottom will be used as offset.<br />
					 *   **Note**: The element will be taken into account only as long as its `position` is set to
					 *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
					 *   their height and/or positioning according to the viewport's size.
					 *
					 * <br />
					 * <div class="alert alert-warning">
					 * In order for `yOffset` to work properly, scrolling should take place on the document's root and
					 * not some child element.
					 * </div>
					 *
					 * @example
					 <example module="anchorScrollExample">
					 <file name="index.html">
					 <div id="scrollArea" ng-controller="ScrollController">
					 <a ng-click="gotoBottom()">Go to bottom</a>
					 <a id="bottom"></a> You're at the bottom!
					 </div>
					 </file>
					 <file name="script.js">
					 angular.module('anchorScrollExample', [])
					 .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
					 function ($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');
	
	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
					 </file>
					 <file name="style.css">
					 #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }

					 #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
					 </file>
					 </example>
					 *
					 * <hr />
					 * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
					 * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
					 *
					 * @example
					 <example module="anchorScrollOffsetExample">
					 <file name="index.html">
					 <div class="fixed-header" ng-controller="headerCtrl">
					 <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
					 Go to anchor {{x}}
					 </a>
					 </div>
					 <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
					 Anchor {{x}} of 5
					 </div>
					 </file>
					 <file name="script.js">
					 angular.module('anchorScrollOffsetExample', [])
					 .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
					 .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
					 function ($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
					 ]);
					 </file>
					 <file name="style.css">
					 body {
	           padding-top: 50px;
	         }

					 .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }

					 .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }

					 .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
					 </file>
					 </example>
					 */
					this.$get = ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {
						var document = $window.document;

						// Helper function to get first anchor from a NodeList
						// (using `Array#some()` instead of `angular#forEach()` since it's more performant
						//  and working in all supported browsers.)
						function getFirstAnchor(list) {
							var result = null;
							Array.prototype.some.call(list, function (element) {
								if (nodeName_(element) === 'a') {
									result = element;
									return true;
								}
							});
							return result;
						}

						function getYOffset() {

							var offset = scroll.yOffset;

							if (isFunction(offset)) {
								offset = offset();
							} else if (isElement(offset)) {
								var elem = offset[0];
								var style = $window.getComputedStyle(elem);
								if (style.position !== 'fixed') {
									offset = 0;
								} else {
									offset = elem.getBoundingClientRect().bottom;
								}
							} else if (!isNumber(offset)) {
								offset = 0;
							}

							return offset;
						}

						function scrollTo(elem) {
							if (elem) {
								elem.scrollIntoView();

								var offset = getYOffset();

								if (offset) {
									// `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
									// This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
									// top of the viewport.
									//
									// IF the number of pixels from the top of `elem` to the end of the page's content is less
									// than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
									// way down the page.
									//
									// This is often the case for elements near the bottom of the page.
									//
									// In such cases we do not need to scroll the whole `offset` up, just the difference between
									// the top of the element and the offset, which is enough to align the top of `elem` at the
									// desired position.
									var elemTop = elem.getBoundingClientRect().top;
									$window.scrollBy(0, elemTop - offset);
								}
							} else {
								$window.scrollTo(0, 0);
							}
						}

						function scroll(hash) {
							hash = isString(hash) ? hash : $location.hash();
							var elm;

							// empty hash, scroll to the top of the page
							if (!hash) scrollTo(null);

							// element with given id
							else if ((elm = document.getElementById(hash))) scrollTo(elm);

							// first anchor with given name :-D
							else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

							// no element and hash == 'top', scroll to the top of the page
							else if (hash === 'top') scrollTo(null);
						}

						// does not scroll when user clicks on anchor link that is currently on
						// (no url change, no $location.hash() change), browser native does scroll
						if (autoScrollingEnabled) {
							$rootScope.$watch(function autoScrollWatch() {
									return $location.hash();
								},
								function autoScrollWatchAction(newVal, oldVal) {
									// skip the initial scroll if $location.hash is empty
									if (newVal === oldVal && newVal === '') return;

									jqLiteDocumentLoaded(function () {
										$rootScope.$evalAsync(scroll);
									});
								});
						}

						return scroll;
					}];
				}

				var $animateMinErr = minErr('$animate');
				var ELEMENT_NODE = 1;
				var NG_ANIMATE_CLASSNAME = 'ng-animate';

				function mergeClasses(a, b) {
					if (!a && !b) return '';
					if (!a) return b;
					if (!b) return a;
					if (isArray(a)) a = a.join(' ');
					if (isArray(b)) b = b.join(' ');
					return a + ' ' + b;
				}

				function extractElementNode(element) {
					for (var i = 0; i < element.length; i++) {
						var elm = element[i];
						if (elm.nodeType === ELEMENT_NODE) {
							return elm;
						}
					}
				}

				function splitClasses(classes) {
					if (isString(classes)) {
						classes = classes.split(' ');
					}

					// Use createMap() to prevent class assumptions involving property names in
					// Object.prototype
					var obj = createMap();
					forEach(classes, function (klass) {
						// sometimes the split leaves empty string values
						// incase extra spaces were applied to the options
						if (klass.length) {
							obj[klass] = true;
						}
					});
					return obj;
				}

				// if any other type of options value besides an Object value is
				// passed into the $animate.method() animation then this helper code
				// will be run which will ignore it. While this patch is not the
				// greatest solution to this, a lot of existing plugins depend on
				// $animate to either call the callback (< 1.2) or return a promise
				// that can be changed. This helper function ensures that the options
				// are wiped clean incase a callback function is provided.
				function prepareAnimateOptions(options) {
					return isObject(options)
						? options
						: {};
				}

				var $$CoreAnimateRunnerProvider = function () {
					this.$get = ['$q', '$$rAF', function ($q, $$rAF) {
						function AnimateRunner() {
						}

						AnimateRunner.all = noop;
						AnimateRunner.chain = noop;
						AnimateRunner.prototype = {
							end: noop,
							cancel: noop,
							resume: noop,
							pause: noop,
							complete: noop,
							then: function (pass, fail) {
								return $q(function (resolve) {
									$$rAF(function () {
										resolve();
									});
								}).then(pass, fail);
							}
						};
						return AnimateRunner;
					}];
				};

				// this is prefixed with Core since it conflicts with
				// the animateQueueProvider defined in ngAnimate/animateQueue.js
				var $$CoreAnimateQueueProvider = function () {
					var postDigestQueue = new HashMap();
					var postDigestElements = [];

					this.$get = ['$$AnimateRunner', '$rootScope',
						function ($$AnimateRunner, $rootScope) {
							return {
								enabled: noop,
								on: noop,
								off: noop,
								pin: noop,

								push: function (element, event, options, domOperation) {
									domOperation && domOperation();

									options = options || {};
									options.from && element.css(options.from);
									options.to && element.css(options.to);

									if (options.addClass || options.removeClass) {
										addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
									}

									return new $$AnimateRunner(); // jshint ignore:line
								}
							};

							function addRemoveClassesPostDigest(element, add, remove) {
								var data = postDigestQueue.get(element);
								var classVal;

								if (!data) {
									postDigestQueue.put(element, data = {});
									postDigestElements.push(element);
								}

								if (add) {
									forEach(add.split(' '), function (className) {
										if (className) {
											data[className] = true;
										}
									});
								}

								if (remove) {
									forEach(remove.split(' '), function (className) {
										if (className) {
											data[className] = false;
										}
									});
								}

								if (postDigestElements.length > 1) return;

								$rootScope.$$postDigest(function () {
									forEach(postDigestElements, function (element) {
										var data = postDigestQueue.get(element);
										if (data) {
											var existing = splitClasses(element.attr('class'));
											var toAdd = '';
											var toRemove = '';
											forEach(data, function (status, className) {
												var hasClass = !!existing[className];
												if (status !== hasClass) {
													if (status) {
														toAdd += (toAdd.length ? ' ' : '') + className;
													} else {
														toRemove += (toRemove.length ? ' ' : '') + className;
													}
												}
											});

											forEach(element, function (elm) {
												toAdd && jqLiteAddClass(elm, toAdd);
												toRemove && jqLiteRemoveClass(elm, toRemove);
											});
											postDigestQueue.remove(element);
										}
									});

									postDigestElements.length = 0;
								});
							}
						}];
				};

				/**
				 * @ngdoc provider
				 * @name $animateProvider
				 *
				 * @description
				 * Default implementation of $animate that doesn't perform any animations, instead just
				 * synchronously performs DOM updates and resolves the returned runner promise.
				 *
				 * In order to enable animations the `ngAnimate` module has to be loaded.
				 *
				 * To see the functional implementation check out `src/ngAnimate/animate.js`.
				 */
				var $AnimateProvider = ['$provide', function ($provide) {
					var provider = this;

					this.$$registeredAnimations = Object.create(null);

					/**
					 * @ngdoc method
					 * @name $animateProvider#register
					 *
					 * @description
					 * Registers a new injectable animation factory function. The factory function produces the
					 * animation object which contains callback functions for each event that is expected to be
					 * animated.
					 *
					 *   * `eventFn`: `function(element, ... , doneFunction, options)`
					 *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
					 *   on the type of animation additional arguments will be injected into the animation function. The
					 *   list below explains the function signatures for the different animation methods:
					 *
					 *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
					 *   - addClass: function(element, addedClasses, doneFunction, options)
					 *   - removeClass: function(element, removedClasses, doneFunction, options)
					 *   - enter, leave, move: function(element, doneFunction, options)
					 *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
					 *
					 *   Make sure to trigger the `doneFunction` once the animation is fully complete.
					 *
					 * ```js
					 *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
					 * ```
					 *
					 * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
					 * @param {Function} factory The factory function that will be executed to return the animation
					 *                           object.
					 */
					this.register = function (name, factory) {
						if (name && name.charAt(0) !== '.') {
							throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
						}

						var key = name + '-animation';
						provider.$$registeredAnimations[name.substr(1)] = key;
						$provide.factory(key, factory);
					};

					/**
					 * @ngdoc method
					 * @name $animateProvider#classNameFilter
					 *
					 * @description
					 * Sets and/or returns the CSS class regular expression that is checked when performing
					 * an animation. Upon bootstrap the classNameFilter value is not set at all and will
					 * therefore enable $animate to attempt to perform an animation on any element that is triggered.
					 * When setting the `classNameFilter` value, animations will only be performed on elements
					 * that successfully match the filter expression. This in turn can boost performance
					 * for low-powered devices as well as applications containing a lot of structural operations.
					 * @param {RegExp=} expression The className expression which will be checked against all animations
					 * @return {RegExp} The current CSS className expression value. If null then there is no expression value
					 */
					this.classNameFilter = function (expression) {
						if (arguments.length === 1) {
							this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
							if (this.$$classNameFilter) {
								var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");
								if (reservedRegex.test(this.$$classNameFilter.toString())) {
									throw $animateMinErr('nongcls', '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);

								}
							}
						}
						return this.$$classNameFilter;
					};

					this.$get = ['$$animateQueue', function ($$animateQueue) {
						function domInsert(element, parentElement, afterElement) {
							// if for some reason the previous element was removed
							// from the dom sometime before this code runs then let's
							// just stick to using the parent element as the anchor
							if (afterElement) {
								var afterNode = extractElementNode(afterElement);
								if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
									afterElement = null;
								}
							}
							afterElement ? afterElement.after(element) : parentElement.prepend(element);
						}

						/**
						 * @ngdoc service
						 * @name $animate
						 * @description The $animate service exposes a series of DOM utility methods that provide support
						 * for animation hooks. The default behavior is the application of DOM operations, however,
						 * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
						 * to ensure that animation runs with the triggered DOM operation.
						 *
						 * By default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't
						 * included and only when it is active then the animation hooks that `$animate` triggers will be
						 * functional. Once active then all structural `ng-` directives will trigger animations as they perform
						 * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
						 * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
						 *
						 * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
						 *
						 * To learn more about enabling animation support, click here to visit the
						 * {@link ngAnimate ngAnimate module page}.
						 */
						return {
							// we don't call it directly since non-existant arguments may
							// be interpreted as null within the sub enabled function

							/**
							 *
							 * @ngdoc method
							 * @name $animate#on
							 * @kind function
							 * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
							 *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
							 *    is fired with the following params:
							 *
							 * ```js
							 * $animate.on('enter', container,
							 *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
							 * );
							 * ```
							 *
							 * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
							 * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
							 *     as well as among its children
							 * @param {Function} callback the callback function that will be fired when the listener is triggered
							 *
							 * The arguments present in the callback function are:
							 * * `element` - The captured DOM element that the animation was fired on.
							 * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
							 */
							on: $$animateQueue.on,

							/**
							 *
							 * @ngdoc method
							 * @name $animate#off
							 * @kind function
							 * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
							 * can be used in three different ways depending on the arguments:
							 *
							 * ```js
							 * // remove all the animation event listeners listening for `enter`
							 * $animate.off('enter');
							 *
							 * // remove all the animation event listeners listening for `enter` on the given element and its children
							 * $animate.off('enter', container);
							 *
							 * // remove the event listener function provided by `listenerFn` that is set
							 * // to listen for `enter` on the given `element` as well as its children
							 * $animate.off('enter', container, callback);
							 * ```
							 *
							 * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)
							 * @param {DOMElement=} container the container element the event listener was placed on
							 * @param {Function=} callback the callback function that was registered as the listener
							 */
							off: $$animateQueue.off,

							/**
							 * @ngdoc method
							 * @name $animate#pin
							 * @kind function
							 * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
							 *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
							 *    element despite being outside the realm of the application or within another application. Say for example if the application
							 *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
							 *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
							 *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
							 *
							 *    Note that this feature is only active when the `ngAnimate` module is used.
							 *
							 * @param {DOMElement} element the external element that will be pinned
							 * @param {DOMElement} parentElement the host parent element that will be associated with the external element
							 */
							pin: $$animateQueue.pin,

							/**
							 *
							 * @ngdoc method
							 * @name $animate#enabled
							 * @kind function
							 * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
							 * function can be called in four ways:
							 *
							 * ```js
							 * // returns true or false
							 * $animate.enabled();
							 *
							 * // changes the enabled state for all animations
							 * $animate.enabled(false);
							 * $animate.enabled(true);
							 *
							 * // returns true or false if animations are enabled for an element
							 * $animate.enabled(element);
							 *
							 * // changes the enabled state for an element and its children
							 * $animate.enabled(element, true);
							 * $animate.enabled(element, false);
							 * ```
							 *
							 * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
							 * @param {boolean=} enabled whether or not the animations will be enabled for the element
							 *
							 * @return {boolean} whether or not animations are enabled
							 */
							enabled: $$animateQueue.enabled,

							/**
							 * @ngdoc method
							 * @name $animate#cancel
							 * @kind function
							 * @description Cancels the provided animation.
							 *
							 * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
							 */
							cancel: function (runner) {
								runner.end && runner.end();
							},

							/**
							 *
							 * @ngdoc method
							 * @name $animate#enter
							 * @kind function
							 * @description Inserts the element into the DOM either after the `after` element (if provided) or
							 *   as the first child within the `parent` element and then triggers an animation.
							 *   A promise is returned that will be resolved during the next digest once the animation
							 *   has completed.
							 *
							 * @param {DOMElement} element the element which will be inserted into the DOM
							 * @param {DOMElement} parent the parent element which will append the element as
							 *   a child (so long as the after element is not present)
							 * @param {DOMElement=} after the sibling element after which the element will be appended
							 * @param {object=} options an optional collection of options/styles that will be applied to the element
							 *
							 * @return {Promise} the animation callback promise
							 */
							enter: function (element, parent, after, options) {
								parent = parent && jqLite(parent);
								after = after && jqLite(after);
								parent = parent || after.parent();
								domInsert(element, parent, after);
								return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
							},

							/**
							 *
							 * @ngdoc method
							 * @name $animate#move
							 * @kind function
							 * @description Inserts (moves) the element into its new position in the DOM either after
							 *   the `after` element (if provided) or as the first child within the `parent` element
							 *   and then triggers an animation. A promise is returned that will be resolved
							 *   during the next digest once the animation has completed.
							 *
							 * @param {DOMElement} element the element which will be moved into the new DOM position
							 * @param {DOMElement} parent the parent element which will append the element as
							 *   a child (so long as the after element is not present)
							 * @param {DOMElement=} after the sibling element after which the element will be appended
							 * @param {object=} options an optional collection of options/styles that will be applied to the element
							 *
							 * @return {Promise} the animation callback promise
							 */
							move: function (element, parent, after, options) {
								parent = parent && jqLite(parent);
								after = after && jqLite(after);
								parent = parent || after.parent();
								domInsert(element, parent, after);
								return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
							},

							/**
							 * @ngdoc method
							 * @name $animate#leave
							 * @kind function
							 * @description Triggers an animation and then removes the element from the DOM.
							 * When the function is called a promise is returned that will be resolved during the next
							 * digest once the animation has completed.
							 *
							 * @param {DOMElement} element the element which will be removed from the DOM
							 * @param {object=} options an optional collection of options/styles that will be applied to the element
							 *
							 * @return {Promise} the animation callback promise
							 */
							leave: function (element, options) {
								return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function () {
									element.remove();
								});
							},

							/**
							 * @ngdoc method
							 * @name $animate#addClass
							 * @kind function
							 *
							 * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
							 *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
							 *   animation if element already contains the CSS class or if the class is removed at a later step.
							 *   Note that class-based animations are treated differently compared to structural animations
							 *   (like enter, move and leave) since the CSS classes may be added/removed at different points
							 *   depending if CSS or JavaScript animations are used.
							 *
							 * @param {DOMElement} element the element which the CSS classes will be applied to
							 * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
							 * @param {object=} options an optional collection of options/styles that will be applied to the element
							 *
							 * @return {Promise} the animation callback promise
							 */
							addClass: function (element, className, options) {
								options = prepareAnimateOptions(options);
								options.addClass = mergeClasses(options.addclass, className);
								return $$animateQueue.push(element, 'addClass', options);
							},

							/**
							 * @ngdoc method
							 * @name $animate#removeClass
							 * @kind function
							 *
							 * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
							 *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
							 *   animation if element does not contain the CSS class or if the class is added at a later step.
							 *   Note that class-based animations are treated differently compared to structural animations
							 *   (like enter, move and leave) since the CSS classes may be added/removed at different points
							 *   depending if CSS or JavaScript animations are used.
							 *
							 * @param {DOMElement} element the element which the CSS classes will be applied to
							 * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
							 * @param {object=} options an optional collection of options/styles that will be applied to the element
							 *
							 * @return {Promise} the animation callback promise
							 */
							removeClass: function (element, className, options) {
								options = prepareAnimateOptions(options);
								options.removeClass = mergeClasses(options.removeClass, className);
								return $$animateQueue.push(element, 'removeClass', options);
							},

							/**
							 * @ngdoc method
							 * @name $animate#setClass
							 * @kind function
							 *
							 * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
							 *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
							 *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
							 *    passed. Note that class-based animations are treated differently compared to structural animations
							 *    (like enter, move and leave) since the CSS classes may be added/removed at different points
							 *    depending if CSS or JavaScript animations are used.
							 *
							 * @param {DOMElement} element the element which the CSS classes will be applied to
							 * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
							 * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
							 * @param {object=} options an optional collection of options/styles that will be applied to the element
							 *
							 * @return {Promise} the animation callback promise
							 */
							setClass: function (element, add, remove, options) {
								options = prepareAnimateOptions(options);
								options.addClass = mergeClasses(options.addClass, add);
								options.removeClass = mergeClasses(options.removeClass, remove);
								return $$animateQueue.push(element, 'setClass', options);
							},

							/**
							 * @ngdoc method
							 * @name $animate#animate
							 * @kind function
							 *
							 * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
							 * If any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take
							 * on the provided styles. For example, if a transition animation is set for the given className then the provided from and
							 * to styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles
							 * will be given in as function paramters into the `animate` method (or as apart of the `options` parameter).
							 *
							 * @param {DOMElement} element the element which the CSS styles will be applied to
							 * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
							 * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
							 * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
							 *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
							 *    (Note that if no animation is detected then this value will not be appplied to the element.)
							 * @param {object=} options an optional collection of options/styles that will be applied to the element
							 *
							 * @return {Promise} the animation callback promise
							 */
							animate: function (element, from, to, className, options) {
								options = prepareAnimateOptions(options);
								options.from = options.from ? extend(options.from, from) : from;
								options.to = options.to ? extend(options.to, to) : to;

								className = className || 'ng-inline-animate';
								options.tempClasses = mergeClasses(options.tempClasses, className);
								return $$animateQueue.push(element, 'animate', options);
							}
						};
					}];
				}];

				function $$AsyncCallbackProvider() {
					this.$get = ['$$rAF', '$timeout', function ($$rAF, $timeout) {
						return $$rAF.supported
							? function (fn) {
							return $$rAF(fn);
						}
							: function (fn) {
							return $timeout(fn, 0, false);
						};
					}];
				}

				/* global stripHash: true */

				/**
				 * ! This is a private undocumented service !
				 *
				 * @name $browser
				 * @requires $log
				 * @description
				 * This object has two goals:
				 *
				 * - hide all the global state in the browser caused by the window object
				 * - abstract away all the browser specific features and inconsistencies
				 *
				 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
				 * service, which can be used for convenient testing of the application without the interaction with
				 * the real browser apis.
				 */
				/**
				 * @param {object} window The global window object.
				 * @param {object} document jQuery wrapped document.
				 * @param {object} $log window.console or an object with the same interface.
				 * @param {object} $sniffer $sniffer service
				 */
				function Browser(window, document, $log, $sniffer) {
					var self = this,
						rawDocument = document[0],
						location = window.location,
						history = window.history,
						setTimeout = window.setTimeout,
						clearTimeout = window.clearTimeout,
						pendingDeferIds = {};

					self.isMock = false;

					var outstandingRequestCount = 0;
					var outstandingRequestCallbacks = [];

					// TODO(vojta): remove this temporary api
					self.$$completeOutstandingRequest = completeOutstandingRequest;
					self.$$incOutstandingRequestCount = function () {
						outstandingRequestCount++;
					};

					/**
					 * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
					 * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
					 */
					function completeOutstandingRequest(fn) {
						try {
							fn.apply(null, sliceArgs(arguments, 1));
						} finally {
							outstandingRequestCount--;
							if (outstandingRequestCount === 0) {
								while (outstandingRequestCallbacks.length) {
									try {
										outstandingRequestCallbacks.pop()();
									} catch (e) {
										$log.error(e);
									}
								}
							}
						}
					}

					function getHash(url) {
						var index = url.indexOf('#');
						return index === -1 ? '' : url.substr(index);
					}

					/**
					 * @private
					 * Note: this method is used only by scenario runner
					 * TODO(vojta): prefix this method with $$ ?
					 * @param {function()} callback Function that will be called when no outstanding request
					 */
					self.notifyWhenNoOutstandingRequests = function (callback) {
						if (outstandingRequestCount === 0) {
							callback();
						} else {
							outstandingRequestCallbacks.push(callback);
						}
					};

					//////////////////////////////////////////////////////////////
					// URL API
					//////////////////////////////////////////////////////////////

					var cachedState, lastHistoryState,
						lastBrowserUrl = location.href,
						baseElement = document.find('base'),
						reloadLocation = null;

					cacheState();
					lastHistoryState = cachedState;

					/**
					 * @name $browser#url
					 *
					 * @description
					 * GETTER:
					 * Without any argument, this method just returns current value of location.href.
					 *
					 * SETTER:
					 * With at least one argument, this method sets url to new value.
					 * If html5 history api supported, pushState/replaceState is used, otherwise
					 * location.href/location.replace is used.
					 * Returns its own instance to allow chaining
					 *
					 * NOTE: this api is intended for use only by the $location service. Please use the
					 * {@link ng.$location $location service} to change url.
					 *
					 * @param {string} url New url (when used as setter)
					 * @param {boolean=} replace Should new url replace current history record?
					 * @param {object=} state object to use with pushState/replaceState
					 */
					self.url = function (url, replace, state) {
						// In modern browsers `history.state` is `null` by default; treating it separately
						// from `undefined` would cause `$browser.url('/foo')` to change `history.state`
						// to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
						if (isUndefined(state)) {
							state = null;
						}

						// Android Browser BFCache causes location, history reference to become stale.
						if (location !== window.location) location = window.location;
						if (history !== window.history) history = window.history;

						// setter
						if (url) {
							var sameState = lastHistoryState === state;

							// Don't change anything if previous and current URLs and states match. This also prevents
							// IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
							// See https://github.com/angular/angular.js/commit/ffb2701
							if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
								return self;
							}
							var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
							lastBrowserUrl = url;
							lastHistoryState = state;
							// Don't use history API if only the hash changed
							// due to a bug in IE10/IE11 which leads
							// to not firing a `hashchange` nor `popstate` event
							// in some cases (see #9143).
							if ($sniffer.history && (!sameBase || !sameState)) {
								history[replace ? 'replaceState' : 'pushState'](state, '', url);
								cacheState();
								// Do the assignment again so that those two variables are referentially identical.
								lastHistoryState = cachedState;
							} else {
								if (!sameBase || reloadLocation) {
									reloadLocation = url;
								}
								if (replace) {
									location.replace(url);
								} else if (!sameBase) {
									location.href = url;
								} else {
									location.hash = getHash(url);
								}
							}
							return self;
							// getter
						} else {
							// - reloadLocation is needed as browsers don't allow to read out
							//   the new location.href if a reload happened.
							// - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
							return reloadLocation || location.href.replace(/%27/g, "'");
						}
					};

					/**
					 * @name $browser#state
					 *
					 * @description
					 * This method is a getter.
					 *
					 * Return history.state or null if history.state is undefined.
					 *
					 * @returns {object} state
					 */
					self.state = function () {
						return cachedState;
					};

					var urlChangeListeners = [],
						urlChangeInit = false;

					function cacheStateAndFireUrlChange() {
						cacheState();
						fireUrlChange();
					}

					function getCurrentState() {
						try {
							return history.state;
						} catch (e) {
							// MSIE can reportedly throw when there is no state (UNCONFIRMED).
						}
					}

					// This variable should be used *only* inside the cacheState function.
					var lastCachedState = null;

					function cacheState() {
						// This should be the only place in $browser where `history.state` is read.
						cachedState = getCurrentState();
						cachedState = isUndefined(cachedState) ? null : cachedState;

						// Prevent callbacks fo fire twice if both hashchange & popstate were fired.
						if (equals(cachedState, lastCachedState)) {
							cachedState = lastCachedState;
						}
						lastCachedState = cachedState;
					}

					function fireUrlChange() {
						if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
							return;
						}

						lastBrowserUrl = self.url();
						lastHistoryState = cachedState;
						forEach(urlChangeListeners, function (listener) {
							listener(self.url(), cachedState);
						});
					}

					/**
					 * @name $browser#onUrlChange
					 *
					 * @description
					 * Register callback function that will be called, when url changes.
					 *
					 * It's only called when the url is changed from outside of angular:
					 * - user types different url into address bar
					 * - user clicks on history (forward/back) button
					 * - user clicks on a link
					 *
					 * It's not called when url is changed by $browser.url() method
					 *
					 * The listener gets called with new url as parameter.
					 *
					 * NOTE: this api is intended for use only by the $location service. Please use the
					 * {@link ng.$location $location service} to monitor url changes in angular apps.
					 *
					 * @param {function(string)} listener Listener function to be called when url changes.
					 * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
					 */
					self.onUrlChange = function (callback) {
						// TODO(vojta): refactor to use node's syntax for events
						if (!urlChangeInit) {
							// We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
							// don't fire popstate when user change the address bar and don't fire hashchange when url
							// changed by push/replaceState

							// html5 history api - popstate event
							if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
							// hashchange event
							jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

							urlChangeInit = true;
						}

						urlChangeListeners.push(callback);
						return callback;
					};

					/**
					 * @private
					 * Remove popstate and hashchange handler from window.
					 *
					 * NOTE: this api is intended for use only by $rootScope.
					 */
					self.$$applicationDestroyed = function () {
						jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
					};

					/**
					 * Checks whether the url has changed outside of Angular.
					 * Needs to be exported to be able to check for changes that have been done in sync,
					 * as hashchange/popstate events fire in async.
					 */
					self.$$checkUrlChange = fireUrlChange;

					//////////////////////////////////////////////////////////////
					// Misc API
					//////////////////////////////////////////////////////////////

					/**
					 * @name $browser#baseHref
					 *
					 * @description
					 * Returns current <base href>
					 * (always relative - without domain)
					 *
					 * @returns {string} The current base href
					 */
					self.baseHref = function () {
						var href = baseElement.attr('href');
						return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
					};

					/**
					 * @name $browser#defer
					 * @param {function()} fn A function, who's execution should be deferred.
					 * @param {number=} [delay=0] of milliseconds to defer the function execution.
					 * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
					 *
					 * @description
					 * Executes a fn asynchronously via `setTimeout(fn, delay)`.
					 *
					 * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
					 * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
					 * via `$browser.defer.flush()`.
					 *
					 */
					self.defer = function (fn, delay) {
						var timeoutId;
						outstandingRequestCount++;
						timeoutId = setTimeout(function () {
							delete pendingDeferIds[timeoutId];
							completeOutstandingRequest(fn);
						}, delay || 0);
						pendingDeferIds[timeoutId] = true;
						return timeoutId;
					};


					/**
					 * @name $browser#defer.cancel
					 *
					 * @description
					 * Cancels a deferred task identified with `deferId`.
					 *
					 * @param {*} deferId Token returned by the `$browser.defer` function.
					 * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
					 *                    canceled.
					 */
					self.defer.cancel = function (deferId) {
						if (pendingDeferIds[deferId]) {
							delete pendingDeferIds[deferId];
							clearTimeout(deferId);
							completeOutstandingRequest(noop);
							return true;
						}
						return false;
					};

				}

				function $BrowserProvider() {
					this.$get = ['$window', '$log', '$sniffer', '$document',
						function ($window, $log, $sniffer, $document) {
							return new Browser($window, $document, $log, $sniffer);
						}];
				}

				/**
				 * @ngdoc service
				 * @name $cacheFactory
				 *
				 * @description
				 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
				 * them.
				 *
				 * ```js
				 *
				 *  var cache = $cacheFactory('cacheId');
				 *  expect($cacheFactory.get('cacheId')).toBe(cache);
				 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
				 *
				 *  cache.put("key", "value");
				 *  cache.put("another key", "another value");
				 *
				 *  // We've specified no options on creation
				 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
				 *
				 * ```
				 *
				 *
				 * @param {string} cacheId Name or id of the newly created cache.
				 * @param {object=} options Options object that specifies the cache behavior. Properties:
				 *
				 *   - `{number=}` `capacity` — turns the cache into LRU cache.
				 *
				 * @returns {object} Newly created cache object with the following set of methods:
				 *
				 * - `{object}` `info()` — Returns id, size, and options of cache.
				 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
				 *   it.
				 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
				 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
				 * - `{void}` `removeAll()` — Removes all cached values.
				 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
				 *
				 * @example
				 <example module="cacheExampleApp">
				 <file name="index.html">
				 <div ng-controller="CacheController">
				 <input ng-model="newCacheKey" placeholder="Key">
				 <input ng-model="newCacheValue" placeholder="Value">
				 <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

				 <p ng-if="keys.length">Cached Values</p>
				 <div ng-repeat="key in keys">
				 <span ng-bind="key"></span>
				 <span>: </span>
				 <b ng-bind="cache.get(key)"></b>
				 </div>

				 <p>Cache Info</p>
				 <div ng-repeat="(key, value) in cache.info()">
				 <span ng-bind="key"></span>
				 <span>: </span>
				 <b ng-bind="value"></b>
				 </div>
				 </div>
				 </file>
				 <file name="script.js">
				 angular.module('cacheExampleApp', []).
				 controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if ($scope.cache.get(key) === undefined) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, value === undefined ? null : value);
	           };
	         }]);
				 </file>
				 <file name="style.css">
				 p {
	         margin: 10px 0 3px;
	       }
				 </file>
				 </example>
				 */
				function $CacheFactoryProvider() {

					this.$get = function () {
						var caches = {};

						function cacheFactory(cacheId, options) {
							if (cacheId in caches) {
								throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
							}

							var size = 0,
								stats = extend({}, options, {id: cacheId}),
								data = {},
								capacity = (options && options.capacity) || Number.MAX_VALUE,
								lruHash = {},
								freshEnd = null,
								staleEnd = null;

							/**
							 * @ngdoc type
							 * @name $cacheFactory.Cache
							 *
							 * @description
							 * A cache object used to store and retrieve data, primarily used by
							 * {@link $http $http} and the {@link ng.directive:script script} directive to cache
							 * templates and other data.
							 *
							 * ```js
							 *  angular.module('superCache')
							 *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
							 * ```
							 *
							 * Example test:
							 *
							 * ```js
							 *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
							 * ```
							 */
							return caches[cacheId] = {

								/**
								 * @ngdoc method
								 * @name $cacheFactory.Cache#put
								 * @kind function
								 *
								 * @description
								 * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
								 * retrieved later, and incrementing the size of the cache if the key was not already
								 * present in the cache. If behaving like an LRU cache, it will also remove stale
								 * entries from the set.
								 *
								 * It will not insert undefined values into the cache.
								 *
								 * @param {string} key the key under which the cached data is stored.
								 * @param {*} value the value to store alongside the key. If it is undefined, the key
								 *    will not be stored.
								 * @returns {*} the value stored.
								 */
								put: function (key, value) {
									if (isUndefined(value)) return;
									if (capacity < Number.MAX_VALUE) {
										var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

										refresh(lruEntry);
									}

									if (!(key in data)) size++;
									data[key] = value;

									if (size > capacity) {
										this.remove(staleEnd.key);
									}

									return value;
								},

								/**
								 * @ngdoc method
								 * @name $cacheFactory.Cache#get
								 * @kind function
								 *
								 * @description
								 * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
								 *
								 * @param {string} key the key of the data to be retrieved
								 * @returns {*} the value stored.
								 */
								get: function (key) {
									if (capacity < Number.MAX_VALUE) {
										var lruEntry = lruHash[key];

										if (!lruEntry) return;

										refresh(lruEntry);
									}

									return data[key];
								},


								/**
								 * @ngdoc method
								 * @name $cacheFactory.Cache#remove
								 * @kind function
								 *
								 * @description
								 * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
								 *
								 * @param {string} key the key of the entry to be removed
								 */
								remove: function (key) {
									if (capacity < Number.MAX_VALUE) {
										var lruEntry = lruHash[key];

										if (!lruEntry) return;

										if (lruEntry == freshEnd) freshEnd = lruEntry.p;
										if (lruEntry == staleEnd) staleEnd = lruEntry.n;
										link(lruEntry.n, lruEntry.p);

										delete lruHash[key];
									}

									delete data[key];
									size--;
								},


								/**
								 * @ngdoc method
								 * @name $cacheFactory.Cache#removeAll
								 * @kind function
								 *
								 * @description
								 * Clears the cache object of any entries.
								 */
								removeAll: function () {
									data = {};
									size = 0;
									lruHash = {};
									freshEnd = staleEnd = null;
								},


								/**
								 * @ngdoc method
								 * @name $cacheFactory.Cache#destroy
								 * @kind function
								 *
								 * @description
								 * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
								 * removing it from the {@link $cacheFactory $cacheFactory} set.
								 */
								destroy: function () {
									data = null;
									stats = null;
									lruHash = null;
									delete caches[cacheId];
								},


								/**
								 * @ngdoc method
								 * @name $cacheFactory.Cache#info
								 * @kind function
								 *
								 * @description
								 * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
								 *
								 * @returns {object} an object with the following properties:
								 *   <ul>
								 *     <li>**id**: the id of the cache instance</li>
								 *     <li>**size**: the number of entries kept in the cache instance</li>
								 *     <li>**...**: any additional properties from the options object when creating the
								 *       cache.</li>
								 *   </ul>
								 */
								info: function () {
									return extend({}, stats, {size: size});
								}
							};


							/**
							 * makes the `entry` the freshEnd of the LRU linked list
							 */
							function refresh(entry) {
								if (entry != freshEnd) {
									if (!staleEnd) {
										staleEnd = entry;
									} else if (staleEnd == entry) {
										staleEnd = entry.n;
									}

									link(entry.n, entry.p);
									link(entry, freshEnd);
									freshEnd = entry;
									freshEnd.n = null;
								}
							}


							/**
							 * bidirectionally links two entries of the LRU linked list
							 */
							function link(nextEntry, prevEntry) {
								if (nextEntry != prevEntry) {
									if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
									if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
								}
							}
						}


						/**
						 * @ngdoc method
						 * @name $cacheFactory#info
						 *
						 * @description
						 * Get information about all the caches that have been created
						 *
						 * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
						 */
						cacheFactory.info = function () {
							var info = {};
							forEach(caches, function (cache, cacheId) {
								info[cacheId] = cache.info();
							});
							return info;
						};


						/**
						 * @ngdoc method
						 * @name $cacheFactory#get
						 *
						 * @description
						 * Get access to a cache object by the `cacheId` used when it was created.
						 *
						 * @param {string} cacheId Name or id of a cache to access.
						 * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
						 */
						cacheFactory.get = function (cacheId) {
							return caches[cacheId];
						};


						return cacheFactory;
					};
				}

				/**
				 * @ngdoc service
				 * @name $templateCache
				 *
				 * @description
				 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
				 * can load templates directly into the cache in a `script` tag, or by consuming the
				 * `$templateCache` service directly.
				 *
				 * Adding via the `script` tag:
				 *
				 * ```html
				 *   <script type="text/ng-template" id="templateId.html">
				 *     <p>This is the content of the template</p>
				 *   </script>
				 * ```
				 *
				 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
				 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
				 * element with ng-app attribute), otherwise the template will be ignored.
				 *
				 * Adding via the `$templateCache` service:
				 *
				 * ```js
				 * var myApp = angular.module('myApp', []);
				 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
				 * ```
				 *
				 * To retrieve the template later, simply use it in your HTML:
				 * ```html
				 * <div ng-include=" 'templateId.html' "></div>
				 * ```
				 *
				 * or get it via Javascript:
				 * ```js
				 * $templateCache.get('templateId.html')
				 * ```
				 *
				 * See {@link ng.$cacheFactory $cacheFactory}.
				 *
				 */
				function $TemplateCacheProvider() {
					this.$get = ['$cacheFactory', function ($cacheFactory) {
						return $cacheFactory('templates');
					}];
				}

				/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
				 *     Any commits to this file should be reviewed with security in mind.  *
				 *   Changes to this file can potentially create security vulnerabilities. *
				 *          An approval from 2 Core members with history of modifying      *
				 *                         this file is required.                          *
				 *                                                                         *
				 *  Does the change somehow allow for arbitrary javascript to be executed? *
				 *    Or allows for someone to change the prototype of built-in objects?   *
				 *     Or gives undesired access to variables likes document or window?    *
				 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

				/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
				 *
				 * DOM-related variables:
				 *
				 * - "node" - DOM Node
				 * - "element" - DOM Element or Node
				 * - "$node" or "$element" - jqLite-wrapped node or element
				 *
				 *
				 * Compiler related stuff:
				 *
				 * - "linkFn" - linking fn of a single directive
				 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
				 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
				 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
				 */


				/**
				 * @ngdoc service
				 * @name $compile
				 * @kind function
				 *
				 * @description
				 * Compiles an HTML string or DOM into a template and produces a template function, which
				 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
				 *
				 * The compilation is a process of walking the DOM tree and matching DOM elements to
				 * {@link ng.$compileProvider#directive directives}.
				 *
				 * <div class="alert alert-warning">
				 * **Note:** This document is an in-depth reference of all directive options.
				 * For a gentle introduction to directives with examples of common use cases,
				 * see the {@link guide/directive directive guide}.
				 * </div>
				 *
				 * ## Comprehensive Directive API
				 *
				 * There are many different options for a directive.
				 *
				 * The difference resides in the return value of the factory function.
				 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
				 * or just the `postLink` function (all other properties will have the default values).
				 *
				 * <div class="alert alert-success">
				 * **Best Practice:** It's recommended to use the "directive definition object" form.
				 * </div>
				 *
				 * Here's an example directive declared with a Directive Definition Object:
				 *
				 * ```js
				 *   var myModule = angular.module(...);
				 *
				 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       priority: 0,
	 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       transclude: false,
	 *       restrict: 'A',
	 *       templateNamespace: 'html',
	 *       scope: false,
	 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       controllerAs: 'stringIdentifier',
	 *       bindToController: false,
	 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       compile: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // link: {
	 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // link: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
				 * ```
				 *
				 * <div class="alert alert-warning">
				 * **Note:** Any unspecified options will use the default value. You can see the default values below.
				 * </div>
				 *
				 * Therefore the above can be simplified as:
				 *
				 * ```js
				 *   var myModule = angular.module(...);
				 *
				 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
				 * ```
				 *
				 *
				 *
				 * ### Directive Definition Object
				 *
				 * The directive definition object provides instructions to the {@link ng.$compile
     * compiler}. The attributes are:
				 *
				 * #### `multiElement`
				 * When this property is set to true, the HTML compiler will collect DOM nodes between
				 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
				 * together as the directive elements. It is recommended that this feature be used on directives
				 * which are not strictly behavioural (such as {@link ngClick}), and which
				 * do not manipulate or replace child nodes (such as {@link ngInclude}).
				 *
				 * #### `priority`
				 * When there are multiple directives defined on a single DOM element, sometimes it
				 * is necessary to specify the order in which the directives are applied. The `priority` is used
				 * to sort the directives before their `compile` functions get called. Priority is defined as a
				 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
				 * are also run in priority order, but post-link functions are run in reverse order. The order
				 * of directives with the same priority is undefined. The default priority is `0`.
				 *
				 * #### `terminal`
				 * If set to true then the current `priority` will be the last set of directives
				 * which will execute (any directives at the current priority will still execute
				 * as the order of execution on same `priority` is undefined). Note that expressions
				 * and other directives used in the directive's template will also be excluded from execution.
				 *
				 * #### `scope`
				 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
				 * same element request a new scope, only one new scope is created. The new scope rule does not
				 * apply for the root of the template since the root of the template always gets a new scope.
				 *
				 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
				 * normal scope in that it does not prototypically inherit from the parent scope. This is useful
				 * when creating reusable components, which should not accidentally read or modify data in the
				 * parent scope.
				 *
				 * The 'isolate' scope takes an object hash which defines a set of local scope properties
				 * derived from the parent scope. These local properties are useful for aliasing values for
				 * templates. Locals definition is a hash of local scope property to its source:
				 *
				 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
				 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
				 *   attribute name is assumed to be the same as the local name.
				 *   Given `<widget my-attr="hello {{name}}">` and widget definition
				 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
				 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
				 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
				 *   component scope).
				 *
				 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
				 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
				 *   name is specified then the attribute name is assumed to be the same as the local name.
				 *   Given `<widget my-attr="parentModel">` and widget definition of
				 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
				 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
				 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
				 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
				 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If
				 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use
				 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).
				 *
				 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
				 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
				 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
				 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
				 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
				 *   pass data from the isolated scope via an expression to the parent scope, this can be
				 *   done by passing a map of local variable names and values into the expression wrapper fn.
				 *   For example, if the expression is `increment(amount)` then we can specify the amount value
				 *   by calling the `localFn` as `localFn({amount: 22})`.
				 *
				 *
				 * #### `bindToController`
				 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
				 * allow a component to have its properties bound to the controller, rather than to scope. When the controller
				 * is instantiated, the initial values of the isolate scope bindings are already available.
				 *
				 * #### `controller`
				 * Controller constructor function. The controller is instantiated before the
				 * pre-linking phase and it is shared with other directives (see
				 * `require` attribute). This allows the directives to communicate with each other and augment
				 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
				 *
				 * * `$scope` - Current scope associated with the element
				 * * `$element` - Current element
				 * * `$attrs` - Current attributes object for the element
				 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
				 *   `function([scope], cloneLinkingFn, futureParentElement)`.
				 *    * `scope`: optional argument to override the scope.
				 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.
				 *    * `futureParentElement`:
				 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
				 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
				 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
				 *          and when the `cloneLinkinFn` is passed,
				 *          as those elements need to created and cloned in a special way when they are defined outside their
				 *          usual containers (e.g. like `<svg>`).
				 *        * See also the `directive.templateNamespace` property.
				 *
				 *
				 * #### `require`
				 * Require another directive and inject its controller as the fourth argument to the linking function. The
				 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
				 * injected argument will be an array in corresponding order. If no such directive can be
				 * found, or if the directive does not have a controller, then an error is raised (unless no link function
				 * is specified, in which case error checking is skipped). The name can be prefixed with:
				 *
				 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
				 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
				 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
				 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
				 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
				 *   `null` to the `link` fn if not found.
				 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
				 *   `null` to the `link` fn if not found.
				 *
				 *
				 * #### `controllerAs`
				 * Identifier name for a reference to the controller in the directive's scope.
				 * This allows the controller to be referenced from the directive template. The directive
				 * needs to define a scope for this configuration to be used. Useful in the case when
				 * directive is used as component.
				 *
				 *
				 * #### `restrict`
				 * String of subset of `EACM` which restricts the directive to a specific directive
				 * declaration style. If omitted, the defaults (elements and attributes) are used.
				 *
				 * * `E` - Element name (default): `<my-directive></my-directive>`
				 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
				 * * `C` - Class: `<div class="my-directive: exp;"></div>`
				 * * `M` - Comment: `<!-- directive: my-directive exp -->`
				 *
				 *
				 * #### `templateNamespace`
				 * String representing the document type used by the markup in the template.
				 * AngularJS needs this information as those elements need to be created and cloned
				 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
				 *
				 * * `html` - All root nodes in the template are HTML. Root nodes may also be
				 *   top-level elements such as `<svg>` or `<math>`.
				 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
				 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
				 *
				 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
				 *
				 * #### `template`
				 * HTML markup that may:
				 * * Replace the contents of the directive's element (default).
				 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
				 * * Wrap the contents of the directive's element (if `transclude` is true).
				 *
				 * Value may be:
				 *
				 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
				 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
				 *   function api below) and returns a string value.
				 *
				 *
				 * #### `templateUrl`
				 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
				 *
				 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
				 * for later when the template has been resolved.  In the meantime it will continue to compile and link
				 * sibling and parent elements as though this element had not contained any directives.
				 *
				 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
				 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
				 * case when only one deeply nested directive has `templateUrl`.
				 *
				 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
				 *
				 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
				 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
				 * a string value representing the url.  In either case, the template URL is passed through {@link
					* $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
				 *
				 *
				 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
				 * specify what the template should replace. Defaults to `false`.
				 *
				 * * `true` - the template will replace the directive's element.
				 * * `false` - the template will replace the contents of the directive's element.
				 *
				 * The replacement process migrates all of the attributes / classes from the old element to the new
				 * one. See the {@link guide/directive#template-expanding-directive
     * Directives Guide} for an example.
				 *
				 * There are very few scenarios where element replacement is required for the application function,
				 * the main one being reusable custom components that are used within SVG contexts
				 * (because SVG doesn't work with custom elements in the DOM tree).
				 *
				 * #### `transclude`
				 * Extract the contents of the element where the directive appears and make it available to the directive.
				 * The contents are compiled and provided to the directive as a **transclusion function**. See the
				 * {@link $compile#transclusion Transclusion} section below.
				 *
				 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
				 * directive's element or the entire element:
				 *
				 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
				 * * `'element'` - transclude the whole of the directive's element including any directives on this
				 *   element that defined at a lower priority than this directive. When used, the `template`
				 *   property is ignored.
				 *
				 *
				 * #### `compile`
				 *
				 * ```js
				 *   function compile(tElement, tAttrs, transclude) { ... }
				 * ```
				 *
				 * The compile function deals with transforming the template DOM. Since most directives do not do
				 * template transformation, it is not used often. The compile function takes the following arguments:
				 *
				 *   * `tElement` - template element - The element where the directive has been declared. It is
				 *     safe to do template transformation on the element and child elements only.
				 *
				 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
				 *     between all directive compile functions.
				 *
				 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
				 *
				 * <div class="alert alert-warning">
				 * **Note:** The template instance and the link instance may be different objects if the template has
				 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
				 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
				 * should be done in a linking function rather than in a compile function.
				 * </div>

				 * <div class="alert alert-warning">
				 * **Note:** The compile function cannot handle directives that recursively use themselves in their
				 * own templates or compile functions. Compiling these directives results in an infinite loop and a
				 * stack overflow errors.
				 *
				 * This can be avoided by manually using $compile in the postLink function to imperatively compile
				 * a directive's template instead of relying on automatic template compilation via `template` or
				 * `templateUrl` declaration or manual compilation inside the compile function.
				 * </div>
				 *
				 * <div class="alert alert-danger">
				 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
				 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
				 *   to the link function instead.
				 * </div>

				 * A compile function can have a return value which can be either a function or an object.
				 *
				 * * returning a (post-link) function - is equivalent to registering the linking function via the
				 *   `link` property of the config object when the compile function is empty.
				 *
				 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
				 *   control when a linking function should be called during the linking phase. See info about
				 *   pre-linking and post-linking functions below.
				 *
				 *
				 * #### `link`
				 * This property is used only if the `compile` property is not defined.
				 *
				 * ```js
				 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
				 * ```
				 *
				 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
				 * executed after the template has been cloned. This is where most of the directive logic will be
				 * put.
				 *
				 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
				 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
				 *
				 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
				 *     manipulate the children of the element only in `postLink` function since the children have
				 *     already been linked.
				 *
				 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
				 *     between all directive linking functions.
				 *
				 *   * `controller` - the directive's required controller instance(s) - Instances are shared
				 *     among all directives, which allows the directives to use the controllers as a communication
				 *     channel. The exact value depends on the directive's `require` property:
				 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
				 *       * `string`: the controller instance
				 *       * `array`: array of controller instances
				 *
				 *     If a required controller cannot be found, and it is optional, the instance is `null`,
				 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
				 *
				 *     Note that you can also require the directive's own controller - it will be made available like
				 *     like any other controller.
				 *
				 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
				 *     This is the same as the `$transclude`
				 *     parameter of directive controllers, see there for details.
				 *     `function([scope], cloneLinkingFn, futureParentElement)`.
				 *
				 * #### Pre-linking function
				 *
				 * Executed before the child elements are linked. Not safe to do DOM transformation since the
				 * compiler linking function will fail to locate the correct elements for linking.
				 *
				 * #### Post-linking function
				 *
				 * Executed after the child elements are linked.
				 *
				 * Note that child elements that contain `templateUrl` directives will not have been compiled
				 * and linked since they are waiting for their template to load asynchronously and their own
				 * compilation and linking has been suspended until that occurs.
				 *
				 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
				 * for their async templates to be resolved.
				 *
				 *
				 * ### Transclusion
				 *
				 * Transclusion is the process of extracting a collection of DOM element from one part of the DOM and
				 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
				 * scope from where they were taken.
				 *
				 * Transclusion is used (often with {@link ngTransclude}) to insert the
				 * original contents of a directive's element into a specified place in the template of the directive.
				 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
				 * content has access to the properties on the scope from which it was taken, even if the directive
				 * has isolated scope.
				 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
				 *
				 * This makes it possible for the widget to have private state for its template, while the transcluded
				 * content has access to its originating scope.
				 *
				 * <div class="alert alert-warning">
				 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
				 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
     * Testing Transclusion Directives}.
				 * </div>
				 *
				 * #### Transclusion Functions
				 *
				 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
				 * function** to the directive's `link` function and `controller`. This transclusion function is a special
				 * **linking function** that will return the compiled contents linked to a new transclusion scope.
				 *
				 * <div class="alert alert-info">
				 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
				 * ngTransclude will deal with it for us.
				 * </div>
				 *
				 * If you want to manually control the insertion and removal of the transcluded content in your directive
				 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
				 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
				 *
				 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
				 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
				 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
				 *
				 * <div class="alert alert-info">
				 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function
				 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
				 * </div>
				 *
				 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
				 * attach function**:
				 *
				 * ```js
				 * var transcludedContent, transclusionScope;
				 *
				 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
				 * ```
				 *
				 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
				 * associated transclusion scope:
				 *
				 * ```js
				 * transcludedContent.remove();
				 * transclusionScope.$destroy();
				 * ```
				 *
				 * <div class="alert alert-info">
				 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
				 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
				 * then you are also responsible for calling `$destroy` on the transclusion scope.
				 * </div>
				 *
				 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
				 * automatically destroy their transluded clones as necessary so you do not need to worry about this if
				 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
				 *
				 *
				 * #### Transclusion Scopes
				 *
				 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
				 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
				 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
				 * was taken.
				 *
				 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
				 * like this:
				 *
				 * ```html
				 * <div ng-app>
				 *   <div isolate>
				 *     <div transclusion>
				 *     </div>
				 *   </div>
				 * </div>
				 * ```
				 *
				 * The `$parent` scope hierarchy will look like this:
				 *
				 * ```
				 * - $rootScope
				 *   - isolate
				 *     - transclusion
				 * ```
				 *
				 * but the scopes will inherit prototypically from different scopes to their `$parent`.
				 *
				 * ```
				 * - $rootScope
				 *   - transclusion
				 * - isolate
				 * ```
				 *
				 *
				 * ### Attributes
				 *
				 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
				 * `link()` or `compile()` functions. It has a variety of uses.
				 *
				 * accessing *Normalized attribute names:*
				 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
				 * the attributes object allows for normalized access to
				 *   the attributes.
				 *
				 * * *Directive inter-communication:* All directives share the same instance of the attributes
				 *   object which allows the directives to use the attributes object as inter directive
				 *   communication.
				 *
				 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
				 *   allowing other directives to read the interpolated value.
				 *
				 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
				 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
				 *   the only way to easily get the actual value because during the linking phase the interpolation
				 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
				 *
				 * ```js
				 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
				 * ```
				 *
				 * ## Example
				 *
				 * <div class="alert alert-warning">
				 * **Note**: Typically directives are registered with `module.directive`. The example below is
				 * to illustrate how `$compile` works.
				 * </div>
				 *
				 <example module="compileExample">
				 <file name="index.html">
				 <script>
				 angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);
	
	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
				 .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
				 </script>
				 <div ng-controller="GreeterController">
				 <input ng-model="name"> <br/>
				 <textarea ng-model="html"></textarea> <br/>
				 <div compile="html"></div>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
				 </file>
				 </example>

				 *
				 *
				 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
				 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
				 *
				 * <div class="alert alert-danger">
				 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
				 *   e.g. will not use the right outer scope. Please pass the transclude function as a
				 *   `parentBoundTranscludeFn` to the link function instead.
				 * </div>
				 *
				 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
				 *                 root element(s), not their children)
				 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
				 * (a DOM element/tree) to a scope. Where:
				 *
				 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
				 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
				 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
				 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
				 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
				 *
				 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
				 *      * `scope` - is the current scope with which the linking function is working with.
				 *
				 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
				 *  keys may be used to control linking behavior:
				 *
				 *      * `parentBoundTranscludeFn` - the transclude function made available to
				 *        directives; if given, it will be passed through to the link functions of
				 *        directives found in `element` during compilation.
				 *      * `transcludeControllers` - an object hash with keys that map controller names
				 *        to controller instances; if given, it will make the controllers
				 *        available to directives.
				 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
				 *        the cloned elements; only needed for transcludes that are allowed to contain non html
				 *        elements (e.g. SVG elements). See also the directive.controller property.
				 *
				 * Calling the linking function returns the element of the template. It is either the original
				 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
				 *
				 * After linking the view is not updated until after a call to $digest which typically is done by
				 * Angular automatically.
				 *
				 * If you need access to the bound view, there are two ways to do it:
				 *
				 * - If you are not asking the linking function to clone the template, create the DOM element(s)
				 *   before you send them to the compiler and keep this reference around.
				 *   ```js
				 *     var element = $compile('<p>{{total}}</p>')(scope);
				 *   ```
				 *
				 * - if on the other hand, you need the element to be cloned, the view reference from the original
				 *   example would not point to the clone, but rather to the original template that was cloned. In
				 *   this case, you can access the clone via the cloneAttachFn:
				 *   ```js
				 *     var templateElement = angular.element('<p>{{total}}</p>'),
				 *         scope = ....;
				 *
				 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
				 *
				 *     //now we have reference to the cloned DOM via `clonedElement`
				 *   ```
				 *
				 *
				 * For information on how the compiler works, see the
				 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
				 */

				var $compileMinErr = minErr('$compile');

				/**
				 * @ngdoc provider
				 * @name $compileProvider
				 *
				 * @description
				 */
				$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
				function $CompileProvider($provide, $$sanitizeUriProvider) {
					var hasDirectives = {},
						Suffix = 'Directive',
						COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
						CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
						ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
						REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

					// Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
					// The assumption is that future DOM event attribute names will begin with
					// 'on' and be composed of only English letters.
					var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

					function parseIsolateBindings(scope, directiveName, isController) {
						var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;

						var bindings = {};

						forEach(scope, function (definition, scopeName) {
							var match = definition.match(LOCAL_REGEXP);

							if (!match) {
								throw $compileMinErr('iscp',
									"Invalid {3} for directive '{0}'." +
									" Definition: {... {1}: '{2}' ...}",
									directiveName, scopeName, definition,
									(isController ? "controller bindings definition" :
										"isolate scope definition"));
							}

							bindings[scopeName] = {
								mode: match[1][0],
								collection: match[2] === '*',
								optional: match[3] === '?',
								attrName: match[4] || scopeName
							};
						});

						return bindings;
					}

					function parseDirectiveBindings(directive, directiveName) {
						var bindings = {
							isolateScope: null,
							bindToController: null
						};
						if (isObject(directive.scope)) {
							if (directive.bindToController === true) {
								bindings.bindToController = parseIsolateBindings(directive.scope,
									directiveName, true);
								bindings.isolateScope = {};
							} else {
								bindings.isolateScope = parseIsolateBindings(directive.scope,
									directiveName, false);
							}
						}
						if (isObject(directive.bindToController)) {
							bindings.bindToController =
								parseIsolateBindings(directive.bindToController, directiveName, true);
						}
						if (isObject(bindings.bindToController)) {
							var controller = directive.controller;
							var controllerAs = directive.controllerAs;
							if (!controller) {
								// There is no controller, there may or may not be a controllerAs property
								throw $compileMinErr('noctrl',
									"Cannot bind to controller without directive '{0}'s controller.",
									directiveName);
							} else if (!identifierForController(controller, controllerAs)) {
								// There is a controller, but no identifier or controllerAs property
								throw $compileMinErr('noident',
									"Cannot bind to controller without identifier for directive '{0}'.",
									directiveName);
							}
						}
						return bindings;
					}

					function assertValidDirectiveName(name) {
						var letter = name.charAt(0);
						if (!letter || letter !== lowercase(letter)) {
							throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
						}
						if (name !== name.trim()) {
							throw $compileMinErr('baddir',
								"Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",
								name);
						}
					}

					/**
					 * @ngdoc method
					 * @name $compileProvider#directive
					 * @kind function
					 *
					 * @description
					 * Register a new directive with the compiler.
					 *
					 * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
					 *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
					 *    names and the values are the factories.
					 * @param {Function|Array} directiveFactory An injectable directive factory function. See
					 *    {@link guide/directive} for more info.
					 * @returns {ng.$compileProvider} Self for chaining.
					 */
					this.directive = function registerDirective(name, directiveFactory) {
						assertNotHasOwnProperty(name, 'directive');
						if (isString(name)) {
							assertValidDirectiveName(name);
							assertArg(directiveFactory, 'directiveFactory');
							if (!hasDirectives.hasOwnProperty(name)) {
								hasDirectives[name] = [];
								$provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
									function ($injector, $exceptionHandler) {
										var directives = [];
										forEach(hasDirectives[name], function (directiveFactory, index) {
											try {
												var directive = $injector.invoke(directiveFactory);
												if (isFunction(directive)) {
													directive = {compile: valueFn(directive)};
												} else if (!directive.compile && directive.link) {
													directive.compile = valueFn(directive.link);
												}
												directive.priority = directive.priority || 0;
												directive.index = index;
												directive.name = directive.name || name;
												directive.require = directive.require || (directive.controller && directive.name);
												directive.restrict = directive.restrict || 'EA';
												var bindings = directive.$$bindings =
													parseDirectiveBindings(directive, directive.name);
												if (isObject(bindings.isolateScope)) {
													directive.$$isolateBindings = bindings.isolateScope;
												}
												directive.$$moduleName = directiveFactory.$$moduleName;
												directives.push(directive);
											} catch (e) {
												$exceptionHandler(e);
											}
										});
										return directives;
									}]);
							}
							hasDirectives[name].push(directiveFactory);
						} else {
							forEach(name, reverseParams(registerDirective));
						}
						return this;
					};


					/**
					 * @ngdoc method
					 * @name $compileProvider#aHrefSanitizationWhitelist
					 * @kind function
					 *
					 * @description
					 * Retrieves or overrides the default regular expression that is used for whitelisting of safe
					 * urls during a[href] sanitization.
					 *
					 * The sanitization is a security measure aimed at preventing XSS attacks via html links.
					 *
					 * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
					 * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
					 * regular expression. If a match is found, the original url is written into the dom. Otherwise,
					 * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
					 *
					 * @param {RegExp=} regexp New regexp to whitelist urls with.
					 * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
					 *    chaining otherwise.
					 */
					this.aHrefSanitizationWhitelist = function (regexp) {
						if (isDefined(regexp)) {
							$$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
							return this;
						} else {
							return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
						}
					};


					/**
					 * @ngdoc method
					 * @name $compileProvider#imgSrcSanitizationWhitelist
					 * @kind function
					 *
					 * @description
					 * Retrieves or overrides the default regular expression that is used for whitelisting of safe
					 * urls during img[src] sanitization.
					 *
					 * The sanitization is a security measure aimed at prevent XSS attacks via html links.
					 *
					 * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
					 * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
					 * regular expression. If a match is found, the original url is written into the dom. Otherwise,
					 * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
					 *
					 * @param {RegExp=} regexp New regexp to whitelist urls with.
					 * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
					 *    chaining otherwise.
					 */
					this.imgSrcSanitizationWhitelist = function (regexp) {
						if (isDefined(regexp)) {
							$$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
							return this;
						} else {
							return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
						}
					};

					/**
					 * @ngdoc method
					 * @name  $compileProvider#debugInfoEnabled
					 *
					 * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
					 * current debugInfoEnabled state
					 * @returns {*} current value if used as getter or itself (chaining) if used as setter
					 *
					 * @kind function
					 *
					 * @description
					 * Call this method to enable/disable various debug runtime information in the compiler such as adding
					 * binding information and a reference to the current scope on to DOM elements.
					 * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
					 * * `ng-binding` CSS class
					 * * `$binding` data property containing an array of the binding expressions
					 *
					 * You may want to disable this in production for a significant performance boost. See
					 * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
					 *
					 * The default value is true.
					 */
					var debugInfoEnabled = true;
					this.debugInfoEnabled = function (enabled) {
						if (isDefined(enabled)) {
							debugInfoEnabled = enabled;
							return this;
						}
						return debugInfoEnabled;
					};

					this.$get = [
						'$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
						'$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
						function ($injector, $interpolate, $exceptionHandler, $templateRequest, $parse,
								  $controller, $rootScope, $document, $sce, $animate, $$sanitizeUri) {

							var Attributes = function (element, attributesToCopy) {
								if (attributesToCopy) {
									var keys = Object.keys(attributesToCopy);
									var i, l, key;

									for (i = 0, l = keys.length; i < l; i++) {
										key = keys[i];
										this[key] = attributesToCopy[key];
									}
								} else {
									this.$attr = {};
								}

								this.$$element = element;
							};

							Attributes.prototype = {
								/**
								 * @ngdoc method
								 * @name $compile.directive.Attributes#$normalize
								 * @kind function
								 *
								 * @description
								 * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
								 * `data-`) to its normalized, camelCase form.
								 *
								 * Also there is special case for Moz prefix starting with upper case letter.
								 *
								 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
								 *
								 * @param {string} name Name to normalize
								 */
								$normalize: directiveNormalize,


								/**
								 * @ngdoc method
								 * @name $compile.directive.Attributes#$addClass
								 * @kind function
								 *
								 * @description
								 * Adds the CSS class value specified by the classVal parameter to the element. If animations
								 * are enabled then an animation will be triggered for the class addition.
								 *
								 * @param {string} classVal The className value that will be added to the element
								 */
								$addClass: function (classVal) {
									if (classVal && classVal.length > 0) {
										$animate.addClass(this.$$element, classVal);
									}
								},

								/**
								 * @ngdoc method
								 * @name $compile.directive.Attributes#$removeClass
								 * @kind function
								 *
								 * @description
								 * Removes the CSS class value specified by the classVal parameter from the element. If
								 * animations are enabled then an animation will be triggered for the class removal.
								 *
								 * @param {string} classVal The className value that will be removed from the element
								 */
								$removeClass: function (classVal) {
									if (classVal && classVal.length > 0) {
										$animate.removeClass(this.$$element, classVal);
									}
								},

								/**
								 * @ngdoc method
								 * @name $compile.directive.Attributes#$updateClass
								 * @kind function
								 *
								 * @description
								 * Adds and removes the appropriate CSS class values to the element based on the difference
								 * between the new and old CSS class values (specified as newClasses and oldClasses).
								 *
								 * @param {string} newClasses The current CSS className value
								 * @param {string} oldClasses The former CSS className value
								 */
								$updateClass: function (newClasses, oldClasses) {
									var toAdd = tokenDifference(newClasses, oldClasses);
									if (toAdd && toAdd.length) {
										$animate.addClass(this.$$element, toAdd);
									}

									var toRemove = tokenDifference(oldClasses, newClasses);
									if (toRemove && toRemove.length) {
										$animate.removeClass(this.$$element, toRemove);
									}
								},

								/**
								 * Set a normalized attribute on the element in a way such that all directives
								 * can share the attribute. This function properly handles boolean attributes.
								 * @param {string} key Normalized key. (ie ngAttribute)
								 * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
								 * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
								 *     Defaults to true.
								 * @param {string=} attrName Optional none normalized name. Defaults to key.
								 */
								$set: function (key, value, writeAttr, attrName) {
									// TODO: decide whether or not to throw an error if "class"
									//is set through this function since it may cause $updateClass to
									//become unstable.

									var node = this.$$element[0],
										booleanKey = getBooleanAttrName(node, key),
										aliasedKey = getAliasedAttrName(node, key),
										observer = key,
										nodeName;

									if (booleanKey) {
										this.$$element.prop(key, value);
										attrName = booleanKey;
									} else if (aliasedKey) {
										this[aliasedKey] = value;
										observer = aliasedKey;
									}

									this[key] = value;

									// translate normalized key to actual key
									if (attrName) {
										this.$attr[key] = attrName;
									} else {
										attrName = this.$attr[key];
										if (!attrName) {
											this.$attr[key] = attrName = snake_case(key, '-');
										}
									}

									nodeName = nodeName_(this.$$element);

									if ((nodeName === 'a' && key === 'href') ||
										(nodeName === 'img' && key === 'src')) {
										// sanitize a[href] and img[src] values
										this[key] = value = $$sanitizeUri(value, key === 'src');
									} else if (nodeName === 'img' && key === 'srcset') {
										// sanitize img[srcset] values
										var result = "";

										// first check if there are spaces because it's not the same pattern
										var trimmedSrcset = trim(value);
										//                (   999x   ,|   999w   ,|   ,|,   )
										var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
										var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

										// split srcset into tuple of uri and descriptor except for the last item
										var rawUris = trimmedSrcset.split(pattern);

										// for each tuples
										var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
										for (var i = 0; i < nbrUrisWith2parts; i++) {
											var innerIdx = i * 2;
											// sanitize the uri
											result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
											// add the descriptor
											result += (" " + trim(rawUris[innerIdx + 1]));
										}

										// split the last item into uri and descriptor
										var lastTuple = trim(rawUris[i * 2]).split(/\s/);

										// sanitize the last uri
										result += $$sanitizeUri(trim(lastTuple[0]), true);

										// and add the last descriptor if any
										if (lastTuple.length === 2) {
											result += (" " + trim(lastTuple[1]));
										}
										this[key] = value = result;
									}

									if (writeAttr !== false) {
										if (value === null || value === undefined) {
											this.$$element.removeAttr(attrName);
										} else {
											this.$$element.attr(attrName, value);
										}
									}

									// fire observers
									var $$observers = this.$$observers;
									$$observers && forEach($$observers[observer], function (fn) {
										try {
											fn(value);
										} catch (e) {
											$exceptionHandler(e);
										}
									});
								},


								/**
								 * @ngdoc method
								 * @name $compile.directive.Attributes#$observe
								 * @kind function
								 *
								 * @description
								 * Observes an interpolated attribute.
								 *
								 * The observer function will be invoked once during the next `$digest` following
								 * compilation. The observer is then invoked whenever the interpolated value
								 * changes.
								 *
								 * @param {string} key Normalized key. (ie ngAttribute) .
								 * @param {function(interpolatedValue)} fn Function that will be called whenever
								 the interpolated value of the attribute changes.
								 *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.
								 * @returns {function()} Returns a deregistration function for this observer.
								 */
								$observe: function (key, fn) {
									var attrs = this,
										$$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
										listeners = ($$observers[key] || ($$observers[key] = []));

									listeners.push(fn);
									$rootScope.$evalAsync(function () {
										if (!listeners.$$inter && attrs.hasOwnProperty(key)) {
											// no one registered attribute interpolation function, so lets call it manually
											fn(attrs[key]);
										}
									});

									return function () {
										arrayRemove(listeners, fn);
									};
								}
							};


							function safeAddClass($element, className) {
								try {
									$element.addClass(className);
								} catch (e) {
									// ignore, since it means that we are trying to set class on
									// SVG element, where class name is read-only.
								}
							}


							var startSymbol = $interpolate.startSymbol(),
								endSymbol = $interpolate.endSymbol(),
								denormalizeTemplate = (startSymbol == '{{' || endSymbol == '}}')
									? identity
									: function denormalizeTemplate(template) {
									return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
								},
								NG_ATTR_BINDING = /^ngAttr[A-Z]/;

							compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
								var bindings = $element.data('$binding') || [];

								if (isArray(binding)) {
									bindings = bindings.concat(binding);
								} else {
									bindings.push(binding);
								}

								$element.data('$binding', bindings);
							} : noop;

							compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
								safeAddClass($element, 'ng-binding');
							} : noop;

							compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
								var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
								$element.data(dataName, scope);
							} : noop;

							compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
								safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
							} : noop;

							return compile;

							//================================

							function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
											 previousCompileContext) {
								if (!($compileNodes instanceof jqLite)) {
									// jquery always rewraps, whereas we need to preserve the original selector so that we can
									// modify it.
									$compileNodes = jqLite($compileNodes);
								}
								// We can not compile top level text elements since text nodes can be merged and we will
								// not be able to attach scope data to them, so we will wrap them in <span>
								forEach($compileNodes, function (node, index) {
									if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */) {
										$compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];
									}
								});
								var compositeLinkFn =
									compileNodes($compileNodes, transcludeFn, $compileNodes,
										maxPriority, ignoreDirective, previousCompileContext);
								compile.$$addScopeClass($compileNodes);
								var namespace = null;
								return function publicLinkFn(scope, cloneConnectFn, options) {
									assertArg(scope, 'scope');

									options = options || {};
									var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
										transcludeControllers = options.transcludeControllers,
										futureParentElement = options.futureParentElement;

									// When `parentBoundTranscludeFn` is passed, it is a
									// `controllersBoundTransclude` function (it was previously passed
									// as `transclude` to directive.link) so we must unwrap it to get
									// its `boundTranscludeFn`
									if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
										parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
									}

									if (!namespace) {
										namespace = detectNamespaceForChildElements(futureParentElement);
									}
									var $linkNode;
									if (namespace !== 'html') {
										// When using a directive with replace:true and templateUrl the $compileNodes
										// (or a child element inside of them)
										// might change, so we need to recreate the namespace adapted compileNodes
										// for call to the link function.
										// Note: This will already clone the nodes...
										$linkNode = jqLite(
											wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
										);
									} else if (cloneConnectFn) {
										// important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
										// and sometimes changes the structure of the DOM.
										$linkNode = JQLitePrototype.clone.call($compileNodes);
									} else {
										$linkNode = $compileNodes;
									}

									if (transcludeControllers) {
										for (var controllerName in transcludeControllers) {
											$linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
										}
									}

									compile.$$addScopeInfo($linkNode, scope);

									if (cloneConnectFn) cloneConnectFn($linkNode, scope);
									if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
									return $linkNode;
								};
							}

							function detectNamespaceForChildElements(parentElement) {
								// TODO: Make this detect MathML as well...
								var node = parentElement && parentElement[0];
								if (!node) {
									return 'html';
								} else {
									return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';
								}
							}

							/**
							 * Compile function matches each node in nodeList against the directives. Once all directives
							 * for a particular node are collected their compile functions are executed. The compile
							 * functions return values - the linking functions - are combined into a composite linking
							 * function, which is the a linking function for the node.
							 *
							 * @param {NodeList} nodeList an array of nodes or NodeList to compile
							 * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
							 *        scope argument is auto-generated to the new child of the transcluded parent scope.
							 * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
							 *        the rootElement must be set the jqLite collection of the compile root. This is
							 *        needed so that the jqLite collection items can be replaced with widgets.
							 * @param {number=} maxPriority Max directive priority.
							 * @returns {Function} A composite linking function of all of the matched directives or null.
							 */
							function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
												  previousCompileContext) {
								var linkFns = [],
									attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;

								for (var i = 0; i < nodeList.length; i++) {
									attrs = new Attributes();

									// we must always refer to nodeList[i] since the nodes can be replaced underneath us.
									directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
										ignoreDirective);

									nodeLinkFn = (directives.length)
										? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
										null, [], [], previousCompileContext)
										: null;

									if (nodeLinkFn && nodeLinkFn.scope) {
										compile.$$addScopeClass(attrs.$$element);
									}

									childLinkFn = (nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length)
										? null
										: compileNodes(childNodes,
										nodeLinkFn ? (
										(nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
										&& nodeLinkFn.transclude) : transcludeFn);

									if (nodeLinkFn || childLinkFn) {
										linkFns.push(i, nodeLinkFn, childLinkFn);
										linkFnFound = true;
										nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
									}

									//use the previous context only for the first element in the virtual group
									previousCompileContext = null;
								}

								// return a linking function if we have found anything, null otherwise
								return linkFnFound ? compositeLinkFn : null;

								function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
									var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
									var stableNodeList;


									if (nodeLinkFnFound) {
										// copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
										// offsets don't get screwed up
										var nodeListLength = nodeList.length;
										stableNodeList = new Array(nodeListLength);

										// create a sparse array by only copying the elements which have a linkFn
										for (i = 0; i < linkFns.length; i += 3) {
											idx = linkFns[i];
											stableNodeList[idx] = nodeList[idx];
										}
									} else {
										stableNodeList = nodeList;
									}

									for (i = 0, ii = linkFns.length; i < ii;) {
										node = stableNodeList[linkFns[i++]];
										nodeLinkFn = linkFns[i++];
										childLinkFn = linkFns[i++];

										if (nodeLinkFn) {
											if (nodeLinkFn.scope) {
												childScope = scope.$new();
												compile.$$addScopeInfo(jqLite(node), childScope);
												var destroyBindings = nodeLinkFn.$$destroyBindings;
												if (destroyBindings) {
													nodeLinkFn.$$destroyBindings = null;
													childScope.$on('$destroyed', destroyBindings);
												}
											} else {
												childScope = scope;
											}

											if (nodeLinkFn.transcludeOnThisElement) {
												childBoundTranscludeFn = createBoundTranscludeFn(
													scope, nodeLinkFn.transclude, parentBoundTranscludeFn);

											} else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
												childBoundTranscludeFn = parentBoundTranscludeFn;

											} else if (!parentBoundTranscludeFn && transcludeFn) {
												childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

											} else {
												childBoundTranscludeFn = null;
											}

											nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn,
												nodeLinkFn);

										} else if (childLinkFn) {
											childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
										}
									}
								}
							}

							function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {

								var boundTranscludeFn = function (transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

									if (!transcludedScope) {
										transcludedScope = scope.$new(false, containingScope);
										transcludedScope.$$transcluded = true;
									}

									return transcludeFn(transcludedScope, cloneFn, {
										parentBoundTranscludeFn: previousBoundTranscludeFn,
										transcludeControllers: controllers,
										futureParentElement: futureParentElement
									});
								};

								return boundTranscludeFn;
							}

							/**
							 * Looks for directives on the given node and adds them to the directive collection which is
							 * sorted.
							 *
							 * @param node Node to search.
							 * @param directives An array to which the directives are added to. This array is sorted before
							 *        the function returns.
							 * @param attrs The shared attrs object which is used to populate the normalized attributes.
							 * @param {number=} maxPriority Max directive priority.
							 */
							function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
								var nodeType = node.nodeType,
									attrsMap = attrs.$attr,
									match,
									className;

								switch (nodeType) {
									case NODE_TYPE_ELEMENT: /* Element */
										// use the node name: <directive>
										addDirective(directives,
											directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

										// iterate over the attributes
										for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
												 j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
											var attrStartName = false;
											var attrEndName = false;

											attr = nAttrs[j];
											name = attr.name;
											value = trim(attr.value);

											// support ngAttr attribute binding
											ngAttrName = directiveNormalize(name);
											if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
												name = name.replace(PREFIX_REGEXP, '')
													.substr(8).replace(/_(.)/g, function (match, letter) {
														return letter.toUpperCase();
													});
											}

											var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
											if (directiveIsMultiElement(directiveNName)) {
												if (ngAttrName === directiveNName + 'Start') {
													attrStartName = name;
													attrEndName = name.substr(0, name.length - 5) + 'end';
													name = name.substr(0, name.length - 6);
												}
											}

											nName = directiveNormalize(name.toLowerCase());
											attrsMap[nName] = name;
											if (isNgAttr || !attrs.hasOwnProperty(nName)) {
												attrs[nName] = value;
												if (getBooleanAttrName(node, nName)) {
													attrs[nName] = true; // presence means true
												}
											}
											addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
											addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
												attrEndName);
										}

										// use class as directive
										className = node.className;
										if (isObject(className)) {
											// Maybe SVGAnimatedString
											className = className.animVal;
										}
										if (isString(className) && className !== '') {
											while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
												nName = directiveNormalize(match[2]);
												if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
													attrs[nName] = trim(match[3]);
												}
												className = className.substr(match.index + match[0].length);
											}
										}
										break;
									case NODE_TYPE_TEXT: /* Text Node */
										if (msie === 11) {
											// Workaround for #11781
											while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {
												node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
												node.parentNode.removeChild(node.nextSibling);
											}
										}
										addTextInterpolateDirective(directives, node.nodeValue);
										break;
									case NODE_TYPE_COMMENT: /* Comment */
										try {
											match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
											if (match) {
												nName = directiveNormalize(match[1]);
												if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
													attrs[nName] = trim(match[2]);
												}
											}
										} catch (e) {
											// turns out that under some circumstances IE9 throws errors when one attempts to read
											// comment's node value.
											// Just ignore it and continue. (Can't seem to reproduce in test case.)
										}
										break;
								}

								directives.sort(byPriority);
								return directives;
							}

							/**
							 * Given a node with an directive-start it collects all of the siblings until it finds
							 * directive-end.
							 * @param node
							 * @param attrStart
							 * @param attrEnd
							 * @returns {*}
							 */
							function groupScan(node, attrStart, attrEnd) {
								var nodes = [];
								var depth = 0;
								if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
									do {
										if (!node) {
											throw $compileMinErr('uterdir',
												"Unterminated attribute, found '{0}' but no matching '{1}' found.",
												attrStart, attrEnd);
										}
										if (node.nodeType == NODE_TYPE_ELEMENT) {
											if (node.hasAttribute(attrStart)) depth++;
											if (node.hasAttribute(attrEnd)) depth--;
										}
										nodes.push(node);
										node = node.nextSibling;
									} while (depth > 0);
								} else {
									nodes.push(node);
								}

								return jqLite(nodes);
							}

							/**
							 * Wrapper for linking function which converts normal linking function into a grouped
							 * linking function.
							 * @param linkFn
							 * @param attrStart
							 * @param attrEnd
							 * @returns {Function}
							 */
							function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
								return function (scope, element, attrs, controllers, transcludeFn) {
									element = groupScan(element[0], attrStart, attrEnd);
									return linkFn(scope, element, attrs, controllers, transcludeFn);
								};
							}

							/**
							 * Once the directives have been collected, their compile functions are executed. This method
							 * is responsible for inlining directive templates as well as terminating the application
							 * of the directives if the terminal directive has been reached.
							 *
							 * @param {Array} directives Array of collected directives to execute their compile function.
							 *        this needs to be pre-sorted by priority order.
							 * @param {Node} compileNode The raw DOM node to apply the compile functions to
							 * @param {Object} templateAttrs The shared attribute function
							 * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
							 *                                                  scope argument is auto-generated to the new
							 *                                                  child of the transcluded parent scope.
							 * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
							 *                              argument has the root jqLite array so that we can replace nodes
							 *                              on it.
							 * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
							 *                                           compiling the transclusion.
							 * @param {Array.<Function>} preLinkFns
							 * @param {Array.<Function>} postLinkFns
							 * @param {Object} previousCompileContext Context used for previous compilation of the current
							 *                                        node
							 * @returns {Function} linkFn
							 */
							function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
														   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
														   previousCompileContext) {
								previousCompileContext = previousCompileContext || {};

								var terminalPriority = -Number.MAX_VALUE,
									newScopeDirective = previousCompileContext.newScopeDirective,
									controllerDirectives = previousCompileContext.controllerDirectives,
									newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
									templateDirective = previousCompileContext.templateDirective,
									nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
									hasTranscludeDirective = false,
									hasTemplate = false,
									hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
									$compileNode = templateAttrs.$$element = jqLite(compileNode),
									directive,
									directiveName,
									$template,
									replaceDirective = originalReplaceDirective,
									childTranscludeFn = transcludeFn,
									linkFn,
									directiveValue;

								// executes all directives on the current element
								for (var i = 0, ii = directives.length; i < ii; i++) {
									directive = directives[i];
									var attrStart = directive.$$start;
									var attrEnd = directive.$$end;

									// collect multiblock sections
									if (attrStart) {
										$compileNode = groupScan(compileNode, attrStart, attrEnd);
									}
									$template = undefined;

									if (terminalPriority > directive.priority) {
										break; // prevent further processing of directives
									}

									if (directiveValue = directive.scope) {

										// skip the check for directives with async templates, we'll check the derived sync
										// directive when the template arrives
										if (!directive.templateUrl) {
											if (isObject(directiveValue)) {
												// This directive is trying to add an isolated scope.
												// Check that there is no scope of any kind already
												assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
													directive, $compileNode);
												newIsolateScopeDirective = directive;
											} else {
												// This directive is trying to add a child scope.
												// Check that there is no isolated scope already
												assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
													$compileNode);
											}
										}

										newScopeDirective = newScopeDirective || directive;
									}

									directiveName = directive.name;

									if (!directive.templateUrl && directive.controller) {
										directiveValue = directive.controller;
										controllerDirectives = controllerDirectives || createMap();
										assertNoDuplicate("'" + directiveName + "' controller",
											controllerDirectives[directiveName], directive, $compileNode);
										controllerDirectives[directiveName] = directive;
									}

									if (directiveValue = directive.transclude) {
										hasTranscludeDirective = true;

										// Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
										// This option should only be used by directives that know how to safely handle element transclusion,
										// where the transcluded nodes are added or replaced after linking.
										if (!directive.$$tlb) {
											assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
											nonTlbTranscludeDirective = directive;
										}

										if (directiveValue == 'element') {
											hasElementTranscludeDirective = true;
											terminalPriority = directive.priority;
											$template = $compileNode;
											$compileNode = templateAttrs.$$element =
												jqLite(document.createComment(' ' + directiveName + ': ' +
													templateAttrs[directiveName] + ' '));
											compileNode = $compileNode[0];
											replaceWith(jqCollection, sliceArgs($template), compileNode);

											childTranscludeFn = compile($template, transcludeFn, terminalPriority,
												replaceDirective && replaceDirective.name, {
													// Don't pass in:
													// - controllerDirectives - otherwise we'll create duplicates controllers
													// - newIsolateScopeDirective or templateDirective - combining templates with
													//   element transclusion doesn't make sense.
													//
													// We need only nonTlbTranscludeDirective so that we prevent putting transclusion
													// on the same element more than once.
													nonTlbTranscludeDirective: nonTlbTranscludeDirective
												});
										} else {
											$template = jqLite(jqLiteClone(compileNode)).contents();
											$compileNode.empty(); // clear contents
											childTranscludeFn = compile($template, transcludeFn);
										}
									}

									if (directive.template) {
										hasTemplate = true;
										assertNoDuplicate('template', templateDirective, directive, $compileNode);
										templateDirective = directive;

										directiveValue = (isFunction(directive.template))
											? directive.template($compileNode, templateAttrs)
											: directive.template;

										directiveValue = denormalizeTemplate(directiveValue);

										if (directive.replace) {
											replaceDirective = directive;
											if (jqLiteIsTextNode(directiveValue)) {
												$template = [];
											} else {
												$template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
											}
											compileNode = $template[0];

											if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
												throw $compileMinErr('tplrt',
													"Template for directive '{0}' must have exactly one root element. {1}",
													directiveName, '');
											}

											replaceWith(jqCollection, $compileNode, compileNode);

											var newTemplateAttrs = {$attr: {}};

											// combine directives from the original node and from the template:
											// - take the array of directives for this element
											// - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
											// - collect directives from the template and sort them by priority
											// - combine directives as: processed + template + unprocessed
											var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
											var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

											if (newIsolateScopeDirective) {
												markDirectivesAsIsolate(templateDirectives);
											}
											directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
											mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

											ii = directives.length;
										} else {
											$compileNode.html(directiveValue);
										}
									}

									if (directive.templateUrl) {
										hasTemplate = true;
										assertNoDuplicate('template', templateDirective, directive, $compileNode);
										templateDirective = directive;

										if (directive.replace) {
											replaceDirective = directive;
										}

										nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
											templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
												controllerDirectives: controllerDirectives,
												newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
												newIsolateScopeDirective: newIsolateScopeDirective,
												templateDirective: templateDirective,
												nonTlbTranscludeDirective: nonTlbTranscludeDirective
											});
										ii = directives.length;
									} else if (directive.compile) {
										try {
											linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
											if (isFunction(linkFn)) {
												addLinkFns(null, linkFn, attrStart, attrEnd);
											} else if (linkFn) {
												addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
											}
										} catch (e) {
											$exceptionHandler(e, startingTag($compileNode));
										}
									}

									if (directive.terminal) {
										nodeLinkFn.terminal = true;
										terminalPriority = Math.max(terminalPriority, directive.priority);
									}

								}

								nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
								nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
								nodeLinkFn.templateOnThisElement = hasTemplate;
								nodeLinkFn.transclude = childTranscludeFn;

								previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

								// might be normal or delayed nodeLinkFn depending on if templateUrl is present
								return nodeLinkFn;

								////////////////////

								function addLinkFns(pre, post, attrStart, attrEnd) {
									if (pre) {
										if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
										pre.require = directive.require;
										pre.directiveName = directiveName;
										if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
											pre = cloneAndAnnotateFn(pre, {isolateScope: true});
										}
										preLinkFns.push(pre);
									}
									if (post) {
										if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
										post.require = directive.require;
										post.directiveName = directiveName;
										if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
											post = cloneAndAnnotateFn(post, {isolateScope: true});
										}
										postLinkFns.push(post);
									}
								}


								function getControllers(directiveName, require, $element, elementControllers) {
									var value;

									if (isString(require)) {
										var match = require.match(REQUIRE_PREFIX_REGEXP);
										var name = require.substring(match[0].length);
										var inheritType = match[1] || match[3];
										var optional = match[2] === '?';

										//If only parents then start at the parent element
										if (inheritType === '^^') {
											$element = $element.parent();
											//Otherwise attempt getting the controller from elementControllers in case
											//the element is transcluded (and has no data) and to avoid .data if possible
										} else {
											value = elementControllers && elementControllers[name];
											value = value && value.instance;
										}

										if (!value) {
											var dataName = '$' + name + 'Controller';
											value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
										}

										if (!value && !optional) {
											throw $compileMinErr('ctreq',
												"Controller '{0}', required by directive '{1}', can't be found!",
												name, directiveName);
										}
									} else if (isArray(require)) {
										value = [];
										for (var i = 0, ii = require.length; i < ii; i++) {
											value[i] = getControllers(directiveName, require[i], $element, elementControllers);
										}
									}

									return value || null;
								}

								function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {
									var elementControllers = createMap();
									for (var controllerKey in controllerDirectives) {
										var directive = controllerDirectives[controllerKey];
										var locals = {
											$scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
											$element: $element,
											$attrs: attrs,
											$transclude: transcludeFn
										};

										var controller = directive.controller;
										if (controller == '@') {
											controller = attrs[directive.name];
										}

										var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

										// For directives with element transclusion the element is a comment,
										// but jQuery .data doesn't support attaching data to comment nodes as it's hard to
										// clean up (http://bugs.jquery.com/ticket/8335).
										// Instead, we save the controllers for the element in a local hash and attach to .data
										// later, once we have the actual element.
										elementControllers[directive.name] = controllerInstance;
										if (!hasElementTranscludeDirective) {
											$element.data('$' + directive.name + 'Controller', controllerInstance.instance);
										}
									}
									return elementControllers;
								}

								function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn,
													thisLinkFn) {
									var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,
										attrs;

									if (compileNode === linkNode) {
										attrs = templateAttrs;
										$element = templateAttrs.$$element;
									} else {
										$element = jqLite(linkNode);
										attrs = new Attributes($element, templateAttrs);
									}

									if (newIsolateScopeDirective) {
										isolateScope = scope.$new(true);
									}

									if (boundTranscludeFn) {
										// track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
										// is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
										transcludeFn = controllersBoundTransclude;
										transcludeFn.$$boundTransclude = boundTranscludeFn;
									}

									if (controllerDirectives) {
										elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
									}

									if (newIsolateScopeDirective) {
										// Initialize isolate scope bindings for new isolate scope directive.
										compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
										templateDirective === newIsolateScopeDirective.$$originalDirective)));
										compile.$$addScopeClass($element, true);
										isolateScope.$$isolateBindings =
											newIsolateScopeDirective.$$isolateBindings;
										initializeDirectiveBindings(scope, attrs, isolateScope,
											isolateScope.$$isolateBindings,
											newIsolateScopeDirective, isolateScope);
									}
									if (elementControllers) {
										// Initialize bindToController bindings for new/isolate scopes
										var scopeDirective = newIsolateScopeDirective || newScopeDirective;
										var bindings;
										var controllerForBindings;
										if (scopeDirective && elementControllers[scopeDirective.name]) {
											bindings = scopeDirective.$$bindings.bindToController;
											controller = elementControllers[scopeDirective.name];

											if (controller && controller.identifier && bindings) {
												controllerForBindings = controller;
												thisLinkFn.$$destroyBindings =
													initializeDirectiveBindings(scope, attrs, controller.instance,
														bindings, scopeDirective);
											}
										}
										for (i in elementControllers) {
											controller = elementControllers[i];
											var controllerResult = controller();

											if (controllerResult !== controller.instance) {
												// If the controller constructor has a return value, overwrite the instance
												// from setupControllers and update the element data
												controller.instance = controllerResult;
												$element.data('$' + i + 'Controller', controllerResult);
												if (controller === controllerForBindings) {
													// Remove and re-install bindToController bindings
													thisLinkFn.$$destroyBindings();
													thisLinkFn.$$destroyBindings =
														initializeDirectiveBindings(scope, attrs, controllerResult, bindings, scopeDirective);
												}
											}
										}
									}

									// PRELINKING
									for (i = 0, ii = preLinkFns.length; i < ii; i++) {
										linkFn = preLinkFns[i];
										invokeLinkFn(linkFn,
											linkFn.isolateScope ? isolateScope : scope,
											$element,
											attrs,
											linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
											transcludeFn
										);
									}

									// RECURSION
									// We only pass the isolate scope, if the isolate directive has a template,
									// otherwise the child elements do not belong to the isolate directive.
									var scopeToChild = scope;
									if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
										scopeToChild = isolateScope;
									}
									childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

									// POSTLINKING
									for (i = postLinkFns.length - 1; i >= 0; i--) {
										linkFn = postLinkFns[i];
										invokeLinkFn(linkFn,
											linkFn.isolateScope ? isolateScope : scope,
											$element,
											attrs,
											linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
											transcludeFn
										);
									}

									// This is the function that is injected as `$transclude`.
									// Note: all arguments are optional!
									function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
										var transcludeControllers;

										// No scope passed in:
										if (!isScope(scope)) {
											futureParentElement = cloneAttachFn;
											cloneAttachFn = scope;
											scope = undefined;
										}

										if (hasElementTranscludeDirective) {
											transcludeControllers = elementControllers;
										}
										if (!futureParentElement) {
											futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
										}
										return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
									}
								}
							}

							function markDirectivesAsIsolate(directives) {
								// mark all directives as needing isolate scope.
								for (var j = 0, jj = directives.length; j < jj; j++) {
									directives[j] = inherit(directives[j], {$$isolateScope: true});
								}
							}

							/**
							 * looks up the directive and decorates it with exception handling and proper parameters. We
							 * call this the boundDirective.
							 *
							 * @param {string} name name of the directive to look up.
							 * @param {string} location The directive must be found in specific format.
							 *   String containing any of theses characters:
							 *
							 *   * `E`: element name
							 *   * `A': attribute
							 *   * `C`: class
							 *   * `M`: comment
							 * @returns {boolean} true if directive was added.
							 */
							function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
												  endAttrName) {
								if (name === ignoreDirective) return null;
								var match = null;
								if (hasDirectives.hasOwnProperty(name)) {
									for (var directive, directives = $injector.get(name + Suffix),
											 i = 0, ii = directives.length; i < ii; i++) {
										try {
											directive = directives[i];
											if ((maxPriority === undefined || maxPriority > directive.priority) &&
												directive.restrict.indexOf(location) != -1) {
												if (startAttrName) {
													directive = inherit(directive, {
														$$start: startAttrName,
														$$end: endAttrName
													});
												}
												tDirectives.push(directive);
												match = directive;
											}
										} catch (e) {
											$exceptionHandler(e);
										}
									}
								}
								return match;
							}


							/**
							 * looks up the directive and returns true if it is a multi-element directive,
							 * and therefore requires DOM nodes between -start and -end markers to be grouped
							 * together.
							 *
							 * @param {string} name name of the directive to look up.
							 * @returns true if directive was registered as multi-element.
							 */
							function directiveIsMultiElement(name) {
								if (hasDirectives.hasOwnProperty(name)) {
									for (var directive, directives = $injector.get(name + Suffix),
											 i = 0, ii = directives.length; i < ii; i++) {
										directive = directives[i];
										if (directive.multiElement) {
											return true;
										}
									}
								}
								return false;
							}

							/**
							 * When the element is replaced with HTML template then the new attributes
							 * on the template need to be merged with the existing attributes in the DOM.
							 * The desired effect is to have both of the attributes present.
							 *
							 * @param {object} dst destination attributes (original DOM)
							 * @param {object} src source attributes (from the directive template)
							 */
							function mergeTemplateAttributes(dst, src) {
								var srcAttr = src.$attr,
									dstAttr = dst.$attr,
									$element = dst.$$element;

								// reapply the old attributes to the new element
								forEach(dst, function (value, key) {
									if (key.charAt(0) != '$') {
										if (src[key] && src[key] !== value) {
											value += (key === 'style' ? ';' : ' ') + src[key];
										}
										dst.$set(key, value, true, srcAttr[key]);
									}
								});

								// copy the new attributes on the old attrs object
								forEach(src, function (value, key) {
									if (key == 'class') {
										safeAddClass($element, value);
										dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
									} else if (key == 'style') {
										$element.attr('style', $element.attr('style') + ';' + value);
										dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
										// `dst` will never contain hasOwnProperty as DOM parser won't let it.
										// You will get an "InvalidCharacterError: DOM Exception 5" error if you
										// have an attribute like "has-own-property" or "data-has-own-property", etc.
									} else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
										dst[key] = value;
										dstAttr[key] = srcAttr[key];
									}
								});
							}


							function compileTemplateUrl(directives, $compileNode, tAttrs,
														$rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
								var linkQueue = [],
									afterTemplateNodeLinkFn,
									afterTemplateChildLinkFn,
									beforeTemplateCompileNode = $compileNode[0],
									origAsyncDirective = directives.shift(),
									derivedSyncDirective = inherit(origAsyncDirective, {
										templateUrl: null,
										transclude: null,
										replace: null,
										$$originalDirective: origAsyncDirective
									}),
									templateUrl = (isFunction(origAsyncDirective.templateUrl))
										? origAsyncDirective.templateUrl($compileNode, tAttrs)
										: origAsyncDirective.templateUrl,
									templateNamespace = origAsyncDirective.templateNamespace;

								$compileNode.empty();

								$templateRequest(templateUrl)
									.then(function (content) {
										var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

										content = denormalizeTemplate(content);

										if (origAsyncDirective.replace) {
											if (jqLiteIsTextNode(content)) {
												$template = [];
											} else {
												$template = removeComments(wrapTemplate(templateNamespace, trim(content)));
											}
											compileNode = $template[0];

											if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
												throw $compileMinErr('tplrt',
													"Template for directive '{0}' must have exactly one root element. {1}",
													origAsyncDirective.name, templateUrl);
											}

											tempTemplateAttrs = {$attr: {}};
											replaceWith($rootElement, $compileNode, compileNode);
											var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

											if (isObject(origAsyncDirective.scope)) {
												markDirectivesAsIsolate(templateDirectives);
											}
											directives = templateDirectives.concat(directives);
											mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
										} else {
											compileNode = beforeTemplateCompileNode;
											$compileNode.html(content);
										}

										directives.unshift(derivedSyncDirective);

										afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
											childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
											previousCompileContext);
										forEach($rootElement, function (node, i) {
											if (node == compileNode) {
												$rootElement[i] = $compileNode[0];
											}
										});
										afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

										while (linkQueue.length) {
											var scope = linkQueue.shift(),
												beforeTemplateLinkNode = linkQueue.shift(),
												linkRootElement = linkQueue.shift(),
												boundTranscludeFn = linkQueue.shift(),
												linkNode = $compileNode[0];

											if (scope.$$destroyed) continue;

											if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
												var oldClasses = beforeTemplateLinkNode.className;

												if (!(previousCompileContext.hasElementTranscludeDirective &&
													origAsyncDirective.replace)) {
													// it was cloned therefore we have to clone as well.
													linkNode = jqLiteClone(compileNode);
												}
												replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

												// Copy in CSS classes from original node
												safeAddClass(jqLite(linkNode), oldClasses);
											}
											if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
												childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
											} else {
												childBoundTranscludeFn = boundTranscludeFn;
											}
											afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
												childBoundTranscludeFn, afterTemplateNodeLinkFn);
										}
										linkQueue = null;
									});

								return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
									var childBoundTranscludeFn = boundTranscludeFn;
									if (scope.$$destroyed) return;
									if (linkQueue) {
										linkQueue.push(scope,
											node,
											rootElement,
											childBoundTranscludeFn);
									} else {
										if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
											childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
										}
										afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn,
											afterTemplateNodeLinkFn);
									}
								};
							}


							/**
							 * Sorting function for bound directives.
							 */
							function byPriority(a, b) {
								var diff = b.priority - a.priority;
								if (diff !== 0) return diff;
								if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
								return a.index - b.index;
							}

							function assertNoDuplicate(what, previousDirective, directive, element) {

								function wrapModuleNameIfDefined(moduleName) {
									return moduleName ?
										(' (module: ' + moduleName + ')') :
										'';
								}

								if (previousDirective) {
									throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
										previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
										directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
								}
							}


							function addTextInterpolateDirective(directives, text) {
								var interpolateFn = $interpolate(text, true);
								if (interpolateFn) {
									directives.push({
										priority: 0,
										compile: function textInterpolateCompileFn(templateNode) {
											var templateNodeParent = templateNode.parent(),
												hasCompileParent = !!templateNodeParent.length;

											// When transcluding a template that has bindings in the root
											// we don't have a parent and thus need to add the class during linking fn.
											if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

											return function textInterpolateLinkFn(scope, node) {
												var parent = node.parent();
												if (!hasCompileParent) compile.$$addBindingClass(parent);
												compile.$$addBindingInfo(parent, interpolateFn.expressions);
												scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
													node[0].nodeValue = value;
												});
											};
										}
									});
								}
							}


							function wrapTemplate(type, template) {
								type = lowercase(type || 'html');
								switch (type) {
									case 'svg':
									case 'math':
										var wrapper = document.createElement('div');
										wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
										return wrapper.childNodes[0].childNodes;
									default:
										return template;
								}
							}


							function getTrustedContext(node, attrNormalizedName) {
								if (attrNormalizedName == "srcdoc") {
									return $sce.HTML;
								}
								var tag = nodeName_(node);
								// maction[xlink:href] can source SVG.  It's not limited to <maction>.
								if (attrNormalizedName == "xlinkHref" ||
									(tag == "form" && attrNormalizedName == "action") ||
									(tag != "img" && (attrNormalizedName == "src" ||
									attrNormalizedName == "ngSrc"))) {
									return $sce.RESOURCE_URL;
								}
							}


							function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
								var trustedContext = getTrustedContext(node, name);
								allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

								var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

								// no interpolation found -> ignore
								if (!interpolateFn) return;


								if (name === "multiple" && nodeName_(node) === "select") {
									throw $compileMinErr("selmulti",
										"Binding to the 'multiple' attribute is not supported. Element: {0}",
										startingTag(node));
								}

								directives.push({
									priority: 100,
									compile: function () {
										return {
											pre: function attrInterpolatePreLinkFn(scope, element, attr) {
												var $$observers = (attr.$$observers || (attr.$$observers = {}));

												if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
													throw $compileMinErr('nodomevents',
														"Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
														"ng- versions (such as ng-click instead of onclick) instead.");
												}

												// If the attribute has changed since last $interpolate()ed
												var newValue = attr[name];
												if (newValue !== value) {
													// we need to interpolate again since the attribute value has been updated
													// (e.g. by another directive's compile function)
													// ensure unset/empty values make interpolateFn falsy
													interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
													value = newValue;
												}

												// if attribute was updated so that there is no interpolation going on we don't want to
												// register any observers
												if (!interpolateFn) return;

												// initialize attr object so that it's ready in case we need the value for isolate
												// scope initialization, otherwise the value would not be available from isolate
												// directive's linking fn during linking phase
												attr[name] = interpolateFn(scope);

												($$observers[name] || ($$observers[name] = [])).$$inter = true;
												(attr.$$observers && attr.$$observers[name].$$scope || scope).
													$watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
														//special case for class attribute addition + removal
														//so that class changes can tap into the animation
														//hooks provided by the $animate service. Be sure to
														//skip animations when the first digest occurs (when
														//both the new and the old values are the same) since
														//the CSS classes are the non-interpolated values
														if (name === 'class' && newValue != oldValue) {
															attr.$updateClass(newValue, oldValue);
														} else {
															attr.$set(name, newValue);
														}
													});
											}
										};
									}
								});
							}


							/**
							 * This is a special jqLite.replaceWith, which can replace items which
							 * have no parents, provided that the containing jqLite collection is provided.
							 *
							 * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
							 *                               in the root of the tree.
							 * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
							 *                                  the shell, but replace its DOM node reference.
							 * @param {Node} newNode The new DOM node.
							 */
							function replaceWith($rootElement, elementsToRemove, newNode) {
								var firstElementToRemove = elementsToRemove[0],
									removeCount = elementsToRemove.length,
									parent = firstElementToRemove.parentNode,
									i, ii;

								if ($rootElement) {
									for (i = 0, ii = $rootElement.length; i < ii; i++) {
										if ($rootElement[i] == firstElementToRemove) {
											$rootElement[i++] = newNode;
											for (var j = i, j2 = j + removeCount - 1,
													 jj = $rootElement.length;
												 j < jj; j++, j2++) {
												if (j2 < jj) {
													$rootElement[j] = $rootElement[j2];
												} else {
													delete $rootElement[j];
												}
											}
											$rootElement.length -= removeCount - 1;

											// If the replaced element is also the jQuery .context then replace it
											// .context is a deprecated jQuery api, so we should set it only when jQuery set it
											// http://api.jquery.com/context/
											if ($rootElement.context === firstElementToRemove) {
												$rootElement.context = newNode;
											}
											break;
										}
									}
								}

								if (parent) {
									parent.replaceChild(newNode, firstElementToRemove);
								}

								// TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?
								var fragment = document.createDocumentFragment();
								fragment.appendChild(firstElementToRemove);

								if (jqLite.hasData(firstElementToRemove)) {
									// Copy over user data (that includes Angular's $scope etc.). Don't copy private
									// data here because there's no public interface in jQuery to do that and copying over
									// event listeners (which is the main use of private data) wouldn't work anyway.
									jqLite(newNode).data(jqLite(firstElementToRemove).data());

									// Remove data of the replaced element. We cannot just call .remove()
									// on the element it since that would deallocate scope that is needed
									// for the new node. Instead, remove the data "manually".
									if (!jQuery) {
										delete jqLite.cache[firstElementToRemove[jqLite.expando]];
									} else {
										// jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after
										// the replaced element. The cleanData version monkey-patched by Angular would cause
										// the scope to be trashed and we do need the very same scope to work with the new
										// element. However, we cannot just cache the non-patched version and use it here as
										// that would break if another library patches the method after Angular does (one
										// example is jQuery UI). Instead, set a flag indicating scope destroying should be
										// skipped this one time.
										skipDestroyOnNextJQueryCleanData = true;
										jQuery.cleanData([firstElementToRemove]);
									}
								}

								for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
									var element = elementsToRemove[k];
									jqLite(element).remove(); // must do this way to clean up expando
									fragment.appendChild(element);
									delete elementsToRemove[k];
								}

								elementsToRemove[0] = newNode;
								elementsToRemove.length = 1;
							}


							function cloneAndAnnotateFn(fn, annotation) {
								return extend(function () {
									return fn.apply(null, arguments);
								}, fn, annotation);
							}


							function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
								try {
									linkFn(scope, $element, attrs, controllers, transcludeFn);
								} catch (e) {
									$exceptionHandler(e, startingTag($element));
								}
							}


							// Set up $watches for isolate scope and controller bindings. This process
							// only occurs for isolate scopes and new scopes with controllerAs.
							function initializeDirectiveBindings(scope, attrs, destination, bindings,
																 directive, newScope) {
								var onNewScopeDestroyed;
								forEach(bindings, function (definition, scopeName) {
									var attrName = definition.attrName,
										optional = definition.optional,
										mode = definition.mode, // @, =, or &
										lastValue,
										parentGet, parentSet, compare;

									if (!hasOwnProperty.call(attrs, attrName)) {
										// In the case of user defined a binding with the same name as a method in Object.prototype but didn't set
										// the corresponding attribute. We need to make sure subsequent code won't access to the prototype function
										attrs[attrName] = undefined;
									}

									switch (mode) {

										case '@':
											if (!attrs[attrName] && !optional) {
												destination[scopeName] = undefined;
											}

											attrs.$observe(attrName, function (value) {
												destination[scopeName] = value;
											});
											attrs.$$observers[attrName].$$scope = scope;
											if (attrs[attrName]) {
												// If the attribute has been provided then we trigger an interpolation to ensure
												// the value is there for use in the link fn
												destination[scopeName] = $interpolate(attrs[attrName])(scope);
											}
											break;

										case '=':
											if (optional && !attrs[attrName]) {
												return;
											}
											parentGet = $parse(attrs[attrName]);

											if (parentGet.literal) {
												compare = equals;
											} else {
												compare = function (a, b) {
													return a === b || (a !== a && b !== b);
												};
											}
											parentSet = parentGet.assign || function () {
													// reset the change, or we will throw this exception on every $digest
													lastValue = destination[scopeName] = parentGet(scope);
													throw $compileMinErr('nonassign',
														"Expression '{0}' used with directive '{1}' is non-assignable!",
														attrs[attrName], directive.name);
												};
											lastValue = destination[scopeName] = parentGet(scope);
											var parentValueWatch = function parentValueWatch(parentValue) {
												if (!compare(parentValue, destination[scopeName])) {
													// we are out of sync and need to copy
													if (!compare(parentValue, lastValue)) {
														// parent changed and it has precedence
														destination[scopeName] = parentValue;
													} else {
														// if the parent can be assigned then do so
														parentSet(scope, parentValue = destination[scopeName]);
													}
												}
												return lastValue = parentValue;
											};
											parentValueWatch.$stateful = true;
											var unwatch;
											if (definition.collection) {
												unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
											} else {
												unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
											}
											onNewScopeDestroyed = (onNewScopeDestroyed || []);
											onNewScopeDestroyed.push(unwatch);
											break;

										case '&':
											parentGet = $parse(attrs[attrName]);

											// Don't assign noop to destination if expression is not valid
											if (parentGet === noop && optional) break;

											destination[scopeName] = function (locals) {
												return parentGet(scope, locals);
											};
											break;
									}
								});
								var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {
									for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {
										onNewScopeDestroyed[i]();
									}
								} : noop;
								if (newScope && destroyBindings !== noop) {
									newScope.$on('$destroy', destroyBindings);
									return noop;
								}
								return destroyBindings;
							}
						}];
				}

				var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;

				/**
				 * Converts all accepted directives format into proper directive name.
				 * @param name Name to normalize
				 */
				function directiveNormalize(name) {
					return camelCase(name.replace(PREFIX_REGEXP, ''));
				}

				/**
				 * @ngdoc type
				 * @name $compile.directive.Attributes
				 *
				 * @description
				 * A shared object between directive compile / linking functions which contains normalized DOM
				 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
				 * needed since all of these are treated as equivalent in Angular:
				 *
				 * ```
				 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
				 * ```
				 */

				/**
				 * @ngdoc property
				 * @name $compile.directive.Attributes#$attr
				 *
				 * @description
				 * A map of DOM element attribute names to the normalized name. This is
				 * needed to do reverse lookup from normalized name back to actual name.
				 */


				/**
				 * @ngdoc method
				 * @name $compile.directive.Attributes#$set
				 * @kind function
				 *
				 * @description
				 * Set DOM element attribute value.
				 *
				 *
				 * @param {string} name Normalized element attribute name of the property to modify. The name is
				 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
				 *          property to the original name.
				 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
				 */


				/**
				 * Closure compiler type information
				 */

				function nodesetLinkingFn(/* angular.Scope */ scope,
										  /* NodeList */ nodeList,
										  /* Element */ rootElement,
										  /* function(Function) */ boundTranscludeFn) {
				}

				function directiveLinkingFn(/* nodesetLinkingFn */ nodesetLinkingFn,
											/* angular.Scope */ scope,
											/* Node */ node,
											/* Element */ rootElement,
											/* function(Function) */ boundTranscludeFn) {
				}

				function tokenDifference(str1, str2) {
					var values = '',
						tokens1 = str1.split(/\s+/),
						tokens2 = str2.split(/\s+/);

					outer:
						for (var i = 0; i < tokens1.length; i++) {
							var token = tokens1[i];
							for (var j = 0; j < tokens2.length; j++) {
								if (token == tokens2[j]) continue outer;
							}
							values += (values.length > 0 ? ' ' : '') + token;
						}
					return values;
				}

				function removeComments(jqNodes) {
					jqNodes = jqLite(jqNodes);
					var i = jqNodes.length;

					if (i <= 1) {
						return jqNodes;
					}

					while (i--) {
						var node = jqNodes[i];
						if (node.nodeType === NODE_TYPE_COMMENT) {
							splice.call(jqNodes, i, 1);
						}
					}
					return jqNodes;
				}

				var $controllerMinErr = minErr('$controller');


				var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;

				function identifierForController(controller, ident) {
					if (ident && isString(ident)) return ident;
					if (isString(controller)) {
						var match = CNTRL_REG.exec(controller);
						if (match) return match[3];
					}
				}


				/**
				 * @ngdoc provider
				 * @name $controllerProvider
				 * @description
				 * The {@link ng.$controller $controller service} is used by Angular to create new
				 * controllers.
				 *
				 * This provider allows controller registration via the
				 * {@link ng.$controllerProvider#register register} method.
				 */
				function $ControllerProvider() {
					var controllers = {},
						globals = false;

					/**
					 * @ngdoc method
					 * @name $controllerProvider#register
					 * @param {string|Object} name Controller name, or an object map of controllers where the keys are
					 *    the names and the values are the constructors.
					 * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
					 *    annotations in the array notation).
					 */
					this.register = function (name, constructor) {
						assertNotHasOwnProperty(name, 'controller');
						if (isObject(name)) {
							extend(controllers, name);
						} else {
							controllers[name] = constructor;
						}
					};

					/**
					 * @ngdoc method
					 * @name $controllerProvider#allowGlobals
					 * @description If called, allows `$controller` to find controller constructors on `window`
					 */
					this.allowGlobals = function () {
						globals = true;
					};


					this.$get = ['$injector', '$window', function ($injector, $window) {

						/**
						 * @ngdoc service
						 * @name $controller
						 * @requires $injector
						 *
						 * @param {Function|string} constructor If called with a function then it's considered to be the
						 *    controller constructor function. Otherwise it's considered to be a string which is used
						 *    to retrieve the controller constructor using the following steps:
						 *
						 *    * check if a controller with given name is registered via `$controllerProvider`
						 *    * check if evaluating the string on the current scope returns a constructor
						 *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
						 *      `window` object (not recommended)
						 *
						 *    The string can use the `controller as property` syntax, where the controller instance is published
						 *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
						 *    to work correctly.
						 *
						 * @param {Object} locals Injection locals for Controller.
						 * @return {Object} Instance of given controller.
						 *
						 * @description
						 * `$controller` service is responsible for instantiating controllers.
						 *
						 * It's just a simple call to {@link auto.$injector $injector}, but extracted into
						 * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
						 */
						return function (expression, locals, later, ident) {
							// PRIVATE API:
							//   param `later` --- indicates that the controller's constructor is invoked at a later time.
							//                     If true, $controller will allocate the object with the correct
							//                     prototype chain, but will not invoke the controller until a returned
							//                     callback is invoked.
							//   param `ident` --- An optional label which overrides the label parsed from the controller
							//                     expression, if any.
							var instance, match, constructor, identifier;
							later = later === true;
							if (ident && isString(ident)) {
								identifier = ident;
							}

							if (isString(expression)) {
								match = expression.match(CNTRL_REG);
								if (!match) {
									throw $controllerMinErr('ctrlfmt',
										"Badly formed controller string '{0}'. " +
										"Must match `__name__ as __id__` or `__name__`.", expression);
								}
								constructor = match[1],
									identifier = identifier || match[3];
								expression = controllers.hasOwnProperty(constructor)
									? controllers[constructor]
									: getter(locals.$scope, constructor, true) ||
								(globals ? getter($window, constructor, true) : undefined);

								assertArgFn(expression, constructor, true);
							}

							if (later) {
								// Instantiate controller later:
								// This machinery is used to create an instance of the object before calling the
								// controller's constructor itself.
								//
								// This allows properties to be added to the controller before the constructor is
								// invoked. Primarily, this is used for isolate scope bindings in $compile.
								//
								// This feature is not intended for use by applications, and is thus not documented
								// publicly.
								// Object creation: http://jsperf.com/create-constructor/2
								var controllerPrototype = (isArray(expression) ?
									expression[expression.length - 1] : expression).prototype;
								instance = Object.create(controllerPrototype || null);

								if (identifier) {
									addIdentifier(locals, identifier, instance, constructor || expression.name);
								}

								var instantiate;
								return instantiate = extend(function () {
									var result = $injector.invoke(expression, instance, locals, constructor);
									if (result !== instance && (isObject(result) || isFunction(result))) {
										instance = result;
										if (identifier) {
											// If result changed, re-assign controllerAs value to scope.
											addIdentifier(locals, identifier, instance, constructor || expression.name);
										}
									}
									return instance;
								}, {
									instance: instance,
									identifier: identifier
								});
							}

							instance = $injector.instantiate(expression, locals, constructor);

							if (identifier) {
								addIdentifier(locals, identifier, instance, constructor || expression.name);
							}

							return instance;
						};

						function addIdentifier(locals, identifier, instance, name) {
							if (!(locals && isObject(locals.$scope))) {
								throw minErr('$controller')('noscp',
									"Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
									name, identifier);
							}

							locals.$scope[identifier] = instance;
						}
					}];
				}

				/**
				 * @ngdoc service
				 * @name $document
				 * @requires $window
				 *
				 * @description
				 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
				 *
				 * @example
				 <example module="documentExample">
				 <file name="index.html">
				 <div ng-controller="ExampleController">
				 <p>$document title: <b ng-bind="title"></b></p>
				 <p>window.document title: <b ng-bind="windowTitle"></b></p>
				 </div>
				 </file>
				 <file name="script.js">
				 angular.module('documentExample', [])
				 .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
				 </file>
				 </example>
				 */
				function $DocumentProvider() {
					this.$get = ['$window', function (window) {
						return jqLite(window.document);
					}];
				}

				/**
				 * @ngdoc service
				 * @name $exceptionHandler
				 * @requires ng.$log
				 *
				 * @description
				 * Any uncaught exception in angular expressions is delegated to this service.
				 * The default implementation simply delegates to `$log.error` which logs it into
				 * the browser console.
				 *
				 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
				 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
				 *
				 * ## Example:
				 *
				 * ```js
				 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
	 *     return function(exception, cause) {
	 *       exception.message += ' (caused by "' + cause + '")';
	 *       throw exception;
	 *     };
	 *   });
				 * ```
				 *
				 * This example will override the normal action of `$exceptionHandler`, to make angular
				 * exceptions fail hard when they happen, instead of just logging to the console.
				 *
				 * <hr />
				 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
				 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
				 * (unless executed during a digest).
				 *
				 * If you wish, you can manually delegate exceptions, e.g.
				 * `try { ... } catch(e) { $exceptionHandler(e); }`
				 *
				 * @param {Error} exception Exception associated with the error.
				 * @param {string=} cause optional information about the context in which
				 *       the error was thrown.
				 *
				 */
				function $ExceptionHandlerProvider() {
					this.$get = ['$log', function ($log) {
						return function (exception, cause) {
							$log.error.apply($log, arguments);
						};
					}];
				}

				var APPLICATION_JSON = 'application/json';
				var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
				var JSON_START = /^\[|^\{(?!\{)/;
				var JSON_ENDS = {
					'[': /]$/,
					'{': /}$/
				};
				var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;

				function serializeValue(v) {
					if (isObject(v)) {
						return isDate(v) ? v.toISOString() : toJson(v);
					}
					return v;
				}


				function $HttpParamSerializerProvider() {
					/**
					 * @ngdoc service
					 * @name $httpParamSerializer
					 * @description
					 *
					 * Default {@link $http `$http`} params serializer that converts objects to strings
					 * according to the following rules:
					 *
					 * * `{'foo': 'bar'}` results in `foo=bar`
					 * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
					 * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
					 * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
					 *
					 * Note that serializer will sort the request parameters alphabetically.
					 * */

					this.$get = function () {
						return function ngParamSerializer(params) {
							if (!params) return '';
							var parts = [];
							forEachSorted(params, function (value, key) {
								if (value === null || isUndefined(value)) return;
								if (isArray(value)) {
									forEach(value, function (v, k) {
										parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(v)));
									});
								} else {
									parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
								}
							});

							return parts.join('&');
						};
					};
				}

				function $HttpParamSerializerJQLikeProvider() {
					/**
					 * @ngdoc service
					 * @name $httpParamSerializerJQLike
					 * @description
					 *
					 * Alternative {@link $http `$http`} params serializer that follows
					 * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
					 * The serializer will also sort the params alphabetically.
					 *
					 * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
					 *
					 * ```js
					 * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
					 * ```
					 *
					 * It is also possible to set it as the default `paramSerializer` in the
					 * {@link $httpProvider#defaults `$httpProvider`}.
					 *
					 * Additionally, you can inject the serializer and use it explicitly, for example to serialize
					 * form data for submission:
					 *
					 * ```js
					 * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
					 * ```
					 *
					 * */
					this.$get = function () {
						return function jQueryLikeParamSerializer(params) {
							if (!params) return '';
							var parts = [];
							serialize(params, '', true);
							return parts.join('&');

							function serialize(toSerialize, prefix, topLevel) {
								if (toSerialize === null || isUndefined(toSerialize)) return;
								if (isArray(toSerialize)) {
									forEach(toSerialize, function (value) {
										serialize(value, prefix + '[]');
									});
								} else if (isObject(toSerialize) && !isDate(toSerialize)) {
									forEachSorted(toSerialize, function (value, key) {
										serialize(value, prefix +
											(topLevel ? '' : '[') +
											key +
											(topLevel ? '' : ']'));
									});
								} else {
									parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
								}
							}
						};
					};
				}

				function defaultHttpResponseTransform(data, headers) {
					if (isString(data)) {
						// Strip json vulnerability protection prefix and trim whitespace
						var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

						if (tempData) {
							var contentType = headers('Content-Type');
							if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
								data = fromJson(tempData);
							}
						}
					}

					return data;
				}

				function isJsonLike(str) {
					var jsonStart = str.match(JSON_START);
					return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
				}

				/**
				 * Parse headers into key value object
				 *
				 * @param {string} headers Raw headers as a string
				 * @returns {Object} Parsed headers as key value object
				 */
				function parseHeaders(headers) {
					var parsed = createMap(), i;

					function fillInParsed(key, val) {
						if (key) {
							parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
						}
					}

					if (isString(headers)) {
						forEach(headers.split('\n'), function (line) {
							i = line.indexOf(':');
							fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
						});
					} else if (isObject(headers)) {
						forEach(headers, function (headerVal, headerKey) {
							fillInParsed(lowercase(headerKey), trim(headerVal));
						});
					}

					return parsed;
				}


				/**
				 * Returns a function that provides access to parsed headers.
				 *
				 * Headers are lazy parsed when first requested.
				 * @see parseHeaders
				 *
				 * @param {(string|Object)} headers Headers to provide access to.
				 * @returns {function(string=)} Returns a getter function which if called with:
				 *
				 *   - if called with single an argument returns a single header value or null
				 *   - if called with no arguments returns an object containing all headers.
				 */
				function headersGetter(headers) {
					var headersObj;

					return function (name) {
						if (!headersObj) headersObj = parseHeaders(headers);

						if (name) {
							var value = headersObj[lowercase(name)];
							if (value === void 0) {
								value = null;
							}
							return value;
						}

						return headersObj;
					};
				}


				/**
				 * Chain all given functions
				 *
				 * This function is used for both request and response transforming
				 *
				 * @param {*} data Data to transform.
				 * @param {function(string=)} headers HTTP headers getter fn.
				 * @param {number} status HTTP status code of the response.
				 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
				 * @returns {*} Transformed data.
				 */
				function transformData(data, headers, status, fns) {
					if (isFunction(fns)) {
						return fns(data, headers, status);
					}

					forEach(fns, function (fn) {
						data = fn(data, headers, status);
					});

					return data;
				}


				function isSuccess(status) {
					return 200 <= status && status < 300;
				}


				/**
				 * @ngdoc provider
				 * @name $httpProvider
				 * @description
				 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
				 * */
				function $HttpProvider() {
					/**
					 * @ngdoc property
					 * @name $httpProvider#defaults
					 * @description
					 *
					 * Object containing default values for all {@link ng.$http $http} requests.
					 *
					 * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
					 * that will provide the cache for all requests who set their `cache` property to `true`.
					 * If you set the `defaults.cache = false` then only requests that specify their own custom
					 * cache object will be cached. See {@link $http#caching $http Caching} for more information.
					 *
					 * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
					 * Defaults value is `'XSRF-TOKEN'`.
					 *
					 * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
					 * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
					 *
					 * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
					 * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
					 * setting default headers.
					 *     - **`defaults.headers.common`**
					 *     - **`defaults.headers.post`**
					 *     - **`defaults.headers.put`**
					 *     - **`defaults.headers.patch`**
					 *
					 *
					 * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
					 *  used to the prepare string representation of request parameters (specified as an object).
					 *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
					 *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
					 *
					 **/
					var defaults = this.defaults = {
						// transform incoming response data
						transformResponse: [defaultHttpResponseTransform],

						// transform outgoing request data
						transformRequest: [function (d) {
							return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
						}],

						// default headers
						headers: {
							common: {
								'Accept': 'application/json, text/plain, */*'
							},
							post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
							put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
							patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
						},

						xsrfCookieName: 'XSRF-TOKEN',
						xsrfHeaderName: 'X-XSRF-TOKEN',

						paramSerializer: '$httpParamSerializer'
					};

					var useApplyAsync = false;
					/**
					 * @ngdoc method
					 * @name $httpProvider#useApplyAsync
					 * @description
					 *
					 * Configure $http service to combine processing of multiple http responses received at around
					 * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
					 * significant performance improvement for bigger applications that make many HTTP requests
					 * concurrently (common during application bootstrap).
					 *
					 * Defaults to false. If no value is specified, returns the current configured value.
					 *
					 * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
					 *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
					 *    to load and share the same digest cycle.
					 *
					 * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
					 *    otherwise, returns the current configured value.
					 **/
					this.useApplyAsync = function (value) {
						if (isDefined(value)) {
							useApplyAsync = !!value;
							return this;
						}
						return useApplyAsync;
					};

					/**
					 * @ngdoc property
					 * @name $httpProvider#interceptors
					 * @description
					 *
					 * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
					 * pre-processing of request or postprocessing of responses.
					 *
					 * These service factories are ordered by request, i.e. they are applied in the same order as the
					 * array, on request, but reverse order, on response.
					 *
					 * {@link ng.$http#interceptors Interceptors detailed info}
					 **/
					var interceptorFactories = this.interceptors = [];

					this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',
						function ($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {

							var defaultCache = $cacheFactory('$http');

							/**
							 * Make sure that default param serializer is exposed as a function
							 */
							defaults.paramSerializer = isString(defaults.paramSerializer) ?
								$injector.get(defaults.paramSerializer) : defaults.paramSerializer;

							/**
							 * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
							 * The reversal is needed so that we can build up the interception chain around the
							 * server request.
							 */
							var reversedInterceptors = [];

							forEach(interceptorFactories, function (interceptorFactory) {
								reversedInterceptors.unshift(isString(interceptorFactory)
									? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
							});

							/**
							 * @ngdoc service
							 * @kind function
							 * @name $http
							 * @requires ng.$httpBackend
							 * @requires $cacheFactory
							 * @requires $rootScope
							 * @requires $q
							 * @requires $injector
							 *
							 * @description
							 * The `$http` service is a core Angular service that facilitates communication with the remote
							 * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
							 * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
							 *
							 * For unit testing applications that use `$http` service, see
							 * {@link ngMock.$httpBackend $httpBackend mock}.
							 *
							 * For a higher level of abstraction, please check out the {@link ngResource.$resource
         * $resource} service.
							 *
							 * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
							 * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
							 * it is important to familiarize yourself with these APIs and the guarantees they provide.
							 *
							 *
							 * ## General usage
							 * The `$http` service is a function which takes a single argument — a configuration object —
							 * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
							 * with two $http specific methods: `success` and `error`.
							 *
							 * ```js
							 *   // Simple GET request example :
							 *   $http.get('/someUrl').
							 *     success(function(data, status, headers, config) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }).
							 *     error(function(data, status, headers, config) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
							 * ```
							 *
							 * ```js
							 *   // Simple POST request example (passing data) :
							 *   $http.post('/someUrl', {msg:'hello word!'}).
							 *     success(function(data, status, headers, config) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }).
							 *     error(function(data, status, headers, config) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
							 * ```
							 *
							 *
							 * Since the returned value of calling the $http function is a `promise`, you can also use
							 * the `then` method to register callbacks, and these callbacks will receive a single argument –
							 * an object representing the response. See the API signature and type info below for more
							 * details.
							 *
							 * A response status code between 200 and 299 is considered a success status and
							 * will result in the success callback being called. Note that if the response is a redirect,
							 * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
							 * called for such responses.
							 *
							 * ## Writing Unit Tests that use $http
							 * When unit testing (using {@link ngMock ngMock}), it is necessary to call
							 * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
							 * request using trained responses.
							 *
							 * ```
							 * $httpBackend.expectGET(...);
							 * $http.get(...);
							 * $httpBackend.flush();
							 * ```
							 *
							 * ## Shortcut methods
							 *
							 * Shortcut methods are also available. All shortcut methods require passing in the URL, and
							 * request data must be passed in for POST/PUT requests.
							 *
							 * ```js
							 *   $http.get('/someUrl').success(successCallback);
							 *   $http.post('/someUrl', data).success(successCallback);
							 * ```
							 *
							 * Complete list of shortcut methods:
							 *
							 * - {@link ng.$http#get $http.get}
							 * - {@link ng.$http#head $http.head}
							 * - {@link ng.$http#post $http.post}
							 * - {@link ng.$http#put $http.put}
							 * - {@link ng.$http#delete $http.delete}
							 * - {@link ng.$http#jsonp $http.jsonp}
							 * - {@link ng.$http#patch $http.patch}
							 *
							 *
							 * ## Setting HTTP Headers
							 *
							 * The $http service will automatically add certain HTTP headers to all requests. These defaults
							 * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
							 * object, which currently contains this default configuration:
							 *
							 * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
							 *   - `Accept: application/json, text/plain, * / *`
							 * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
							 *   - `Content-Type: application/json`
							 * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
							 *   - `Content-Type: application/json`
							 *
							 * To add or overwrite these defaults, simply add or remove a property from these configuration
							 * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
							 * with the lowercased HTTP method name as the key, e.g.
							 * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
							 *
							 * The defaults can also be set at runtime via the `$http.defaults` object in the same
							 * fashion. For example:
							 *
							 * ```
							 * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
	     * });
							 * ```
							 *
							 * In addition, you can supply a `headers` property in the config object passed when
							 * calling `$http(config)`, which overrides the defaults without changing them globally.
							 *
							 * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
							 * Use the `headers` property, setting the desired header to `undefined`. For example:
							 *
							 * ```js
							 * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
							 *
							 * $http(req).success(function(){...}).error(function(){...});
							 * ```
							 *
							 * ## Transforming Requests and Responses
							 *
							 * Both requests and responses can be transformed using transformation functions: `transformRequest`
							 * and `transformResponse`. These properties can be a single function that returns
							 * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
							 * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
							 *
							 * ### Default Transformations
							 *
							 * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
							 * `defaults.transformResponse` properties. If a request does not provide its own transformations
							 * then these will be applied.
							 *
							 * You can augment or replace the default transformations by modifying these properties by adding to or
							 * replacing the array.
							 *
							 * Angular provides the following default transformations:
							 *
							 * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
							 *
							 * - If the `data` property of the request configuration object contains an object, serialize it
							 *   into JSON format.
							 *
							 * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
							 *
							 *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
							 *  - If JSON response is detected, deserialize it using a JSON parser.
							 *
							 *
							 * ### Overriding the Default Transformations Per Request
							 *
							 * If you wish override the request/response transformations only for a single request then provide
							 * `transformRequest` and/or `transformResponse` properties on the configuration object passed
							 * into `$http`.
							 *
							 * Note that if you provide these properties on the config object the default transformations will be
							 * overwritten. If you wish to augment the default transformations then you must include them in your
							 * local transformation array.
							 *
							 * The following code demonstrates adding a new response transformation to be run after the default response
							 * transformations have been run.
							 *
							 * ```js
							 * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
							 *
							 * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
							 * ```
							 *
							 *
							 * ## Caching
							 *
							 * To enable caching, set the request configuration `cache` property to `true` (to use default
							 * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
							 * When the cache is enabled, `$http` stores the response from the server in the specified
							 * cache. The next time the same request is made, the response is served from the cache without
							 * sending a request to the server.
							 *
							 * Note that even if the response is served from cache, delivery of the data is asynchronous in
							 * the same way that real requests are.
							 *
							 * If there are multiple GET requests for the same URL that should be cached using the same
							 * cache, but the cache is not populated yet, only one request to the server will be made and
							 * the remaining requests will be fulfilled using the response from the first request.
							 *
							 * You can change the default cache to a new object (built with
							 * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
							 * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
							 * their `cache` property to `true` will now use this cache object.
							 *
							 * If you set the default cache to `false` then only requests that specify their own custom
							 * cache object will be cached.
							 *
							 * ## Interceptors
							 *
							 * Before you start creating interceptors, be sure to understand the
							 * {@link ng.$q $q and deferred/promise APIs}.
							 *
							 * For purposes of global error handling, authentication, or any kind of synchronous or
							 * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
							 * able to intercept requests before they are handed to the server and
							 * responses before they are handed over to the application code that
							 * initiated these requests. The interceptors leverage the {@link ng.$q
         * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
							 *
							 * The interceptors are service factories that are registered with the `$httpProvider` by
							 * adding them to the `$httpProvider.interceptors` array. The factory is called and
							 * injected with dependencies (if specified) and returns the interceptor.
							 *
							 * There are two kinds of interceptors (and two kinds of rejection interceptors):
							 *
							 *   * `request`: interceptors get called with a http `config` object. The function is free to
							 *     modify the `config` object or create a new one. The function needs to return the `config`
							 *     object directly, or a promise containing the `config` or a new `config` object.
							 *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
							 *     resolved with a rejection.
							 *   * `response`: interceptors get called with http `response` object. The function is free to
							 *     modify the `response` object or create a new one. The function needs to return the `response`
							 *     object directly, or as a promise containing the `response` or a new `response` object.
							 *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
							 *     resolved with a rejection.
							 *
							 *
							 * ```js
							 *   // register the interceptor as a service
							 *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
							 *
							 *   $httpProvider.interceptors.push('myHttpInterceptor');
							 *
							 *
							 *   // alternatively, register the interceptor via an anonymous factory
							 *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
							 * ```
							 *
							 * ## Security Considerations
							 *
							 * When designing web applications, consider security threats from:
							 *
							 * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
							 * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
							 *
							 * Both server and the client must cooperate in order to eliminate these threats. Angular comes
							 * pre-configured with strategies that address these issues, but for this to work backend server
							 * cooperation is required.
							 *
							 * ### JSON Vulnerability Protection
							 *
							 * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
							 * allows third party website to turn your JSON resource URL into
							 * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
							 * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
							 * Angular will automatically strip the prefix before processing it as JSON.
							 *
							 * For example if your server needs to return:
							 * ```js
							 * ['one','two']
							 * ```
							 *
							 * which is vulnerable to attack, your server can return:
							 * ```js
							 * )]}',
							 * ['one','two']
							 * ```
							 *
							 * Angular will strip the prefix, before processing the JSON.
							 *
							 *
							 * ### Cross Site Request Forgery (XSRF) Protection
							 *
							 * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
							 * an unauthorized site can gain your user's private data. Angular provides a mechanism
							 * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
							 * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
							 * JavaScript that runs on your domain could read the cookie, your server can be assured that
							 * the XHR came from JavaScript running on your domain. The header will not be set for
							 * cross-domain requests.
							 *
							 * To take advantage of this, your server needs to set a token in a JavaScript readable session
							 * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
							 * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
							 * that only JavaScript running on your domain could have sent the request. The token must be
							 * unique for each user and must be verifiable by the server (to prevent the JavaScript from
							 * making up its own tokens). We recommend that the token is a digest of your site's
							 * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
							 * for added security.
							 *
							 * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
							 * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
							 * or the per-request config object.
							 *
							 * In order to prevent collisions in environments where multiple Angular apps share the
							 * same domain or subdomain, we recommend that each application uses unique cookie name.
							 *
							 *
							 * @param {object} config Object describing the request to be made and how it should be
							 *    processed. The object has following properties:
							 *
							 *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
							 *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
							 *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
							 *      with the `paramSerializer` and appended as GET parameters.
							 *    - **data** – `{string|Object}` – Data to be sent as the request message data.
							 *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
							 *      HTTP headers to send to the server. If the return value of a function is null, the
							 *      header will not be sent. Functions accept a config object as an argument.
							 *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
							 *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
							 *    - **transformRequest** –
							 *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
							 *      transform function or an array of such functions. The transform function takes the http
							 *      request body and headers and returns its transformed (typically serialized) version.
							 *      See {@link ng.$http#overriding-the-default-transformations-per-request
         *      Overriding the Default Transformations}
							 *    - **transformResponse** –
							 *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
							 *      transform function or an array of such functions. The transform function takes the http
							 *      response body, headers and status and returns its transformed (typically deserialized) version.
							 *      See {@link ng.$http#overriding-the-default-transformations-per-request
         *      Overriding the Default TransformationjqLiks}
							 *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
							 *      prepare the string representation of request parameters (specified as an object).
							 *      If specified as string, it is interpreted as function registered with the
							 *      {@link $injector $injector}, which means you can create your own serializer
							 *      by registering it as a {@link auto.$provide#service service}.
							 *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
							 *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
							 *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
							 *      GET request, otherwise if a cache instance built with
							 *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
							 *      caching.
							 *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
							 *      that should abort the request when resolved.
							 *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
							 *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
							 *      for more information.
							 *    - **responseType** - `{string}` - see
							 *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
							 *
							 * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
							 *   standard `then` method and two http specific methods: `success` and `error`. The `then`
							 *   method takes two arguments a success and an error callback which will be called with a
							 *   response object. The `success` and `error` methods take a single argument - a function that
							 *   will be called when the request succeeds or fails respectively. The arguments passed into
							 *   these functions are destructured representation of the response object passed into the
							 *   `then` method. The response object has these properties:
							 *
							 *   - **data** – `{string|Object}` – The response body transformed with the transform
							 *     functions.
							 *   - **status** – `{number}` – HTTP status code of the response.
							 *   - **headers** – `{function([headerName])}` – Header getter function.
							 *   - **config** – `{Object}` – The configuration object that was used to generate the request.
							 *   - **statusText** – `{string}` – HTTP status text of the response.
							 *
							 * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
							 *   requests. This is primarily meant to be used for debugging purposes.
							 *
							 *
							 * @example
							 <example module="httpExample">
							 <file name="index.html">
							 <div ng-controller="FetchController">
							 <select ng-model="method" aria-label="Request method">
							 <option>GET</option>
							 <option>JSONP</option>
							 </select>
							 <input type="text" ng-model="url" size="80" aria-label="URL" />
							 <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
							 <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
							 <button id="samplejsonpbtn"
							 ng-click="updateModel('JSONP',
							 'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
							 Sample JSONP
							 </button>
							 <button id="invalidjsonpbtn"
							 ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
							 Invalid JSONP
							 </button>
							 <pre>http status code: {{status}}</pre>
							 <pre>http response data: {{data}}</pre>
							 </div>
							 </file>
							 <file name="script.js">
							 angular.module('httpExample', [])
							 .controller('FetchController', ['$scope', '$http', '$templateCache',
							 function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';
	
	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;
	
	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            success(function(data, status) {
	              $scope.status = status;
	              $scope.data = data;
	            }).
	            error(function(data, status) {
	              $scope.data = data || "Request failed";
	              $scope.status = status;
	          });
	        };
	
	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
							 </file>
							 <file name="http-hello.html">
							 Hello, $http!
							 </file>
							 <file name="protractor.js" type="protractor">
							 var status = element(by.binding('status'));
							 var data = element(by.binding('data'));
							 var fetchBtn = element(by.id('fetchbtn'));
							 var sampleGetBtn = element(by.id('samplegetbtn'));
							 var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
							 var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

							 it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });

							 // Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
							 // it('should make a JSONP request to angularjs.org', function() {
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });

							 it('should make JSONP request to invalid URL and invoke the error handler',
							 function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
							 </file>
							 </example>
							 */
							function $http(requestConfig) {

								if (!angular.isObject(requestConfig)) {
									throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
								}

								var config = extend({
									method: 'get',
									transformRequest: defaults.transformRequest,
									transformResponse: defaults.transformResponse,
									paramSerializer: defaults.paramSerializer
								}, requestConfig);

								config.headers = mergeHeaders(requestConfig);
								config.method = uppercase(config.method);
								config.paramSerializer = isString(config.paramSerializer) ?
									$injector.get(config.paramSerializer) : config.paramSerializer;

								var serverRequest = function (config) {
									var headers = config.headers;
									var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

									// strip content-type if data is undefined
									if (isUndefined(reqData)) {
										forEach(headers, function (value, header) {
											if (lowercase(header) === 'content-type') {
												delete headers[header];
											}
										});
									}

									if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
										config.withCredentials = defaults.withCredentials;
									}

									// send request
									return sendReq(config, reqData).then(transformResponse, transformResponse);
								};

								var chain = [serverRequest, undefined];
								var promise = $q.when(config);

								// apply interceptors
								forEach(reversedInterceptors, function (interceptor) {
									if (interceptor.request || interceptor.requestError) {
										chain.unshift(interceptor.request, interceptor.requestError);
									}
									if (interceptor.response || interceptor.responseError) {
										chain.push(interceptor.response, interceptor.responseError);
									}
								});

								while (chain.length) {
									var thenFn = chain.shift();
									var rejectFn = chain.shift();

									promise = promise.then(thenFn, rejectFn);
								}

								promise.success = function (fn) {
									assertArgFn(fn, 'fn');

									promise.then(function (response) {
										fn(response.data, response.status, response.headers, config);
									});
									return promise;
								};

								promise.error = function (fn) {
									assertArgFn(fn, 'fn');

									promise.then(null, function (response) {
										fn(response.data, response.status, response.headers, config);
									});
									return promise;
								};

								return promise;

								function transformResponse(response) {
									// make a copy since the response must be cacheable
									var resp = extend({}, response);
									if (!response.data) {
										resp.data = response.data;
									} else {
										resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
									}
									return (isSuccess(response.status))
										? resp
										: $q.reject(resp);
								}

								function executeHeaderFns(headers, config) {
									var headerContent, processedHeaders = {};

									forEach(headers, function (headerFn, header) {
										if (isFunction(headerFn)) {
											headerContent = headerFn(config);
											if (headerContent != null) {
												processedHeaders[header] = headerContent;
											}
										} else {
											processedHeaders[header] = headerFn;
										}
									});

									return processedHeaders;
								}

								function mergeHeaders(config) {
									var defHeaders = defaults.headers,
										reqHeaders = extend({}, config.headers),
										defHeaderName, lowercaseDefHeaderName, reqHeaderName;

									defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

									// using for-in instead of forEach to avoid unecessary iteration after header has been found
									defaultHeadersIteration:
										for (defHeaderName in defHeaders) {
											lowercaseDefHeaderName = lowercase(defHeaderName);

											for (reqHeaderName in reqHeaders) {
												if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
													continue defaultHeadersIteration;
												}
											}

											reqHeaders[defHeaderName] = defHeaders[defHeaderName];
										}

									// execute if header value is a function for merged headers
									return executeHeaderFns(reqHeaders, shallowCopy(config));
								}
							}

							$http.pendingRequests = [];

							/**
							 * @ngdoc method
							 * @name $http#get
							 *
							 * @description
							 * Shortcut method to perform `GET` request.
							 *
							 * @param {string} url Relative or absolute URL specifying the destination of the request
							 * @param {Object=} config Optional configuration object
							 * @returns {HttpPromise} Future object
							 */

							/**
							 * @ngdoc method
							 * @name $http#delete
							 *
							 * @description
							 * Shortcut method to perform `DELETE` request.
							 *
							 * @param {string} url Relative or absolute URL specifying the destination of the request
							 * @param {Object=} config Optional configuration object
							 * @returns {HttpPromise} Future object
							 */

							/**
							 * @ngdoc method
							 * @name $http#head
							 *
							 * @description
							 * Shortcut method to perform `HEAD` request.
							 *
							 * @param {string} url Relative or absolute URL specifying the destination of the request
							 * @param {Object=} config Optional configuration object
							 * @returns {HttpPromise} Future object
							 */

							/**
							 * @ngdoc method
							 * @name $http#jsonp
							 *
							 * @description
							 * Shortcut method to perform `JSONP` request.
							 *
							 * @param {string} url Relative or absolute URL specifying the destination of the request.
							 *                     The name of the callback should be the string `JSON_CALLBACK`.
							 * @param {Object=} config Optional configuration object
							 * @returns {HttpPromise} Future object
							 */
							createShortMethods('get', 'delete', 'head', 'jsonp');

							/**
							 * @ngdoc method
							 * @name $http#post
							 *
							 * @description
							 * Shortcut method to perform `POST` request.
							 *
							 * @param {string} url Relative or absolute URL specifying the destination of the request
							 * @param {*} data Request content
							 * @param {Object=} config Optional configuration object
							 * @returns {HttpPromise} Future object
							 */

							/**
							 * @ngdoc method
							 * @name $http#put
							 *
							 * @description
							 * Shortcut method to perform `PUT` request.
							 *
							 * @param {string} url Relative or absolute URL specifying the destination of the request
							 * @param {*} data Request content
							 * @param {Object=} config Optional configuration object
							 * @returns {HttpPromise} Future object
							 */

							/**
							 * @ngdoc method
							 * @name $http#patch
							 *
							 * @description
							 * Shortcut method to perform `PATCH` request.
							 *
							 * @param {string} url Relative or absolute URL specifying the destination of the request
							 * @param {*} data Request content
							 * @param {Object=} config Optional configuration object
							 * @returns {HttpPromise} Future object
							 */
							createShortMethodsWithData('post', 'put', 'patch');

							/**
							 * @ngdoc property
							 * @name $http#defaults
							 *
							 * @description
							 * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
							 * default headers, withCredentials as well as request and response transformations.
							 *
							 * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
							 */
							$http.defaults = defaults;


							return $http;


							function createShortMethods(names) {
								forEach(arguments, function (name) {
									$http[name] = function (url, config) {
										return $http(extend({}, config || {}, {
											method: name,
											url: url
										}));
									};
								});
							}


							function createShortMethodsWithData(name) {
								forEach(arguments, function (name) {
									$http[name] = function (url, data, config) {
										return $http(extend({}, config || {}, {
											method: name,
											url: url,
											data: data
										}));
									};
								});
							}


							/**
							 * Makes the request.
							 *
							 * !!! ACCESSES CLOSURE VARS:
							 * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
							 */
							function sendReq(config, reqData) {
								var deferred = $q.defer(),
									promise = deferred.promise,
									cache,
									cachedResp,
									reqHeaders = config.headers,
									url = buildUrl(config.url, config.paramSerializer(config.params));

								$http.pendingRequests.push(config);
								promise.then(removePendingReq, removePendingReq);


								if ((config.cache || defaults.cache) && config.cache !== false &&
									(config.method === 'GET' || config.method === 'JSONP')) {
									cache = isObject(config.cache) ? config.cache
										: isObject(defaults.cache) ? defaults.cache
										: defaultCache;
								}

								if (cache) {
									cachedResp = cache.get(url);
									if (isDefined(cachedResp)) {
										if (isPromiseLike(cachedResp)) {
											// cached request has already been sent, but there is no response yet
											cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
										} else {
											// serving from cache
											if (isArray(cachedResp)) {
												resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
											} else {
												resolvePromise(cachedResp, 200, {}, 'OK');
											}
										}
									} else {
										// put the promise for the non-transformed response into cache as a placeholder
										cache.put(url, promise);
									}
								}


								// if we won't have the response in cache, set the xsrf headers and
								// send the request to the backend
								if (isUndefined(cachedResp)) {
									var xsrfValue = urlIsSameOrigin(config.url)
										? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
										: undefined;
									if (xsrfValue) {
										reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
									}

									$httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
										config.withCredentials, config.responseType);
								}

								return promise;


								/**
								 * Callback registered to $httpBackend():
								 *  - caches the response if desired
								 *  - resolves the raw $http promise
								 *  - calls $apply
								 */
								function done(status, response, headersString, statusText) {
									if (cache) {
										if (isSuccess(status)) {
											cache.put(url, [status, response, parseHeaders(headersString), statusText]);
										} else {
											// remove promise from the cache
											cache.remove(url);
										}
									}

									function resolveHttpPromise() {
										resolvePromise(response, status, headersString, statusText);
									}

									if (useApplyAsync) {
										$rootScope.$applyAsync(resolveHttpPromise);
									} else {
										resolveHttpPromise();
										if (!$rootScope.$$phase) $rootScope.$apply();
									}
								}


								/**
								 * Resolves the raw $http promise.
								 */
								function resolvePromise(response, status, headers, statusText) {
									// normalize internal statuses to 0
									status = Math.max(status, 0);

									(isSuccess(status) ? deferred.resolve : deferred.reject)({
										data: response,
										status: status,
										headers: headersGetter(headers),
										config: config,
										statusText: statusText
									});
								}

								function resolvePromiseWithResult(result) {
									resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
								}

								function removePendingReq() {
									var idx = $http.pendingRequests.indexOf(config);
									if (idx !== -1) $http.pendingRequests.splice(idx, 1);
								}
							}


							function buildUrl(url, serializedParams) {
								if (serializedParams.length > 0) {
									url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;
								}
								return url;
							}
						}];
				}

				function createXhr() {
					return new window.XMLHttpRequest();
				}

				/**
				 * @ngdoc service
				 * @name $httpBackend
				 * @requires $window
				 * @requires $document
				 *
				 * @description
				 * HTTP backend used by the {@link ng.$http service} that delegates to
				 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
				 *
				 * You should never need to use this service directly, instead use the higher-level abstractions:
				 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
				 *
				 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
     * $httpBackend} which can be trained with responses.
				 */
				function $HttpBackendProvider() {
					this.$get = ['$browser', '$window', '$document', function ($browser, $window, $document) {
						return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
					}];
				}

				function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
					// TODO(vojta): fix the signature
					return function (method, url, post, callback, headers, timeout, withCredentials, responseType) {
						$browser.$$incOutstandingRequestCount();
						url = url || $browser.url();

						if (lowercase(method) == 'jsonp') {
							var callbackId = '_' + (callbacks.counter++).toString(36);
							callbacks[callbackId] = function (data) {
								callbacks[callbackId].data = data;
								callbacks[callbackId].called = true;
							};

							var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
								callbackId, function (status, text) {
									completeRequest(callback, status, callbacks[callbackId].data, "", text);
									callbacks[callbackId] = noop;
								});
						} else {

							var xhr = createXhr();

							xhr.open(method, url, true);
							forEach(headers, function (value, key) {
								if (isDefined(value)) {
									xhr.setRequestHeader(key, value);
								}
							});

							xhr.onload = function requestLoaded() {
								var statusText = xhr.statusText || '';

								// responseText is the old-school way of retrieving response (supported by IE8 & 9)
								// response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
								var response = ('response' in xhr) ? xhr.response : xhr.responseText;

								// normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
								var status = xhr.status === 1223 ? 204 : xhr.status;

								// fix status code when it is 0 (0 status is undocumented).
								// Occurs when accessing file resources or on Android 4.1 stock browser
								// while retrieving files from application cache.
								if (status === 0) {
									status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
								}

								completeRequest(callback,
									status,
									response,
									xhr.getAllResponseHeaders(),
									statusText);
							};

							var requestError = function () {
								// The response is always empty
								// See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
								completeRequest(callback, -1, null, null, '');
							};

							xhr.onerror = requestError;
							xhr.onabort = requestError;

							if (withCredentials) {
								xhr.withCredentials = true;
							}

							if (responseType) {
								try {
									xhr.responseType = responseType;
								} catch (e) {
									// WebKit added support for the json responseType value on 09/03/2013
									// https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
									// known to throw when setting the value "json" as the response type. Other older
									// browsers implementing the responseType
									//
									// The json response type can be ignored if not supported, because JSON payloads are
									// parsed on the client-side regardless.
									if (responseType !== 'json') {
										throw e;
									}
								}
							}

							xhr.send(post);
						}

						if (timeout > 0) {
							var timeoutId = $browserDefer(timeoutRequest, timeout);
						} else if (isPromiseLike(timeout)) {
							timeout.then(timeoutRequest);
						}


						function timeoutRequest() {
							jsonpDone && jsonpDone();
							xhr && xhr.abort();
						}

						function completeRequest(callback, status, response, headersString, statusText) {
							// cancel timeout and subsequent timeout promise resolution
							if (timeoutId !== undefined) {
								$browserDefer.cancel(timeoutId);
							}
							jsonpDone = xhr = null;

							callback(status, response, headersString, statusText);
							$browser.$$completeOutstandingRequest(noop);
						}
					};

					function jsonpReq(url, callbackId, done) {
						// we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
						// - fetches local scripts via XHR and evals them
						// - adds and immediately removes script elements from the document
						var script = rawDocument.createElement('script'), callback = null;
						script.type = "text/javascript";
						script.src = url;
						script.async = true;

						callback = function (event) {
							removeEventListenerFn(script, "load", callback);
							removeEventListenerFn(script, "error", callback);
							rawDocument.body.removeChild(script);
							script = null;
							var status = -1;
							var text = "unknown";

							if (event) {
								if (event.type === "load" && !callbacks[callbackId].called) {
									event = {type: "error"};
								}
								text = event.type;
								status = event.type === "error" ? 404 : 200;
							}

							if (done) {
								done(status, text);
							}
						};

						addEventListenerFn(script, "load", callback);
						addEventListenerFn(script, "error", callback);
						rawDocument.body.appendChild(script);
						return callback;
					}
				}

				var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
				$interpolateMinErr.throwNoconcat = function (text) {
					throw $interpolateMinErr('noconcat',
						"Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
						"interpolations that concatenate multiple expressions when a trusted value is " +
						"required.  See http://docs.angularjs.org/api/ng.$sce", text);
				};

				$interpolateMinErr.interr = function (text, err) {
					return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
				};

				/**
				 * @ngdoc provider
				 * @name $interpolateProvider
				 *
				 * @description
				 *
				 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
				 *
				 * @example
				 <example module="customInterpolationApp">
				 <file name="index.html">
				 <script>
				 var customInterpolationApp = angular.module('customInterpolationApp', []);

				 customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });


				 customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
				 </script>
				 <div ng-app="App" ng-controller="DemoController as demo">
				 //demo.label//
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
				 </file>
				 </example>
				 */
				function $InterpolateProvider() {
					var startSymbol = '{{';
					var endSymbol = '}}';

					/**
					 * @ngdoc method
					 * @name $interpolateProvider#startSymbol
					 * @description
					 * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
					 * @param {string=} value new value to set the starting symbol to.
					 * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
					 */
					this.startSymbol = function (value) {
						if (value) {
							startSymbol = value;
							return this;
						} else {
							return startSymbol;
						}
					};

					/**
					 * @ngdoc method
					 * @name $interpolateProvider#endSymbol
					 * @description
					 * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
					 *
					 * @param {string=} value new value to set the ending symbol to.
					 * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
					 */
					this.endSymbol = function (value) {
						if (value) {
							endSymbol = value;
							return this;
						} else {
							return endSymbol;
						}
					};


					this.$get = ['$parse', '$exceptionHandler', '$sce', function ($parse, $exceptionHandler, $sce) {
						var startSymbolLength = startSymbol.length,
							endSymbolLength = endSymbol.length,
							escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
							escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

						function escape(ch) {
							return '\\\\\\' + ch;
						}

						function unescapeText(text) {
							return text.replace(escapedStartRegexp, startSymbol).
								replace(escapedEndRegexp, endSymbol);
						}

						function stringify(value) {
							if (value == null) { // null || undefined
								return '';
							}
							switch (typeof value) {
								case 'string':
									break;
								case 'number':
									value = '' + value;
									break;
								default:
									value = toJson(value);
							}

							return value;
						}

						/**
						 * @ngdoc service
						 * @name $interpolate
						 * @kind function
						 *
						 * @requires $parse
						 * @requires $sce
						 *
						 * @description
						 *
						 * Compiles a string with markup into an interpolation function. This service is used by the
						 * HTML {@link ng.$compile $compile} service for data binding. See
						 * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
						 * interpolation markup.
						 *
						 *
						 * ```js
						 *   var $interpolate = ...; // injected
						 *   var exp = $interpolate('Hello {{name | uppercase}}!');
						 *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
						 * ```
						 *
						 * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
						 * `true`, the interpolation function will return `undefined` unless all embedded expressions
						 * evaluate to a value other than `undefined`.
						 *
						 * ```js
						 *   var $interpolate = ...; // injected
						 *   var context = {greeting: 'Hello', name: undefined };
						 *
						 *   // default "forgiving" mode
						 *   var exp = $interpolate('{{greeting}} {{name}}!');
						 *   expect(exp(context)).toEqual('Hello !');
						 *
						 *   // "allOrNothing" mode
						 *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
						 *   expect(exp(context)).toBeUndefined();
						 *   context.name = 'Angular';
						 *   expect(exp(context)).toEqual('Hello Angular!');
						 * ```
						 *
						 * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
						 *
						 * ####Escaped Interpolation
						 * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
						 * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
						 * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
						 * or binding.
						 *
						 * This enables web-servers to prevent script injection attacks and defacing attacks, to some
						 * degree, while also enabling code examples to work without relying on the
						 * {@link ng.directive:ngNonBindable ngNonBindable} directive.
						 *
						 * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
						 * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
						 * interpolation start/end markers with their escaped counterparts.**
						 *
						 * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
						 * output when the $interpolate service processes the text. So, for HTML elements interpolated
						 * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
						 * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
						 * this is typically useful only when user-data is used in rendering a template from the server, or
						 * when otherwise untrusted data is used by a directive.
						 *
						 * <example>
						 *  <file name="index.html">
						 *    <div ng-init="username='A user'">
						 *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
						 *        </p>
						 *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
						 *        application, but fails to accomplish their task, because the server has correctly
						 *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
						 *        characters.</p>
						 *      <p>Instead, the result of the attempted script injection is visible, and can be removed
						 *        from the database by an administrator.</p>
						 *    </div>
						 *  </file>
						 * </example>
						 *
						 * @param {string} text The text with markup to interpolate.
						 * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
						 *    embedded expression in order to return an interpolation function. Strings with no
						 *    embedded expression will return null for the interpolation function.
						 * @param {string=} trustedContext when provided, the returned function passes the interpolated
						 *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
         *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
						 *    provides Strict Contextual Escaping for details.
						 * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
						 *    unless all embedded expressions evaluate to a value other than `undefined`.
						 * @returns {function(context)} an interpolation function which is used to compute the
						 *    interpolated string. The function has these parameters:
						 *
						 * - `context`: evaluation context for all expressions embedded in the interpolated text
						 */
						function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
							allOrNothing = !!allOrNothing;
							var startIndex,
								endIndex,
								index = 0,
								expressions = [],
								parseFns = [],
								textLength = text.length,
								exp,
								concat = [],
								expressionPositions = [];

							while (index < textLength) {
								if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
									((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
									if (index !== startIndex) {
										concat.push(unescapeText(text.substring(index, startIndex)));
									}
									exp = text.substring(startIndex + startSymbolLength, endIndex);
									expressions.push(exp);
									parseFns.push($parse(exp, parseStringifyInterceptor));
									index = endIndex + endSymbolLength;
									expressionPositions.push(concat.length);
									concat.push('');
								} else {
									// we did not find an interpolation, so we have to add the remainder to the separators array
									if (index !== textLength) {
										concat.push(unescapeText(text.substring(index)));
									}
									break;
								}
							}

							// Concatenating expressions makes it hard to reason about whether some combination of
							// concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
							// single expression be used for iframe[src], object[src], etc., we ensure that the value
							// that's used is assigned or constructed by some JS code somewhere that is more testable or
							// make it obvious that you bound the value to some user controlled value.  This helps reduce
							// the load when auditing for XSS issues.
							if (trustedContext && concat.length > 1) {
								$interpolateMinErr.throwNoconcat(text);
							}

							if (!mustHaveExpression || expressions.length) {
								var compute = function (values) {
									for (var i = 0, ii = expressions.length; i < ii; i++) {
										if (allOrNothing && isUndefined(values[i])) return;
										concat[expressionPositions[i]] = values[i];
									}
									return concat.join('');
								};

								var getValue = function (value) {
									return trustedContext ?
										$sce.getTrusted(trustedContext, value) :
										$sce.valueOf(value);
								};

								return extend(function interpolationFn(context) {
									var i = 0;
									var ii = expressions.length;
									var values = new Array(ii);

									try {
										for (; i < ii; i++) {
											values[i] = parseFns[i](context);
										}

										return compute(values);
									} catch (err) {
										$exceptionHandler($interpolateMinErr.interr(text, err));
									}

								}, {
									// all of these properties are undocumented for now
									exp: text, //just for compatibility with regular watchers created via $watch
									expressions: expressions,
									$$watchDelegate: function (scope, listener) {
										var lastValue;
										return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
											var currValue = compute(values);
											if (isFunction(listener)) {
												listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
											}
											lastValue = currValue;
										});
									}
								});
							}

							function parseStringifyInterceptor(value) {
								try {
									value = getValue(value);
									return allOrNothing && !isDefined(value) ? value : stringify(value);
								} catch (err) {
									$exceptionHandler($interpolateMinErr.interr(text, err));
								}
							}
						}


						/**
						 * @ngdoc method
						 * @name $interpolate#startSymbol
						 * @description
						 * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
						 * @returns {string} start symbol.
						 */
						$interpolate.startSymbol = function () {
							return startSymbol;
						};


						/**
						 * @ngdoc method
						 * @name $interpolate#endSymbol
						 * @description
						 * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
						 *
						 * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
						 * the symbol.
						 *
						 * @returns {string} end symbol.
						 */
						$interpolate.endSymbol = function () {
							return endSymbol;
						};

						return $interpolate;
					}];
				}

				function $IntervalProvider() {
					this.$get = ['$rootScope', '$window', '$q', '$$q',
						function ($rootScope, $window, $q, $$q) {
							var intervals = {};


							/**
							 * @ngdoc service
							 * @name $interval
							 *
							 * @description
							 * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
							 * milliseconds.
							 *
							 * The return value of registering an interval function is a promise. This promise will be
							 * notified upon each tick of the interval, and will be resolved after `count` iterations, or
							 * run indefinitely if `count` is not defined. The value of the notification will be the
							 * number of iterations that have run.
							 * To cancel an interval, call `$interval.cancel(promise)`.
							 *
							 * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
							 * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
							 * time.
							 *
							 * <div class="alert alert-warning">
							 * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
							 * with them.  In particular they are not automatically destroyed when a controller's scope or a
							 * directive's element are destroyed.
							 * You should take this into consideration and make sure to always cancel the interval at the
							 * appropriate moment.  See the example below for more details on how and when to do this.
							 * </div>
							 *
							 * @param {function()} fn A function that should be called repeatedly.
							 * @param {number} delay Number of milliseconds between each function call.
							 * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
							 *   indefinitely.
							 * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
							 *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
							 * @param {...*=} Pass additional parameters to the executed function.
							 * @returns {promise} A promise which will be notified on each iteration.
							 *
							 * @example
							 * <example module="intervalExample">
							 * <file name="index.html">
							 *   <script>
							 *     angular.module('intervalExample', [])
							 *       .controller('ExampleController', ['$scope', '$interval',
							 *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
							 *       // Register the 'myCurrentTime' directive factory method.
							 *       // We inject $interval and dateFilter service since the factory method is DI.
							 *       .directive('myCurrentTime', ['$interval', 'dateFilter',
							 *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
							 *   </script>
							 *
							 *   <div>
							 *     <div ng-controller="ExampleController">
							 *       <label>Date format: <input ng-model="format"></label> <hr/>
							 *       Current time is: <span my-current-time="format"></span>
							 *       <hr/>
							 *       Blood 1 : <font color='red'>{{blood_1}}</font>
							 *       Blood 2 : <font color='red'>{{blood_2}}</font>
							 *       <button type="button" data-ng-click="fight()">Fight</button>
							 *       <button type="button" data-ng-click="stopFight()">StopFight</button>
							 *       <button type="button" data-ng-click="resetFight()">resetFight</button>
							 *     </div>
							 *   </div>
							 *
							 * </file>
							 * </example>
							 */
							function interval(fn, delay, count, invokeApply) {
								var hasParams = arguments.length > 4,
									args = hasParams ? sliceArgs(arguments, 4) : [],
									setInterval = $window.setInterval,
									clearInterval = $window.clearInterval,
									iteration = 0,
									skipApply = (isDefined(invokeApply) && !invokeApply),
									deferred = (skipApply ? $$q : $q).defer(),
									promise = deferred.promise;

								count = isDefined(count) ? count : 0;

								promise.then(null, null, (!hasParams) ? fn : function () {
									fn.apply(null, args);
								});

								promise.$$intervalId = setInterval(function tick() {
									deferred.notify(iteration++);

									if (count > 0 && iteration >= count) {
										deferred.resolve(iteration);
										clearInterval(promise.$$intervalId);
										delete intervals[promise.$$intervalId];
									}

									if (!skipApply) $rootScope.$apply();

								}, delay);

								intervals[promise.$$intervalId] = deferred;

								return promise;
							}


							/**
							 * @ngdoc method
							 * @name $interval#cancel
							 *
							 * @description
							 * Cancels a task associated with the `promise`.
							 *
							 * @param {promise} promise returned by the `$interval` function.
							 * @returns {boolean} Returns `true` if the task was successfully canceled.
							 */
							interval.cancel = function (promise) {
								if (promise && promise.$$intervalId in intervals) {
									intervals[promise.$$intervalId].reject('canceled');
									$window.clearInterval(promise.$$intervalId);
									delete intervals[promise.$$intervalId];
									return true;
								}
								return false;
							};

							return interval;
						}];
				}

				/**
				 * @ngdoc service
				 * @name $locale
				 *
				 * @description
				 * $locale service provides localization rules for various Angular components. As of right now the
				 * only public api is:
				 *
				 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
				 */
				function $LocaleProvider() {
					this.$get = function () {
						return {
							id: 'en-us',

							NUMBER_FORMATS: {
								DECIMAL_SEP: '.',
								GROUP_SEP: ',',
								PATTERNS: [
									{ // Decimal Pattern
										minInt: 1,
										minFrac: 0,
										maxFrac: 3,
										posPre: '',
										posSuf: '',
										negPre: '-',
										negSuf: '',
										gSize: 3,
										lgSize: 3
									}, { //Currency Pattern
										minInt: 1,
										minFrac: 2,
										maxFrac: 2,
										posPre: '\u00A4',
										posSuf: '',
										negPre: '(\u00A4',
										negSuf: ')',
										gSize: 3,
										lgSize: 3
									}
								],
								CURRENCY_SYM: '$'
							},

							DATETIME_FORMATS: {
								MONTH: 'January,February,March,April,May,June,July,August,September,October,November,December'
									.split(','),
								SHORTMONTH: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
								DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
								SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
								AMPMS: ['AM', 'PM'],
								medium: 'MMM d, y h:mm:ss a',
								'short': 'M/d/yy h:mm a',
								fullDate: 'EEEE, MMMM d, y',
								longDate: 'MMMM d, y',
								mediumDate: 'MMM d, y',
								shortDate: 'M/d/yy',
								mediumTime: 'h:mm:ss a',
								shortTime: 'h:mm a',
								ERANAMES: [
									"Before Christ",
									"Anno Domini"
								],
								ERAS: [
									"BC",
									"AD"
								]
							},

							pluralCat: function (num) {
								if (num === 1) {
									return 'one';
								}
								return 'other';
							}
						};
					};
				}

				var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
					DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
				var $locationMinErr = minErr('$location');


				/**
				 * Encode path using encodeUriSegment, ignoring forward slashes
				 *
				 * @param {string} path Path to encode
				 * @returns {string}
				 */
				function encodePath(path) {
					var segments = path.split('/'),
						i = segments.length;

					while (i--) {
						segments[i] = encodeUriSegment(segments[i]);
					}

					return segments.join('/');
				}

				function parseAbsoluteUrl(absoluteUrl, locationObj) {
					var parsedUrl = urlResolve(absoluteUrl);

					locationObj.$$protocol = parsedUrl.protocol;
					locationObj.$$host = parsedUrl.hostname;
					locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
				}


				function parseAppUrl(relativeUrl, locationObj) {
					var prefixed = (relativeUrl.charAt(0) !== '/');
					if (prefixed) {
						relativeUrl = '/' + relativeUrl;
					}
					var match = urlResolve(relativeUrl);
					locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
						match.pathname.substring(1) : match.pathname);
					locationObj.$$search = parseKeyValue(match.search);
					locationObj.$$hash = decodeURIComponent(match.hash);

					// make sure path starts with '/';
					if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
						locationObj.$$path = '/' + locationObj.$$path;
					}
				}


				/**
				 *
				 * @param {string} begin
				 * @param {string} whole
				 * @returns {string} returns text from whole after begin or undefined if it does not begin with
				 *                   expected string.
				 */
				function beginsWith(begin, whole) {
					if (whole.indexOf(begin) === 0) {
						return whole.substr(begin.length);
					}
				}


				function stripHash(url) {
					var index = url.indexOf('#');
					return index == -1 ? url : url.substr(0, index);
				}

				function trimEmptyHash(url) {
					return url.replace(/(#.+)|#$/, '$1');
				}


				function stripFile(url) {
					return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
				}

				/* return the server only (scheme://host:port) */
				function serverBase(url) {
					return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
				}


				/**
				 * LocationHtml5Url represents an url
				 * This object is exposed as $location service when HTML5 mode is enabled and supported
				 *
				 * @constructor
				 * @param {string} appBase application base URL
				 * @param {string} basePrefix url path prefix
				 */
				function LocationHtml5Url(appBase, basePrefix) {
					this.$$html5 = true;
					basePrefix = basePrefix || '';
					var appBaseNoFile = stripFile(appBase);
					parseAbsoluteUrl(appBase, this);


					/**
					 * Parse given html5 (regular) url string into properties
					 * @param {string} url HTML5 url
					 * @private
					 */
					this.$$parse = function (url) {
						var pathUrl = beginsWith(appBaseNoFile, url);
						if (!isString(pathUrl)) {
							throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
								appBaseNoFile);
						}

						parseAppUrl(pathUrl, this);

						if (!this.$$path) {
							this.$$path = '/';
						}

						this.$$compose();
					};

					/**
					 * Compose url and update `absUrl` property
					 * @private
					 */
					this.$$compose = function () {
						var search = toKeyValue(this.$$search),
							hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

						this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
						this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
					};

					this.$$parseLinkUrl = function (url, relHref) {
						if (relHref && relHref[0] === '#') {
							// special case for links to hash fragments:
							// keep the old url and only replace the hash fragment
							this.hash(relHref.slice(1));
							return true;
						}
						var appUrl, prevAppUrl;
						var rewrittenUrl;

						if ((appUrl = beginsWith(appBase, url)) !== undefined) {
							prevAppUrl = appUrl;
							if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {
								rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
							} else {
								rewrittenUrl = appBase + prevAppUrl;
							}
						} else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {
							rewrittenUrl = appBaseNoFile + appUrl;
						} else if (appBaseNoFile == url + '/') {
							rewrittenUrl = appBaseNoFile;
						}
						if (rewrittenUrl) {
							this.$$parse(rewrittenUrl);
						}
						return !!rewrittenUrl;
					};
				}


				/**
				 * LocationHashbangUrl represents url
				 * This object is exposed as $location service when developer doesn't opt into html5 mode.
				 * It also serves as the base class for html5 mode fallback on legacy browsers.
				 *
				 * @constructor
				 * @param {string} appBase application base URL
				 * @param {string} hashPrefix hashbang prefix
				 */
				function LocationHashbangUrl(appBase, hashPrefix) {
					var appBaseNoFile = stripFile(appBase);

					parseAbsoluteUrl(appBase, this);


					/**
					 * Parse given hashbang url into properties
					 * @param {string} url Hashbang url
					 * @private
					 */
					this.$$parse = function (url) {
						var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
						var withoutHashUrl;

						if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {

							// The rest of the url starts with a hash so we have
							// got either a hashbang path or a plain hash fragment
							withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
							if (isUndefined(withoutHashUrl)) {
								// There was no hashbang prefix so we just have a hash fragment
								withoutHashUrl = withoutBaseUrl;
							}

						} else {
							// There was no hashbang path nor hash fragment:
							// If we are in HTML5 mode we use what is left as the path;
							// Otherwise we ignore what is left
							if (this.$$html5) {
								withoutHashUrl = withoutBaseUrl;
							} else {
								withoutHashUrl = '';
								if (isUndefined(withoutBaseUrl)) {
									appBase = url;
									this.replace();
								}
							}
						}

						parseAppUrl(withoutHashUrl, this);

						this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

						this.$$compose();

						/*
						 * In Windows, on an anchor node on documents loaded from
						 * the filesystem, the browser will return a pathname
						 * prefixed with the drive name ('/C:/path') when a
						 * pathname without a drive is set:
						 *  * a.setAttribute('href', '/foo')
						 *   * a.pathname === '/C:/foo' //true
						 *
						 * Inside of Angular, we're always using pathnames that
						 * do not include drive names for routing.
						 */
						function removeWindowsDriveName(path, url, base) {
							/*
							 Matches paths for file protocol on windows,
							 such as /C:/foo/bar, and captures only /foo/bar.
							 */
							var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

							var firstPathSegmentMatch;

							//Get the relative path from the input URL.
							if (url.indexOf(base) === 0) {
								url = url.replace(base, '');
							}

							// The input URL intentionally contains a first path segment that ends with a colon.
							if (windowsFilePathExp.exec(url)) {
								return path;
							}

							firstPathSegmentMatch = windowsFilePathExp.exec(path);
							return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
						}
					};

					/**
					 * Compose hashbang url and update `absUrl` property
					 * @private
					 */
					this.$$compose = function () {
						var search = toKeyValue(this.$$search),
							hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

						this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
						this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
					};

					this.$$parseLinkUrl = function (url, relHref) {
						if (stripHash(appBase) == stripHash(url)) {
							this.$$parse(url);
							return true;
						}
						return false;
					};
				}


				/**
				 * LocationHashbangUrl represents url
				 * This object is exposed as $location service when html5 history api is enabled but the browser
				 * does not support it.
				 *
				 * @constructor
				 * @param {string} appBase application base URL
				 * @param {string} hashPrefix hashbang prefix
				 */
				function LocationHashbangInHtml5Url(appBase, hashPrefix) {
					this.$$html5 = true;
					LocationHashbangUrl.apply(this, arguments);

					var appBaseNoFile = stripFile(appBase);

					this.$$parseLinkUrl = function (url, relHref) {
						if (relHref && relHref[0] === '#') {
							// special case for links to hash fragments:
							// keep the old url and only replace the hash fragment
							this.hash(relHref.slice(1));
							return true;
						}

						var rewrittenUrl;
						var appUrl;

						if (appBase == stripHash(url)) {
							rewrittenUrl = url;
						} else if ((appUrl = beginsWith(appBaseNoFile, url))) {
							rewrittenUrl = appBase + hashPrefix + appUrl;
						} else if (appBaseNoFile === url + '/') {
							rewrittenUrl = appBaseNoFile;
						}
						if (rewrittenUrl) {
							this.$$parse(rewrittenUrl);
						}
						return !!rewrittenUrl;
					};

					this.$$compose = function () {
						var search = toKeyValue(this.$$search),
							hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

						this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
						// include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
						this.$$absUrl = appBase + hashPrefix + this.$$url;
					};

				}


				var locationPrototype = {

					/**
					 * Are we in html5 mode?
					 * @private
					 */
					$$html5: false,

					/**
					 * Has any change been replacing?
					 * @private
					 */
					$$replace: false,

					/**
					 * @ngdoc method
					 * @name $location#absUrl
					 *
					 * @description
					 * This method is getter only.
					 *
					 * Return full url representation with all segments encoded according to rules specified in
					 * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
					 *
					 *
					 * ```js
					 * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
					 * var absUrl = $location.absUrl();
					 * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
					 * ```
					 *
					 * @return {string} full url
					 */
					absUrl: locationGetter('$$absUrl'),

					/**
					 * @ngdoc method
					 * @name $location#url
					 *
					 * @description
					 * This method is getter / setter.
					 *
					 * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
					 *
					 * Change path, search and hash, when called with parameter and return `$location`.
					 *
					 *
					 * ```js
					 * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
					 * var url = $location.url();
					 * // => "/some/path?foo=bar&baz=xoxo"
					 * ```
					 *
					 * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
					 * @return {string} url
					 */
					url: function (url) {
						if (isUndefined(url)) {
							return this.$$url;
						}

						var match = PATH_MATCH.exec(url);
						if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
						if (match[2] || match[1] || url === '') this.search(match[3] || '');
						this.hash(match[5] || '');

						return this;
					},

					/**
					 * @ngdoc method
					 * @name $location#protocol
					 *
					 * @description
					 * This method is getter only.
					 *
					 * Return protocol of current url.
					 *
					 *
					 * ```js
					 * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
					 * var protocol = $location.protocol();
					 * // => "http"
					 * ```
					 *
					 * @return {string} protocol of current url
					 */
					protocol: locationGetter('$$protocol'),

					/**
					 * @ngdoc method
					 * @name $location#host
					 *
					 * @description
					 * This method is getter only.
					 *
					 * Return host of current url.
					 *
					 * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
					 *
					 *
					 * ```js
					 * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
					 * var host = $location.host();
					 * // => "example.com"
					 *
					 * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
					 * host = $location.host();
					 * // => "example.com"
					 * host = location.host;
					 * // => "example.com:8080"
					 * ```
					 *
					 * @return {string} host of current url.
					 */
					host: locationGetter('$$host'),

					/**
					 * @ngdoc method
					 * @name $location#port
					 *
					 * @description
					 * This method is getter only.
					 *
					 * Return port of current url.
					 *
					 *
					 * ```js
					 * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
					 * var port = $location.port();
					 * // => 80
					 * ```
					 *
					 * @return {Number} port
					 */
					port: locationGetter('$$port'),

					/**
					 * @ngdoc method
					 * @name $location#path
					 *
					 * @description
					 * This method is getter / setter.
					 *
					 * Return path of current url when called without any parameter.
					 *
					 * Change path when called with parameter and return `$location`.
					 *
					 * Note: Path should always begin with forward slash (/), this method will add the forward slash
					 * if it is missing.
					 *
					 *
					 * ```js
					 * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
					 * var path = $location.path();
					 * // => "/some/path"
					 * ```
					 *
					 * @param {(string|number)=} path New path
					 * @return {string} path
					 */
					path: locationGetterSetter('$$path', function (path) {
						path = path !== null ? path.toString() : '';
						return path.charAt(0) == '/' ? path : '/' + path;
					}),

					/**
					 * @ngdoc method
					 * @name $location#search
					 *
					 * @description
					 * This method is getter / setter.
					 *
					 * Return search part (as object) of current url when called without any parameter.
					 *
					 * Change search part when called with parameter and return `$location`.
					 *
					 *
					 * ```js
					 * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
					 * var searchObject = $location.search();
					 * // => {foo: 'bar', baz: 'xoxo'}
					 *
					 * // set foo to 'yipee'
					 * $location.search('foo', 'yipee');
					 * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
					 * ```
					 *
					 * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
					 * hash object.
					 *
					 * When called with a single argument the method acts as a setter, setting the `search` component
					 * of `$location` to the specified value.
					 *
					 * If the argument is a hash object containing an array of values, these values will be encoded
					 * as duplicate search parameters in the url.
					 *
					 * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
					 * will override only a single search property.
					 *
					 * If `paramValue` is an array, it will override the property of the `search` component of
					 * `$location` specified via the first argument.
					 *
					 * If `paramValue` is `null`, the property specified via the first argument will be deleted.
					 *
					 * If `paramValue` is `true`, the property specified via the first argument will be added with no
					 * value nor trailing equal sign.
					 *
					 * @return {Object} If called with no arguments returns the parsed `search` object. If called with
					 * one or more arguments returns `$location` object itself.
					 */
					search: function (search, paramValue) {
						switch (arguments.length) {
							case 0:
								return this.$$search;
							case 1:
								if (isString(search) || isNumber(search)) {
									search = search.toString();
									this.$$search = parseKeyValue(search);
								} else if (isObject(search)) {
									search = copy(search, {});
									// remove object undefined or null properties
									forEach(search, function (value, key) {
										if (value == null) delete search[key];
									});

									this.$$search = search;
								} else {
									throw $locationMinErr('isrcharg',
										'The first argument of the `$location#search()` call must be a string or an object.');
								}
								break;
							default:
								if (isUndefined(paramValue) || paramValue === null) {
									delete this.$$search[search];
								} else {
									this.$$search[search] = paramValue;
								}
						}

						this.$$compose();
						return this;
					},

					/**
					 * @ngdoc method
					 * @name $location#hash
					 *
					 * @description
					 * This method is getter / setter.
					 *
					 * Return hash fragment when called without any parameter.
					 *
					 * Change hash fragment when called with parameter and return `$location`.
					 *
					 *
					 * ```js
					 * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
					 * var hash = $location.hash();
					 * // => "hashValue"
					 * ```
					 *
					 * @param {(string|number)=} hash New hash fragment
					 * @return {string} hash
					 */
					hash: locationGetterSetter('$$hash', function (hash) {
						return hash !== null ? hash.toString() : '';
					}),

					/**
					 * @ngdoc method
					 * @name $location#replace
					 *
					 * @description
					 * If called, all changes to $location during current `$digest` will be replacing current history
					 * record, instead of adding new one.
					 */
					replace: function () {
						this.$$replace = true;
						return this;
					}
				};

				forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function (Location) {
					Location.prototype = Object.create(locationPrototype);

					/**
					 * @ngdoc method
					 * @name $location#state
					 *
					 * @description
					 * This method is getter / setter.
					 *
					 * Return the history state object when called without any parameter.
					 *
					 * Change the history state object when called with one parameter and return `$location`.
					 * The state object is later passed to `pushState` or `replaceState`.
					 *
					 * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
					 * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
					 * older browsers (like IE9 or Android < 4.0), don't use this method.
					 *
					 * @param {object=} state State object for pushState or replaceState
					 * @return {object} state
					 */
					Location.prototype.state = function (state) {
						if (!arguments.length) {
							return this.$$state;
						}

						if (Location !== LocationHtml5Url || !this.$$html5) {
							throw $locationMinErr('nostate', 'History API state support is available only ' +
								'in HTML5 mode and only in browsers supporting HTML5 History API');
						}
						// The user might modify `stateObject` after invoking `$location.state(stateObject)`
						// but we're changing the $$state reference to $browser.state() during the $digest
						// so the modification window is narrow.
						this.$$state = isUndefined(state) ? null : state;

						return this;
					};
				});


				function locationGetter(property) {
					return function () {
						return this[property];
					};
				}


				function locationGetterSetter(property, preprocess) {
					return function (value) {
						if (isUndefined(value)) {
							return this[property];
						}

						this[property] = preprocess(value);
						this.$$compose();

						return this;
					};
				}


				/**
				 * @ngdoc service
				 * @name $location
				 *
				 * @requires $rootElement
				 *
				 * @description
				 * The $location service parses the URL in the browser address bar (based on the
				 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
				 * available to your application. Changes to the URL in the address bar are reflected into
				 * $location service and changes to $location are reflected into the browser address bar.
				 *
				 * **The $location service:**
				 *
				 * - Exposes the current URL in the browser address bar, so you can
				 *   - Watch and observe the URL.
				 *   - Change the URL.
				 * - Synchronizes the URL with the browser when the user
				 *   - Changes the address bar.
				 *   - Clicks the back or forward button (or clicks a History link).
				 *   - Clicks on a link.
				 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
				 *
				 * For more information see {@link guide/$location Developer Guide: Using $location}
				 */

				/**
				 * @ngdoc provider
				 * @name $locationProvider
				 * @description
				 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
				 */
				function $LocationProvider() {
					var hashPrefix = '',
						html5Mode = {
							enabled: false,
							requireBase: true,
							rewriteLinks: true
						};

					/**
					 * @ngdoc method
					 * @name $locationProvider#hashPrefix
					 * @description
					 * @param {string=} prefix Prefix for hash part (containing path and search)
					 * @returns {*} current value if used as getter or itself (chaining) if used as setter
					 */
					this.hashPrefix = function (prefix) {
						if (isDefined(prefix)) {
							hashPrefix = prefix;
							return this;
						} else {
							return hashPrefix;
						}
					};

					/**
					 * @ngdoc method
					 * @name $locationProvider#html5Mode
					 * @description
					 * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
					 *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
					 *   properties:
					 *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
					 *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
					 *     support `pushState`.
					 *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
					 *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
					 *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
					 *     See the {@link guide/$location $location guide for more information}
					 *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
					 *     enables/disables url rewriting for relative links.
					 *
					 * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
					 */
					this.html5Mode = function (mode) {
						if (isBoolean(mode)) {
							html5Mode.enabled = mode;
							return this;
						} else if (isObject(mode)) {

							if (isBoolean(mode.enabled)) {
								html5Mode.enabled = mode.enabled;
							}

							if (isBoolean(mode.requireBase)) {
								html5Mode.requireBase = mode.requireBase;
							}

							if (isBoolean(mode.rewriteLinks)) {
								html5Mode.rewriteLinks = mode.rewriteLinks;
							}

							return this;
						} else {
							return html5Mode;
						}
					};

					/**
					 * @ngdoc event
					 * @name $location#$locationChangeStart
					 * @eventType broadcast on root scope
					 * @description
					 * Broadcasted before a URL will change.
					 *
					 * This change can be prevented by calling
					 * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
					 * details about event object. Upon successful change
					 * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
					 *
					 * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
					 * the browser supports the HTML5 History API.
					 *
					 * @param {Object} angularEvent Synthetic event object.
					 * @param {string} newUrl New URL
					 * @param {string=} oldUrl URL that was before it was changed.
					 * @param {string=} newState New history state object
					 * @param {string=} oldState History state object that was before it was changed.
					 */

					/**
					 * @ngdoc event
					 * @name $location#$locationChangeSuccess
					 * @eventType broadcast on root scope
					 * @description
					 * Broadcasted after a URL was changed.
					 *
					 * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
					 * the browser supports the HTML5 History API.
					 *
					 * @param {Object} angularEvent Synthetic event object.
					 * @param {string} newUrl New URL
					 * @param {string=} oldUrl URL that was before it was changed.
					 * @param {string=} newState New history state object
					 * @param {string=} oldState History state object that was before it was changed.
					 */

					this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
						function ($rootScope, $browser, $sniffer, $rootElement, $window) {
							var $location,
								LocationMode,
								baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
								initialUrl = $browser.url(),
								appBase;

							if (html5Mode.enabled) {
								if (!baseHref && html5Mode.requireBase) {
									throw $locationMinErr('nobase',
										"$location in HTML5 mode requires a <base> tag to be present!");
								}
								appBase = serverBase(initialUrl) + (baseHref || '/');
								LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
							} else {
								appBase = stripHash(initialUrl);
								LocationMode = LocationHashbangUrl;
							}
							$location = new LocationMode(appBase, '#' + hashPrefix);
							$location.$$parseLinkUrl(initialUrl, initialUrl);

							$location.$$state = $browser.state();

							var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

							function setBrowserUrlWithFallback(url, replace, state) {
								var oldUrl = $location.url();
								var oldState = $location.$$state;
								try {
									$browser.url(url, replace, state);

									// Make sure $location.state() returns referentially identical (not just deeply equal)
									// state object; this makes possible quick checking if the state changed in the digest
									// loop. Checking deep equality would be too expensive.
									$location.$$state = $browser.state();
								} catch (e) {
									// Restore old values if pushState fails
									$location.url(oldUrl);
									$location.$$state = oldState;

									throw e;
								}
							}

							$rootElement.on('click', function (event) {
								// TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
								// currently we open nice url link and redirect then

								if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

								var elm = jqLite(event.target);

								// traverse the DOM up to find first A tag
								while (nodeName_(elm[0]) !== 'a') {
									// ignore rewriting if no A tag (reached root element, or no parent - removed from document)
									if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
								}

								var absHref = elm.prop('href');
								// get the actual href attribute - see
								// http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
								var relHref = elm.attr('href') || elm.attr('xlink:href');

								if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
									// SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
									// an animation.
									absHref = urlResolve(absHref.animVal).href;
								}

								// Ignore when url is started with javascript: or mailto:
								if (IGNORE_URI_REGEXP.test(absHref)) return;

								if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
									if ($location.$$parseLinkUrl(absHref, relHref)) {
										// We do a preventDefault for all urls that are part of the angular application,
										// in html5mode and also without, so that we are able to abort navigation without
										// getting double entries in the location history.
										event.preventDefault();
										// update location manually
										if ($location.absUrl() != $browser.url()) {
											$rootScope.$apply();
											// hack to work around FF6 bug 684208 when scenario runner clicks on links
											$window.angular['ff-684208-preventDefault'] = true;
										}
									}
								}
							});


							// rewrite hashbang url <> html5 url
							if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
								$browser.url($location.absUrl(), true);
							}

							var initializing = true;

							// update $location when $browser url changes
							$browser.onUrlChange(function (newUrl, newState) {
								$rootScope.$evalAsync(function () {
									var oldUrl = $location.absUrl();
									var oldState = $location.$$state;
									var defaultPrevented;

									$location.$$parse(newUrl);
									$location.$$state = newState;

									defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
										newState, oldState).defaultPrevented;

									// if the location was changed by a `$locationChangeStart` handler then stop
									// processing this location change
									if ($location.absUrl() !== newUrl) return;

									if (defaultPrevented) {
										$location.$$parse(oldUrl);
										$location.$$state = oldState;
										setBrowserUrlWithFallback(oldUrl, false, oldState);
									} else {
										initializing = false;
										afterLocationChange(oldUrl, oldState);
									}
								});
								if (!$rootScope.$$phase) $rootScope.$digest();
							});

							// update browser
							$rootScope.$watch(function $locationWatch() {
								var oldUrl = trimEmptyHash($browser.url());
								var newUrl = trimEmptyHash($location.absUrl());
								var oldState = $browser.state();
								var currentReplace = $location.$$replace;
								var urlOrStateChanged = oldUrl !== newUrl ||
									($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

								if (initializing || urlOrStateChanged) {
									initializing = false;

									$rootScope.$evalAsync(function () {
										var newUrl = $location.absUrl();
										var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
											$location.$$state, oldState).defaultPrevented;

										// if the location was changed by a `$locationChangeStart` handler then stop
										// processing this location change
										if ($location.absUrl() !== newUrl) return;

										if (defaultPrevented) {
											$location.$$parse(oldUrl);
											$location.$$state = oldState;
										} else {
											if (urlOrStateChanged) {
												setBrowserUrlWithFallback(newUrl, currentReplace,
													oldState === $location.$$state ? null : $location.$$state);
											}
											afterLocationChange(oldUrl, oldState);
										}
									});
								}

								$location.$$replace = false;

								// we don't need to return anything because $evalAsync will make the digest loop dirty when
								// there is a change
							});

							return $location;

							function afterLocationChange(oldUrl, oldState) {
								$rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
									$location.$$state, oldState);
							}
						}];
				}

				/**
				 * @ngdoc service
				 * @name $log
				 * @requires $window
				 *
				 * @description
				 * Simple service for logging. Default implementation safely writes the message
				 * into the browser's console (if present).
				 *
				 * The main purpose of this service is to simplify debugging and troubleshooting.
				 *
				 * The default is to log `debug` messages. You can use
				 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
				 *
				 * @example
				 <example module="logExample">
				 <file name="script.js">
				 angular.module('logExample', [])
				 .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
				 </file>
				 <file name="index.html">
				 <div ng-controller="LogController">
				 <p>Reload this page with open console, enter text and hit the log button...</p>
				 <label>Message:
				 <input type="text" ng-model="message" /></label>
				 <button ng-click="$log.log(message)">log</button>
				 <button ng-click="$log.warn(message)">warn</button>
				 <button ng-click="$log.info(message)">info</button>
				 <button ng-click="$log.error(message)">error</button>
				 <button ng-click="$log.debug(message)">debug</button>
				 </div>
				 </file>
				 </example>
				 */

				/**
				 * @ngdoc provider
				 * @name $logProvider
				 * @description
				 * Use the `$logProvider` to configure how the application logs messages
				 */
				function $LogProvider() {
					var debug = true,
						self = this;

					/**
					 * @ngdoc method
					 * @name $logProvider#debugEnabled
					 * @description
					 * @param {boolean=} flag enable or disable debug level messages
					 * @returns {*} current value if used as getter or itself (chaining) if used as setter
					 */
					this.debugEnabled = function (flag) {
						if (isDefined(flag)) {
							debug = flag;
							return this;
						} else {
							return debug;
						}
					};

					this.$get = ['$window', function ($window) {
						return {
							/**
							 * @ngdoc method
							 * @name $log#log
							 *
							 * @description
							 * Write a log message
							 */
							log: consoleLog('log'),

							/**
							 * @ngdoc method
							 * @name $log#info
							 *
							 * @description
							 * Write an information message
							 */
							info: consoleLog('info'),

							/**
							 * @ngdoc method
							 * @name $log#warn
							 *
							 * @description
							 * Write a warning message
							 */
							warn: consoleLog('warn'),

							/**
							 * @ngdoc method
							 * @name $log#error
							 *
							 * @description
							 * Write an error message
							 */
							error: consoleLog('error'),

							/**
							 * @ngdoc method
							 * @name $log#debug
							 *
							 * @description
							 * Write a debug message
							 */
							debug: (function () {
								var fn = consoleLog('debug');

								return function () {
									if (debug) {
										fn.apply(self, arguments);
									}
								};
							}())
						};

						function formatError(arg) {
							if (arg instanceof Error) {
								if (arg.stack) {
									arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
										? 'Error: ' + arg.message + '\n' + arg.stack
										: arg.stack;
								} else if (arg.sourceURL) {
									arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
								}
							}
							return arg;
						}

						function consoleLog(type) {
							var console = $window.console || {},
								logFn = console[type] || console.log || noop,
								hasApply = false;

							// Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
							// The reason behind this is that console.log has type "object" in IE8...
							try {
								hasApply = !!logFn.apply;
							} catch (e) {
							}

							if (hasApply) {
								return function () {
									var args = [];
									forEach(arguments, function (arg) {
										args.push(formatError(arg));
									});
									return logFn.apply(console, args);
								};
							}

							// we are IE which either doesn't have window.console => this is noop and we do nothing,
							// or we are IE where console.log doesn't have apply so we log at least first 2 args
							return function (arg1, arg2) {
								logFn(arg1, arg2 == null ? '' : arg2);
							};
						}
					}];
				}

				/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
				 *     Any commits to this file should be reviewed with security in mind.  *
				 *   Changes to this file can potentially create security vulnerabilities. *
				 *          An approval from 2 Core members with history of modifying      *
				 *                         this file is required.                          *
				 *                                                                         *
				 *  Does the change somehow allow for arbitrary javascript to be executed? *
				 *    Or allows for someone to change the prototype of built-in objects?   *
				 *     Or gives undesired access to variables likes document or window?    *
				 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

				var $parseMinErr = minErr('$parse');

				// Sandboxing Angular Expressions
				// ------------------------------
				// Angular expressions are generally considered safe because these expressions only have direct
				// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
				// obtaining a reference to native JS functions such as the Function constructor.
				//
				// As an example, consider the following Angular expression:
				//
				//   {}.toString.constructor('alert("evil JS code")')
				//
				// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
				// against the expression language, but not to prevent exploits that were enabled by exposing
				// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
				// practice and therefore we are not even trying to protect against interaction with an object
				// explicitly exposed in this way.
				//
				// In general, it is not possible to access a Window object from an angular expression unless a
				// window or some DOM object that has a reference to window is published onto a Scope.
				// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
				// native objects.
				//
				// See https://docs.angularjs.org/guide/security


				function ensureSafeMemberName(name, fullExpression) {
					if (name === "__defineGetter__" || name === "__defineSetter__"
						|| name === "__lookupGetter__" || name === "__lookupSetter__"
						|| name === "__proto__") {
						throw $parseMinErr('isecfld',
							'Attempting to access a disallowed field in Angular expressions! '
							+ 'Expression: {0}', fullExpression);
					}
					return name;
				}

				function ensureSafeObject(obj, fullExpression) {
					// nifty check if obj is Function that is fast and works across iframes and other contexts
					if (obj) {
						if (obj.constructor === obj) {
							throw $parseMinErr('isecfn',
								'Referencing Function in Angular expressions is disallowed! Expression: {0}',
								fullExpression);
						} else if (// isWindow(obj)
						obj.window === obj) {
							throw $parseMinErr('isecwindow',
								'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
								fullExpression);
						} else if (// isElement(obj)
						obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
							throw $parseMinErr('isecdom',
								'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
								fullExpression);
						} else if (// block Object so that we can't get hold of dangerous Object.* methods
						obj === Object) {
							throw $parseMinErr('isecobj',
								'Referencing Object in Angular expressions is disallowed! Expression: {0}',
								fullExpression);
						}
					}
					return obj;
				}

				var CALL = Function.prototype.call;
				var APPLY = Function.prototype.apply;
				var BIND = Function.prototype.bind;

				function ensureSafeFunction(obj, fullExpression) {
					if (obj) {
						if (obj.constructor === obj) {
							throw $parseMinErr('isecfn',
								'Referencing Function in Angular expressions is disallowed! Expression: {0}',
								fullExpression);
						} else if (obj === CALL || obj === APPLY || obj === BIND) {
							throw $parseMinErr('isecff',
								'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
								fullExpression);
						}
					}
				}

				var OPERATORS = createMap();
				forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function (operator) {
					OPERATORS[operator] = true;
				});
				var ESCAPE = {"n": "\n", "f": "\f", "r": "\r", "t": "\t", "v": "\v", "'": "'", '"': '"'};


				/////////////////////////////////////////


				/**
				 * @constructor
				 */
				var Lexer = function (options) {
					this.options = options;
				};

				Lexer.prototype = {
					constructor: Lexer,

					lex: function (text) {
						this.text = text;
						this.index = 0;
						this.tokens = [];

						while (this.index < this.text.length) {
							var ch = this.text.charAt(this.index);
							if (ch === '"' || ch === "'") {
								this.readString(ch);
							} else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
								this.readNumber();
							} else if (this.isIdent(ch)) {
								this.readIdent();
							} else if (this.is(ch, '(){}[].,;:?')) {
								this.tokens.push({index: this.index, text: ch});
								this.index++;
							} else if (this.isWhitespace(ch)) {
								this.index++;
							} else {
								var ch2 = ch + this.peek();
								var ch3 = ch2 + this.peek(2);
								var op1 = OPERATORS[ch];
								var op2 = OPERATORS[ch2];
								var op3 = OPERATORS[ch3];
								if (op1 || op2 || op3) {
									var token = op3 ? ch3 : (op2 ? ch2 : ch);
									this.tokens.push({index: this.index, text: token, operator: true});
									this.index += token.length;
								} else {
									this.throwError('Unexpected next character ', this.index, this.index + 1);
								}
							}
						}
						return this.tokens;
					},

					is: function (ch, chars) {
						return chars.indexOf(ch) !== -1;
					},

					peek: function (i) {
						var num = i || 1;
						return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
					},

					isNumber: function (ch) {
						return ('0' <= ch && ch <= '9') && typeof ch === "string";
					},

					isWhitespace: function (ch) {
						// IE treats non-breaking space as \u00A0
						return (ch === ' ' || ch === '\r' || ch === '\t' ||
						ch === '\n' || ch === '\v' || ch === '\u00A0');
					},

					isIdent: function (ch) {
						return ('a' <= ch && ch <= 'z' ||
						'A' <= ch && ch <= 'Z' ||
						'_' === ch || ch === '$');
					},

					isExpOperator: function (ch) {
						return (ch === '-' || ch === '+' || this.isNumber(ch));
					},

					throwError: function (error, start, end) {
						end = end || this.index;
						var colStr = (isDefined(start)
							? 's ' + start + '-' + this.index + ' [' + this.text.substring(start, end) + ']'
							: ' ' + end);
						throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
							error, colStr, this.text);
					},

					readNumber: function () {
						var number = '';
						var start = this.index;
						while (this.index < this.text.length) {
							var ch = lowercase(this.text.charAt(this.index));
							if (ch == '.' || this.isNumber(ch)) {
								number += ch;
							} else {
								var peekCh = this.peek();
								if (ch == 'e' && this.isExpOperator(peekCh)) {
									number += ch;
								} else if (this.isExpOperator(ch) &&
									peekCh && this.isNumber(peekCh) &&
									number.charAt(number.length - 1) == 'e') {
									number += ch;
								} else if (this.isExpOperator(ch) &&
									(!peekCh || !this.isNumber(peekCh)) &&
									number.charAt(number.length - 1) == 'e') {
									this.throwError('Invalid exponent');
								} else {
									break;
								}
							}
							this.index++;
						}
						this.tokens.push({
							index: start,
							text: number,
							constant: true,
							value: Number(number)
						});
					},

					readIdent: function () {
						var start = this.index;
						while (this.index < this.text.length) {
							var ch = this.text.charAt(this.index);
							if (!(this.isIdent(ch) || this.isNumber(ch))) {
								break;
							}
							this.index++;
						}
						this.tokens.push({
							index: start,
							text: this.text.slice(start, this.index),
							identifier: true
						});
					},

					readString: function (quote) {
						var start = this.index;
						this.index++;
						var string = '';
						var rawString = quote;
						var escape = false;
						while (this.index < this.text.length) {
							var ch = this.text.charAt(this.index);
							rawString += ch;
							if (escape) {
								if (ch === 'u') {
									var hex = this.text.substring(this.index + 1, this.index + 5);
									if (!hex.match(/[\da-f]{4}/i)) {
										this.throwError('Invalid unicode escape [\\u' + hex + ']');
									}
									this.index += 4;
									string += String.fromCharCode(parseInt(hex, 16));
								} else {
									var rep = ESCAPE[ch];
									string = string + (rep || ch);
								}
								escape = false;
							} else if (ch === '\\') {
								escape = true;
							} else if (ch === quote) {
								this.index++;
								this.tokens.push({
									index: start,
									text: rawString,
									constant: true,
									value: string
								});
								return;
							} else {
								string += ch;
							}
							this.index++;
						}
						this.throwError('Unterminated quote', start);
					}
				};

				var AST = function (lexer, options) {
					this.lexer = lexer;
					this.options = options;
				};

				AST.Program = 'Program';
				AST.ExpressionStatement = 'ExpressionStatement';
				AST.AssignmentExpression = 'AssignmentExpression';
				AST.ConditionalExpression = 'ConditionalExpression';
				AST.LogicalExpression = 'LogicalExpression';
				AST.BinaryExpression = 'BinaryExpression';
				AST.UnaryExpression = 'UnaryExpression';
				AST.CallExpression = 'CallExpression';
				AST.MemberExpression = 'MemberExpression';
				AST.Identifier = 'Identifier';
				AST.Literal = 'Literal';
				AST.ArrayExpression = 'ArrayExpression';
				AST.Property = 'Property';
				AST.ObjectExpression = 'ObjectExpression';
				AST.ThisExpression = 'ThisExpression';

				// Internal use only
				AST.NGValueParameter = 'NGValueParameter';

				AST.prototype = {
					ast: function (text) {
						this.text = text;
						this.tokens = this.lexer.lex(text);

						var value = this.program();

						if (this.tokens.length !== 0) {
							this.throwError('is an unexpected token', this.tokens[0]);
						}

						return value;
					},

					program: function () {
						var body = [];
						while (true) {
							if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
								body.push(this.expressionStatement());
							if (!this.expect(';')) {
								return {type: AST.Program, body: body};
							}
						}
					},

					expressionStatement: function () {
						return {type: AST.ExpressionStatement, expression: this.filterChain()};
					},

					filterChain: function () {
						var left = this.expression();
						var token;
						while ((token = this.expect('|'))) {
							left = this.filter(left);
						}
						return left;
					},

					expression: function () {
						return this.assignment();
					},

					assignment: function () {
						var result = this.ternary();
						if (this.expect('=')) {
							result = {
								type: AST.AssignmentExpression,
								left: result,
								right: this.assignment(),
								operator: '='
							};
						}
						return result;
					},

					ternary: function () {
						var test = this.logicalOR();
						var alternate;
						var consequent;
						if (this.expect('?')) {
							alternate = this.expression();
							if (this.consume(':')) {
								consequent = this.expression();
								return {
									type: AST.ConditionalExpression,
									test: test,
									alternate: alternate,
									consequent: consequent
								};
							}
						}
						return test;
					},

					logicalOR: function () {
						var left = this.logicalAND();
						while (this.expect('||')) {
							left = {type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND()};
						}
						return left;
					},

					logicalAND: function () {
						var left = this.equality();
						while (this.expect('&&')) {
							left = {type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
						}
						return left;
					},

					equality: function () {
						var left = this.relational();
						var token;
						while ((token = this.expect('==', '!=', '===', '!=='))) {
							left = {
								type: AST.BinaryExpression,
								operator: token.text,
								left: left,
								right: this.relational()
							};
						}
						return left;
					},

					relational: function () {
						var left = this.additive();
						var token;
						while ((token = this.expect('<', '>', '<=', '>='))) {
							left = {
								type: AST.BinaryExpression,
								operator: token.text,
								left: left,
								right: this.additive()
							};
						}
						return left;
					},

					additive: function () {
						var left = this.multiplicative();
						var token;
						while ((token = this.expect('+', '-'))) {
							left = {
								type: AST.BinaryExpression,
								operator: token.text,
								left: left,
								right: this.multiplicative()
							};
						}
						return left;
					},

					multiplicative: function () {
						var left = this.unary();
						var token;
						while ((token = this.expect('*', '/', '%'))) {
							left = {type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary()};
						}
						return left;
					},

					unary: function () {
						var token;
						if ((token = this.expect('+', '-', '!'))) {
							return {
								type: AST.UnaryExpression,
								operator: token.text,
								prefix: true,
								argument: this.unary()
							};
						} else {
							return this.primary();
						}
					},

					primary: function () {
						var primary;
						if (this.expect('(')) {
							primary = this.filterChain();
							this.consume(')');
						} else if (this.expect('[')) {
							primary = this.arrayDeclaration();
						} else if (this.expect('{')) {
							primary = this.object();
						} else if (this.constants.hasOwnProperty(this.peek().text)) {
							primary = copy(this.constants[this.consume().text]);
						} else if (this.peek().identifier) {
							primary = this.identifier();
						} else if (this.peek().constant) {
							primary = this.constant();
						} else {
							this.throwError('not a primary expression', this.peek());
						}

						var next;
						while ((next = this.expect('(', '[', '.'))) {
							if (next.text === '(') {
								primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments()};
								this.consume(')');
							} else if (next.text === '[') {
								primary = {
									type: AST.MemberExpression,
									object: primary,
									property: this.expression(),
									computed: true
								};
								this.consume(']');
							} else if (next.text === '.') {
								primary = {
									type: AST.MemberExpression,
									object: primary,
									property: this.identifier(),
									computed: false
								};
							} else {
								this.throwError('IMPOSSIBLE');
							}
						}
						return primary;
					},

					filter: function (baseExpression) {
						var args = [baseExpression];
						var result = {
							type: AST.CallExpression,
							callee: this.identifier(),
							arguments: args,
							filter: true
						};

						while (this.expect(':')) {
							args.push(this.expression());
						}

						return result;
					},

					parseArguments: function () {
						var args = [];
						if (this.peekToken().text !== ')') {
							do {
								args.push(this.expression());
							} while (this.expect(','));
						}
						return args;
					},

					identifier: function () {
						var token = this.consume();
						if (!token.identifier) {
							this.throwError('is not a valid identifier', token);
						}
						return {type: AST.Identifier, name: token.text};
					},

					constant: function () {
						// TODO check that it is a constant
						return {type: AST.Literal, value: this.consume().value};
					},

					arrayDeclaration: function () {
						var elements = [];
						if (this.peekToken().text !== ']') {
							do {
								if (this.peek(']')) {
									// Support trailing commas per ES5.1.
									break;
								}
								elements.push(this.expression());
							} while (this.expect(','));
						}
						this.consume(']');

						return {type: AST.ArrayExpression, elements: elements};
					},

					object: function () {
						var properties = [], property;
						if (this.peekToken().text !== '}') {
							do {
								if (this.peek('}')) {
									// Support trailing commas per ES5.1.
									break;
								}
								property = {type: AST.Property, kind: 'init'};
								if (this.peek().constant) {
									property.key = this.constant();
								} else if (this.peek().identifier) {
									property.key = this.identifier();
								} else {
									this.throwError("invalid key", this.peek());
								}
								this.consume(':');
								property.value = this.expression();
								properties.push(property);
							} while (this.expect(','));
						}
						this.consume('}');

						return {type: AST.ObjectExpression, properties: properties};
					},

					throwError: function (msg, token) {
						throw $parseMinErr('syntax',
							'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
							token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
					},

					consume: function (e1) {
						if (this.tokens.length === 0) {
							throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
						}

						var token = this.expect(e1);
						if (!token) {
							this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
						}
						return token;
					},

					peekToken: function () {
						if (this.tokens.length === 0) {
							throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
						}
						return this.tokens[0];
					},

					peek: function (e1, e2, e3, e4) {
						return this.peekAhead(0, e1, e2, e3, e4);
					},

					peekAhead: function (i, e1, e2, e3, e4) {
						if (this.tokens.length > i) {
							var token = this.tokens[i];
							var t = token.text;
							if (t === e1 || t === e2 || t === e3 || t === e4 ||
								(!e1 && !e2 && !e3 && !e4)) {
								return token;
							}
						}
						return false;
					},

					expect: function (e1, e2, e3, e4) {
						var token = this.peek(e1, e2, e3, e4);
						if (token) {
							this.tokens.shift();
							return token;
						}
						return false;
					},


					/* `undefined` is not a constant, it is an identifier,
					 * but using it as an identifier is not supported
					 */
					constants: {
						'true': {type: AST.Literal, value: true},
						'false': {type: AST.Literal, value: false},
						'null': {type: AST.Literal, value: null},
						'undefined': {type: AST.Literal, value: undefined},
						'this': {type: AST.ThisExpression}
					}
				};

				function ifDefined(v, d) {
					return typeof v !== 'undefined' ? v : d;
				}

				function plusFn(l, r) {
					if (typeof l === 'undefined') return r;
					if (typeof r === 'undefined') return l;
					return l + r;
				}

				function isStateless($filter, filterName) {
					var fn = $filter(filterName);
					return !fn.$stateful;
				}

				function findConstantAndWatchExpressions(ast, $filter) {
					var allConstants;
					var argsToWatch;
					switch (ast.type) {
						case AST.Program:
							allConstants = true;
							forEach(ast.body, function (expr) {
								findConstantAndWatchExpressions(expr.expression, $filter);
								allConstants = allConstants && expr.expression.constant;
							});
							ast.constant = allConstants;
							break;
						case AST.Literal:
							ast.constant = true;
							ast.toWatch = [];
							break;
						case AST.UnaryExpression:
							findConstantAndWatchExpressions(ast.argument, $filter);
							ast.constant = ast.argument.constant;
							ast.toWatch = ast.argument.toWatch;
							break;
						case AST.BinaryExpression:
							findConstantAndWatchExpressions(ast.left, $filter);
							findConstantAndWatchExpressions(ast.right, $filter);
							ast.constant = ast.left.constant && ast.right.constant;
							ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
							break;
						case AST.LogicalExpression:
							findConstantAndWatchExpressions(ast.left, $filter);
							findConstantAndWatchExpressions(ast.right, $filter);
							ast.constant = ast.left.constant && ast.right.constant;
							ast.toWatch = ast.constant ? [] : [ast];
							break;
						case AST.ConditionalExpression:
							findConstantAndWatchExpressions(ast.test, $filter);
							findConstantAndWatchExpressions(ast.alternate, $filter);
							findConstantAndWatchExpressions(ast.consequent, $filter);
							ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
							ast.toWatch = ast.constant ? [] : [ast];
							break;
						case AST.Identifier:
							ast.constant = false;
							ast.toWatch = [ast];
							break;
						case AST.MemberExpression:
							findConstantAndWatchExpressions(ast.object, $filter);
							if (ast.computed) {
								findConstantAndWatchExpressions(ast.property, $filter);
							}
							ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
							ast.toWatch = [ast];
							break;
						case AST.CallExpression:
							allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
							argsToWatch = [];
							forEach(ast.arguments, function (expr) {
								findConstantAndWatchExpressions(expr, $filter);
								allConstants = allConstants && expr.constant;
								if (!expr.constant) {
									argsToWatch.push.apply(argsToWatch, expr.toWatch);
								}
							});
							ast.constant = allConstants;
							ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
							break;
						case AST.AssignmentExpression:
							findConstantAndWatchExpressions(ast.left, $filter);
							findConstantAndWatchExpressions(ast.right, $filter);
							ast.constant = ast.left.constant && ast.right.constant;
							ast.toWatch = [ast];
							break;
						case AST.ArrayExpression:
							allConstants = true;
							argsToWatch = [];
							forEach(ast.elements, function (expr) {
								findConstantAndWatchExpressions(expr, $filter);
								allConstants = allConstants && expr.constant;
								if (!expr.constant) {
									argsToWatch.push.apply(argsToWatch, expr.toWatch);
								}
							});
							ast.constant = allConstants;
							ast.toWatch = argsToWatch;
							break;
						case AST.ObjectExpression:
							allConstants = true;
							argsToWatch = [];
							forEach(ast.properties, function (property) {
								findConstantAndWatchExpressions(property.value, $filter);
								allConstants = allConstants && property.value.constant;
								if (!property.value.constant) {
									argsToWatch.push.apply(argsToWatch, property.value.toWatch);
								}
							});
							ast.constant = allConstants;
							ast.toWatch = argsToWatch;
							break;
						case AST.ThisExpression:
							ast.constant = false;
							ast.toWatch = [];
							break;
					}
				}

				function getInputs(body) {
					if (body.length != 1) return;
					var lastExpression = body[0].expression;
					var candidate = lastExpression.toWatch;
					if (candidate.length !== 1) return candidate;
					return candidate[0] !== lastExpression ? candidate : undefined;
				}

				function isAssignable(ast) {
					return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
				}

				function assignableAST(ast) {
					if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
						return {
							type: AST.AssignmentExpression,
							left: ast.body[0].expression,
							right: {type: AST.NGValueParameter},
							operator: '='
						};
					}
				}

				function isLiteral(ast) {
					return ast.body.length === 0 ||
						ast.body.length === 1 && (
						ast.body[0].expression.type === AST.Literal ||
						ast.body[0].expression.type === AST.ArrayExpression ||
						ast.body[0].expression.type === AST.ObjectExpression);
				}

				function isConstant(ast) {
					return ast.constant;
				}

				function ASTCompiler(astBuilder, $filter) {
					this.astBuilder = astBuilder;
					this.$filter = $filter;
				}

				ASTCompiler.prototype = {
					compile: function (expression, expensiveChecks) {
						var self = this;
						var ast = this.astBuilder.ast(expression);
						this.state = {
							nextId: 0,
							filters: {},
							expensiveChecks: expensiveChecks,
							fn: {vars: [], body: [], own: {}},
							assign: {vars: [], body: [], own: {}},
							inputs: []
						};
						findConstantAndWatchExpressions(ast, self.$filter);
						var extra = '';
						var assignable;
						this.stage = 'assign';
						if ((assignable = assignableAST(ast))) {
							this.state.computing = 'assign';
							var result = this.nextId();
							this.recurse(assignable, result);
							extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
						}
						var toWatch = getInputs(ast.body);
						self.stage = 'inputs';
						forEach(toWatch, function (watch, key) {
							var fnKey = 'fn' + key;
							self.state[fnKey] = {vars: [], body: [], own: {}};
							self.state.computing = fnKey;
							var intoId = self.nextId();
							self.recurse(watch, intoId);
							self.return_(intoId);
							self.state.inputs.push(fnKey);
							watch.watchId = key;
						});
						this.state.computing = 'fn';
						this.stage = 'main';
						this.recurse(ast);
						var fnString =
							// The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
							// This is a workaround for this until we do a better job at only removing the prefix only when we should.
							'"' + this.USE + ' ' + this.STRICT + '";\n' +
							this.filterPrefix() +
							'var fn=' + this.generateFunction('fn', 's,l,a,i') +
							extra +
							this.watchFns() +
							'return fn;';

						/* jshint -W054 */
						var fn = (new Function('$filter',
							'ensureSafeMemberName',
							'ensureSafeObject',
							'ensureSafeFunction',
							'ifDefined',
							'plus',
							'text',
							fnString))(
							this.$filter,
							ensureSafeMemberName,
							ensureSafeObject,
							ensureSafeFunction,
							ifDefined,
							plusFn,
							expression);
						/* jshint +W054 */
						this.state = this.stage = undefined;
						fn.literal = isLiteral(ast);
						fn.constant = isConstant(ast);
						return fn;
					},

					USE: 'use',

					STRICT: 'strict',

					watchFns: function () {
						var result = [];
						var fns = this.state.inputs;
						var self = this;
						forEach(fns, function (name) {
							result.push('var ' + name + '=' + self.generateFunction(name, 's'));
						});
						if (fns.length) {
							result.push('fn.inputs=[' + fns.join(',') + '];');
						}
						return result.join('');
					},

					generateFunction: function (name, params) {
						return 'function(' + params + '){' +
							this.varsPrefix(name) +
							this.body(name) +
							'};';
					},

					filterPrefix: function () {
						var parts = [];
						var self = this;
						forEach(this.state.filters, function (id, filter) {
							parts.push(id + '=$filter(' + self.escape(filter) + ')');
						});
						if (parts.length) return 'var ' + parts.join(',') + ';';
						return '';
					},

					varsPrefix: function (section) {
						return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
					},

					body: function (section) {
						return this.state[section].body.join('');
					},

					recurse: function (ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
						var left, right, self = this, args, expression;
						recursionFn = recursionFn || noop;
						if (!skipWatchIdCheck && isDefined(ast.watchId)) {
							intoId = intoId || this.nextId();
							this.if_('i',
								this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
								this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
							);
							return;
						}
						switch (ast.type) {
							case AST.Program:
								forEach(ast.body, function (expression, pos) {
									self.recurse(expression.expression, undefined, undefined, function (expr) {
										right = expr;
									});
									if (pos !== ast.body.length - 1) {
										self.current().body.push(right, ';');
									} else {
										self.return_(right);
									}
								});
								break;
							case AST.Literal:
								expression = this.escape(ast.value);
								this.assign(intoId, expression);
								recursionFn(expression);
								break;
							case AST.UnaryExpression:
								this.recurse(ast.argument, undefined, undefined, function (expr) {
									right = expr;
								});
								expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
								this.assign(intoId, expression);
								recursionFn(expression);
								break;
							case AST.BinaryExpression:
								this.recurse(ast.left, undefined, undefined, function (expr) {
									left = expr;
								});
								this.recurse(ast.right, undefined, undefined, function (expr) {
									right = expr;
								});
								if (ast.operator === '+') {
									expression = this.plus(left, right);
								} else if (ast.operator === '-') {
									expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
								} else {
									expression = '(' + left + ')' + ast.operator + '(' + right + ')';
								}
								this.assign(intoId, expression);
								recursionFn(expression);
								break;
							case AST.LogicalExpression:
								intoId = intoId || this.nextId();
								self.recurse(ast.left, intoId);
								self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
								recursionFn(intoId);
								break;
							case AST.ConditionalExpression:
								intoId = intoId || this.nextId();
								self.recurse(ast.test, intoId);
								self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
								recursionFn(intoId);
								break;
							case AST.Identifier:
								intoId = intoId || this.nextId();
								if (nameId) {
									nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
									nameId.computed = false;
									nameId.name = ast.name;
								}
								ensureSafeMemberName(ast.name);
								self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
									function () {
										self.if_(self.stage === 'inputs' || 's', function () {
											if (create && create !== 1) {
												self.if_(
													self.not(self.nonComputedMember('s', ast.name)),
													self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
											}
											self.assign(intoId, self.nonComputedMember('s', ast.name));
										});
									}, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
								);
								if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
									self.addEnsureSafeObject(intoId);
								}
								recursionFn(intoId);
								break;
							case AST.MemberExpression:
								left = nameId && (nameId.context = this.nextId()) || this.nextId();
								intoId = intoId || this.nextId();
								self.recurse(ast.object, left, undefined, function () {
									self.if_(self.notNull(left), function () {
										if (ast.computed) {
											right = self.nextId();
											self.recurse(ast.property, right);
											self.addEnsureSafeMemberName(right);
											if (create && create !== 1) {
												self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
											}
											expression = self.ensureSafeObject(self.computedMember(left, right));
											self.assign(intoId, expression);
											if (nameId) {
												nameId.computed = true;
												nameId.name = right;
											}
										} else {
											ensureSafeMemberName(ast.property.name);
											if (create && create !== 1) {
												self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
											}
											expression = self.nonComputedMember(left, ast.property.name);
											if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
												expression = self.ensureSafeObject(expression);
											}
											self.assign(intoId, expression);
											if (nameId) {
												nameId.computed = false;
												nameId.name = ast.property.name;
											}
										}
									}, function () {
										self.assign(intoId, 'undefined');
									});
									recursionFn(intoId);
								}, !!create);
								break;
							case AST.CallExpression:
								intoId = intoId || this.nextId();
								if (ast.filter) {
									right = self.filter(ast.callee.name);
									args = [];
									forEach(ast.arguments, function (expr) {
										var argument = self.nextId();
										self.recurse(expr, argument);
										args.push(argument);
									});
									expression = right + '(' + args.join(',') + ')';
									self.assign(intoId, expression);
									recursionFn(intoId);
								} else {
									right = self.nextId();
									left = {};
									args = [];
									self.recurse(ast.callee, right, left, function () {
										self.if_(self.notNull(right), function () {
											self.addEnsureSafeFunction(right);
											forEach(ast.arguments, function (expr) {
												self.recurse(expr, self.nextId(), undefined, function (argument) {
													args.push(self.ensureSafeObject(argument));
												});
											});
											if (left.name) {
												if (!self.state.expensiveChecks) {
													self.addEnsureSafeObject(left.context);
												}
												expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
											} else {
												expression = right + '(' + args.join(',') + ')';
											}
											expression = self.ensureSafeObject(expression);
											self.assign(intoId, expression);
										}, function () {
											self.assign(intoId, 'undefined');
										});
										recursionFn(intoId);
									});
								}
								break;
							case AST.AssignmentExpression:
								right = this.nextId();
								left = {};
								if (!isAssignable(ast.left)) {
									throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');
								}
								this.recurse(ast.left, undefined, left, function () {
									self.if_(self.notNull(left.context), function () {
										self.recurse(ast.right, right);
										self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
										expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
										self.assign(intoId, expression);
										recursionFn(intoId || expression);
									});
								}, 1);
								break;
							case AST.ArrayExpression:
								args = [];
								forEach(ast.elements, function (expr) {
									self.recurse(expr, self.nextId(), undefined, function (argument) {
										args.push(argument);
									});
								});
								expression = '[' + args.join(',') + ']';
								this.assign(intoId, expression);
								recursionFn(expression);
								break;
							case AST.ObjectExpression:
								args = [];
								forEach(ast.properties, function (property) {
									self.recurse(property.value, self.nextId(), undefined, function (expr) {
										args.push(self.escape(
												property.key.type === AST.Identifier ? property.key.name :
													('' + property.key.value)) +
											':' + expr);
									});
								});
								expression = '{' + args.join(',') + '}';
								this.assign(intoId, expression);
								recursionFn(expression);
								break;
							case AST.ThisExpression:
								this.assign(intoId, 's');
								recursionFn('s');
								break;
							case AST.NGValueParameter:
								this.assign(intoId, 'v');
								recursionFn('v');
								break;
						}
					},

					getHasOwnProperty: function (element, property) {
						var key = element + '.' + property;
						var own = this.current().own;
						if (!own.hasOwnProperty(key)) {
							own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
						}
						return own[key];
					},

					assign: function (id, value) {
						if (!id) return;
						this.current().body.push(id, '=', value, ';');
						return id;
					},

					filter: function (filterName) {
						if (!this.state.filters.hasOwnProperty(filterName)) {
							this.state.filters[filterName] = this.nextId(true);
						}
						return this.state.filters[filterName];
					},

					ifDefined: function (id, defaultValue) {
						return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
					},

					plus: function (left, right) {
						return 'plus(' + left + ',' + right + ')';
					},

					return_: function (id) {
						this.current().body.push('return ', id, ';');
					},

					if_: function (test, alternate, consequent) {
						if (test === true) {
							alternate();
						} else {
							var body = this.current().body;
							body.push('if(', test, '){');
							alternate();
							body.push('}');
							if (consequent) {
								body.push('else{');
								consequent();
								body.push('}');
							}
						}
					},

					not: function (expression) {
						return '!(' + expression + ')';
					},

					notNull: function (expression) {
						return expression + '!=null';
					},

					nonComputedMember: function (left, right) {
						return left + '.' + right;
					},

					computedMember: function (left, right) {
						return left + '[' + right + ']';
					},

					member: function (left, right, computed) {
						if (computed) return this.computedMember(left, right);
						return this.nonComputedMember(left, right);
					},

					addEnsureSafeObject: function (item) {
						this.current().body.push(this.ensureSafeObject(item), ';');
					},

					addEnsureSafeMemberName: function (item) {
						this.current().body.push(this.ensureSafeMemberName(item), ';');
					},

					addEnsureSafeFunction: function (item) {
						this.current().body.push(this.ensureSafeFunction(item), ';');
					},

					ensureSafeObject: function (item) {
						return 'ensureSafeObject(' + item + ',text)';
					},

					ensureSafeMemberName: function (item) {
						return 'ensureSafeMemberName(' + item + ',text)';
					},

					ensureSafeFunction: function (item) {
						return 'ensureSafeFunction(' + item + ',text)';
					},

					lazyRecurse: function (ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
						var self = this;
						return function () {
							self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
						};
					},

					lazyAssign: function (id, value) {
						var self = this;
						return function () {
							self.assign(id, value);
						};
					},

					stringEscapeRegex: /[^ a-zA-Z0-9]/g,

					stringEscapeFn: function (c) {
						return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
					},

					escape: function (value) {
						if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
						if (isNumber(value)) return value.toString();
						if (value === true) return 'true';
						if (value === false) return 'false';
						if (value === null) return 'null';
						if (typeof value === 'undefined') return 'undefined';

						throw $parseMinErr('esc', 'IMPOSSIBLE');
					},

					nextId: function (skip, init) {
						var id = 'v' + (this.state.nextId++);
						if (!skip) {
							this.current().vars.push(id + (init ? '=' + init : ''));
						}
						return id;
					},

					current: function () {
						return this.state[this.state.computing];
					}
				};


				function ASTInterpreter(astBuilder, $filter) {
					this.astBuilder = astBuilder;
					this.$filter = $filter;
				}

				ASTInterpreter.prototype = {
					compile: function (expression, expensiveChecks) {
						var self = this;
						var ast = this.astBuilder.ast(expression);
						this.expression = expression;
						this.expensiveChecks = expensiveChecks;
						findConstantAndWatchExpressions(ast, self.$filter);
						var assignable;
						var assign;
						if ((assignable = assignableAST(ast))) {
							assign = this.recurse(assignable);
						}
						var toWatch = getInputs(ast.body);
						var inputs;
						if (toWatch) {
							inputs = [];
							forEach(toWatch, function (watch, key) {
								var input = self.recurse(watch);
								watch.input = input;
								inputs.push(input);
								watch.watchId = key;
							});
						}
						var expressions = [];
						forEach(ast.body, function (expression) {
							expressions.push(self.recurse(expression.expression));
						});
						var fn = ast.body.length === 0 ? function () {
						} :
							ast.body.length === 1 ? expressions[0] :
								function (scope, locals) {
									var lastValue;
									forEach(expressions, function (exp) {
										lastValue = exp(scope, locals);
									});
									return lastValue;
								};
						if (assign) {
							fn.assign = function (scope, value, locals) {
								return assign(scope, locals, value);
							};
						}
						if (inputs) {
							fn.inputs = inputs;
						}
						fn.literal = isLiteral(ast);
						fn.constant = isConstant(ast);
						return fn;
					},

					recurse: function (ast, context, create) {
						var left, right, self = this, args, expression;
						if (ast.input) {
							return this.inputs(ast.input, ast.watchId);
						}
						switch (ast.type) {
							case AST.Literal:
								return this.value(ast.value, context);
							case AST.UnaryExpression:
								right = this.recurse(ast.argument);
								return this['unary' + ast.operator](right, context);
							case AST.BinaryExpression:
								left = this.recurse(ast.left);
								right = this.recurse(ast.right);
								return this['binary' + ast.operator](left, right, context);
							case AST.LogicalExpression:
								left = this.recurse(ast.left);
								right = this.recurse(ast.right);
								return this['binary' + ast.operator](left, right, context);
							case AST.ConditionalExpression:
								return this['ternary?:'](
									this.recurse(ast.test),
									this.recurse(ast.alternate),
									this.recurse(ast.consequent),
									context
								);
							case AST.Identifier:
								ensureSafeMemberName(ast.name, self.expression);
								return self.identifier(ast.name,
									self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),
									context, create, self.expression);
							case AST.MemberExpression:
								left = this.recurse(ast.object, false, !!create);
								if (!ast.computed) {
									ensureSafeMemberName(ast.property.name, self.expression);
									right = ast.property.name;
								}
								if (ast.computed) right = this.recurse(ast.property);
								return ast.computed ?
									this.computedMember(left, right, context, create, self.expression) :
									this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
							case AST.CallExpression:
								args = [];
								forEach(ast.arguments, function (expr) {
									args.push(self.recurse(expr));
								});
								if (ast.filter) right = this.$filter(ast.callee.name);
								if (!ast.filter) right = this.recurse(ast.callee, true);
								return ast.filter ?
									function (scope, locals, assign, inputs) {
										var values = [];
										for (var i = 0; i < args.length; ++i) {
											values.push(args[i](scope, locals, assign, inputs));
										}
										var value = right.apply(undefined, values, inputs);
										return context ? {context: undefined, name: undefined, value: value} : value;
									} :
									function (scope, locals, assign, inputs) {
										var rhs = right(scope, locals, assign, inputs);
										var value;
										if (rhs.value != null) {
											ensureSafeObject(rhs.context, self.expression);
											ensureSafeFunction(rhs.value, self.expression);
											var values = [];
											for (var i = 0; i < args.length; ++i) {
												values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
											}
											value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
										}
										return context ? {value: value} : value;
									};
							case AST.AssignmentExpression:
								left = this.recurse(ast.left, true, 1);
								right = this.recurse(ast.right);
								return function (scope, locals, assign, inputs) {
									var lhs = left(scope, locals, assign, inputs);
									var rhs = right(scope, locals, assign, inputs);
									ensureSafeObject(lhs.value, self.expression);
									lhs.context[lhs.name] = rhs;
									return context ? {value: rhs} : rhs;
								};
							case AST.ArrayExpression:
								args = [];
								forEach(ast.elements, function (expr) {
									args.push(self.recurse(expr));
								});
								return function (scope, locals, assign, inputs) {
									var value = [];
									for (var i = 0; i < args.length; ++i) {
										value.push(args[i](scope, locals, assign, inputs));
									}
									return context ? {value: value} : value;
								};
							case AST.ObjectExpression:
								args = [];
								forEach(ast.properties, function (property) {
									args.push({
										key: property.key.type === AST.Identifier ?
											property.key.name :
											('' + property.key.value),
										value: self.recurse(property.value)
									});
								});
								return function (scope, locals, assign, inputs) {
									var value = {};
									for (var i = 0; i < args.length; ++i) {
										value[args[i].key] = args[i].value(scope, locals, assign, inputs);
									}
									return context ? {value: value} : value;
								};
							case AST.ThisExpression:
								return function (scope) {
									return context ? {value: scope} : scope;
								};
							case AST.NGValueParameter:
								return function (scope, locals, assign, inputs) {
									return context ? {value: assign} : assign;
								};
						}
					},

					'unary+': function (argument, context) {
						return function (scope, locals, assign, inputs) {
							var arg = argument(scope, locals, assign, inputs);
							if (isDefined(arg)) {
								arg = +arg;
							} else {
								arg = 0;
							}
							return context ? {value: arg} : arg;
						};
					},
					'unary-': function (argument, context) {
						return function (scope, locals, assign, inputs) {
							var arg = argument(scope, locals, assign, inputs);
							if (isDefined(arg)) {
								arg = -arg;
							} else {
								arg = 0;
							}
							return context ? {value: arg} : arg;
						};
					},
					'unary!': function (argument, context) {
						return function (scope, locals, assign, inputs) {
							var arg = !argument(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary+': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var lhs = left(scope, locals, assign, inputs);
							var rhs = right(scope, locals, assign, inputs);
							var arg = plusFn(lhs, rhs);
							return context ? {value: arg} : arg;
						};
					},
					'binary-': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var lhs = left(scope, locals, assign, inputs);
							var rhs = right(scope, locals, assign, inputs);
							var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
							return context ? {value: arg} : arg;
						};
					},
					'binary*': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary/': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary%': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary===': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary!==': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary==': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary!=': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary<': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary>': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary<=': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary>=': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary&&': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'binary||': function (left, right, context) {
						return function (scope, locals, assign, inputs) {
							var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					'ternary?:': function (test, alternate, consequent, context) {
						return function (scope, locals, assign, inputs) {
							var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
							return context ? {value: arg} : arg;
						};
					},
					value: function (value, context) {
						return function () {
							return context ? {context: undefined, name: undefined, value: value} : value;
						};
					},
					identifier: function (name, expensiveChecks, context, create, expression) {
						return function (scope, locals, assign, inputs) {
							var base = locals && (name in locals) ? locals : scope;
							if (create && create !== 1 && base && !(base[name])) {
								base[name] = {};
							}
							var value = base ? base[name] : undefined;
							if (expensiveChecks) {
								ensureSafeObject(value, expression);
							}
							if (context) {
								return {context: base, name: name, value: value};
							} else {
								return value;
							}
						};
					},
					computedMember: function (left, right, context, create, expression) {
						return function (scope, locals, assign, inputs) {
							var lhs = left(scope, locals, assign, inputs);
							var rhs;
							var value;
							if (lhs != null) {
								rhs = right(scope, locals, assign, inputs);
								ensureSafeMemberName(rhs, expression);
								if (create && create !== 1 && lhs && !(lhs[rhs])) {
									lhs[rhs] = {};
								}
								value = lhs[rhs];
								ensureSafeObject(value, expression);
							}
							if (context) {
								return {context: lhs, name: rhs, value: value};
							} else {
								return value;
							}
						};
					},
					nonComputedMember: function (left, right, expensiveChecks, context, create, expression) {
						return function (scope, locals, assign, inputs) {
							var lhs = left(scope, locals, assign, inputs);
							if (create && create !== 1 && lhs && !(lhs[right])) {
								lhs[right] = {};
							}
							var value = lhs != null ? lhs[right] : undefined;
							if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
								ensureSafeObject(value, expression);
							}
							if (context) {
								return {context: lhs, name: right, value: value};
							} else {
								return value;
							}
						};
					},
					inputs: function (input, watchId) {
						return function (scope, value, locals, inputs) {
							if (inputs) return inputs[watchId];
							return input(scope, value, locals);
						};
					}
				};

				/**
				 * @constructor
				 */
				var Parser = function (lexer, $filter, options) {
					this.lexer = lexer;
					this.$filter = $filter;
					this.options = options;
					this.ast = new AST(this.lexer);
					this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
						new ASTCompiler(this.ast, $filter);
				};

				Parser.prototype = {
					constructor: Parser,

					parse: function (text) {
						return this.astCompiler.compile(text, this.options.expensiveChecks);
					}
				};

				//////////////////////////////////////////////////
				// Parser helper functions
				//////////////////////////////////////////////////

				function setter(obj, path, setValue, fullExp) {
					ensureSafeObject(obj, fullExp);

					var element = path.split('.'), key;
					for (var i = 0; element.length > 1; i++) {
						key = ensureSafeMemberName(element.shift(), fullExp);
						var propertyObj = ensureSafeObject(obj[key], fullExp);
						if (!propertyObj) {
							propertyObj = {};
							obj[key] = propertyObj;
						}
						obj = propertyObj;
					}
					key = ensureSafeMemberName(element.shift(), fullExp);
					ensureSafeObject(obj[key], fullExp);
					obj[key] = setValue;
					return setValue;
				}

				var getterFnCacheDefault = createMap();
				var getterFnCacheExpensive = createMap();

				function isPossiblyDangerousMemberName(name) {
					return name == 'constructor';
				}

				var objectValueOf = Object.prototype.valueOf;

				function getValueOf(value) {
					return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
				}

				///////////////////////////////////

				/**
				 * @ngdoc service
				 * @name $parse
				 * @kind function
				 *
				 * @description
				 *
				 * Converts Angular {@link guide/expression expression} into a function.
				 *
				 * ```js
				 *   var getter = $parse('user.name');
				 *   var setter = getter.assign;
				 *   var context = {user:{name:'angular'}};
				 *   var locals = {user:{name:'local'}};
				 *
				 *   expect(getter(context)).toEqual('angular');
				 *   setter(context, 'newValue');
				 *   expect(context.user.name).toEqual('newValue');
				 *   expect(getter(context, locals)).toEqual('local');
				 * ```
				 *
				 *
				 * @param {string} expression String expression to compile.
				 * @returns {function(context, locals)} a function which represents the compiled expression:
				 *
				 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
				 *      are evaluated against (typically a scope object).
				 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
				 *      `context`.
				 *
				 *    The returned function also has the following properties:
				 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
				 *        literal.
				 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
				 *        constant literals.
				 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
				 *        set to a function to change its value on the given context.
				 *
				 */


				/**
				 * @ngdoc provider
				 * @name $parseProvider
				 *
				 * @description
				 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
				 *  service.
				 */
				function $ParseProvider() {
					var cacheDefault = createMap();
					var cacheExpensive = createMap();

					this.$get = ['$filter', '$sniffer', function ($filter, $sniffer) {
						var $parseOptions = {
								csp: $sniffer.csp,
								expensiveChecks: false
							},
							$parseOptionsExpensive = {
								csp: $sniffer.csp,
								expensiveChecks: true
							};

						return function $parse(exp, interceptorFn, expensiveChecks) {
							var parsedExpression, oneTime, cacheKey;

							switch (typeof exp) {
								case 'string':
									exp = exp.trim();
									cacheKey = exp;

									var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
									parsedExpression = cache[cacheKey];

									if (!parsedExpression) {
										if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
											oneTime = true;
											exp = exp.substring(2);
										}
										var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
										var lexer = new Lexer(parseOptions);
										var parser = new Parser(lexer, $filter, parseOptions);
										parsedExpression = parser.parse(exp);
										if (parsedExpression.constant) {
											parsedExpression.$$watchDelegate = constantWatchDelegate;
										} else if (oneTime) {
											parsedExpression.$$watchDelegate = parsedExpression.literal ?
												oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
										} else if (parsedExpression.inputs) {
											parsedExpression.$$watchDelegate = inputsWatchDelegate;
										}
										cache[cacheKey] = parsedExpression;
									}
									return addInterceptor(parsedExpression, interceptorFn);

								case 'function':
									return addInterceptor(exp, interceptorFn);

								default:
									return noop;
							}
						};

						function expressionInputDirtyCheck(newValue, oldValueOfValue) {

							if (newValue == null || oldValueOfValue == null) { // null/undefined
								return newValue === oldValueOfValue;
							}

							if (typeof newValue === 'object') {

								// attempt to convert the value to a primitive type
								// TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
								//             be cheaply dirty-checked
								newValue = getValueOf(newValue);

								if (typeof newValue === 'object') {
									// objects/arrays are not supported - deep-watching them would be too expensive
									return false;
								}

								// fall-through to the primitive equality check
							}

							//Primitive or NaN
							return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
						}

						function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
							var inputExpressions = parsedExpression.inputs;
							var lastResult;

							if (inputExpressions.length === 1) {
								var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
								inputExpressions = inputExpressions[0];
								return scope.$watch(function expressionInputWatch(scope) {
									var newInputValue = inputExpressions(scope);
									if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
										lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
										oldInputValueOf = newInputValue && getValueOf(newInputValue);
									}
									return lastResult;
								}, listener, objectEquality, prettyPrintExpression);
							}

							var oldInputValueOfValues = [];
							var oldInputValues = [];
							for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
								oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
								oldInputValues[i] = null;
							}

							return scope.$watch(function expressionInputsWatch(scope) {
								var changed = false;

								for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
									var newInputValue = inputExpressions[i](scope);
									if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
										oldInputValues[i] = newInputValue;
										oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
									}
								}

								if (changed) {
									lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
								}

								return lastResult;
							}, listener, objectEquality, prettyPrintExpression);
						}

						function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
							var unwatch, lastValue;
							return unwatch = scope.$watch(function oneTimeWatch(scope) {
								return parsedExpression(scope);
							}, function oneTimeListener(value, old, scope) {
								lastValue = value;
								if (isFunction(listener)) {
									listener.apply(this, arguments);
								}
								if (isDefined(value)) {
									scope.$$postDigest(function () {
										if (isDefined(lastValue)) {
											unwatch();
										}
									});
								}
							}, objectEquality);
						}

						function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
							var unwatch, lastValue;
							return unwatch = scope.$watch(function oneTimeWatch(scope) {
								return parsedExpression(scope);
							}, function oneTimeListener(value, old, scope) {
								lastValue = value;
								if (isFunction(listener)) {
									listener.call(this, value, old, scope);
								}
								if (isAllDefined(value)) {
									scope.$$postDigest(function () {
										if (isAllDefined(lastValue)) unwatch();
									});
								}
							}, objectEquality);

							function isAllDefined(value) {
								var allDefined = true;
								forEach(value, function (val) {
									if (!isDefined(val)) allDefined = false;
								});
								return allDefined;
							}
						}

						function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
							var unwatch;
							return unwatch = scope.$watch(function constantWatch(scope) {
								return parsedExpression(scope);
							}, function constantListener(value, old, scope) {
								if (isFunction(listener)) {
									listener.apply(this, arguments);
								}
								unwatch();
							}, objectEquality);
						}

						function addInterceptor(parsedExpression, interceptorFn) {
							if (!interceptorFn) return parsedExpression;
							var watchDelegate = parsedExpression.$$watchDelegate;

							var regularWatch =
								watchDelegate !== oneTimeLiteralWatchDelegate &&
								watchDelegate !== oneTimeWatchDelegate;

							var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
								var value = parsedExpression(scope, locals, assign, inputs);
								return interceptorFn(value, scope, locals);
							} : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
								var value = parsedExpression(scope, locals, assign, inputs);
								var result = interceptorFn(value, scope, locals);
								// we only return the interceptor's result if the
								// initial value is defined (for bind-once)
								return isDefined(value) ? result : value;
							};

							// Propagate $$watchDelegates other then inputsWatchDelegate
							if (parsedExpression.$$watchDelegate &&
								parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
								fn.$$watchDelegate = parsedExpression.$$watchDelegate;
							} else if (!interceptorFn.$stateful) {
								// If there is an interceptor, but no watchDelegate then treat the interceptor like
								// we treat filters - it is assumed to be a pure function unless flagged with $stateful
								fn.$$watchDelegate = inputsWatchDelegate;
								fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
							}

							return fn;
						}
					}];
				}

				/**
				 * @ngdoc service
				 * @name $q
				 * @requires $rootScope
				 *
				 * @description
				 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
				 * when they are done processing.
				 *
				 * This is an implementation of promises/deferred objects inspired by
				 * [Kris Kowal's Q](https://github.com/kriskowal/q).
				 *
				 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
				 * implementations, and the other which resembles ES6 promises to some degree.
				 *
				 * # $q constructor
				 *
				 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
				 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
				 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
				 *
				 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
				 * available yet.
				 *
				 * It can be used like so:
				 *
				 * ```js
				 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
				 *   // are available in the current lexical scope (they could have been injected or passed in).
				 *
				 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
				 *
				 *   var promise = asyncGreet('Robin Hood');
				 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
				 * ```
				 *
				 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
				 *
				 * However, the more traditional CommonJS-style usage is still available, and documented below.
				 *
				 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
				 * interface for interacting with an object that represents the result of an action that is
				 * performed asynchronously, and may or may not be finished at any given point in time.
				 *
				 * From the perspective of dealing with error handling, deferred and promise APIs are to
				 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
				 *
				 * ```js
				 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
				 *   // are available in the current lexical scope (they could have been injected or passed in).
				 *
				 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
				 *
				 *   var promise = asyncGreet('Robin Hood');
				 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
				 * ```
				 *
				 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
				 * comes in the way of guarantees that promise and deferred APIs make, see
				 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
				 *
				 * Additionally the promise api allows for composition that is very hard to do with the
				 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
				 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
				 * section on serial or parallel joining of promises.
				 *
				 * # The Deferred API
				 *
				 * A new instance of deferred is constructed by calling `$q.defer()`.
				 *
				 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
				 * that can be used for signaling the successful or unsuccessful completion, as well as the status
				 * of the task.
				 *
				 * **Methods**
				 *
				 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
				 *   constructed via `$q.reject`, the promise will be rejected instead.
				 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
				 *   resolving it with a rejection constructed via `$q.reject`.
				 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
				 *   multiple times before the promise is either resolved or rejected.
				 *
				 * **Properties**
				 *
				 * - promise – `{Promise}` – promise object associated with this deferred.
				 *
				 *
				 * # The Promise API
				 *
				 * A new promise instance is created when a deferred instance is created and can be retrieved by
				 * calling `deferred.promise`.
				 *
				 * The purpose of the promise object is to allow for interested parties to get access to the result
				 * of the deferred task when it completes.
				 *
				 * **Methods**
				 *
				 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
				 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
				 *   as soon as the result is available. The callbacks are called with a single argument: the result
				 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
				 *   provide a progress indication, before the promise is resolved or rejected.
				 *
				 *   This method *returns a new promise* which is resolved or rejected via the return value of the
				 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
				 *   with the value which is resolved in that promise using
				 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
				 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
				 *   resolved or rejected from the notifyCallback method.
				 *
				 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
				 *
				 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
				 *   but to do so without modifying the final value. This is useful to release resources or do some
				 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
				 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
				 *   more information.
				 *
				 * # Chaining promises
				 *
				 * Because calling the `then` method of a promise returns a new derived promise, it is easily
				 * possible to create a chain of promises:
				 *
				 * ```js
				 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
				 *
				 *   // promiseB will be resolved immediately after promiseA is resolved and its value
				 *   // will be the result of promiseA incremented by 1
				 * ```
				 *
				 * It is possible to create chains of any length and since a promise can be resolved with another
				 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
				 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
				 * $http's response interceptors.
				 *
				 *
				 * # Differences between Kris Kowal's Q and $q
				 *
				 *  There are two main differences:
				 *
				 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
				 *   mechanism in angular, which means faster propagation of resolution or rejection into your
				 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
				 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
				 *   all the important functionality needed for common async tasks.
				 *
				 *  # Testing
				 *
				 *  ```js
				 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
				 *  ```
				 *
				 * @param {function(function, function)} resolver Function which is responsible for resolving or
				 *   rejecting the newly created promise. The first parameter is a function which resolves the
				 *   promise, the second parameter is a function which rejects the promise.
				 *
				 * @returns {Promise} The newly created promise.
				 */
				function $QProvider() {

					this.$get = ['$rootScope', '$exceptionHandler', function ($rootScope, $exceptionHandler) {
						return qFactory(function (callback) {
							$rootScope.$evalAsync(callback);
						}, $exceptionHandler);
					}];
				}

				function $$QProvider() {
					this.$get = ['$browser', '$exceptionHandler', function ($browser, $exceptionHandler) {
						return qFactory(function (callback) {
							$browser.defer(callback);
						}, $exceptionHandler);
					}];
				}

				/**
				 * Constructs a promise manager.
				 *
				 * @param {function(function)} nextTick Function for executing functions in the next turn.
				 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
				 *     debugging purposes.
				 * @returns {object} Promise manager.
				 */
				function qFactory(nextTick, exceptionHandler) {
					var $qMinErr = minErr('$q', TypeError);

					function callOnce(self, resolveFn, rejectFn) {
						var called = false;

						function wrap(fn) {
							return function (value) {
								if (called) return;
								called = true;
								fn.call(self, value);
							};
						}

						return [wrap(resolveFn), wrap(rejectFn)];
					}

					/**
					 * @ngdoc method
					 * @name ng.$q#defer
					 * @kind function
					 *
					 * @description
					 * Creates a `Deferred` object which represents a task which will finish in the future.
					 *
					 * @returns {Deferred} Returns a new instance of deferred.
					 */
					var defer = function () {
						return new Deferred();
					};

					function Promise() {
						this.$$state = {status: 0};
					}

					Promise.prototype = {
						then: function (onFulfilled, onRejected, progressBack) {
							var result = new Deferred();

							this.$$state.pending = this.$$state.pending || [];
							this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
							if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

							return result.promise;
						},

						"catch": function (callback) {
							return this.then(null, callback);
						},

						"finally": function (callback, progressBack) {
							return this.then(function (value) {
								return handleCallback(value, true, callback);
							}, function (error) {
								return handleCallback(error, false, callback);
							}, progressBack);
						}
					};

					//Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
					function simpleBind(context, fn) {
						return function (value) {
							fn.call(context, value);
						};
					}

					function processQueue(state) {
						var fn, deferred, pending;

						pending = state.pending;
						state.processScheduled = false;
						state.pending = undefined;
						for (var i = 0, ii = pending.length; i < ii; ++i) {
							deferred = pending[i][0];
							fn = pending[i][state.status];
							try {
								if (isFunction(fn)) {
									deferred.resolve(fn(state.value));
								} else if (state.status === 1) {
									deferred.resolve(state.value);
								} else {
									deferred.reject(state.value);
								}
							} catch (e) {
								deferred.reject(e);
								exceptionHandler(e);
							}
						}
					}

					function scheduleProcessQueue(state) {
						if (state.processScheduled || !state.pending) return;
						state.processScheduled = true;
						nextTick(function () {
							processQueue(state);
						});
					}

					function Deferred() {
						this.promise = new Promise();
						//Necessary to support unbound execution :/
						this.resolve = simpleBind(this, this.resolve);
						this.reject = simpleBind(this, this.reject);
						this.notify = simpleBind(this, this.notify);
					}

					Deferred.prototype = {
						resolve: function (val) {
							if (this.promise.$$state.status) return;
							if (val === this.promise) {
								this.$$reject($qMinErr(
									'qcycle',
									"Expected promise to be resolved with value other than itself '{0}'",
									val));
							} else {
								this.$$resolve(val);
							}

						},

						$$resolve: function (val) {
							var then, fns;

							fns = callOnce(this, this.$$resolve, this.$$reject);
							try {
								if ((isObject(val) || isFunction(val))) then = val && val.then;
								if (isFunction(then)) {
									this.promise.$$state.status = -1;
									then.call(val, fns[0], fns[1], this.notify);
								} else {
									this.promise.$$state.value = val;
									this.promise.$$state.status = 1;
									scheduleProcessQueue(this.promise.$$state);
								}
							} catch (e) {
								fns[1](e);
								exceptionHandler(e);
							}
						},

						reject: function (reason) {
							if (this.promise.$$state.status) return;
							this.$$reject(reason);
						},

						$$reject: function (reason) {
							this.promise.$$state.value = reason;
							this.promise.$$state.status = 2;
							scheduleProcessQueue(this.promise.$$state);
						},

						notify: function (progress) {
							var callbacks = this.promise.$$state.pending;

							if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
								nextTick(function () {
									var callback, result;
									for (var i = 0, ii = callbacks.length; i < ii; i++) {
										result = callbacks[i][0];
										callback = callbacks[i][3];
										try {
											result.notify(isFunction(callback) ? callback(progress) : progress);
										} catch (e) {
											exceptionHandler(e);
										}
									}
								});
							}
						}
					};

					/**
					 * @ngdoc method
					 * @name $q#reject
					 * @kind function
					 *
					 * @description
					 * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
					 * used to forward rejection in a chain of promises. If you are dealing with the last promise in
					 * a promise chain, you don't need to worry about it.
					 *
					 * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
					 * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
					 * a promise error callback and you want to forward the error to the promise derived from the
					 * current promise, you have to "rethrow" the error by returning a rejection constructed via
					 * `reject`.
					 *
					 * ```js
					 *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
					 * ```
					 *
					 * @param {*} reason Constant, message, exception or an object representing the rejection reason.
					 * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
					 */
					var reject = function (reason) {
						var result = new Deferred();
						result.reject(reason);
						return result.promise;
					};

					var makePromise = function makePromise(value, resolved) {
						var result = new Deferred();
						if (resolved) {
							result.resolve(value);
						} else {
							result.reject(value);
						}
						return result.promise;
					};

					var handleCallback = function handleCallback(value, isResolved, callback) {
						var callbackOutput = null;
						try {
							if (isFunction(callback)) callbackOutput = callback();
						} catch (e) {
							return makePromise(e, false);
						}
						if (isPromiseLike(callbackOutput)) {
							return callbackOutput.then(function () {
								return makePromise(value, isResolved);
							}, function (error) {
								return makePromise(error, false);
							});
						} else {
							return makePromise(value, isResolved);
						}
					};

					/**
					 * @ngdoc method
					 * @name $q#when
					 * @kind function
					 *
					 * @description
					 * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
					 * This is useful when you are dealing with an object that might or might not be a promise, or if
					 * the promise comes from a source that can't be trusted.
					 *
					 * @param {*} value Value or a promise
					 * @returns {Promise} Returns a promise of the passed value or promise
					 */


					var when = function (value, callback, errback, progressBack) {
						var result = new Deferred();
						result.resolve(value);
						return result.promise.then(callback, errback, progressBack);
					};

					/**
					 * @ngdoc method
					 * @name $q#resolve
					 * @kind function
					 *
					 * @description
					 * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
					 *
					 * @param {*} value Value or a promise
					 * @returns {Promise} Returns a promise of the passed value or promise
					 */
					var resolve = when;

					/**
					 * @ngdoc method
					 * @name $q#all
					 * @kind function
					 *
					 * @description
					 * Combines multiple promises into a single promise that is resolved when all of the input
					 * promises are resolved.
					 *
					 * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
					 * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
					 *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
					 *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
					 *   with the same rejection value.
					 */

					function all(promises) {
						var deferred = new Deferred(),
							counter = 0,
							results = isArray(promises) ? [] : {};

						forEach(promises, function (promise, key) {
							counter++;
							when(promise).then(function (value) {
								if (results.hasOwnProperty(key)) return;
								results[key] = value;
								if (!(--counter)) deferred.resolve(results);
							}, function (reason) {
								if (results.hasOwnProperty(key)) return;
								deferred.reject(reason);
							});
						});

						if (counter === 0) {
							deferred.resolve(results);
						}

						return deferred.promise;
					}

					var $Q = function Q(resolver) {
						if (!isFunction(resolver)) {
							throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
						}

						if (!(this instanceof Q)) {
							// More useful when $Q is the Promise itself.
							return new Q(resolver);
						}

						var deferred = new Deferred();

						function resolveFn(value) {
							deferred.resolve(value);
						}

						function rejectFn(reason) {
							deferred.reject(reason);
						}

						resolver(resolveFn, rejectFn);

						return deferred.promise;
					};

					$Q.defer = defer;
					$Q.reject = reject;
					$Q.when = when;
					$Q.resolve = resolve;
					$Q.all = all;

					return $Q;
				}

				function $$RAFProvider() { //rAF
					this.$get = ['$window', '$timeout', function ($window, $timeout) {
						var requestAnimationFrame = $window.requestAnimationFrame ||
							$window.webkitRequestAnimationFrame;

						var cancelAnimationFrame = $window.cancelAnimationFrame ||
							$window.webkitCancelAnimationFrame ||
							$window.webkitCancelRequestAnimationFrame;

						var rafSupported = !!requestAnimationFrame;
						var rafFn = rafSupported
							? function (fn) {
							var id = requestAnimationFrame(fn);
							return function () {
								cancelAnimationFrame(id);
							};
						}
							: function (fn) {
							var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
							return function () {
								$timeout.cancel(timer);
							};
						};

						queueFn.supported = rafSupported;

						var cancelLastRAF;
						var taskCount = 0;
						var taskQueue = [];
						return queueFn;

						function flush() {
							for (var i = 0; i < taskQueue.length; i++) {
								var task = taskQueue[i];
								if (task) {
									taskQueue[i] = null;
									task();
								}
							}
							taskCount = taskQueue.length = 0;
						}

						function queueFn(asyncFn) {
							var index = taskQueue.length;

							taskCount++;
							taskQueue.push(asyncFn);

							if (index === 0) {
								cancelLastRAF = rafFn(flush);
							}

							return function cancelQueueFn() {
								if (index >= 0) {
									taskQueue[index] = null;
									index = null;

									if (--taskCount === 0 && cancelLastRAF) {
										cancelLastRAF();
										cancelLastRAF = null;
										taskQueue.length = 0;
									}
								}
							};
						}
					}];
				}

				/**
				 * DESIGN NOTES
				 *
				 * The design decisions behind the scope are heavily favored for speed and memory consumption.
				 *
				 * The typical use of scope is to watch the expressions, which most of the time return the same
				 * value as last time so we optimize the operation.
				 *
				 * Closures construction is expensive in terms of speed as well as memory:
				 *   - No closures, instead use prototypical inheritance for API
				 *   - Internal state needs to be stored on scope directly, which means that private state is
				 *     exposed as $$____ properties
				 *
				 * Loop operations are optimized by using while(count--) { ... }
				 *   - this means that in order to keep the same order of execution as addition we have to add
				 *     items to the array at the beginning (unshift) instead of at the end (push)
				 *
				 * Child scopes are created and removed often
				 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
				 *
				 * There are few watches then a lot of observers. This is why you don't want the observer to be
				 * implemented in the same way as watch. Watch requires return of initialization function which
				 * are expensive to construct.
				 */


				/**
				 * @ngdoc provider
				 * @name $rootScopeProvider
				 * @description
				 *
				 * Provider for the $rootScope service.
				 */

				/**
				 * @ngdoc method
				 * @name $rootScopeProvider#digestTtl
				 * @description
				 *
				 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
				 * assuming that the model is unstable.
				 *
				 * The current default is 10 iterations.
				 *
				 * In complex applications it's possible that the dependencies between `$watch`s will result in
				 * several digest iterations. However if an application needs more than the default 10 digest
				 * iterations for its model to stabilize then you should investigate what is causing the model to
				 * continuously change during the digest.
				 *
				 * Increasing the TTL could have performance implications, so you should not change it without
				 * proper justification.
				 *
				 * @param {number} limit The number of digest iterations.
				 */


				/**
				 * @ngdoc service
				 * @name $rootScope
				 * @description
				 *
				 * Every application has a single root {@link ng.$rootScope.Scope scope}.
				 * All other scopes are descendant scopes of the root scope. Scopes provide separation
				 * between the model and the view, via a mechanism for watching the model for changes.
				 * They also provide an event emission/broadcast and subscription facility. See the
				 * {@link guide/scope developer guide on scopes}.
				 */
				function $RootScopeProvider() {
					var TTL = 10;
					var $rootScopeMinErr = minErr('$rootScope');
					var lastDirtyWatch = null;
					var applyAsyncId = null;

					this.digestTtl = function (value) {
						if (arguments.length) {
							TTL = value;
						}
						return TTL;
					};

					function createChildScopeClass(parent) {
						function ChildScope() {
							this.$$watchers = this.$$nextSibling =
								this.$$childHead = this.$$childTail = null;
							this.$$listeners = {};
							this.$$listenerCount = {};
							this.$$watchersCount = 0;
							this.$id = nextUid();
							this.$$ChildScope = null;
						}

						ChildScope.prototype = parent;
						return ChildScope;
					}

					this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
						function ($injector, $exceptionHandler, $parse, $browser) {

							function destroyChildScope($event) {
								$event.currentScope.$$destroyed = true;
							}

							/**
							 * @ngdoc type
							 * @name $rootScope.Scope
							 *
							 * @description
							 * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
							 * {@link auto.$injector $injector}. Child scopes are created using the
							 * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
							 * compiled HTML template is executed.)
							 *
							 * Here is a simple scope snippet to show how you can interact with the scope.
							 * ```html
							 * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
							 * ```
							 *
							 * # Inheritance
							 * A scope can inherit from a parent scope, as in this example:
							 * ```js
							 var parent = $rootScope;
							 var child = parent.$new();

							 parent.salutation = "Hello";
							 expect(child.salutation).toEqual('Hello');

							 child.salutation = "Welcome";
							 expect(child.salutation).toEqual('Welcome');
							 expect(parent.salutation).toEqual('Hello');
							 * ```
							 *
							 * When interacting with `Scope` in tests, additional helper methods are available on the
							 * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
							 * details.
							 *
							 *
							 * @param {Object.<string, function()>=} providers Map of service factory which need to be
							 *                                       provided for the current scope. Defaults to {@link ng}.
							 * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
							 *                              append/override services provided by `providers`. This is handy
							 *                              when unit-testing and having the need to override a default
							 *                              service.
							 * @returns {Object} Newly created scope.
							 *
							 */
							function Scope() {
								this.$id = nextUid();
								this.$$phase = this.$parent = this.$$watchers =
									this.$$nextSibling = this.$$prevSibling =
										this.$$childHead = this.$$childTail = null;
								this.$root = this;
								this.$$destroyed = false;
								this.$$listeners = {};
								this.$$listenerCount = {};
								this.$$watchersCount = 0;
								this.$$isolateBindings = null;
							}

							/**
							 * @ngdoc property
							 * @name $rootScope.Scope#$id
							 *
							 * @description
							 * Unique scope ID (monotonically increasing) useful for debugging.
							 */

							/**
							 * @ngdoc property
							 * @name $rootScope.Scope#$parent
							 *
							 * @description
							 * Reference to the parent scope.
							 */

							/**
							 * @ngdoc property
							 * @name $rootScope.Scope#$root
							 *
							 * @description
							 * Reference to the root scope.
							 */

							Scope.prototype = {
								constructor: Scope,
								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$new
								 * @kind function
								 *
								 * @description
								 * Creates a new child {@link ng.$rootScope.Scope scope}.
								 *
								 * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
								 * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
								 *
								 * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
								 * desired for the scope and its child scopes to be permanently detached from the parent and
								 * thus stop participating in model change detection and listener notification by invoking.
								 *
								 * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
								 *         parent scope. The scope is isolated, as it can not see parent scope properties.
								 *         When creating widgets, it is useful for the widget to not accidentally read parent
								 *         state.
								 *
								 * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
								 *                              of the newly created scope. Defaults to `this` scope if not provided.
								 *                              This is used when creating a transclude scope to correctly place it
								 *                              in the scope hierarchy while maintaining the correct prototypical
								 *                              inheritance.
								 *
								 * @returns {Object} The newly created child scope.
								 *
								 */
								$new: function (isolate, parent) {
									var child;

									parent = parent || this;

									if (isolate) {
										child = new Scope();
										child.$root = this.$root;
									} else {
										// Only create a child scope class if somebody asks for one,
										// but cache it to allow the VM to optimize lookups.
										if (!this.$$ChildScope) {
											this.$$ChildScope = createChildScopeClass(this);
										}
										child = new this.$$ChildScope();
									}
									child.$parent = parent;
									child.$$prevSibling = parent.$$childTail;
									if (parent.$$childHead) {
										parent.$$childTail.$$nextSibling = child;
										parent.$$childTail = child;
									} else {
										parent.$$childHead = parent.$$childTail = child;
									}

									// When the new scope is not isolated or we inherit from `this`, and
									// the parent scope is destroyed, the property `$$destroyed` is inherited
									// prototypically. In all other cases, this property needs to be set
									// when the parent scope is destroyed.
									// The listener needs to be added after the parent is set
									if (isolate || parent != this) child.$on('$destroy', destroyChildScope);

									return child;
								},

								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$watch
								 * @kind function
								 *
								 * @description
								 * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
								 *
								 * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
           *   $digest()} and should return the value that will be watched. (Since
								 *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the
								 *   `watchExpression` can execute multiple times per
								 *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)
								 * - The `listener` is called only when the value from the current `watchExpression` and the
								 *   previous call to `watchExpression` are not equal (with the exception of the initial run,
								 *   see below). Inequality is determined according to reference inequality,
								 *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
								 *    via the `!==` Javascript operator, unless `objectEquality == true`
								 *   (see next point)
								 * - When `objectEquality == true`, inequality of the `watchExpression` is determined
								 *   according to the {@link angular.equals} function. To save the value of the object for
								 *   later comparison, the {@link angular.copy} function is used. This therefore means that
								 *   watching complex objects will have adverse memory and performance implications.
								 * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
								 *   This is achieved by rerunning the watchers until no changes are detected. The rerun
								 *   iteration limit is 10 to prevent an infinite loop deadlock.
								 *
								 *
								 * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
								 * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
								 * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a
								 * change is detected, be prepared for multiple calls to your listener.)
								 *
								 * After a watcher is registered with the scope, the `listener` fn is called asynchronously
								 * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
								 * watcher. In rare cases, this is undesirable because the listener is called when the result
								 * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
								 * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
								 * listener was called due to initialization.
								 *
								 *
								 *
								 * # Example
								 * ```js
								 // let's assume that scope was dependency injected as the $rootScope
								 var scope = $rootScope;
								 scope.name = 'misko';
								 scope.counter = 0;

								 expect(scope.counter).toEqual(0);
								 scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
								 expect(scope.counter).toEqual(0);

								 scope.$digest();
								 // the listener is always called during the first $digest loop after it was registered
								 expect(scope.counter).toEqual(1);

								 scope.$digest();
								 // but now it will not be called unless the value changes
								 expect(scope.counter).toEqual(1);

								 scope.name = 'adam';
								 scope.$digest();
								 expect(scope.counter).toEqual(2);



								 // Using a function as a watchExpression
								 var food;
								 scope.foodCounter = 0;
								 expect(scope.foodCounter).toEqual(0);
								 scope.$watch(
								 // This function returns the value being watched. It is called for each turn of the $digest loop
								 function() { return food; },
								 // This is the change listener, called when the value returned from the above function changes
								 function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
								 );
								 // No digest has been run so the counter will be zero
								 expect(scope.foodCounter).toEqual(0);

								 // Run the digest but since food has not changed count will still be zero
								 scope.$digest();
								 expect(scope.foodCounter).toEqual(0);

								 // Update food and run digest.  Now the counter will increment
								 food = 'cheeseburger';
								 scope.$digest();
								 expect(scope.foodCounter).toEqual(1);

								 * ```
								 *
								 *
								 *
								 * @param {(function()|string)} watchExpression Expression that is evaluated on each
								 *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
								 *    a call to the `listener`.
								 *
								 *    - `string`: Evaluated as {@link guide/expression expression}
								 *    - `function(scope)`: called with current `scope` as a parameter.
								 * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
								 *    of `watchExpression` changes.
								 *
								 *    - `newVal` contains the current value of the `watchExpression`
								 *    - `oldVal` contains the previous value of the `watchExpression`
								 *    - `scope` refers to the current scope
								 * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
								 *     comparing for reference equality.
								 * @returns {function()} Returns a deregistration function for this listener.
								 */
								$watch: function (watchExp, listener, objectEquality, prettyPrintExpression) {
									var get = $parse(watchExp);

									if (get.$$watchDelegate) {
										return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
									}
									var scope = this,
										array = scope.$$watchers,
										watcher = {
											fn: listener,
											last: initWatchVal,
											get: get,
											exp: prettyPrintExpression || watchExp,
											eq: !!objectEquality
										};

									lastDirtyWatch = null;

									if (!isFunction(listener)) {
										watcher.fn = noop;
									}

									if (!array) {
										array = scope.$$watchers = [];
									}
									// we use unshift since we use a while loop in $digest for speed.
									// the while loop reads in reverse order.
									array.unshift(watcher);
									incrementWatchersCount(this, 1);

									return function deregisterWatch() {
										if (arrayRemove(array, watcher) >= 0) {
											incrementWatchersCount(scope, -1);
										}
										lastDirtyWatch = null;
									};
								},

								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$watchGroup
								 * @kind function
								 *
								 * @description
								 * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
								 * If any one expression in the collection changes the `listener` is executed.
								 *
								 * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
								 *   call to $digest() to see if any items changes.
								 * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
								 *
								 * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
								 * watched using {@link ng.$rootScope.Scope#$watch $watch()}
								 *
								 * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
								 *    expression in `watchExpressions` changes
								 *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
								 *    those of `watchExpression`
								 *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
								 *    those of `watchExpression`
								 *    The `scope` refers to the current scope.
								 * @returns {function()} Returns a de-registration function for all listeners.
								 */
								$watchGroup: function (watchExpressions, listener) {
									var oldValues = new Array(watchExpressions.length);
									var newValues = new Array(watchExpressions.length);
									var deregisterFns = [];
									var self = this;
									var changeReactionScheduled = false;
									var firstRun = true;

									if (!watchExpressions.length) {
										// No expressions means we call the listener ASAP
										var shouldCall = true;
										self.$evalAsync(function () {
											if (shouldCall) listener(newValues, newValues, self);
										});
										return function deregisterWatchGroup() {
											shouldCall = false;
										};
									}

									if (watchExpressions.length === 1) {
										// Special case size of one
										return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
											newValues[0] = value;
											oldValues[0] = oldValue;
											listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
										});
									}

									forEach(watchExpressions, function (expr, i) {
										var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
											newValues[i] = value;
											oldValues[i] = oldValue;
											if (!changeReactionScheduled) {
												changeReactionScheduled = true;
												self.$evalAsync(watchGroupAction);
											}
										});
										deregisterFns.push(unwatchFn);
									});

									function watchGroupAction() {
										changeReactionScheduled = false;

										if (firstRun) {
											firstRun = false;
											listener(newValues, newValues, self);
										} else {
											listener(newValues, oldValues, self);
										}
									}

									return function deregisterWatchGroup() {
										while (deregisterFns.length) {
											deregisterFns.shift()();
										}
									};
								},


								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$watchCollection
								 * @kind function
								 *
								 * @description
								 * Shallow watches the properties of an object and fires whenever any of the properties change
								 * (for arrays, this implies watching the array items; for object maps, this implies watching
								 * the properties). If a change is detected, the `listener` callback is fired.
								 *
								 * - The `obj` collection is observed via standard $watch operation and is examined on every
								 *   call to $digest() to see if any items have been added, removed, or moved.
								 * - The `listener` is called whenever anything within the `obj` has changed. Examples include
								 *   adding, removing, and moving items belonging to an object or array.
								 *
								 *
								 * # Example
								 * ```js
								 $scope.names = ['igor', 'matias', 'misko', 'james'];
								 $scope.dataCount = 4;

								 $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });

								 expect($scope.dataCount).toEqual(4);
								 $scope.$digest();

								 //still at 4 ... no changes
								 expect($scope.dataCount).toEqual(4);

								 $scope.names.pop();
								 $scope.$digest();

								 //now there's been a change
								 expect($scope.dataCount).toEqual(3);
								 * ```
								 *
								 *
								 * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
								 *    expression value should evaluate to an object or an array which is observed on each
								 *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
								 *    collection will trigger a call to the `listener`.
								 *
								 * @param {function(newCollection, oldCollection, scope)} listener a callback function called
								 *    when a change is detected.
								 *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
								 *    - The `oldCollection` object is a copy of the former collection data.
								 *      Due to performance considerations, the`oldCollection` value is computed only if the
								 *      `listener` function declares two or more arguments.
								 *    - The `scope` argument refers to the current scope.
								 *
								 * @returns {function()} Returns a de-registration function for this listener. When the
								 *    de-registration function is executed, the internal watch operation is terminated.
								 */
								$watchCollection: function (obj, listener) {
									$watchCollectionInterceptor.$stateful = true;

									var self = this;
									// the current value, updated on each dirty-check run
									var newValue;
									// a shallow copy of the newValue from the last dirty-check run,
									// updated to match newValue during dirty-check run
									var oldValue;
									// a shallow copy of the newValue from when the last change happened
									var veryOldValue;
									// only track veryOldValue if the listener is asking for it
									var trackVeryOldValue = (listener.length > 1);
									var changeDetected = 0;
									var changeDetector = $parse(obj, $watchCollectionInterceptor);
									var internalArray = [];
									var internalObject = {};
									var initRun = true;
									var oldLength = 0;

									function $watchCollectionInterceptor(_value) {
										newValue = _value;
										var newLength, key, bothNaN, newItem, oldItem;

										// If the new value is undefined, then return undefined as the watch may be a one-time watch
										if (isUndefined(newValue)) return;

										if (!isObject(newValue)) { // if primitive
											if (oldValue !== newValue) {
												oldValue = newValue;
												changeDetected++;
											}
										} else if (isArrayLike(newValue)) {
											if (oldValue !== internalArray) {
												// we are transitioning from something which was not an array into array.
												oldValue = internalArray;
												oldLength = oldValue.length = 0;
												changeDetected++;
											}

											newLength = newValue.length;

											if (oldLength !== newLength) {
												// if lengths do not match we need to trigger change notification
												changeDetected++;
												oldValue.length = oldLength = newLength;
											}
											// copy the items to oldValue and look for changes.
											for (var i = 0; i < newLength; i++) {
												oldItem = oldValue[i];
												newItem = newValue[i];

												bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
												if (!bothNaN && (oldItem !== newItem)) {
													changeDetected++;
													oldValue[i] = newItem;
												}
											}
										} else {
											if (oldValue !== internalObject) {
												// we are transitioning from something which was not an object into object.
												oldValue = internalObject = {};
												oldLength = 0;
												changeDetected++;
											}
											// copy the items to oldValue and look for changes.
											newLength = 0;
											for (key in newValue) {
												if (newValue.hasOwnProperty(key)) {
													newLength++;
													newItem = newValue[key];
													oldItem = oldValue[key];

													if (key in oldValue) {
														bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
														if (!bothNaN && (oldItem !== newItem)) {
															changeDetected++;
															oldValue[key] = newItem;
														}
													} else {
														oldLength++;
														oldValue[key] = newItem;
														changeDetected++;
													}
												}
											}
											if (oldLength > newLength) {
												// we used to have more keys, need to find them and destroy them.
												changeDetected++;
												for (key in oldValue) {
													if (!newValue.hasOwnProperty(key)) {
														oldLength--;
														delete oldValue[key];
													}
												}
											}
										}
										return changeDetected;
									}

									function $watchCollectionAction() {
										if (initRun) {
											initRun = false;
											listener(newValue, newValue, self);
										} else {
											listener(newValue, veryOldValue, self);
										}

										// make a copy for the next time a collection is changed
										if (trackVeryOldValue) {
											if (!isObject(newValue)) {
												//primitive
												veryOldValue = newValue;
											} else if (isArrayLike(newValue)) {
												veryOldValue = new Array(newValue.length);
												for (var i = 0; i < newValue.length; i++) {
													veryOldValue[i] = newValue[i];
												}
											} else { // if object
												veryOldValue = {};
												for (var key in newValue) {
													if (hasOwnProperty.call(newValue, key)) {
														veryOldValue[key] = newValue[key];
													}
												}
											}
										}
									}

									return this.$watch(changeDetector, $watchCollectionAction);
								},

								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$digest
								 * @kind function
								 *
								 * @description
								 * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
								 * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
								 * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
								 * until no more listeners are firing. This means that it is possible to get into an infinite
								 * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
								 * iterations exceeds 10.
								 *
								 * Usually, you don't call `$digest()` directly in
								 * {@link ng.directive:ngController controllers} or in
								 * {@link ng.$compileProvider#directive directives}.
								 * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
								 * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
								 *
								 * If you want to be notified whenever `$digest()` is called,
								 * you can register a `watchExpression` function with
								 * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
								 *
								 * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
								 *
								 * # Example
								 * ```js
								 var scope = ...;
								 scope.name = 'misko';
								 scope.counter = 0;

								 expect(scope.counter).toEqual(0);
								 scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
								 expect(scope.counter).toEqual(0);

								 scope.$digest();
								 // the listener is always called during the first $digest loop after it was registered
								 expect(scope.counter).toEqual(1);

								 scope.$digest();
								 // but now it will not be called unless the value changes
								 expect(scope.counter).toEqual(1);

								 scope.name = 'adam';
								 scope.$digest();
								 expect(scope.counter).toEqual(2);
								 * ```
								 *
								 */
								$digest: function () {
									var watch, value, last,
										watchers,
										length,
										dirty, ttl = TTL,
										next, current, target = this,
										watchLog = [],
										logIdx, logMsg, asyncTask;

									beginPhase('$digest');
									// Check for changes to browser url that happened in sync before the call to $digest
									$browser.$$checkUrlChange();

									if (this === $rootScope && applyAsyncId !== null) {
										// If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
										// cancel the scheduled $apply and flush the queue of expressions to be evaluated.
										$browser.defer.cancel(applyAsyncId);
										flushApplyAsync();
									}

									lastDirtyWatch = null;

									do { // "while dirty" loop
										dirty = false;
										current = target;

										while (asyncQueue.length) {
											try {
												asyncTask = asyncQueue.shift();
												asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
											} catch (e) {
												$exceptionHandler(e);
											}
											lastDirtyWatch = null;
										}

										traverseScopesLoop:
											do { // "traverse the scopes" loop
												if ((watchers = current.$$watchers)) {
													// process our watches
													length = watchers.length;
													while (length--) {
														try {
															watch = watchers[length];
															// Most common watches are on primitives, in which case we can short
															// circuit it with === operator, only when === fails do we use .equals
															if (watch) {
																if ((value = watch.get(current)) !== (last = watch.last) && !(watch.eq
																		? equals(value, last)
																		: (typeof value === 'number' && typeof last === 'number'
																	&& isNaN(value) && isNaN(last)))) {
																	dirty = true;
																	lastDirtyWatch = watch;
																	watch.last = watch.eq ? copy(value, null) : value;
																	watch.fn(value, ((last === initWatchVal) ? value : last), current);
																	if (ttl < 5) {
																		logIdx = 4 - ttl;
																		if (!watchLog[logIdx]) watchLog[logIdx] = [];
																		watchLog[logIdx].push({
																			msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
																			newVal: value,
																			oldVal: last
																		});
																	}
																} else if (watch === lastDirtyWatch) {
																	// If the most recently dirty watcher is now clean, short circuit since the remaining watchers
																	// have already been tested.
																	dirty = false;
																	break traverseScopesLoop;
																}
															}
														} catch (e) {
															$exceptionHandler(e);
														}
													}
												}

												// Insanity Warning: scope depth-first traversal
												// yes, this code is a bit crazy, but it works and we have tests to prove it!
												// this piece should be kept in sync with the traversal in $broadcast
												if (!(next = ((current.$$watchersCount && current.$$childHead) ||
													(current !== target && current.$$nextSibling)))) {
													while (current !== target && !(next = current.$$nextSibling)) {
														current = current.$parent;
													}
												}
											} while ((current = next));

										// `break traverseScopesLoop;` takes us to here

										if ((dirty || asyncQueue.length) && !(ttl--)) {
											clearPhase();
											throw $rootScopeMinErr('infdig',
												'{0} $digest() iterations reached. Aborting!\n' +
												'Watchers fired in the last 5 iterations: {1}',
												TTL, watchLog);
										}

									} while (dirty || asyncQueue.length);

									clearPhase();

									while (postDigestQueue.length) {
										try {
											postDigestQueue.shift()();
										} catch (e) {
											$exceptionHandler(e);
										}
									}
								},


								/**
								 * @ngdoc event
								 * @name $rootScope.Scope#$destroy
								 * @eventType broadcast on scope being destroyed
								 *
								 * @description
								 * Broadcasted when a scope and its children are being destroyed.
								 *
								 * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
								 * clean up DOM bindings before an element is removed from the DOM.
								 */

								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$destroy
								 * @kind function
								 *
								 * @description
								 * Removes the current scope (and all of its children) from the parent scope. Removal implies
								 * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
								 * propagate to the current scope and its children. Removal also implies that the current
								 * scope is eligible for garbage collection.
								 *
								 * The `$destroy()` is usually used by directives such as
								 * {@link ng.directive:ngRepeat ngRepeat} for managing the
								 * unrolling of the loop.
								 *
								 * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
								 * Application code can register a `$destroy` event handler that will give it a chance to
								 * perform any necessary cleanup.
								 *
								 * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
								 * clean up DOM bindings before an element is removed from the DOM.
								 */
								$destroy: function () {
									// We can't destroy a scope that has been already destroyed.
									if (this.$$destroyed) return;
									var parent = this.$parent;

									this.$broadcast('$destroy');
									this.$$destroyed = true;

									if (this === $rootScope) {
										//Remove handlers attached to window when $rootScope is removed
										$browser.$$applicationDestroyed();
									}

									incrementWatchersCount(this, -this.$$watchersCount);
									for (var eventName in this.$$listenerCount) {
										decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
									}

									// sever all the references to parent scopes (after this cleanup, the current scope should
									// not be retained by any of our references and should be eligible for garbage collection)
									if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
									if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
									if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
									if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

									// Disable listeners, watchers and apply/digest methods
									this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
									this.$on = this.$watch = this.$watchGroup = function () {
										return noop;
									};
									this.$$listeners = {};

									// All of the code below is bogus code that works around V8's memory leak via optimized code
									// and inline caches.
									//
									// see:
									// - https://code.google.com/p/v8/issues/detail?id=2073#c26
									// - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
									// - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

									this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
										this.$$childTail = this.$root = this.$$watchers = null;
								},

								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$eval
								 * @kind function
								 *
								 * @description
								 * Executes the `expression` on the current scope and returns the result. Any exceptions in
								 * the expression are propagated (uncaught). This is useful when evaluating Angular
								 * expressions.
								 *
								 * # Example
								 * ```js
								 var scope = ng.$rootScope.Scope();
								 scope.a = 1;
								 scope.b = 2;

								 expect(scope.$eval('a+b')).toEqual(3);
								 expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
								 * ```
								 *
								 * @param {(string|function())=} expression An angular expression to be executed.
								 *
								 *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
								 *    - `function(scope)`: execute the function with the current `scope` parameter.
								 *
								 * @param {(object)=} locals Local variables object, useful for overriding values in scope.
								 * @returns {*} The result of evaluating the expression.
								 */
								$eval: function (expr, locals) {
									return $parse(expr)(this, locals);
								},

								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$evalAsync
								 * @kind function
								 *
								 * @description
								 * Executes the expression on the current scope at a later point in time.
								 *
								 * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
								 * that:
								 *
								 *   - it will execute after the function that scheduled the evaluation (preferably before DOM
								 *     rendering).
								 *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
								 *     `expression` execution.
								 *
								 * Any exceptions from the execution of the expression are forwarded to the
								 * {@link ng.$exceptionHandler $exceptionHandler} service.
								 *
								 * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
								 * will be scheduled. However, it is encouraged to always call code that changes the model
								 * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
								 *
								 * @param {(string|function())=} expression An angular expression to be executed.
								 *
								 *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
								 *    - `function(scope)`: execute the function with the current `scope` parameter.
								 *
								 * @param {(object)=} locals Local variables object, useful for overriding values in scope.
								 */
								$evalAsync: function (expr, locals) {
									// if we are outside of an $digest loop and this is the first time we are scheduling async
									// task also schedule async auto-flush
									if (!$rootScope.$$phase && !asyncQueue.length) {
										$browser.defer(function () {
											if (asyncQueue.length) {
												$rootScope.$digest();
											}
										});
									}

									asyncQueue.push({scope: this, expression: expr, locals: locals});
								},

								$$postDigest: function (fn) {
									postDigestQueue.push(fn);
								},

								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$apply
								 * @kind function
								 *
								 * @description
								 * `$apply()` is used to execute an expression in angular from outside of the angular
								 * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
								 * Because we are calling into the angular framework we need to perform proper scope life
								 * cycle of {@link ng.$exceptionHandler exception handling},
								 * {@link ng.$rootScope.Scope#$digest executing watches}.
								 *
								 * ## Life cycle
								 *
								 * # Pseudo-Code of `$apply()`
								 * ```js
								 function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
								 * ```
								 *
								 *
								 * Scope's `$apply()` method transitions through the following stages:
								 *
								 * 1. The {@link guide/expression expression} is executed using the
								 *    {@link ng.$rootScope.Scope#$eval $eval()} method.
								 * 2. Any exceptions from the execution of the expression are forwarded to the
								 *    {@link ng.$exceptionHandler $exceptionHandler} service.
								 * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
								 *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
								 *
								 *
								 * @param {(string|function())=} exp An angular expression to be executed.
								 *
								 *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
								 *    - `function(scope)`: execute the function with current `scope` parameter.
								 *
								 * @returns {*} The result of evaluating the expression.
								 */
								$apply: function (expr) {
									try {
										beginPhase('$apply');
										return this.$eval(expr);
									} catch (e) {
										$exceptionHandler(e);
									} finally {
										clearPhase();
										try {
											$rootScope.$digest();
										} catch (e) {
											$exceptionHandler(e);
											throw e;
										}
									}
								},

								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$applyAsync
								 * @kind function
								 *
								 * @description
								 * Schedule the invocation of $apply to occur at a later time. The actual time difference
								 * varies across browsers, but is typically around ~10 milliseconds.
								 *
								 * This can be used to queue up multiple expressions which need to be evaluated in the same
								 * digest.
								 *
								 * @param {(string|function())=} exp An angular expression to be executed.
								 *
								 *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
								 *    - `function(scope)`: execute the function with current `scope` parameter.
								 */
								$applyAsync: function (expr) {
									var scope = this;
									expr && applyAsyncQueue.push($applyAsyncExpression);
									scheduleApplyAsync();

									function $applyAsyncExpression() {
										scope.$eval(expr);
									}
								},

								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$on
								 * @kind function
								 *
								 * @description
								 * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
								 * discussion of event life cycle.
								 *
								 * The event listener function format is: `function(event, args...)`. The `event` object
								 * passed into the listener has the following attributes:
								 *
								 *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
								 *     `$broadcast`-ed.
								 *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
								 *     event propagates through the scope hierarchy, this property is set to null.
								 *   - `name` - `{string}`: name of the event.
								 *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
								 *     further event propagation (available only for events that were `$emit`-ed).
								 *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
								 *     to true.
								 *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
								 *
								 * @param {string} name Event name to listen on.
								 * @param {function(event, ...args)} listener Function to call when the event is emitted.
								 * @returns {function()} Returns a deregistration function for this listener.
								 */
								$on: function (name, listener) {
									var namedListeners = this.$$listeners[name];
									if (!namedListeners) {
										this.$$listeners[name] = namedListeners = [];
									}
									namedListeners.push(listener);

									var current = this;
									do {
										if (!current.$$listenerCount[name]) {
											current.$$listenerCount[name] = 0;
										}
										current.$$listenerCount[name]++;
									} while ((current = current.$parent));

									var self = this;
									return function () {
										var indexOfListener = namedListeners.indexOf(listener);
										if (indexOfListener !== -1) {
											namedListeners[indexOfListener] = null;
											decrementListenerCount(self, 1, name);
										}
									};
								},


								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$emit
								 * @kind function
								 *
								 * @description
								 * Dispatches an event `name` upwards through the scope hierarchy notifying the
								 * registered {@link ng.$rootScope.Scope#$on} listeners.
								 *
								 * The event life cycle starts at the scope on which `$emit` was called. All
								 * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
								 * notified. Afterwards, the event traverses upwards toward the root scope and calls all
								 * registered listeners along the way. The event will stop propagating if one of the listeners
								 * cancels it.
								 *
								 * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
								 * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
								 *
								 * @param {string} name Event name to emit.
								 * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
								 * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
								 */
								$emit: function (name, args) {
									var empty = [],
										namedListeners,
										scope = this,
										stopPropagation = false,
										event = {
											name: name,
											targetScope: scope,
											stopPropagation: function () {
												stopPropagation = true;
											},
											preventDefault: function () {
												event.defaultPrevented = true;
											},
											defaultPrevented: false
										},
										listenerArgs = concat([event], arguments, 1),
										i, length;

									do {
										namedListeners = scope.$$listeners[name] || empty;
										event.currentScope = scope;
										for (i = 0, length = namedListeners.length; i < length; i++) {

											// if listeners were deregistered, defragment the array
											if (!namedListeners[i]) {
												namedListeners.splice(i, 1);
												i--;
												length--;
												continue;
											}
											try {
												//allow all listeners attached to the current scope to run
												namedListeners[i].apply(null, listenerArgs);
											} catch (e) {
												$exceptionHandler(e);
											}
										}
										//if any listener on the current scope stops propagation, prevent bubbling
										if (stopPropagation) {
											event.currentScope = null;
											return event;
										}
										//traverse upwards
										scope = scope.$parent;
									} while (scope);

									event.currentScope = null;

									return event;
								},


								/**
								 * @ngdoc method
								 * @name $rootScope.Scope#$broadcast
								 * @kind function
								 *
								 * @description
								 * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
								 * registered {@link ng.$rootScope.Scope#$on} listeners.
								 *
								 * The event life cycle starts at the scope on which `$broadcast` was called. All
								 * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
								 * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
								 * scope and calls all registered listeners along the way. The event cannot be canceled.
								 *
								 * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
								 * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
								 *
								 * @param {string} name Event name to broadcast.
								 * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
								 * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
								 */
								$broadcast: function (name, args) {
									var target = this,
										current = target,
										next = target,
										event = {
											name: name,
											targetScope: target,
											preventDefault: function () {
												event.defaultPrevented = true;
											},
											defaultPrevented: false
										};

									if (!target.$$listenerCount[name]) return event;

									var listenerArgs = concat([event], arguments, 1),
										listeners, i, length;

									//down while you can, then up and next sibling or up and next sibling until back at root
									while ((current = next)) {
										event.currentScope = current;
										listeners = current.$$listeners[name] || [];
										for (i = 0, length = listeners.length; i < length; i++) {
											// if listeners were deregistered, defragment the array
											if (!listeners[i]) {
												listeners.splice(i, 1);
												i--;
												length--;
												continue;
											}

											try {
												listeners[i].apply(null, listenerArgs);
											} catch (e) {
												$exceptionHandler(e);
											}
										}

										// Insanity Warning: scope depth-first traversal
										// yes, this code is a bit crazy, but it works and we have tests to prove it!
										// this piece should be kept in sync with the traversal in $digest
										// (though it differs due to having the extra check for $$listenerCount)
										if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
											(current !== target && current.$$nextSibling)))) {
											while (current !== target && !(next = current.$$nextSibling)) {
												current = current.$parent;
											}
										}
									}

									event.currentScope = null;
									return event;
								}
							};

							var $rootScope = new Scope();

							//The internal queues. Expose them on the $rootScope for debugging/testing purposes.
							var asyncQueue = $rootScope.$$asyncQueue = [];
							var postDigestQueue = $rootScope.$$postDigestQueue = [];
							var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

							return $rootScope;


							function beginPhase(phase) {
								if ($rootScope.$$phase) {
									throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
								}

								$rootScope.$$phase = phase;
							}

							function clearPhase() {
								$rootScope.$$phase = null;
							}

							function incrementWatchersCount(current, count) {
								do {
									current.$$watchersCount += count;
								} while ((current = current.$parent));
							}

							function decrementListenerCount(current, count, name) {
								do {
									current.$$listenerCount[name] -= count;

									if (current.$$listenerCount[name] === 0) {
										delete current.$$listenerCount[name];
									}
								} while ((current = current.$parent));
							}

							/**
							 * function used as an initial value for watchers.
							 * because it's unique we can easily tell it apart from other values
							 */
							function initWatchVal() {
							}

							function flushApplyAsync() {
								while (applyAsyncQueue.length) {
									try {
										applyAsyncQueue.shift()();
									} catch (e) {
										$exceptionHandler(e);
									}
								}
								applyAsyncId = null;
							}

							function scheduleApplyAsync() {
								if (applyAsyncId === null) {
									applyAsyncId = $browser.defer(function () {
										$rootScope.$apply(flushApplyAsync);
									});
								}
							}
						}];
				}

				/**
				 * @description
				 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
				 */
				function $$SanitizeUriProvider() {
					var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
						imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

					/**
					 * @description
					 * Retrieves or overrides the default regular expression that is used for whitelisting of safe
					 * urls during a[href] sanitization.
					 *
					 * The sanitization is a security measure aimed at prevent XSS attacks via html links.
					 *
					 * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
					 * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
					 * regular expression. If a match is found, the original url is written into the dom. Otherwise,
					 * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
					 *
					 * @param {RegExp=} regexp New regexp to whitelist urls with.
					 * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
					 *    chaining otherwise.
					 */
					this.aHrefSanitizationWhitelist = function (regexp) {
						if (isDefined(regexp)) {
							aHrefSanitizationWhitelist = regexp;
							return this;
						}
						return aHrefSanitizationWhitelist;
					};


					/**
					 * @description
					 * Retrieves or overrides the default regular expression that is used for whitelisting of safe
					 * urls during img[src] sanitization.
					 *
					 * The sanitization is a security measure aimed at prevent XSS attacks via html links.
					 *
					 * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
					 * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
					 * regular expression. If a match is found, the original url is written into the dom. Otherwise,
					 * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
					 *
					 * @param {RegExp=} regexp New regexp to whitelist urls with.
					 * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
					 *    chaining otherwise.
					 */
					this.imgSrcSanitizationWhitelist = function (regexp) {
						if (isDefined(regexp)) {
							imgSrcSanitizationWhitelist = regexp;
							return this;
						}
						return imgSrcSanitizationWhitelist;
					};

					this.$get = function () {
						return function sanitizeUri(uri, isImage) {
							var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
							var normalizedVal;
							normalizedVal = urlResolve(uri).href;
							if (normalizedVal !== '' && !normalizedVal.match(regex)) {
								return 'unsafe:' + normalizedVal;
							}
							return uri;
						};
					};
				}

				/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
				 *     Any commits to this file should be reviewed with security in mind.  *
				 *   Changes to this file can potentially create security vulnerabilities. *
				 *          An approval from 2 Core members with history of modifying      *
				 *                         this file is required.                          *
				 *                                                                         *
				 *  Does the change somehow allow for arbitrary javascript to be executed? *
				 *    Or allows for someone to change the prototype of built-in objects?   *
				 *     Or gives undesired access to variables likes document or window?    *
				 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

				var $sceMinErr = minErr('$sce');

				var SCE_CONTEXTS = {
					HTML: 'html',
					CSS: 'css',
					URL: 'url',
					// RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
					// url.  (e.g. ng-include, script src, templateUrl)
					RESOURCE_URL: 'resourceUrl',
					JS: 'js'
				};

				// Helper functions follow.

				function adjustMatcher(matcher) {
					if (matcher === 'self') {
						return matcher;
					} else if (isString(matcher)) {
						// Strings match exactly except for 2 wildcards - '*' and '**'.
						// '*' matches any character except those from the set ':/.?&'.
						// '**' matches any character (like .* in a RegExp).
						// More than 2 *'s raises an error as it's ill defined.
						if (matcher.indexOf('***') > -1) {
							throw $sceMinErr('iwcard',
								'Illegal sequence *** in string matcher.  String: {0}', matcher);
						}
						matcher = escapeForRegexp(matcher).
							replace('\\*\\*', '.*').
							replace('\\*', '[^:/.?&;]*');
						return new RegExp('^' + matcher + '$');
					} else if (isRegExp(matcher)) {
						// The only other type of matcher allowed is a Regexp.
						// Match entire URL / disallow partial matches.
						// Flags are reset (i.e. no global, ignoreCase or multiline)
						return new RegExp('^' + matcher.source + '$');
					} else {
						throw $sceMinErr('imatcher',
							'Matchers may only be "self", string patterns or RegExp objects');
					}
				}


				function adjustMatchers(matchers) {
					var adjustedMatchers = [];
					if (isDefined(matchers)) {
						forEach(matchers, function (matcher) {
							adjustedMatchers.push(adjustMatcher(matcher));
						});
					}
					return adjustedMatchers;
				}


				/**
				 * @ngdoc service
				 * @name $sceDelegate
				 * @kind function
				 *
				 * @description
				 *
				 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
     * Contextual Escaping (SCE)} services to AngularJS.
				 *
				 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
				 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
				 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
				 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
				 * work because `$sce` delegates to `$sceDelegate` for these operations.
				 *
				 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
				 *
				 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
				 * can override it completely to change the behavior of `$sce`, the common case would
				 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
				 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
				 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
     * $sceDelegateProvider.resourceUrlWhitelist} and {@link
					* ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
				 */

				/**
				 * @ngdoc provider
				 * @name $sceDelegateProvider
				 * @description
				 *
				 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
     * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
				 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
					* ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
				 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
				 *
				 * For the general details about this service in Angular, read the main page for {@link ng.$sce
     * Strict Contextual Escaping (SCE)}.
				 *
				 * **Example**:  Consider the following case. <a name="example"></a>
				 *
				 * - your app is hosted at url `http://myapp.example.com/`
				 * - but some of your templates are hosted on other domains you control such as
				 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
				 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
				 *
				 * Here is what a secure configuration for this scenario might look like:
				 *
				 * ```
				 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
				 * ```
				 */

				function $SceDelegateProvider() {
					this.SCE_CONTEXTS = SCE_CONTEXTS;

					// Resource URLs can also be trusted by policy.
					var resourceUrlWhitelist = ['self'],
						resourceUrlBlacklist = [];

					/**
					 * @ngdoc method
					 * @name $sceDelegateProvider#resourceUrlWhitelist
					 * @kind function
					 *
					 * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
					 *     provided.  This must be an array or null.  A snapshot of this array is used so further
					 *     changes to the array are ignored.
					 *
					 *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
					 *     allowed in this array.
					 *
					 *     Note: **an empty whitelist array will block all URLs**!
					 *
					 * @return {Array} the currently set whitelist array.
					 *
					 * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
					 * same origin resource requests.
					 *
					 * @description
					 * Sets/Gets the whitelist of trusted resource URLs.
					 */
					this.resourceUrlWhitelist = function (value) {
						if (arguments.length) {
							resourceUrlWhitelist = adjustMatchers(value);
						}
						return resourceUrlWhitelist;
					};

					/**
					 * @ngdoc method
					 * @name $sceDelegateProvider#resourceUrlBlacklist
					 * @kind function
					 *
					 * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
					 *     provided.  This must be an array or null.  A snapshot of this array is used so further
					 *     changes to the array are ignored.
					 *
					 *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
					 *     allowed in this array.
					 *
					 *     The typical usage for the blacklist is to **block
					 *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
					 *     these would otherwise be trusted but actually return content from the redirected domain.
					 *
					 *     Finally, **the blacklist overrides the whitelist** and has the final say.
					 *
					 * @return {Array} the currently set blacklist array.
					 *
					 * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
					 * is no blacklist.)
					 *
					 * @description
					 * Sets/Gets the blacklist of trusted resource URLs.
					 */

					this.resourceUrlBlacklist = function (value) {
						if (arguments.length) {
							resourceUrlBlacklist = adjustMatchers(value);
						}
						return resourceUrlBlacklist;
					};

					this.$get = ['$injector', function ($injector) {

						var htmlSanitizer = function htmlSanitizer(html) {
							throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
						};

						if ($injector.has('$sanitize')) {
							htmlSanitizer = $injector.get('$sanitize');
						}


						function matchUrl(matcher, parsedUrl) {
							if (matcher === 'self') {
								return urlIsSameOrigin(parsedUrl);
							} else {
								// definitely a regex.  See adjustMatchers()
								return !!matcher.exec(parsedUrl.href);
							}
						}

						function isResourceUrlAllowedByPolicy(url) {
							var parsedUrl = urlResolve(url.toString());
							var i, n, allowed = false;
							// Ensure that at least one item from the whitelist allows this url.
							for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
								if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
									allowed = true;
									break;
								}
							}
							if (allowed) {
								// Ensure that no item from the blacklist blocked this url.
								for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
									if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
										allowed = false;
										break;
									}
								}
							}
							return allowed;
						}

						function generateHolderType(Base) {
							var holderType = function TrustedValueHolderType(trustedValue) {
								this.$$unwrapTrustedValue = function () {
									return trustedValue;
								};
							};
							if (Base) {
								holderType.prototype = new Base();
							}
							holderType.prototype.valueOf = function sceValueOf() {
								return this.$$unwrapTrustedValue();
							};
							holderType.prototype.toString = function sceToString() {
								return this.$$unwrapTrustedValue().toString();
							};
							return holderType;
						}

						var trustedValueHolderBase = generateHolderType(),
							byType = {};

						byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
						byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
						byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
						byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
						byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

						/**
						 * @ngdoc method
						 * @name $sceDelegate#trustAs
						 *
						 * @description
						 * Returns an object that is trusted by angular for use in specified strict
						 * contextual escaping contexts (such as ng-bind-html, ng-include, any src
						 * attribute interpolation, any dom event binding attribute interpolation
						 * such as for onclick,  etc.) that uses the provided value.
						 * See {@link ng.$sce $sce} for enabling strict contextual escaping.
						 *
						 * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
						 *   resourceUrl, html, js and css.
						 * @param {*} value The value that that should be considered trusted/safe.
						 * @returns {*} A value that can be used to stand in for the provided `value` in places
						 * where Angular expects a $sce.trustAs() return value.
						 */
						function trustAs(type, trustedValue) {
							var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
							if (!Constructor) {
								throw $sceMinErr('icontext',
									'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
									type, trustedValue);
							}
							if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
								return trustedValue;
							}
							// All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
							// mutable objects, we ensure here that the value passed in is actually a string.
							if (typeof trustedValue !== 'string') {
								throw $sceMinErr('itype',
									'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
									type);
							}
							return new Constructor(trustedValue);
						}

						/**
						 * @ngdoc method
						 * @name $sceDelegate#valueOf
						 *
						 * @description
						 * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
         * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
							* ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
						 *
						 * If the passed parameter is not a value that had been returned by {@link
							* ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
						 *
						 * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
						 *      call or anything else.
						 * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
         *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
						 *     `value` unchanged.
						 */
						function valueOf(maybeTrusted) {
							if (maybeTrusted instanceof trustedValueHolderBase) {
								return maybeTrusted.$$unwrapTrustedValue();
							} else {
								return maybeTrusted;
							}
						}

						/**
						 * @ngdoc method
						 * @name $sceDelegate#getTrusted
						 *
						 * @description
						 * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
						 * returns the originally supplied value if the queried context type is a supertype of the
						 * created type.  If this condition isn't satisfied, throws an exception.
						 *
						 * @param {string} type The kind of context in which this value is to be used.
						 * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
         *     `$sceDelegate.trustAs`} call.
						 * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
         *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
						 */
						function getTrusted(type, maybeTrusted) {
							if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
								return maybeTrusted;
							}
							var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
							if (constructor && maybeTrusted instanceof constructor) {
								return maybeTrusted.$$unwrapTrustedValue();
							}
							// If we get here, then we may only take one of two actions.
							// 1. sanitize the value for the requested type, or
							// 2. throw an exception.
							if (type === SCE_CONTEXTS.RESOURCE_URL) {
								if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
									return maybeTrusted;
								} else {
									throw $sceMinErr('insecurl',
										'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
										maybeTrusted.toString());
								}
							} else if (type === SCE_CONTEXTS.HTML) {
								return htmlSanitizer(maybeTrusted);
							}
							throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
						}

						return {
							trustAs: trustAs,
							getTrusted: getTrusted,
							valueOf: valueOf
						};
					}];
				}


				/**
				 * @ngdoc provider
				 * @name $sceProvider
				 * @description
				 *
				 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
				 * -   enable/disable Strict Contextual Escaping (SCE) in a module
				 * -   override the default implementation with a custom delegate
				 *
				 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
				 */

				/* jshint maxlen: false*/

				/**
				 * @ngdoc service
				 * @name $sce
				 * @kind function
				 *
				 * @description
				 *
				 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
				 *
				 * # Strict Contextual Escaping
				 *
				 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
				 * contexts to result in a value that is marked as safe to use for that context.  One example of
				 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
				 * to these contexts as privileged or SCE contexts.
				 *
				 * As of version 1.2, Angular ships with SCE enabled by default.
				 *
				 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
				 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
				 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
				 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
				 * to the top of your HTML document.
				 *
				 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
				 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
				 *
				 * Here's an example of a binding in a privileged context:
				 *
				 * ```
				 * <input ng-model="userHtml" aria-label="User input">
				 * <div ng-bind-html="userHtml"></div>
				 * ```
				 *
				 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
				 * disabled, this application allows the user to render arbitrary HTML into the DIV.
				 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
				 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
				 * security vulnerabilities.)
				 *
				 * For the case of HTML, you might use a library, either on the client side, or on the server side,
				 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
				 *
				 * How would you ensure that every place that used these types of bindings was bound to a value that
				 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
				 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
				 * properties/fields and forgot to update the binding to the sanitized value?
				 *
				 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
				 * determine that something explicitly says it's safe to use a value for binding in that
				 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
				 * for those values that you can easily tell are safe - because they were received from your server,
				 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
				 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
				 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
				 *
				 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
				 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
				 * obtain values that will be accepted by SCE / privileged contexts.
				 *
				 *
				 * ## How does it work?
				 *
				 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
     * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
					* ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
				 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
				 *
				 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
					* ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
				 * simplified):
				 *
				 * ```
				 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
				 * ```
				 *
				 * ## Impact on loading templates
				 *
				 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
				 * `templateUrl`'s specified by {@link guide/directive directives}.
				 *
				 * By default, Angular only loads templates from the same domain and protocol as the application
				 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
     * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
				 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
     * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
				 *
				 * *Please note*:
				 * The browser's
				 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
				 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
				 * policy apply in addition to this and may further restrict whether the template is successfully
				 * loaded.  This means that without the right CORS policy, loading templates from a different domain
				 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
				 * browsers.
				 *
				 * ## This feels like too much overhead
				 *
				 * It's important to remember that SCE only applies to interpolation expressions.
				 *
				 * If your expressions are constant literals, they're automatically trusted and you don't need to
				 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
				 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
				 *
				 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
				 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
				 *
				 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
				 * templates in `ng-include` from your application's domain without having to even know about SCE.
				 * It blocks loading templates from other domains or loading templates over http from an https
				 * served document.  You can change these by setting your own custom {@link
					* ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
					* ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
				 *
				 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
				 * application that's secure and can be audited to verify that with much more ease than bolting
				 * security onto an application later.
				 *
				 * <a name="contexts"></a>
				 * ## What trusted context types are supported?
				 *
				 * | Context             | Notes          |
				 * |---------------------|----------------|
				 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
				 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
				 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
				 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
				 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
				 *
				 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
				 *
				 *  Each element in these arrays must be one of the following:
				 *
				 *  - **'self'**
				 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
				 *      domain** as the application document using the **same protocol**.
				 *  - **String** (except the special value `'self'`)
				 *    - The string is matched against the full *normalized / absolute URL* of the resource
				 *      being tested (substring matches are not good enough.)
				 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
				 *      match themselves.
				 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
				 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
				 *      in a whitelist.
				 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
				 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
				 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
				 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
				 *      http://foo.example.com/templates/**).
				 *  - **RegExp** (*see caveat below*)
				 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
				 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
				 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
				 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
				 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
				 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
				 *      is highly recommended to use the string patterns and only fall back to regular expressions
				 *      if they as a last resort.
				 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
				 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
				 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
				 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
				 *    - If you are generating your JavaScript from some other templating engine (not
				 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
				 *      remember to escape your regular expression (and be aware that you might need more than
				 *      one level of escaping depending on your templating engine and the way you interpolated
				 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
				 *      enough before coding your own.  e.g. Ruby has
				 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
				 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
				 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
				 *      Closure library's [goog.string.regExpEscape(s)](
				 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
				 *
				 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
				 *
				 * ## Show me an example using SCE.
				 *
				 * <example module="mySceApp" deps="angular-sanitize.js">
				 * <file name="index.html">
				 *   <div ng-controller="AppController as myCtrl">
				 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
				 *     <b>User comments</b><br>
				 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
				 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
				 *     exploit.
				 *     <div class="well">
				 *       <div ng-repeat="userComment in myCtrl.userComments">
				 *         <b>{{userComment.name}}</b>:
				 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
				 *         <br>
				 *       </div>
				 *     </div>
				 *   </div>
				 * </file>
				 *
				 * <file name="script.js">
				 *   angular.module('mySceApp', ['ngSanitize'])
				 *     .controller('AppController', ['$http', '$templateCache', '$sce',
				 *       function($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
	 *           self.userComments = userComments;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
				 * </file>
				 *
				 * <file name="test_data.json">
				 * [
				 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
				 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
				 * ]
				 * </file>
				 *
				 * <file name="protractor.js" type="protractor">
				 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
				 * </file>
				 * </example>
				 *
				 *
				 *
				 * ## Can I disable SCE completely?
				 *
				 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
				 * for little coding overhead.  It will be much harder to take an SCE disabled application and
				 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
				 * for cases where you have a lot of existing code that was written before SCE was introduced and
				 * you're migrating them a module at a time.
				 *
				 * That said, here's how you can completely disable SCE:
				 *
				 * ```
				 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
				 * ```
				 *
				 */
				/* jshint maxlen: 100 */

				function $SceProvider() {
					var enabled = true;

					/**
					 * @ngdoc method
					 * @name $sceProvider#enabled
					 * @kind function
					 *
					 * @param {boolean=} value If provided, then enables/disables SCE.
					 * @return {boolean} true if SCE is enabled, false otherwise.
					 *
					 * @description
					 * Enables/disables SCE and returns the current value.
					 */
					this.enabled = function (value) {
						if (arguments.length) {
							enabled = !!value;
						}
						return enabled;
					};


					/* Design notes on the default implementation for SCE.
					 *
					 * The API contract for the SCE delegate
					 * -------------------------------------
					 * The SCE delegate object must provide the following 3 methods:
					 *
					 * - trustAs(contextEnum, value)
					 *     This method is used to tell the SCE service that the provided value is OK to use in the
					 *     contexts specified by contextEnum.  It must return an object that will be accepted by
					 *     getTrusted() for a compatible contextEnum and return this value.
					 *
					 * - valueOf(value)
					 *     For values that were not produced by trustAs(), return them as is.  For values that were
					 *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
					 *     trustAs is wrapping the given values into some type, this operation unwraps it when given
					 *     such a value.
					 *
					 * - getTrusted(contextEnum, value)
					 *     This function should return the a value that is safe to use in the context specified by
					 *     contextEnum or throw and exception otherwise.
					 *
					 * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
					 * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
					 * instance, an implementation could maintain a registry of all trusted objects by context.  In
					 * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
					 * return the same object passed in if it was found in the registry under a compatible context or
					 * throw an exception otherwise.  An implementation might only wrap values some of the time based
					 * on some criteria.  getTrusted() might return a value and not throw an exception for special
					 * constants or objects even if not wrapped.  All such implementations fulfill this contract.
					 *
					 *
					 * A note on the inheritance model for SCE contexts
					 * ------------------------------------------------
					 * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
					 * is purely an implementation details.
					 *
					 * The contract is simply this:
					 *
					 *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
					 *     will also succeed.
					 *
					 * Inheritance happens to capture this in a natural way.  In some future, we
					 * may not use inheritance anymore.  That is OK because no code outside of
					 * sce.js and sceSpecs.js would need to be aware of this detail.
					 */

					this.$get = ['$parse', '$sceDelegate', function ($parse, $sceDelegate) {
						// Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
						// the "expression(javascript expression)" syntax which is insecure.
						if (enabled && msie < 8) {
							throw $sceMinErr('iequirks',
								'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
								'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
								'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
						}

						var sce = shallowCopy(SCE_CONTEXTS);

						/**
						 * @ngdoc method
						 * @name $sce#isEnabled
						 * @kind function
						 *
						 * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
						 * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
						 *
						 * @description
						 * Returns a boolean indicating if SCE is enabled.
						 */
						sce.isEnabled = function () {
							return enabled;
						};
						sce.trustAs = $sceDelegate.trustAs;
						sce.getTrusted = $sceDelegate.getTrusted;
						sce.valueOf = $sceDelegate.valueOf;

						if (!enabled) {
							sce.trustAs = sce.getTrusted = function (type, value) {
								return value;
							};
							sce.valueOf = identity;
						}

						/**
						 * @ngdoc method
						 * @name $sce#parseAs
						 *
						 * @description
						 * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
							* ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
						 * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
         * *result*)}
						 *
						 * @param {string} type The kind of SCE context in which this result will be used.
						 * @param {string} expression String expression to compile.
						 * @returns {function(context, locals)} a function which represents the compiled expression:
						 *
						 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
						 *      are evaluated against (typically a scope object).
						 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
						 *      `context`.
						 */
						sce.parseAs = function sceParseAs(type, expr) {
							var parsed = $parse(expr);
							if (parsed.literal && parsed.constant) {
								return parsed;
							} else {
								return $parse(expr, function (value) {
									return sce.getTrusted(type, value);
								});
							}
						};

						/**
						 * @ngdoc method
						 * @name $sce#trustAs
						 *
						 * @description
						 * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
						 * returns an object that is trusted by angular for use in specified strict contextual
						 * escaping contexts (such as ng-bind-html, ng-include, any src attribute
						 * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
						 * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
						 * escaping.
						 *
						 * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
						 *   resourceUrl, html, js and css.
						 * @param {*} value The value that that should be considered trusted/safe.
						 * @returns {*} A value that can be used to stand in for the provided `value` in places
						 * where Angular expects a $sce.trustAs() return value.
						 */

						/**
						 * @ngdoc method
						 * @name $sce#trustAsHtml
						 *
						 * @description
						 * Shorthand method.  `$sce.trustAsHtml(value)` →
						 *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
						 *
						 * @param {*} value The value to trustAs.
						 * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
         *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
						 *     only accept expressions that are either literal constants or are the
						 *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
						 */

						/**
						 * @ngdoc method
						 * @name $sce#trustAsUrl
						 *
						 * @description
						 * Shorthand method.  `$sce.trustAsUrl(value)` →
						 *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
						 *
						 * @param {*} value The value to trustAs.
						 * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
         *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
						 *     only accept expressions that are either literal constants or are the
						 *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
						 */

						/**
						 * @ngdoc method
						 * @name $sce#trustAsResourceUrl
						 *
						 * @description
						 * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
						 *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
						 *
						 * @param {*} value The value to trustAs.
						 * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
         *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
						 *     only accept expressions that are either literal constants or are the return
						 *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
						 */

						/**
						 * @ngdoc method
						 * @name $sce#trustAsJs
						 *
						 * @description
						 * Shorthand method.  `$sce.trustAsJs(value)` →
						 *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
						 *
						 * @param {*} value The value to trustAs.
						 * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
         *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
						 *     only accept expressions that are either literal constants or are the
						 *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
						 */

						/**
						 * @ngdoc method
						 * @name $sce#getTrusted
						 *
						 * @description
						 * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
						 * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
						 * originally supplied value if the queried context type is a supertype of the created type.
						 * If this condition isn't satisfied, throws an exception.
						 *
						 * @param {string} type The kind of context in which this value is to be used.
						 * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
						 *                         call.
						 * @returns {*} The value the was originally provided to
						 *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
						 *              Otherwise, throws an exception.
						 */

						/**
						 * @ngdoc method
						 * @name $sce#getTrustedHtml
						 *
						 * @description
						 * Shorthand method.  `$sce.getTrustedHtml(value)` →
						 *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
						 *
						 * @param {*} value The value to pass to `$sce.getTrusted`.
						 * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
						 */

						/**
						 * @ngdoc method
						 * @name $sce#getTrustedCss
						 *
						 * @description
						 * Shorthand method.  `$sce.getTrustedCss(value)` →
						 *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
						 *
						 * @param {*} value The value to pass to `$sce.getTrusted`.
						 * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
						 */

						/**
						 * @ngdoc method
						 * @name $sce#getTrustedUrl
						 *
						 * @description
						 * Shorthand method.  `$sce.getTrustedUrl(value)` →
						 *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
						 *
						 * @param {*} value The value to pass to `$sce.getTrusted`.
						 * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
						 */

						/**
						 * @ngdoc method
						 * @name $sce#getTrustedResourceUrl
						 *
						 * @description
						 * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
						 *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
						 *
						 * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
						 * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
						 */

						/**
						 * @ngdoc method
						 * @name $sce#getTrustedJs
						 *
						 * @description
						 * Shorthand method.  `$sce.getTrustedJs(value)` →
						 *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
						 *
						 * @param {*} value The value to pass to `$sce.getTrusted`.
						 * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
						 */

						/**
						 * @ngdoc method
						 * @name $sce#parseAsHtml
						 *
						 * @description
						 * Shorthand method.  `$sce.parseAsHtml(expression string)` →
						 *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
						 *
						 * @param {string} expression String expression to compile.
						 * @returns {function(context, locals)} a function which represents the compiled expression:
						 *
						 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
						 *      are evaluated against (typically a scope object).
						 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
						 *      `context`.
						 */

						/**
						 * @ngdoc method
						 * @name $sce#parseAsCss
						 *
						 * @description
						 * Shorthand method.  `$sce.parseAsCss(value)` →
						 *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
						 *
						 * @param {string} expression String expression to compile.
						 * @returns {function(context, locals)} a function which represents the compiled expression:
						 *
						 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
						 *      are evaluated against (typically a scope object).
						 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
						 *      `context`.
						 */

						/**
						 * @ngdoc method
						 * @name $sce#parseAsUrl
						 *
						 * @description
						 * Shorthand method.  `$sce.parseAsUrl(value)` →
						 *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
						 *
						 * @param {string} expression String expression to compile.
						 * @returns {function(context, locals)} a function which represents the compiled expression:
						 *
						 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
						 *      are evaluated against (typically a scope object).
						 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
						 *      `context`.
						 */

						/**
						 * @ngdoc method
						 * @name $sce#parseAsResourceUrl
						 *
						 * @description
						 * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
						 *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
						 *
						 * @param {string} expression String expression to compile.
						 * @returns {function(context, locals)} a function which represents the compiled expression:
						 *
						 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
						 *      are evaluated against (typically a scope object).
						 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
						 *      `context`.
						 */

						/**
						 * @ngdoc method
						 * @name $sce#parseAsJs
						 *
						 * @description
						 * Shorthand method.  `$sce.parseAsJs(value)` →
						 *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
						 *
						 * @param {string} expression String expression to compile.
						 * @returns {function(context, locals)} a function which represents the compiled expression:
						 *
						 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
						 *      are evaluated against (typically a scope object).
						 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
						 *      `context`.
						 */

						// Shorthand delegations.
						var parse = sce.parseAs,
							getTrusted = sce.getTrusted,
							trustAs = sce.trustAs;

						forEach(SCE_CONTEXTS, function (enumValue, name) {
							var lName = lowercase(name);
							sce[camelCase("parse_as_" + lName)] = function (expr) {
								return parse(enumValue, expr);
							};
							sce[camelCase("get_trusted_" + lName)] = function (value) {
								return getTrusted(enumValue, value);
							};
							sce[camelCase("trust_as_" + lName)] = function (value) {
								return trustAs(enumValue, value);
							};
						});

						return sce;
					}];
				}

				/**
				 * !!! This is an undocumented "private" service !!!
				 *
				 * @name $sniffer
				 * @requires $window
				 * @requires $document
				 *
				 * @property {boolean} history Does the browser support html5 history api ?
				 * @property {boolean} transitions Does the browser support CSS transition events ?
				 * @property {boolean} animations Does the browser support CSS animation events ?
				 *
				 * @description
				 * This is very simple implementation of testing browser's features.
				 */
				function $SnifferProvider() {
					this.$get = ['$window', '$document', function ($window, $document) {
						var eventSupport = {},
							android =
								toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
							boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
							document = $document[0] || {},
							vendorPrefix,
							vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
							bodyStyle = document.body && document.body.style,
							transitions = false,
							animations = false,
							match;

						if (bodyStyle) {
							for (var prop in bodyStyle) {
								if (match = vendorRegex.exec(prop)) {
									vendorPrefix = match[0];
									vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
									break;
								}
							}

							if (!vendorPrefix) {
								vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
							}

							transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
							animations = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

							if (android && (!transitions || !animations)) {
								transitions = isString(bodyStyle.webkitTransition);
								animations = isString(bodyStyle.webkitAnimation);
							}
						}


						return {
							// Android has history.pushState, but it does not update location correctly
							// so let's not use the history API at all.
							// http://code.google.com/p/android/issues/detail?id=17471
							// https://github.com/angular/angular.js/issues/904

							// older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
							// so let's not use the history API also
							// We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
							// jshint -W018
							history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
							// jshint +W018
							hasEvent: function (event) {
								// IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
								// it. In particular the event is not fired when backspace or delete key are pressed or
								// when cut operation is performed.
								// IE10+ implements 'input' event but it erroneously fires under various situations,
								// e.g. when placeholder changes, or a form is focused.
								if (event === 'input' && msie <= 11) return false;

								if (isUndefined(eventSupport[event])) {
									var divElm = document.createElement('div');
									eventSupport[event] = 'on' + event in divElm;
								}

								return eventSupport[event];
							},
							csp: csp(),
							vendorPrefix: vendorPrefix,
							transitions: transitions,
							animations: animations,
							android: android
						};
					}];
				}

				var $compileMinErr = minErr('$compile');

				/**
				 * @ngdoc service
				 * @name $templateRequest
				 *
				 * @description
				 * The `$templateRequest` service runs security checks then downloads the provided template using
				 * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
				 * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
				 * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
				 * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
				 * when `tpl` is of type string and `$templateCache` has the matching entry.
				 *
				 * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
				 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
				 *
				 * @return {Promise} a promise for the HTTP response data of the given URL.
				 *
				 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
				 */
				function $TemplateRequestProvider() {
					this.$get = ['$templateCache', '$http', '$q', '$sce', function ($templateCache, $http, $q, $sce) {
						function handleRequestFn(tpl, ignoreRequestError) {
							handleRequestFn.totalPendingRequests++;

							// We consider the template cache holds only trusted templates, so
							// there's no need to go through whitelisting again for keys that already
							// are included in there. This also makes Angular accept any script
							// directive, no matter its name. However, we still need to unwrap trusted
							// types.
							if (!isString(tpl) || !$templateCache.get(tpl)) {
								tpl = $sce.getTrustedResourceUrl(tpl);
							}

							var transformResponse = $http.defaults && $http.defaults.transformResponse;

							if (isArray(transformResponse)) {
								transformResponse = transformResponse.filter(function (transformer) {
									return transformer !== defaultHttpResponseTransform;
								});
							} else if (transformResponse === defaultHttpResponseTransform) {
								transformResponse = null;
							}

							var httpOptions = {
								cache: $templateCache,
								transformResponse: transformResponse
							};

							return $http.get(tpl, httpOptions)
								['finally'](function () {
								handleRequestFn.totalPendingRequests--;
							})
								.then(function (response) {
									$templateCache.put(tpl, response.data);
									return response.data;
								}, handleError);

							function handleError(resp) {
								if (!ignoreRequestError) {
									throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',
										tpl, resp.status, resp.statusText);
								}
								return $q.reject(resp);
							}
						}

						handleRequestFn.totalPendingRequests = 0;

						return handleRequestFn;
					}];
				}

				function $$TestabilityProvider() {
					this.$get = ['$rootScope', '$browser', '$location',
						function ($rootScope, $browser, $location) {

							/**
							 * @name $testability
							 *
							 * @description
							 * The private $$testability service provides a collection of methods for use when debugging
							 * or by automated test and debugging tools.
							 */
							var testability = {};

							/**
							 * @name $$testability#findBindings
							 *
							 * @description
							 * Returns an array of elements that are bound (via ng-bind or {{}})
							 * to expressions matching the input.
							 *
							 * @param {Element} element The element root to search from.
							 * @param {string} expression The binding expression to match.
							 * @param {boolean} opt_exactMatch If true, only returns exact matches
							 *     for the expression. Filters and whitespace are ignored.
							 */
							testability.findBindings = function (element, expression, opt_exactMatch) {
								var bindings = element.getElementsByClassName('ng-binding');
								var matches = [];
								forEach(bindings, function (binding) {
									var dataBinding = angular.element(binding).data('$binding');
									if (dataBinding) {
										forEach(dataBinding, function (bindingName) {
											if (opt_exactMatch) {
												var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
												if (matcher.test(bindingName)) {
													matches.push(binding);
												}
											} else {
												if (bindingName.indexOf(expression) != -1) {
													matches.push(binding);
												}
											}
										});
									}
								});
								return matches;
							};

							/**
							 * @name $$testability#findModels
							 *
							 * @description
							 * Returns an array of elements that are two-way found via ng-model to
							 * expressions matching the input.
							 *
							 * @param {Element} element The element root to search from.
							 * @param {string} expression The model expression to match.
							 * @param {boolean} opt_exactMatch If true, only returns exact matches
							 *     for the expression.
							 */
							testability.findModels = function (element, expression, opt_exactMatch) {
								var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
								for (var p = 0; p < prefixes.length; ++p) {
									var attributeEquals = opt_exactMatch ? '=' : '*=';
									var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
									var elements = element.querySelectorAll(selector);
									if (elements.length) {
										return elements;
									}
								}
							};

							/**
							 * @name $$testability#getLocation
							 *
							 * @description
							 * Shortcut for getting the location in a browser agnostic way. Returns
							 *     the path, search, and hash. (e.g. /path?a=b#hash)
							 */
							testability.getLocation = function () {
								return $location.url();
							};

							/**
							 * @name $$testability#setLocation
							 *
							 * @description
							 * Shortcut for navigating to a location without doing a full page reload.
							 *
							 * @param {string} url The location url (path, search and hash,
							 *     e.g. /path?a=b#hash) to go to.
							 */
							testability.setLocation = function (url) {
								if (url !== $location.url()) {
									$location.url(url);
									$rootScope.$digest();
								}
							};

							/**
							 * @name $$testability#whenStable
							 *
							 * @description
							 * Calls the callback when $timeout and $http requests are completed.
							 *
							 * @param {function} callback
							 */
							testability.whenStable = function (callback) {
								$browser.notifyWhenNoOutstandingRequests(callback);
							};

							return testability;
						}];
				}

				function $TimeoutProvider() {
					this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
						function ($rootScope, $browser, $q, $$q, $exceptionHandler) {

							var deferreds = {};


							/**
							 * @ngdoc service
							 * @name $timeout
							 *
							 * @description
							 * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
							 * block and delegates any exceptions to
							 * {@link ng.$exceptionHandler $exceptionHandler} service.
							 *
							 * The return value of calling `$timeout` is a promise, which will be resolved when
							 * the delay has passed and the timeout function, if provided, is executed.
							 *
							 * To cancel a timeout request, call `$timeout.cancel(promise)`.
							 *
							 * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
							 * synchronously flush the queue of deferred functions.
							 *
							 * If you only want a promise that will be resolved after some specified delay
							 * then you can call `$timeout` without the `fn` function.
							 *
							 * @param {function()=} fn A function, whose execution should be delayed.
							 * @param {number=} [delay=0] Delay in milliseconds.
							 * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
							 *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
							 * @param {...*=} Pass additional parameters to the executed function.
							 * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
							 *   promise will be resolved with is the return value of the `fn` function.
							 *
							 */
							function timeout(fn, delay, invokeApply) {
								if (!isFunction(fn)) {
									invokeApply = delay;
									delay = fn;
									fn = noop;
								}

								var args = sliceArgs(arguments, 3),
									skipApply = (isDefined(invokeApply) && !invokeApply),
									deferred = (skipApply ? $$q : $q).defer(),
									promise = deferred.promise,
									timeoutId;

								timeoutId = $browser.defer(function () {
									try {
										deferred.resolve(fn.apply(null, args));
									} catch (e) {
										deferred.reject(e);
										$exceptionHandler(e);
									}
									finally {
										delete deferreds[promise.$$timeoutId];
									}

									if (!skipApply) $rootScope.$apply();
								}, delay);

								promise.$$timeoutId = timeoutId;
								deferreds[timeoutId] = deferred;

								return promise;
							}


							/**
							 * @ngdoc method
							 * @name $timeout#cancel
							 *
							 * @description
							 * Cancels a task associated with the `promise`. As a result of this, the promise will be
							 * resolved with a rejection.
							 *
							 * @param {Promise=} promise Promise returned by the `$timeout` function.
							 * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
							 *   canceled.
							 */
							timeout.cancel = function (promise) {
								if (promise && promise.$$timeoutId in deferreds) {
									deferreds[promise.$$timeoutId].reject('canceled');
									delete deferreds[promise.$$timeoutId];
									return $browser.defer.cancel(promise.$$timeoutId);
								}
								return false;
							};

							return timeout;
						}];
				}

				// NOTE:  The usage of window and document instead of $window and $document here is
				// deliberate.  This service depends on the specific behavior of anchor nodes created by the
				// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
				// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
				// doesn't know about mocked locations and resolves URLs to the real document - which is
				// exactly the behavior needed here.  There is little value is mocking these out for this
				// service.
				var urlParsingNode = document.createElement("a");
				var originUrl = urlResolve(window.location.href);


				/**
				 *
				 * Implementation Notes for non-IE browsers
				 * ----------------------------------------
				 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
				 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
				 * URL will be resolved into an absolute URL in the context of the application document.
				 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
				 * properties are all populated to reflect the normalized URL.  This approach has wide
				 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
				 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
				 *
				 * Implementation Notes for IE
				 * ---------------------------
				 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
				 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
				 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
				 * work around that by performing the parsing in a 2nd step by taking a previously normalized
				 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
				 * properties such as protocol, hostname, port, etc.
				 *
				 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
				 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
				 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
				 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
				 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
				 * method and IE < 8 is unsupported.
				 *
				 * References:
				 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
				 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
				 *   http://url.spec.whatwg.org/#urlutils
				 *   https://github.com/angular/angular.js/pull/2902
				 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
				 *
				 * @kind function
				 * @param {string} url The URL to be parsed.
				 * @description Normalizes and parses a URL.
				 * @returns {object} Returns the normalized URL as a dictionary.
				 *
				 *   | member name   | Description    |
				 *   |---------------|----------------|
				 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
				 *   | protocol      | The protocol including the trailing colon                              |
				 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
				 *   | search        | The search params, minus the question mark                             |
				 *   | hash          | The hash string, minus the hash symbol
				 *   | hostname      | The hostname
				 *   | port          | The port, without ":"
				 *   | pathname      | The pathname, beginning with "/"
				 *
				 */
				function urlResolve(url) {
					var href = url;

					if (msie) {
						// Normalize before parse.  Refer Implementation Notes on why this is
						// done in two steps on IE.
						urlParsingNode.setAttribute("href", href);
						href = urlParsingNode.href;
					}

					urlParsingNode.setAttribute('href', href);

					// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
					return {
						href: urlParsingNode.href,
						protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
						host: urlParsingNode.host,
						search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
						hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
						hostname: urlParsingNode.hostname,
						port: urlParsingNode.port,
						pathname: (urlParsingNode.pathname.charAt(0) === '/')
							? urlParsingNode.pathname
							: '/' + urlParsingNode.pathname
					};
				}

				/**
				 * Parse a request URL and determine whether this is a same-origin request as the application document.
				 *
				 * @param {string|object} requestUrl The url of the request as a string that will be resolved
				 * or a parsed URL object.
				 * @returns {boolean} Whether the request is for the same origin as the application document.
				 */
				function urlIsSameOrigin(requestUrl) {
					var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
					return (parsed.protocol === originUrl.protocol &&
					parsed.host === originUrl.host);
				}

				/**
				 * @ngdoc service
				 * @name $window
				 *
				 * @description
				 * A reference to the browser's `window` object. While `window`
				 * is globally available in JavaScript, it causes testability problems, because
				 * it is a global variable. In angular we always refer to it through the
				 * `$window` service, so it may be overridden, removed or mocked for testing.
				 *
				 * Expressions, like the one defined for the `ngClick` directive in the example
				 * below, are evaluated with respect to the current scope.  Therefore, there is
				 * no risk of inadvertently coding in a dependency on a global value in such an
				 * expression.
				 *
				 * @example
				 <example module="windowExample">
				 <file name="index.html">
				 <script>
				 angular.module('windowExample', [])
				 .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <input type="text" ng-model="greeting" aria-label="greeting" />
				 <button ng-click="doGreeting(greeting)">ALERT</button>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
				 </file>
				 </example>
				 */
				function $WindowProvider() {
					this.$get = valueFn(window);
				}

				/**
				 * @name $$cookieReader
				 * @requires $document
				 *
				 * @description
				 * This is a private service for reading cookies used by $http and ngCookies
				 *
				 * @return {Object} a key/value map of the current cookies
				 */
				function $$CookieReader($document) {
					var rawDocument = $document[0] || {};
					var lastCookies = {};
					var lastCookieString = '';

					function safeDecodeURIComponent(str) {
						try {
							return decodeURIComponent(str);
						} catch (e) {
							return str;
						}
					}

					return function () {
						var cookieArray, cookie, i, index, name;
						var currentCookieString = rawDocument.cookie || '';

						if (currentCookieString !== lastCookieString) {
							lastCookieString = currentCookieString;
							cookieArray = lastCookieString.split('; ');
							lastCookies = {};

							for (i = 0; i < cookieArray.length; i++) {
								cookie = cookieArray[i];
								index = cookie.indexOf('=');
								if (index > 0) { //ignore nameless cookies
									name = safeDecodeURIComponent(cookie.substring(0, index));
									// the first value that is seen for a cookie is the most
									// specific one.  values for the same cookie name that
									// follow are for less specific paths.
									if (lastCookies[name] === undefined) {
										lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
									}
								}
							}
						}
						return lastCookies;
					};
				}

				$$CookieReader.$inject = ['$document'];

				function $$CookieReaderProvider() {
					this.$get = $$CookieReader;
				}

				/* global currencyFilter: true,
				 dateFilter: true,
				 filterFilter: true,
				 jsonFilter: true,
				 limitToFilter: true,
				 lowercaseFilter: true,
				 numberFilter: true,
				 orderByFilter: true,
				 uppercaseFilter: true,
				 */

				/**
				 * @ngdoc provider
				 * @name $filterProvider
				 * @description
				 *
				 * Filters are just functions which transform input to an output. However filters need to be
				 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
				 * annotated with dependencies and is responsible for creating a filter function.
				 *
				 * <div class="alert alert-warning">
				 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
				 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
				 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
				 * (`myapp_subsection_filterx`).
				 * </div>
				 *
				 * ```js
				 *   // Filter registration
				 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
				 * ```
				 *
				 * The filter function is registered with the `$injector` under the filter name suffix with
				 * `Filter`.
				 *
				 * ```js
				 *   it('should be the same instance', inject(
				 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
				 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
				 * ```
				 *
				 *
				 * For more information about how angular filters work, and how to create your own filters, see
				 * {@link guide/filter Filters} in the Angular Developer Guide.
				 */

				/**
				 * @ngdoc service
				 * @name $filter
				 * @kind function
				 * @description
				 * Filters are used for formatting data displayed to the user.
				 *
				 * The general syntax in templates is as follows:
				 *
				 *         {{ expression [| filter_name[:parameter_value] ... ] }}
				 *
				 * @param {String} name Name of the filter function to retrieve
				 * @return {Function} the filter function
				 * @example
				 <example name="$filter" module="filterExample">
				 <file name="index.html">
				 <div ng-controller="MainCtrl">
				 <h3>{{ originalText }}</h3>
				 <h3>{{ filteredText }}</h3>
				 </div>
				 </file>

				 <file name="script.js">
				 angular.module('filterExample', [])
				 .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
				 </file>
				 </example>
				 */
				$FilterProvider.$inject = ['$provide'];
				function $FilterProvider($provide) {
					var suffix = 'Filter';

					/**
					 * @ngdoc method
					 * @name $filterProvider#register
					 * @param {string|Object} name Name of the filter function, or an object map of filters where
					 *    the keys are the filter names and the values are the filter factories.
					 *
					 *    <div class="alert alert-warning">
					 *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
					 *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
					 *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
					 *    (`myapp_subsection_filterx`).
					 *    </div>
					 * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
					 *    of the registered filter instances.
					 */
					function register(name, factory) {
						if (isObject(name)) {
							var filters = {};
							forEach(name, function (filter, key) {
								filters[key] = register(key, filter);
							});
							return filters;
						} else {
							return $provide.factory(name + suffix, factory);
						}
					}

					this.register = register;

					this.$get = ['$injector', function ($injector) {
						return function (name) {
							return $injector.get(name + suffix);
						};
					}];

					////////////////////////////////////////

					/* global
					 currencyFilter: false,
					 dateFilter: false,
					 filterFilter: false,
					 jsonFilter: false,
					 limitToFilter: false,
					 lowercaseFilter: false,
					 numberFilter: false,
					 orderByFilter: false,
					 uppercaseFilter: false,
					 */

					register('currency', currencyFilter);
					register('date', dateFilter);
					register('filter', filterFilter);
					register('json', jsonFilter);
					register('limitTo', limitToFilter);
					register('lowercase', lowercaseFilter);
					register('number', numberFilter);
					register('orderBy', orderByFilter);
					register('uppercase', uppercaseFilter);
				}

				/**
				 * @ngdoc filter
				 * @name filter
				 * @kind function
				 *
				 * @description
				 * Selects a subset of items from `array` and returns it as a new array.
				 *
				 * @param {Array} array The source array.
				 * @param {string|Object|function()} expression The predicate to be used for selecting items from
				 *   `array`.
				 *
				 *   Can be one of:
				 *
				 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
				 *     objects with string properties in `array` that match this string will be returned. This also
				 *     applies to nested object properties.
				 *     The predicate can be negated by prefixing the string with `!`.
				 *
				 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
				 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
				 *     which have property `name` containing "M" and property `phone` containing "1". A special
				 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
				 *     property of the object or its nested object properties. That's equivalent to the simple
				 *     substring match with a `string` as described above. The predicate can be negated by prefixing
				 *     the string with `!`.
				 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
				 *     not containing "M".
				 *
				 *     Note that a named property will match properties on the same level only, while the special
				 *     `$` property will match properties on the same level or deeper. E.g. an array item like
				 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
				 *     **will** be matched by `{$: 'John'}`.
				 *
				 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
				 *     The function is called for each element of the array, with the element, its index, and
				 *     the entire array itself as arguments.
				 *
				 *     The final result is an array of those elements that the predicate returned true for.
				 *
				 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
				 *     determining if the expected value (from the filter expression) and actual value (from
				 *     the object in the array) should be considered a match.
				 *
				 *   Can be one of:
				 *
				 *   - `function(actual, expected)`:
				 *     The function will be given the object value and the predicate value to compare and
				 *     should return true if both values should be considered equal.
				 *
				 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
				 *     This is essentially strict comparison of expected and actual.
				 *
				 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
				 *     insensitive way.
				 *
				 *     Primitive values are converted to strings. Objects are not compared against primitives,
				 *     unless they have a custom `toString` method (e.g. `Date` objects).
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <div ng-init="friends = [{name:'John', phone:'555-1276'},
				 {name:'Mary', phone:'800-BIG-MARY'},
				 {name:'Mike', phone:'555-4321'},
				 {name:'Adam', phone:'555-5678'},
				 {name:'Julie', phone:'555-8765'},
				 {name:'Juliette', phone:'555-5678'}]"></div>

				 <label>Search: <input ng-model="searchText"></label>
				 <table id="searchTextResults">
				 <tr><th>Name</th><th>Phone</th></tr>
				 <tr ng-repeat="friend in friends | filter:searchText">
				 <td>{{friend.name}}</td>
				 <td>{{friend.phone}}</td>
				 </tr>
				 </table>
				 <hr>
				 <label>Any: <input ng-model="search.$"></label> <br>
				 <label>Name only <input ng-model="search.name"></label><br>
				 <label>Phone only <input ng-model="search.phone"></label><br>
				 <label>Equality <input type="checkbox" ng-model="strict"></label><br>
				 <table id="searchObjResults">
				 <tr><th>Name</th><th>Phone</th></tr>
				 <tr ng-repeat="friendObj in friends | filter:search:strict">
				 <td>{{friendObj.name}}</td>
				 <td>{{friendObj.phone}}</td>
				 </tr>
				 </table>
				 </file>
				 <file name="protractor.js" type="protractor">
				 var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };

				 it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');
	
	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });

				 it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
				 it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
				 </file>
				 </example>
				 */
				function filterFilter() {
					return function (array, expression, comparator) {
						if (!isArrayLike(array)) {
							if (array == null) {
								return array;
							} else {
								throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
							}
						}

						var expressionType = getTypeForFilter(expression);
						var predicateFn;
						var matchAgainstAnyProp;

						switch (expressionType) {
							case 'function':
								predicateFn = expression;
								break;
							case 'boolean':
							case 'null':
							case 'number':
							case 'string':
								matchAgainstAnyProp = true;
							//jshint -W086
							case 'object':
								//jshint +W086
								predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
								break;
							default:
								return array;
						}

						return Array.prototype.filter.call(array, predicateFn);
					};
				}

				// Helper functions for `filterFilter`
				function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
					var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
					var predicateFn;

					if (comparator === true) {
						comparator = equals;
					} else if (!isFunction(comparator)) {
						comparator = function (actual, expected) {
							if (isUndefined(actual)) {
								// No substring matching against `undefined`
								return false;
							}
							if ((actual === null) || (expected === null)) {
								// No substring matching against `null`; only match against `null`
								return actual === expected;
							}
							if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
								// Should not compare primitives against objects, unless they have custom `toString` method
								return false;
							}

							actual = lowercase('' + actual);
							expected = lowercase('' + expected);
							return actual.indexOf(expected) !== -1;
						};
					}

					predicateFn = function (item) {
						if (shouldMatchPrimitives && !isObject(item)) {
							return deepCompare(item, expression.$, comparator, false);
						}
						return deepCompare(item, expression, comparator, matchAgainstAnyProp);
					};

					return predicateFn;
				}

				function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
					var actualType = getTypeForFilter(actual);
					var expectedType = getTypeForFilter(expected);

					if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
						return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
					} else if (isArray(actual)) {
						// In case `actual` is an array, consider it a match
						// if ANY of it's items matches `expected`
						return actual.some(function (item) {
							return deepCompare(item, expected, comparator, matchAgainstAnyProp);
						});
					}

					switch (actualType) {
						case 'object':
							var key;
							if (matchAgainstAnyProp) {
								for (key in actual) {
									if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
										return true;
									}
								}
								return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
							} else if (expectedType === 'object') {
								for (key in expected) {
									var expectedVal = expected[key];
									if (isFunction(expectedVal) || isUndefined(expectedVal)) {
										continue;
									}

									var matchAnyProperty = key === '$';
									var actualVal = matchAnyProperty ? actual : actual[key];
									if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
										return false;
									}
								}
								return true;
							} else {
								return comparator(actual, expected);
							}
							break;
						case 'function':
							return false;
						default:
							return comparator(actual, expected);
					}
				}

				// Used for easily differentiating between `null` and actual `object`
				function getTypeForFilter(val) {
					return (val === null) ? 'null' : typeof val;
				}

				/**
				 * @ngdoc filter
				 * @name currency
				 * @kind function
				 *
				 * @description
				 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
				 * symbol for current locale is used.
				 *
				 * @param {number} amount Input to filter.
				 * @param {string=} symbol Currency symbol or identifier to be displayed.
				 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
				 * @returns {string} Formatted number.
				 *
				 *
				 * @example
				 <example module="currencyExample">
				 <file name="index.html">
				 <script>
				 angular.module('currencyExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <input type="number" ng-model="amount" aria-label="amount"> <br>
				 default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
				 custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
				 no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
				 it('should update', function() {
	         if (browser.params.browser == 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
	         expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');
	       });
				 </file>
				 </example>
				 */
				currencyFilter.$inject = ['$locale'];
				function currencyFilter($locale) {
					var formats = $locale.NUMBER_FORMATS;
					return function (amount, currencySymbol, fractionSize) {
						if (isUndefined(currencySymbol)) {
							currencySymbol = formats.CURRENCY_SYM;
						}

						if (isUndefined(fractionSize)) {
							fractionSize = formats.PATTERNS[1].maxFrac;
						}

						// if null or undefined pass it through
						return (amount == null)
							? amount
							: formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
							replace(/\u00A4/g, currencySymbol);
					};
				}

				/**
				 * @ngdoc filter
				 * @name number
				 * @kind function
				 *
				 * @description
				 * Formats a number as text.
				 *
				 * If the input is null or undefined, it will just be returned.
				 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.
				 * If the input is not a number an empty string is returned.
				 *
				 *
				 * @param {number|string} number Number to format.
				 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
				 * If this is not provided then the fraction size is computed from the current locale's number
				 * formatting pattern. In the case of the default locale, it will be 3.
				 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
				 *
				 * @example
				 <example module="numberFilterExample">
				 <file name="index.html">
				 <script>
				 angular.module('numberFilterExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <label>Enter number: <input ng-model='val'></label><br>
				 Default formatting: <span id='number-default'>{{val | number}}</span><br>
				 No fractions: <span>{{val | number:0}}</span><br>
				 Negative number: <span>{{-val | number:4}}</span>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });

				 it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
				 </file>
				 </example>
				 */


				numberFilter.$inject = ['$locale'];
				function numberFilter($locale) {
					var formats = $locale.NUMBER_FORMATS;
					return function (number, fractionSize) {

						// if null or undefined pass it through
						return (number == null)
							? number
							: formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
							fractionSize);
					};
				}

				var DECIMAL_SEP = '.';

				function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
					if (isObject(number)) return '';

					var isNegative = number < 0;
					number = Math.abs(number);

					var isInfinity = number === Infinity;
					if (!isInfinity && !isFinite(number)) return '';

					var numStr = number + '',
						formatedText = '',
						hasExponent = false,
						parts = [];

					if (isInfinity) formatedText = '\u221e';

					if (!isInfinity && numStr.indexOf('e') !== -1) {
						var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
						if (match && match[2] == '-' && match[3] > fractionSize + 1) {
							number = 0;
						} else {
							formatedText = numStr;
							hasExponent = true;
						}
					}

					if (!isInfinity && !hasExponent) {
						var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

						// determine fractionSize if it is not specified
						if (isUndefined(fractionSize)) {
							fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
						}

						// safely round numbers in JS without hitting imprecisions of floating-point arithmetics
						// inspired by:
						// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
						number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);

						var fraction = ('' + number).split(DECIMAL_SEP);
						var whole = fraction[0];
						fraction = fraction[1] || '';

						var i, pos = 0,
							lgroup = pattern.lgSize,
							group = pattern.gSize;

						if (whole.length >= (lgroup + group)) {
							pos = whole.length - lgroup;
							for (i = 0; i < pos; i++) {
								if ((pos - i) % group === 0 && i !== 0) {
									formatedText += groupSep;
								}
								formatedText += whole.charAt(i);
							}
						}

						for (i = pos; i < whole.length; i++) {
							if ((whole.length - i) % lgroup === 0 && i !== 0) {
								formatedText += groupSep;
							}
							formatedText += whole.charAt(i);
						}

						// format fraction part.
						while (fraction.length < fractionSize) {
							fraction += '0';
						}

						if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
					} else {
						if (fractionSize > 0 && number < 1) {
							formatedText = number.toFixed(fractionSize);
							number = parseFloat(formatedText);
						}
					}

					if (number === 0) {
						isNegative = false;
					}

					parts.push(isNegative ? pattern.negPre : pattern.posPre,
						formatedText,
						isNegative ? pattern.negSuf : pattern.posSuf);
					return parts.join('');
				}

				function padNumber(num, digits, trim) {
					var neg = '';
					if (num < 0) {
						neg = '-';
						num = -num;
					}
					num = '' + num;
					while (num.length < digits) num = '0' + num;
					if (trim) {
						num = num.substr(num.length - digits);
					}
					return neg + num;
				}


				function dateGetter(name, size, offset, trim) {
					offset = offset || 0;
					return function (date) {
						var value = date['get' + name]();
						if (offset > 0 || value > -offset) {
							value += offset;
						}
						if (value === 0 && offset == -12) value = 12;
						return padNumber(value, size, trim);
					};
				}

				function dateStrGetter(name, shortForm) {
					return function (date, formats) {
						var value = date['get' + name]();
						var get = uppercase(shortForm ? ('SHORT' + name) : name);

						return formats[get][value];
					};
				}

				function timeZoneGetter(date, formats, offset) {
					var zone = -1 * offset;
					var paddedZone = (zone >= 0) ? "+" : "";

					paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
						padNumber(Math.abs(zone % 60), 2);

					return paddedZone;
				}

				function getFirstThursdayOfYear(year) {
					// 0 = index of January
					var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
					// 4 = index of Thursday (+1 to account for 1st = 5)
					// 11 = index of *next* Thursday (+1 account for 1st = 12)
					return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
				}

				function getThursdayThisWeek(datetime) {
					return new Date(datetime.getFullYear(), datetime.getMonth(),
						// 4 = index of Thursday
						datetime.getDate() + (4 - datetime.getDay()));
				}

				function weekGetter(size) {
					return function (date) {
						var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
							thisThurs = getThursdayThisWeek(date);

						var diff = +thisThurs - +firstThurs,
							result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

						return padNumber(result, size);
					};
				}

				function ampmGetter(date, formats) {
					return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
				}

				function eraGetter(date, formats) {
					return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
				}

				function longEraGetter(date, formats) {
					return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
				}

				var DATE_FORMATS = {
					yyyy: dateGetter('FullYear', 4),
					yy: dateGetter('FullYear', 2, 0, true),
					y: dateGetter('FullYear', 1),
					MMMM: dateStrGetter('Month'),
					MMM: dateStrGetter('Month', true),
					MM: dateGetter('Month', 2, 1),
					M: dateGetter('Month', 1, 1),
					dd: dateGetter('Date', 2),
					d: dateGetter('Date', 1),
					HH: dateGetter('Hours', 2),
					H: dateGetter('Hours', 1),
					hh: dateGetter('Hours', 2, -12),
					h: dateGetter('Hours', 1, -12),
					mm: dateGetter('Minutes', 2),
					m: dateGetter('Minutes', 1),
					ss: dateGetter('Seconds', 2),
					s: dateGetter('Seconds', 1),
					// while ISO 8601 requires fractions to be prefixed with `.` or `,`
					// we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
					sss: dateGetter('Milliseconds', 3),
					EEEE: dateStrGetter('Day'),
					EEE: dateStrGetter('Day', true),
					a: ampmGetter,
					Z: timeZoneGetter,
					ww: weekGetter(2),
					w: weekGetter(1),
					G: eraGetter,
					GG: eraGetter,
					GGG: eraGetter,
					GGGG: longEraGetter
				};

				var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
					NUMBER_STRING = /^\-?\d+$/;

				/**
				 * @ngdoc filter
				 * @name date
				 * @kind function
				 *
				 * @description
				 *   Formats `date` to a string based on the requested `format`.
				 *
				 *   `format` string can be composed of the following elements:
				 *
				 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
				 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
				 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
				 *   * `'MMMM'`: Month in year (January-December)
				 *   * `'MMM'`: Month in year (Jan-Dec)
				 *   * `'MM'`: Month in year, padded (01-12)
				 *   * `'M'`: Month in year (1-12)
				 *   * `'dd'`: Day in month, padded (01-31)
				 *   * `'d'`: Day in month (1-31)
				 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
				 *   * `'EEE'`: Day in Week, (Sun-Sat)
				 *   * `'HH'`: Hour in day, padded (00-23)
				 *   * `'H'`: Hour in day (0-23)
				 *   * `'hh'`: Hour in AM/PM, padded (01-12)
				 *   * `'h'`: Hour in AM/PM, (1-12)
				 *   * `'mm'`: Minute in hour, padded (00-59)
				 *   * `'m'`: Minute in hour (0-59)
				 *   * `'ss'`: Second in minute, padded (00-59)
				 *   * `'s'`: Second in minute (0-59)
				 *   * `'sss'`: Millisecond in second, padded (000-999)
				 *   * `'a'`: AM/PM marker
				 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
				 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
				 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
				 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
				 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
				 *
				 *   `format` string can also be one of the following predefined
				 *   {@link guide/i18n localizable formats}:
				 *
				 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
				 *     (e.g. Sep 3, 2010 12:05:08 PM)
				 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
				 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
				 *     (e.g. Friday, September 3, 2010)
				 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
				 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
				 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
				 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
				 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
				 *
				 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
				 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
				 *   (e.g. `"h 'o''clock'"`).
				 *
				 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
				 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
				 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
				 *    specified in the string input, the time is considered to be in the local timezone.
				 * @param {string=} format Formatting rules (see Description). If not specified,
				 *    `mediumDate` is used.
				 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
				 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
				 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
				 *    If not specified, the timezone of the browser will be used.
				 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
				 <span>{{1288323623006 | date:'medium'}}</span><br>
				 <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
				 <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
				 <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
				 <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
				 <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
				 <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
				 </file>
				 </example>
				 */
				dateFilter.$inject = ['$locale'];
				function dateFilter($locale) {


					var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
					// 1        2       3         4          5          6          7          8  9     10      11
					function jsonStringToDate(string) {
						var match;
						if (match = string.match(R_ISO8601_STR)) {
							var date = new Date(0),
								tzHour = 0,
								tzMin = 0,
								dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
								timeSetter = match[8] ? date.setUTCHours : date.setHours;

							if (match[9]) {
								tzHour = toInt(match[9] + match[10]);
								tzMin = toInt(match[9] + match[11]);
							}
							dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
							var h = toInt(match[4] || 0) - tzHour;
							var m = toInt(match[5] || 0) - tzMin;
							var s = toInt(match[6] || 0);
							var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
							timeSetter.call(date, h, m, s, ms);
							return date;
						}
						return string;
					}


					return function (date, format, timezone) {
						var text = '',
							parts = [],
							fn, match;

						format = format || 'mediumDate';
						format = $locale.DATETIME_FORMATS[format] || format;
						if (isString(date)) {
							date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
						}

						if (isNumber(date)) {
							date = new Date(date);
						}

						if (!isDate(date) || !isFinite(date.getTime())) {
							return date;
						}

						while (format) {
							match = DATE_FORMATS_SPLIT.exec(format);
							if (match) {
								parts = concat(parts, match, 1);
								format = parts.pop();
							} else {
								parts.push(format);
								format = null;
							}
						}

						var dateTimezoneOffset = date.getTimezoneOffset();
						if (timezone) {
							dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
							date = convertTimezoneToLocal(date, timezone, true);
						}
						forEach(parts, function (value) {
							fn = DATE_FORMATS[value];
							text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
								: value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
						});

						return text;
					};
				}


				/**
				 * @ngdoc filter
				 * @name json
				 * @kind function
				 *
				 * @description
				 *   Allows you to convert a JavaScript object into JSON string.
				 *
				 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
				 *   the binding is automatically converted to JSON.
				 *
				 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
				 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
				 * @returns {string} JSON string.
				 *
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
				 <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
	       });
				 </file>
				 </example>
				 *
				 */
				function jsonFilter() {
					return function (object, spacing) {
						if (isUndefined(spacing)) {
							spacing = 2;
						}
						return toJson(object, spacing);
					};
				}


				/**
				 * @ngdoc filter
				 * @name lowercase
				 * @kind function
				 * @description
				 * Converts string to lowercase.
				 * @see angular.lowercase
				 */
				var lowercaseFilter = valueFn(lowercase);


				/**
				 * @ngdoc filter
				 * @name uppercase
				 * @kind function
				 * @description
				 * Converts string to uppercase.
				 * @see angular.uppercase
				 */
				var uppercaseFilter = valueFn(uppercase);

				/**
				 * @ngdoc filter
				 * @name limitTo
				 * @kind function
				 *
				 * @description
				 * Creates a new array or string containing only a specified number of elements. The elements
				 * are taken from either the beginning or the end of the source array, string or number, as specified by
				 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
				 * converted to a string.
				 *
				 * @param {Array|string|number} input Source array, string or number to be limited.
				 * @param {string|number} limit The length of the returned array or string. If the `limit` number
				 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
				 *     If the number is negative, `limit` number  of items from the end of the source array/string
				 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
				 *     the input will be returned unchanged.
				 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`
				 *     indicates an offset from the end of `input`. Defaults to `0`.
				 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
				 *     had less than `limit` elements.
				 *
				 * @example
				 <example module="limitToExample">
				 <file name="index.html">
				 <script>
				 angular.module('limitToExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <label>
				 Limit {{numbers}} to:
				 <input type="number" step="1" ng-model="numLimit">
				 </label>
				 <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
				 <label>
				 Limit {{letters}} to:
				 <input type="number" step="1" ng-model="letterLimit">
				 </label>
				 <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
				 <label>
				 Limit {{longNumber}} to:
				 <input type="number" step="1" ng-model="longNumberLimit">
				 </label>
				 <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 var numLimitInput = element(by.model('numLimit'));
				 var letterLimitInput = element(by.model('letterLimit'));
				 var longNumberLimitInput = element(by.model('longNumberLimit'));
				 var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
				 var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
				 var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

				 it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });

				 // There is a bug in safari and protractor that doesn't like the minus key
				 // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });

				 it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
				 </file>
				 </example>
				 */
				function limitToFilter() {
					return function (input, limit, begin) {
						if (Math.abs(Number(limit)) === Infinity) {
							limit = Number(limit);
						} else {
							limit = toInt(limit);
						}
						if (isNaN(limit)) return input;

						if (isNumber(input)) input = input.toString();
						if (!isArray(input) && !isString(input)) return input;

						begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
						begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;

						if (limit >= 0) {
							return input.slice(begin, begin + limit);
						} else {
							if (begin === 0) {
								return input.slice(limit, input.length);
							} else {
								return input.slice(Math.max(0, begin + limit), begin);
							}
						}
					};
				}

				/**
				 * @ngdoc filter
				 * @name orderBy
				 * @kind function
				 *
				 * @description
				 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
				 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
				 * as expected, make sure they are actually being saved as numbers and not strings.
				 *
				 * @param {Array} array The array to sort.
				 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
				 *    used by the comparator to determine the order of elements.
				 *
				 *    Can be one of:
				 *
				 *    - `function`: Getter function. The result of this function will be sorted using the
				 *      `<`, `===`, `>` operator.
				 *    - `string`: An Angular expression. The result of this expression is used to compare elements
				 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
				 *      3 first characters of a property called `name`). The result of a constant expression
				 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
				 *      to sort object by the value of their `special name` property). An expression can be
				 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
				 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
				 *      element itself is used to compare where sorting.
				 *    - `Array`: An array of function or string predicates. The first predicate in the array
				 *      is used for sorting, but when two items are equivalent, the next predicate is used.
				 *
				 *    If the predicate is missing or empty then it defaults to `'+'`.
				 *
				 * @param {boolean=} reverse Reverse the order of the array.
				 * @returns {Array} Sorted copy of the source array.
				 *
				 *
				 * @example
				 * The example below demonstrates a simple ngRepeat, where the data is sorted
				 * by age in descending order (predicate is set to `'-age'`).
				 * `reverse` is not set, which means it defaults to `false`.
				 <example module="orderByExample">
				 <file name="index.html">
				 <script>
				 angular.module('orderByExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	             $scope.friends =
	                 [{name:'John', phone:'555-1212', age:10},
	                  {name:'Mary', phone:'555-9876', age:19},
	                  {name:'Mike', phone:'555-4321', age:21},
	                  {name:'Adam', phone:'555-5678', age:35},
	                  {name:'Julie', phone:'555-8765', age:29}];
	           }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <table class="friend">
				 <tr>
				 <th>Name</th>
				 <th>Phone Number</th>
				 <th>Age</th>
				 </tr>
				 <tr ng-repeat="friend in friends | orderBy:'-age'">
				 <td>{{friend.name}}</td>
				 <td>{{friend.phone}}</td>
				 <td>{{friend.age}}</td>
				 </tr>
				 </table>
				 </div>
				 </file>
				 </example>
				 *
				 * The predicate and reverse parameters can be controlled dynamically through scope properties,
				 * as shown in the next example.
				 * @example
				 <example module="orderByExample">
				 <file name="index.html">
				 <script>
				 angular.module('orderByExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	             $scope.friends =
	                 [{name:'John', phone:'555-1212', age:10},
	                  {name:'Mary', phone:'555-9876', age:19},
	                  {name:'Mike', phone:'555-4321', age:21},
	                  {name:'Adam', phone:'555-5678', age:35},
	                  {name:'Julie', phone:'555-8765', age:29}];
	             $scope.predicate = 'age';
	             $scope.reverse = true;
	             $scope.order = function(predicate) {
	               $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
	               $scope.predicate = predicate;
	             };
	           }]);
				 </script>
				 <style type="text/css">
				 .sortorder:after {
	           content: '\25b2';
	         }
				 .sortorder.reverse:after {
	           content: '\25bc';
	         }
				 </style>
				 <div ng-controller="ExampleController">
				 <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
				 <hr/>
				 [ <a href="" ng-click="predicate=''">unsorted</a> ]
				 <table class="friend">
				 <tr>
				 <th>
				 <a href="" ng-click="order('name')">Name</a>
				 <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
				 </th>
				 <th>
				 <a href="" ng-click="order('phone')">Phone Number</a>
				 <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
				 </th>
				 <th>
				 <a href="" ng-click="order('age')">Age</a>
				 <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
				 </th>
				 </tr>
				 <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
				 <td>{{friend.name}}</td>
				 <td>{{friend.phone}}</td>
				 <td>{{friend.age}}</td>
				 </tr>
				 </table>
				 </div>
				 </file>
				 </example>
				 *
				 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
				 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
				 * desired parameters.
				 *
				 * Example:
				 *
				 * @example
				 <example module="orderByExample">
				 <file name="index.html">
				 <div ng-controller="ExampleController">
				 <table class="friend">
				 <tr>
				 <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
				 (<a href="" ng-click="order('-name',false)">^</a>)</th>
				 <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
				 <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
				 </tr>
				 <tr ng-repeat="friend in friends">
				 <td>{{friend.name}}</td>
				 <td>{{friend.phone}}</td>
				 <td>{{friend.age}}</td>
				 </tr>
				 </table>
				 </div>
				 </file>

				 <file name="script.js">
				 angular.module('orderByExample', [])
				 .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
	          var orderBy = $filter('orderBy');
	          $scope.friends = [
	            { name: 'John',    phone: '555-1212',    age: 10 },
	            { name: 'Mary',    phone: '555-9876',    age: 19 },
	            { name: 'Mike',    phone: '555-4321',    age: 21 },
	            { name: 'Adam',    phone: '555-5678',    age: 35 },
	            { name: 'Julie',   phone: '555-8765',    age: 29 }
	          ];
	          $scope.order = function(predicate, reverse) {
	            $scope.friends = orderBy($scope.friends, predicate, reverse);
	          };
	          $scope.order('-age',false);
	        }]);
				 </file>
				 </example>
				 */
				orderByFilter.$inject = ['$parse'];
				function orderByFilter($parse) {
					return function (array, sortPredicate, reverseOrder) {

						if (!(isArrayLike(array))) return array;

						if (!isArray(sortPredicate)) {
							sortPredicate = [sortPredicate];
						}
						if (sortPredicate.length === 0) {
							sortPredicate = ['+'];
						}

						var predicates = processPredicates(sortPredicate, reverseOrder);

						// The next three lines are a version of a Swartzian Transform idiom from Perl
						// (sometimes called the Decorate-Sort-Undecorate idiom)
						// See https://en.wikipedia.org/wiki/Schwartzian_transform
						var compareValues = Array.prototype.map.call(array, getComparisonObject);
						compareValues.sort(doComparison);
						array = compareValues.map(function (item) {
							return item.value;
						});

						return array;

						function getComparisonObject(value, index) {
							return {
								value: value,
								predicateValues: predicates.map(function (predicate) {
									return getPredicateValue(predicate.get(value), index);
								})
							};
						}

						function doComparison(v1, v2) {
							var result = 0;
							for (var index = 0, length = predicates.length; index < length; ++index) {
								result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;
								if (result) break;
							}
							return result;
						}
					};

					function processPredicates(sortPredicate, reverseOrder) {
						reverseOrder = reverseOrder ? -1 : 1;
						return sortPredicate.map(function (predicate) {
							var descending = 1, get = identity;

							if (isFunction(predicate)) {
								get = predicate;
							} else if (isString(predicate)) {
								if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
									descending = predicate.charAt(0) == '-' ? -1 : 1;
									predicate = predicate.substring(1);
								}
								if (predicate !== '') {
									get = $parse(predicate);
									if (get.constant) {
										var key = get();
										get = function (value) {
											return value[key];
										};
									}
								}
							}
							return {get: get, descending: descending * reverseOrder};
						});
					}

					function isPrimitive(value) {
						switch (typeof value) {
							case 'number': /* falls through */
							case 'boolean': /* falls through */
							case 'string':
								return true;
							default:
								return false;
						}
					}

					function objectValue(value, index) {
						// If `valueOf` is a valid function use that
						if (typeof value.valueOf === 'function') {
							value = value.valueOf();
							if (isPrimitive(value)) return value;
						}
						// If `toString` is a valid function and not the one from `Object.prototype` use that
						if (hasCustomToString(value)) {
							value = value.toString();
							if (isPrimitive(value)) return value;
						}
						// We have a basic object so we use the position of the object in the collection
						return index;
					}

					function getPredicateValue(value, index) {
						var type = typeof value;
						if (value === null) {
							type = 'string';
							value = 'null';
						} else if (type === 'string') {
							value = value.toLowerCase();
						} else if (type === 'object') {
							value = objectValue(value, index);
						}
						return {value: value, type: type};
					}

					function compare(v1, v2) {
						var result = 0;
						if (v1.type === v2.type) {
							if (v1.value !== v2.value) {
								result = v1.value < v2.value ? -1 : 1;
							}
						} else {
							result = v1.type < v2.type ? -1 : 1;
						}
						return result;
					}
				}

				function ngDirective(directive) {
					if (isFunction(directive)) {
						directive = {
							link: directive
						};
					}
					directive.restrict = directive.restrict || 'AC';
					return valueFn(directive);
				}

				/**
				 * @ngdoc directive
				 * @name a
				 * @restrict E
				 *
				 * @description
				 * Modifies the default behavior of the html A tag so that the default action is prevented when
				 * the href attribute is empty.
				 *
				 * This change permits the easy creation of action links with the `ngClick` directive
				 * without changing the location or causing page reloads, e.g.:
				 * `<a href="" ng-click="list.addItem()">Add Item</a>`
				 */
				var htmlAnchorDirective = valueFn({
					restrict: 'E',
					compile: function (element, attr) {
						if (!attr.href && !attr.xlinkHref) {
							return function (scope, element) {
								// If the linked element is not an anchor tag anymore, do nothing
								if (element[0].nodeName.toLowerCase() !== 'a') return;

								// SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
								var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
									'xlink:href' : 'href';
								element.on('click', function (event) {
									// if we have no href url, then don't navigate anywhere.
									if (!element.attr(href)) {
										event.preventDefault();
									}
								});
							};
						}
					}
				});

				/**
				 * @ngdoc directive
				 * @name ngHref
				 * @restrict A
				 * @priority 99
				 *
				 * @description
				 * Using Angular markup like `{{hash}}` in an href attribute will
				 * make the link go to the wrong URL if the user clicks it before
				 * Angular has a chance to replace the `{{hash}}` markup with its
				 * value. Until Angular replaces the markup the link will be broken
				 * and will most likely return a 404 error. The `ngHref` directive
				 * solves this problem.
				 *
				 * The wrong way to write it:
				 * ```html
				 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
				 * ```
				 *
				 * The correct way to write it:
				 * ```html
				 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
				 * ```
				 *
				 * @element A
				 * @param {template} ngHref any string which can contain `{{}}` markup.
				 *
				 * @example
				 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
				 * in links and their different behaviors:
				 <example>
				 <file name="index.html">
				 <input ng-model="value" /><br />
				 <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
				 <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
				 <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
				 <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
				 <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
				 <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });

				 it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });

				 it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);
	
	          element(by.id('link-3')).click();
	
	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });

				 it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });

				 it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });

				 it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);
	
	          element(by.id('link-6')).click();
	
	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
				 </file>
				 </example>
				 */

				/**
				 * @ngdoc directive
				 * @name ngSrc
				 * @restrict A
				 * @priority 99
				 *
				 * @description
				 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
				 * work right: The browser will fetch from the URL with the literal
				 * text `{{hash}}` until Angular replaces the expression inside
				 * `{{hash}}`. The `ngSrc` directive solves this problem.
				 *
				 * The buggy way to write it:
				 * ```html
				 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
				 * ```
				 *
				 * The correct way to write it:
				 * ```html
				 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
				 * ```
				 *
				 * @element IMG
				 * @param {template} ngSrc any string which can contain `{{}}` markup.
				 */

				/**
				 * @ngdoc directive
				 * @name ngSrcset
				 * @restrict A
				 * @priority 99
				 *
				 * @description
				 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
				 * work right: The browser will fetch from the URL with the literal
				 * text `{{hash}}` until Angular replaces the expression inside
				 * `{{hash}}`. The `ngSrcset` directive solves this problem.
				 *
				 * The buggy way to write it:
				 * ```html
				 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
				 * ```
				 *
				 * The correct way to write it:
				 * ```html
				 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
				 * ```
				 *
				 * @element IMG
				 * @param {template} ngSrcset any string which can contain `{{}}` markup.
				 */

				/**
				 * @ngdoc directive
				 * @name ngDisabled
				 * @restrict A
				 * @priority 100
				 *
				 * @description
				 *
				 * This directive sets the `disabled` attribute on the element if the
				 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
				 *
				 * A special directive is necessary because we cannot use interpolation inside the `disabled`
				 * attribute.  The following example would make the button enabled on Chrome/Firefox
				 * but not on older IEs:
				 *
				 * ```html
				 * <!-- See below for an example of ng-disabled being used correctly -->
				 * <div ng-init="isDisabled = false">
				 *  <button disabled="{{isDisabled}}">Disabled</button>
				 * </div>
				 * ```
				 *
				 * This is because the HTML specification does not require browsers to preserve the values of
				 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)
				 * If we put an Angular interpolation expression into such an attribute then the
				 * binding information would be lost when the browser removes the attribute.
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
				 <button ng-model="button" ng-disabled="checked">Button</button>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
				 </file>
				 </example>
				 *
				 * @element INPUT
				 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
				 *     then the `disabled` attribute will be set on the element
				 */


				/**
				 * @ngdoc directive
				 * @name ngChecked
				 * @restrict A
				 * @priority 100
				 *
				 * @description
				 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
				 *
				 * Note that this directive should not be used together with {@link ngModel `ngModel`},
				 * as this can lead to unexpected behavior.
				 *
				 * ### Why do we need `ngChecked`?
				 *
				 * The HTML specification does not require browsers to preserve the values of boolean attributes
				 * such as checked. (Their presence means true and their absence means false.)
				 * If we put an Angular interpolation expression into such an attribute then the
				 * binding information would be lost when the browser removes the attribute.
				 * The `ngChecked` directive solves this problem for the `checked` attribute.
				 * This complementary directive is not removed by the browser and so provides
				 * a permanent reliable place to store the binding information.
				 * @example
				 <example>
				 <file name="index.html">
				 <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
				 <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
				 </file>
				 </example>
				 *
				 * @element INPUT
				 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
				 *     then the `checked` attribute will be set on the element
				 */


				/**
				 * @ngdoc directive
				 * @name ngReadonly
				 * @restrict A
				 * @priority 100
				 *
				 * @description
				 * The HTML specification does not require browsers to preserve the values of boolean attributes
				 * such as readonly. (Their presence means true and their absence means false.)
				 * If we put an Angular interpolation expression into such an attribute then the
				 * binding information would be lost when the browser removes the attribute.
				 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
				 * This complementary directive is not removed by the browser and so provides
				 * a permanent reliable place to store the binding information.
				 * @example
				 <example>
				 <file name="index.html">
				 <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
				 <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
				 </file>
				 </example>
				 *
				 * @element INPUT
				 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
				 *     then special attribute "readonly" will be set on the element
				 */


				/**
				 * @ngdoc directive
				 * @name ngSelected
				 * @restrict A
				 * @priority 100
				 *
				 * @description
				 * The HTML specification does not require browsers to preserve the values of boolean attributes
				 * such as selected. (Their presence means true and their absence means false.)
				 * If we put an Angular interpolation expression into such an attribute then the
				 * binding information would be lost when the browser removes the attribute.
				 * The `ngSelected` directive solves this problem for the `selected` attribute.
				 * This complementary directive is not removed by the browser and so provides
				 * a permanent reliable place to store the binding information.
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
				 <select aria-label="ngSelected demo">
				 <option>Hello!</option>
				 <option id="greet" ng-selected="selected">Greetings!</option>
				 </select>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
				 </file>
				 </example>
				 *
				 * @element OPTION
				 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
				 *     then special attribute "selected" will be set on the element
				 */

				/**
				 * @ngdoc directive
				 * @name ngOpen
				 * @restrict A
				 * @priority 100
				 *
				 * @description
				 * The HTML specification does not require browsers to preserve the values of boolean attributes
				 * such as open. (Their presence means true and their absence means false.)
				 * If we put an Angular interpolation expression into such an attribute then the
				 * binding information would be lost when the browser removes the attribute.
				 * The `ngOpen` directive solves this problem for the `open` attribute.
				 * This complementary directive is not removed by the browser and so provides
				 * a permanent reliable place to store the binding information.
				 * @example
				 <example>
				 <file name="index.html">
				 <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
				 <details id="details" ng-open="open">
				 <summary>Show/Hide me</summary>
				 </details>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
				 </file>
				 </example>
				 *
				 * @element DETAILS
				 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
				 *     then special attribute "open" will be set on the element
				 */

				var ngAttributeAliasDirectives = {};

				// boolean attrs are evaluated
				forEach(BOOLEAN_ATTR, function (propName, attrName) {
					// binding to multiple is not supported
					if (propName == "multiple") return;

					function defaultLinkFn(scope, element, attr) {
						scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
							attr.$set(attrName, !!value);
						});
					}

					var normalized = directiveNormalize('ng-' + attrName);
					var linkFn = defaultLinkFn;

					if (propName === 'checked') {
						linkFn = function (scope, element, attr) {
							// ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
							if (attr.ngModel !== attr[normalized]) {
								defaultLinkFn(scope, element, attr);
							}
						};
					}

					ngAttributeAliasDirectives[normalized] = function () {
						return {
							restrict: 'A',
							priority: 100,
							link: linkFn
						};
					};
				});

				// aliased input attrs are evaluated
				forEach(ALIASED_ATTR, function (htmlAttr, ngAttr) {
					ngAttributeAliasDirectives[ngAttr] = function () {
						return {
							priority: 100,
							link: function (scope, element, attr) {
								//special case ngPattern when a literal regular expression value
								//is used as the expression (this way we don't have to watch anything).
								if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
									var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
									if (match) {
										attr.$set("ngPattern", new RegExp(match[1], match[2]));
										return;
									}
								}

								scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
									attr.$set(ngAttr, value);
								});
							}
						};
					};
				});

				// ng-src, ng-srcset, ng-href are interpolated
				forEach(['src', 'srcset', 'href'], function (attrName) {
					var normalized = directiveNormalize('ng-' + attrName);
					ngAttributeAliasDirectives[normalized] = function () {
						return {
							priority: 99, // it needs to run after the attributes are interpolated
							link: function (scope, element, attr) {
								var propName = attrName,
									name = attrName;

								if (attrName === 'href' &&
									toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
									name = 'xlinkHref';
									attr.$attr[name] = 'xlink:href';
									propName = null;
								}

								attr.$observe(normalized, function (value) {
									if (!value) {
										if (attrName === 'href') {
											attr.$set(name, null);
										}
										return;
									}

									attr.$set(name, value);

									// on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
									// then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
									// to set the property as well to achieve the desired effect.
									// we use attr[attrName] value since $set can sanitize the url.
									if (msie && propName) element.prop(propName, attr[name]);
								});
							}
						};
					};
				});

				/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
				 */
				var nullFormCtrl = {
						$addControl: noop,
						$$renameControl: nullFormRenameControl,
						$removeControl: noop,
						$setValidity: noop,
						$setDirty: noop,
						$setPristine: noop,
						$setSubmitted: noop
					},
					SUBMITTED_CLASS = 'ng-submitted';

				function nullFormRenameControl(control, name) {
					control.$name = name;
				}

				/**
				 * @ngdoc type
				 * @name form.FormController
				 *
				 * @property {boolean} $pristine True if user has not interacted with the form yet.
				 * @property {boolean} $dirty True if user has already interacted with the form.
				 * @property {boolean} $valid True if all of the containing forms and controls are valid.
				 * @property {boolean} $invalid True if at least one containing control or form is invalid.
				 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
				 *
				 * @property {Object} $error Is an object hash, containing references to controls or
				 *  forms with failing validators, where:
				 *
				 *  - keys are validation tokens (error names),
				 *  - values are arrays of controls or forms that have a failing validator for given error name.
				 *
				 *  Built-in validation tokens:
				 *
				 *  - `email`
				 *  - `max`
				 *  - `maxlength`
				 *  - `min`
				 *  - `minlength`
				 *  - `number`
				 *  - `pattern`
				 *  - `required`
				 *  - `url`
				 *  - `date`
				 *  - `datetimelocal`
				 *  - `time`
				 *  - `week`
				 *  - `month`
				 *
				 * @description
				 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
				 * such as being valid/invalid or dirty/pristine.
				 *
				 * Each {@link ng.directive:form form} directive creates an instance
				 * of `FormController`.
				 *
				 */
					//asks for $scope to fool the BC controller module
				FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
				function FormController(element, attrs, $scope, $animate, $interpolate) {
					var form = this,
						controls = [];

					var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;

					// init state
					form.$error = {};
					form.$$success = {};
					form.$pending = undefined;
					form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
					form.$dirty = false;
					form.$pristine = true;
					form.$valid = true;
					form.$invalid = false;
					form.$submitted = false;

					parentForm.$addControl(form);

					/**
					 * @ngdoc method
					 * @name form.FormController#$rollbackViewValue
					 *
					 * @description
					 * Rollback all form controls pending updates to the `$modelValue`.
					 *
					 * Updates may be pending by a debounced event or because the input is waiting for a some future
					 * event defined in `ng-model-options`. This method is typically needed by the reset button of
					 * a form that uses `ng-model-options` to pend updates.
					 */
					form.$rollbackViewValue = function () {
						forEach(controls, function (control) {
							control.$rollbackViewValue();
						});
					};

					/**
					 * @ngdoc method
					 * @name form.FormController#$commitViewValue
					 *
					 * @description
					 * Commit all form controls pending updates to the `$modelValue`.
					 *
					 * Updates may be pending by a debounced event or because the input is waiting for a some future
					 * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
					 * usually handles calling this in response to input events.
					 */
					form.$commitViewValue = function () {
						forEach(controls, function (control) {
							control.$commitViewValue();
						});
					};

					/**
					 * @ngdoc method
					 * @name form.FormController#$addControl
					 *
					 * @description
					 * Register a control with the form.
					 *
					 * Input elements using ngModelController do this automatically when they are linked.
					 */
					form.$addControl = function (control) {
						// Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
						// and not added to the scope.  Now we throw an error.
						assertNotHasOwnProperty(control.$name, 'input');
						controls.push(control);

						if (control.$name) {
							form[control.$name] = control;
						}
					};

					// Private API: rename a form control
					form.$$renameControl = function (control, newName) {
						var oldName = control.$name;

						if (form[oldName] === control) {
							delete form[oldName];
						}
						form[newName] = control;
						control.$name = newName;
					};

					/**
					 * @ngdoc method
					 * @name form.FormController#$removeControl
					 *
					 * @description
					 * Deregister a control from the form.
					 *
					 * Input elements using ngModelController do this automatically when they are destroyed.
					 */
					form.$removeControl = function (control) {
						if (control.$name && form[control.$name] === control) {
							delete form[control.$name];
						}
						forEach(form.$pending, function (value, name) {
							form.$setValidity(name, null, control);
						});
						forEach(form.$error, function (value, name) {
							form.$setValidity(name, null, control);
						});
						forEach(form.$$success, function (value, name) {
							form.$setValidity(name, null, control);
						});

						arrayRemove(controls, control);
					};


					/**
					 * @ngdoc method
					 * @name form.FormController#$setValidity
					 *
					 * @description
					 * Sets the validity of a form control.
					 *
					 * This method will also propagate to parent forms.
					 */
					addSetValidityMethod({
						ctrl: this,
						$element: element,
						set: function (object, property, controller) {
							var list = object[property];
							if (!list) {
								object[property] = [controller];
							} else {
								var index = list.indexOf(controller);
								if (index === -1) {
									list.push(controller);
								}
							}
						},
						unset: function (object, property, controller) {
							var list = object[property];
							if (!list) {
								return;
							}
							arrayRemove(list, controller);
							if (list.length === 0) {
								delete object[property];
							}
						},
						parentForm: parentForm,
						$animate: $animate
					});

					/**
					 * @ngdoc method
					 * @name form.FormController#$setDirty
					 *
					 * @description
					 * Sets the form to a dirty state.
					 *
					 * This method can be called to add the 'ng-dirty' class and set the form to a dirty
					 * state (ng-dirty class). This method will also propagate to parent forms.
					 */
					form.$setDirty = function () {
						$animate.removeClass(element, PRISTINE_CLASS);
						$animate.addClass(element, DIRTY_CLASS);
						form.$dirty = true;
						form.$pristine = false;
						parentForm.$setDirty();
					};

					/**
					 * @ngdoc method
					 * @name form.FormController#$setPristine
					 *
					 * @description
					 * Sets the form to its pristine state.
					 *
					 * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
					 * state (ng-pristine class). This method will also propagate to all the controls contained
					 * in this form.
					 *
					 * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
					 * saving or resetting it.
					 */
					form.$setPristine = function () {
						$animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
						form.$dirty = false;
						form.$pristine = true;
						form.$submitted = false;
						forEach(controls, function (control) {
							control.$setPristine();
						});
					};

					/**
					 * @ngdoc method
					 * @name form.FormController#$setUntouched
					 *
					 * @description
					 * Sets the form to its untouched state.
					 *
					 * This method can be called to remove the 'ng-touched' class and set the form controls to their
					 * untouched state (ng-untouched class).
					 *
					 * Setting a form controls back to their untouched state is often useful when setting the form
					 * back to its pristine state.
					 */
					form.$setUntouched = function () {
						forEach(controls, function (control) {
							control.$setUntouched();
						});
					};

					/**
					 * @ngdoc method
					 * @name form.FormController#$setSubmitted
					 *
					 * @description
					 * Sets the form to its submitted state.
					 */
					form.$setSubmitted = function () {
						$animate.addClass(element, SUBMITTED_CLASS);
						form.$submitted = true;
						parentForm.$setSubmitted();
					};
				}

				/**
				 * @ngdoc directive
				 * @name ngForm
				 * @restrict EAC
				 *
				 * @description
				 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
				 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
				 * sub-group of controls needs to be determined.
				 *
				 * Note: the purpose of `ngForm` is to group controls,
				 * but not to be a replacement for the `<form>` tag with all of its capabilities
				 * (e.g. posting to the server, ...).
				 *
				 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
				 *                       related scope, under this name.
				 *
				 */

				/**
				 * @ngdoc directive
				 * @name form
				 * @restrict E
				 *
				 * @description
				 * Directive that instantiates
				 * {@link form.FormController FormController}.
				 *
				 * If the `name` attribute is specified, the form controller is published onto the current scope under
				 * this name.
				 *
				 * # Alias: {@link ng.directive:ngForm `ngForm`}
				 *
				 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
				 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
				 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
				 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
				 * using Angular validation directives in forms that are dynamically generated using the
				 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
				 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
				 * `ngForm` directive and nest these in an outer `form` element.
				 *
				 *
				 * # CSS classes
				 *  - `ng-valid` is set if the form is valid.
				 *  - `ng-invalid` is set if the form is invalid.
				 *  - `ng-pristine` is set if the form is pristine.
				 *  - `ng-dirty` is set if the form is dirty.
				 *  - `ng-submitted` is set if the form was submitted.
				 *
				 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
				 *
				 *
				 * # Submitting a form and preventing the default action
				 *
				 * Since the role of forms in client-side Angular applications is different than in classical
				 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
				 * page reload that sends the data to the server. Instead some javascript logic should be triggered
				 * to handle the form submission in an application-specific way.
				 *
				 * For this reason, Angular prevents the default action (form submission to the server) unless the
				 * `<form>` element has an `action` attribute specified.
				 *
				 * You can use one of the following two ways to specify what javascript method should be called when
				 * a form is submitted:
				 *
				 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
				 * - {@link ng.directive:ngClick ngClick} directive on the first
				 *  button or input field of type submit (input[type=submit])
				 *
				 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
				 * or {@link ng.directive:ngClick ngClick} directives.
				 * This is because of the following form submission rules in the HTML specification:
				 *
				 * - If a form has only one input field then hitting enter in this field triggers form submit
				 * (`ngSubmit`)
				 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
				 * doesn't trigger submit
				 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
				 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
				 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
				 *
				 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
				 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
				 * to have access to the updated model.
				 *
				 * ## Animation Hooks
				 *
				 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
				 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
				 * other validations that are performed within the form. Animations in ngForm are similar to how
				 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
				 * as JS animations.
				 *
				 * The following example shows a simple way to utilize CSS transitions to style a form element
				 * that has been rendered as invalid after it has been validated:
				 *
				 * <pre>
				 * //be sure to include ngAnimate as a module to hook into more
				 * //advanced animations
				 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
				 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
				 * </pre>
				 *
				 * @example
				 <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
				 <file name="index.html">
				 <script>
				 angular.module('formExample', [])
				 .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
				 </script>
				 <style>
				 .my-form {
	          -webkit-transition:all linear 0.5s;
	          transition:all linear 0.5s;
	          background: transparent;
	        }
				 .my-form.ng-invalid {
	          background: red;
	        }
				 </style>
				 <form name="myForm" ng-controller="FormController" class="my-form">
				 userType: <input name="input" ng-model="userType" required>
				 <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
				 <code>userType = {{userType}}</code><br>
				 <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
				 <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
				 <code>myForm.$valid = {{myForm.$valid}}</code><br>
				 <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
				 </form>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	
	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });

				 it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));
	
	          userInput.clear();
	          userInput.sendKeys('');
	
	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
				 </file>
				 </example>
				 *
				 * @param {string=} name Name of the form. If specified, the form controller will be published into
				 *                       related scope, under this name.
				 */
				var formDirectiveFactory = function (isNgForm) {
					return ['$timeout', function ($timeout) {
						var formDirective = {
							name: 'form',
							restrict: isNgForm ? 'EAC' : 'E',
							controller: FormController,
							compile: function ngFormCompile(formElement, attr) {
								// Setup initial state of the control
								formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

								var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

								return {
									pre: function ngFormPreLink(scope, formElement, attr, controller) {
										// if `action` attr is not present on the form, prevent the default action (submission)
										if (!('action' in attr)) {
											// we can't use jq events because if a form is destroyed during submission the default
											// action is not prevented. see #1238
											//
											// IE 9 is not affected because it doesn't fire a submit event and try to do a full
											// page reload if the form was destroyed by submission of the form via a click handler
											// on a button in the form. Looks like an IE9 specific bug.
											var handleFormSubmission = function (event) {
												scope.$apply(function () {
													controller.$commitViewValue();
													controller.$setSubmitted();
												});

												event.preventDefault();
											};

											addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

											// unregister the preventDefault listener so that we don't not leak memory but in a
											// way that will achieve the prevention of the default action.
											formElement.on('$destroy', function () {
												$timeout(function () {
													removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
												}, 0, false);
											});
										}

										var parentFormCtrl = controller.$$parentForm;

										if (nameAttr) {
											setter(scope, controller.$name, controller, controller.$name);
											attr.$observe(nameAttr, function (newValue) {
												if (controller.$name === newValue) return;
												setter(scope, controller.$name, undefined, controller.$name);
												parentFormCtrl.$$renameControl(controller, newValue);
												setter(scope, controller.$name, controller, controller.$name);
											});
										}
										formElement.on('$destroy', function () {
											parentFormCtrl.$removeControl(controller);
											if (nameAttr) {
												setter(scope, attr[nameAttr], undefined, controller.$name);
											}
											extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
										});
									}
								};
							}
						};

						return formDirective;
					}];
				};

				var formDirective = formDirectiveFactory();
				var ngFormDirective = formDirectiveFactory(true);

				/* global VALID_CLASS: false,
				 INVALID_CLASS: false,
				 PRISTINE_CLASS: false,
				 DIRTY_CLASS: false,
				 UNTOUCHED_CLASS: false,
				 TOUCHED_CLASS: false,
				 $ngModelMinErr: false,
				 */

				// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
				var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
				var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
				var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
				var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
				var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
				var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
				var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
				var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
				var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

				var inputType = {

					/**
					 * @ngdoc input
					 * @name input[text]
					 *
					 * @description
					 * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
					 *
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {string=} required Adds `required` validation error key if the value is not entered.
					 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
					 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
					 *    `required` when you want to data-bind to the `required` attribute.
					 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
					 *    minlength.
					 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
					 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
					 *    any length.
					 * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
					 *    that contains the regular expression body that will be converted to a regular expression
					 *    as in the ngPattern directive.
					 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
					 *    a RegExp found by evaluating the Angular expression given in the attribute value.
					 *    If the expression evaluates to a RegExp object, then this is used directly.
					 *    If the expression evaluates to a string, then it will be converted to a RegExp
					 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
					 *    `new RegExp('^abc$')`.<br />
					 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
					 *    start at the index of the last search's match, thus not taking the whole input value into
					 *    account.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
					 *    This parameter is ignored for input[type=password] controls, which will never trim the
					 *    input.
					 *
					 * @example
					 <example name="text-input-directive" module="textInputExample">
					 <file name="index.html">
					 <script>
					 angular.module('textInputExample', [])
					 .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
					 </script>
					 <form name="myForm" ng-controller="ExampleController">
					 <label>Single word:
					 <input type="text" name="input" ng-model="example.text"
					 ng-pattern="example.word" required ng-trim="false">
					 </label>
					 <div role="alert">
					 <span class="error" ng-show="myForm.input.$error.required">
					 Required!</span>
					 <span class="error" ng-show="myForm.input.$error.pattern">
					 Single word only!</span>
					 </div>
					 <tt>text = {{example.text}}</tt><br/>
					 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
					 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
					 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
					 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
					 </form>
					 </file>
					 <file name="protractor.js" type="protractor">
					 var text = element(by.binding('example.text'));
					 var valid = element(by.binding('myForm.input.$valid'));
					 var input = element(by.model('example.text'));

					 it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });

					 it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

					 it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');
	
	            expect(valid.getText()).toContain('false');
	          });
					 </file>
					 </example>
					 */
					'text': textInputType,

					/**
					 * @ngdoc input
					 * @name input[date]
					 *
					 * @description
					 * Input with date validation and transformation. In browsers that do not yet support
					 * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
					 * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
					 * modern browsers do not yet support this input type, it is important to provide cues to users on the
					 * expected input format via a placeholder or label.
					 *
					 * The model must always be a Date object, otherwise Angular will throw an error.
					 * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
					 *
					 * The timezone to be used to read/write the `Date` instance in the model can be defined using
					 * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
					 * valid ISO date string (yyyy-MM-dd).
					 * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
					 * a valid ISO date string (yyyy-MM-dd).
					 * @param {string=} required Sets `required` validation error key if the value is not entered.
					 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
					 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
					 *    `required` when you want to data-bind to the `required` attribute.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 *
					 * @example
					 <example name="date-input-directive" module="dateInputExample">
					 <file name="index.html">
					 <script>
					 angular.module('dateInputExample', [])
					 .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
					 </script>
					 <form name="myForm" ng-controller="DateController as dateCtrl">
					 <label for="exampleInput">Pick a date in 2013:</label>
					 <input type="date" id="exampleInput" name="input" ng-model="example.value"
					 placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
					 <div role="alert">
					 <span class="error" ng-show="myForm.input.$error.required">
					 Required!</span>
					 <span class="error" ng-show="myForm.input.$error.date">
					 Not a valid date!</span>
					 </div>
					 <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
					 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
					 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
					 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
					 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
					 </form>
					 </file>
					 <file name="protractor.js" type="protractor">
					 var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
					 var valid = element(by.binding('myForm.input.$valid'));
					 var input = element(by.model('example.value'));

					 // currently protractor/webdriver does not support
					 // sending keys to all known HTML5 input controls
					 // for various browsers (see https://github.com/angular/protractor/issues/562).
					 function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }

					 it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });

					 it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });

					 it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
					 </file>
					 </example>
					 */
					'date': createDateInputType('date', DATE_REGEXP,
						createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
						'yyyy-MM-dd'),

					/**
					 * @ngdoc input
					 * @name input[datetime-local]
					 *
					 * @description
					 * Input with datetime validation and transformation. In browsers that do not yet support
					 * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
					 * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
					 *
					 * The model must always be a Date object, otherwise Angular will throw an error.
					 * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
					 *
					 * The timezone to be used to read/write the `Date` instance in the model can be defined using
					 * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
					 * valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
					 * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
					 * a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
					 * @param {string=} required Sets `required` validation error key if the value is not entered.
					 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
					 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
					 *    `required` when you want to data-bind to the `required` attribute.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 *
					 * @example
					 <example name="datetimelocal-input-directive" module="dateExample">
					 <file name="index.html">
					 <script>
					 angular.module('dateExample', [])
					 .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
					 </script>
					 <form name="myForm" ng-controller="DateController as dateCtrl">
					 <label for="exampleInput">Pick a date between in 2013:</label>
					 <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
					 placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
					 <div role="alert">
					 <span class="error" ng-show="myForm.input.$error.required">
					 Required!</span>
					 <span class="error" ng-show="myForm.input.$error.datetimelocal">
					 Not a valid date!</span>
					 </div>
					 <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
					 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
					 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
					 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
					 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
					 </form>
					 </file>
					 <file name="protractor.js" type="protractor">
					 var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
					 var valid = element(by.binding('myForm.input.$valid'));
					 var input = element(by.model('example.value'));

					 // currently protractor/webdriver does not support
					 // sending keys to all known HTML5 input controls
					 // for various browsers (https://github.com/angular/protractor/issues/562).
					 function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

					 it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

					 it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

					 it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
					 </file>
					 </example>
					 */
					'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
						createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
						'yyyy-MM-ddTHH:mm:ss.sss'),

					/**
					 * @ngdoc input
					 * @name input[time]
					 *
					 * @description
					 * Input with time validation and transformation. In browsers that do not yet support
					 * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
					 * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
					 * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
					 *
					 * The model must always be a Date object, otherwise Angular will throw an error.
					 * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
					 *
					 * The timezone to be used to read/write the `Date` instance in the model can be defined using
					 * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
					 * valid ISO time format (HH:mm:ss).
					 * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be a
					 * valid ISO time format (HH:mm:ss).
					 * @param {string=} required Sets `required` validation error key if the value is not entered.
					 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
					 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
					 *    `required` when you want to data-bind to the `required` attribute.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 *
					 * @example
					 <example name="time-input-directive" module="timeExample">
					 <file name="index.html">
					 <script>
					 angular.module('timeExample', [])
					 .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
					 </script>
					 <form name="myForm" ng-controller="DateController as dateCtrl">
					 <label for="exampleInput">Pick a between 8am and 5pm:</label>
					 <input type="time" id="exampleInput" name="input" ng-model="example.value"
					 placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
					 <div role="alert">
					 <span class="error" ng-show="myForm.input.$error.required">
					 Required!</span>
					 <span class="error" ng-show="myForm.input.$error.time">
					 Not a valid date!</span>
					 </div>
					 <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
					 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
					 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
					 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
					 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
					 </form>
					 </file>
					 <file name="protractor.js" type="protractor">
					 var value = element(by.binding('example.value | date: "HH:mm:ss"'));
					 var valid = element(by.binding('myForm.input.$valid'));
					 var input = element(by.model('example.value'));

					 // currently protractor/webdriver does not support
					 // sending keys to all known HTML5 input controls
					 // for various browsers (https://github.com/angular/protractor/issues/562).
					 function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

					 it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

					 it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

					 it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
					 </file>
					 </example>
					 */
					'time': createDateInputType('time', TIME_REGEXP,
						createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
						'HH:mm:ss.sss'),

					/**
					 * @ngdoc input
					 * @name input[week]
					 *
					 * @description
					 * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
					 * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
					 * week format (yyyy-W##), for example: `2013-W02`.
					 *
					 * The model must always be a Date object, otherwise Angular will throw an error.
					 * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
					 *
					 * The timezone to be used to read/write the `Date` instance in the model can be defined using
					 * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
					 * valid ISO week format (yyyy-W##).
					 * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
					 * a valid ISO week format (yyyy-W##).
					 * @param {string=} required Sets `required` validation error key if the value is not entered.
					 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
					 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
					 *    `required` when you want to data-bind to the `required` attribute.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 *
					 * @example
					 <example name="week-input-directive" module="weekExample">
					 <file name="index.html">
					 <script>
					 angular.module('weekExample', [])
					 .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
					 </script>
					 <form name="myForm" ng-controller="DateController as dateCtrl">
					 <label>Pick a date between in 2013:
					 <input id="exampleInput" type="week" name="input" ng-model="example.value"
					 placeholder="YYYY-W##" min="2012-W32"
					 max="2013-W52" required />
					 </label>
					 <div role="alert">
					 <span class="error" ng-show="myForm.input.$error.required">
					 Required!</span>
					 <span class="error" ng-show="myForm.input.$error.week">
					 Not a valid date!</span>
					 </div>
					 <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
					 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
					 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
					 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
					 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
					 </form>
					 </file>
					 <file name="protractor.js" type="protractor">
					 var value = element(by.binding('example.value | date: "yyyy-Www"'));
					 var valid = element(by.binding('myForm.input.$valid'));
					 var input = element(by.model('example.value'));

					 // currently protractor/webdriver does not support
					 // sending keys to all known HTML5 input controls
					 // for various browsers (https://github.com/angular/protractor/issues/562).
					 function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

					 it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

					 it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

					 it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
					 </file>
					 </example>
					 */
					'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

					/**
					 * @ngdoc input
					 * @name input[month]
					 *
					 * @description
					 * Input with month validation and transformation. In browsers that do not yet support
					 * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
					 * month format (yyyy-MM), for example: `2009-01`.
					 *
					 * The model must always be a Date object, otherwise Angular will throw an error.
					 * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
					 * If the model is not set to the first of the month, the next view to model update will set it
					 * to the first of the month.
					 *
					 * The timezone to be used to read/write the `Date` instance in the model can be defined using
					 * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be
					 * a valid ISO month format (yyyy-MM).
					 * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must
					 * be a valid ISO month format (yyyy-MM).
					 * @param {string=} required Sets `required` validation error key if the value is not entered.
					 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
					 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
					 *    `required` when you want to data-bind to the `required` attribute.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 *
					 * @example
					 <example name="month-input-directive" module="monthExample">
					 <file name="index.html">
					 <script>
					 angular.module('monthExample', [])
					 .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
					 </script>
					 <form name="myForm" ng-controller="DateController as dateCtrl">
					 <label for="exampleInput">Pick a month in 2013:</label>
					 <input id="exampleInput" type="month" name="input" ng-model="example.value"
					 placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
					 <div role="alert">
					 <span class="error" ng-show="myForm.input.$error.required">
					 Required!</span>
					 <span class="error" ng-show="myForm.input.$error.month">
					 Not a valid month!</span>
					 </div>
					 <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
					 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
					 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
					 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
					 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
					 </form>
					 </file>
					 <file name="protractor.js" type="protractor">
					 var value = element(by.binding('example.value | date: "yyyy-MM"'));
					 var valid = element(by.binding('myForm.input.$valid'));
					 var input = element(by.model('example.value'));

					 // currently protractor/webdriver does not support
					 // sending keys to all known HTML5 input controls
					 // for various browsers (https://github.com/angular/protractor/issues/562).
					 function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

					 it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

					 it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

					 it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
					 </file>
					 </example>
					 */
					'month': createDateInputType('month', MONTH_REGEXP,
						createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
						'yyyy-MM'),

					/**
					 * @ngdoc input
					 * @name input[number]
					 *
					 * @description
					 * Text input with number validation and transformation. Sets the `number` validation
					 * error if not a valid number.
					 *
					 * <div class="alert alert-warning">
					 * The model must always be of type `number` otherwise Angular will throw an error.
					 * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
					 * error docs for more information and an example of how to convert your model if necessary.
					 * </div>
					 *
					 * ## Issues with HTML5 constraint validation
					 *
					 * In browsers that follow the
					 * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
					 * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
					 * If a non-number is entered in the input, the browser will report the value as an empty string,
					 * which means the view / model values in `ngModel` and subsequently the scope value
					 * will also be an empty string.
					 *
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
					 * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
					 * @param {string=} required Sets `required` validation error key if the value is not entered.
					 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
					 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
					 *    `required` when you want to data-bind to the `required` attribute.
					 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
					 *    minlength.
					 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
					 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
					 *    any length.
					 * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
					 *    that contains the regular expression body that will be converted to a regular expression
					 *    as in the ngPattern directive.
					 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
					 *    a RegExp found by evaluating the Angular expression given in the attribute value.
					 *    If the expression evaluates to a RegExp object, then this is used directly.
					 *    If the expression evaluates to a string, then it will be converted to a RegExp
					 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
					 *    `new RegExp('^abc$')`.<br />
					 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
					 *    start at the index of the last search's match, thus not taking the whole input value into
					 *    account.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 *
					 * @example
					 <example name="number-input-directive" module="numberExample">
					 <file name="index.html">
					 <script>
					 angular.module('numberExample', [])
					 .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
					 </script>
					 <form name="myForm" ng-controller="ExampleController">
					 <label>Number:
					 <input type="number" name="input" ng-model="example.value"
					 min="0" max="99" required>
					 </label>
					 <div role="alert">
					 <span class="error" ng-show="myForm.input.$error.required">
					 Required!</span>
					 <span class="error" ng-show="myForm.input.$error.number">
					 Not valid number!</span>
					 </div>
					 <tt>value = {{example.value}}</tt><br/>
					 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
					 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
					 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
					 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
					 </form>
					 </file>
					 <file name="protractor.js" type="protractor">
					 var value = element(by.binding('example.value'));
					 var valid = element(by.binding('myForm.input.$valid'));
					 var input = element(by.model('example.value'));

					 it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });

					 it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });

					 it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
					 </file>
					 </example>
					 */
					'number': numberInputType,


					/**
					 * @ngdoc input
					 * @name input[url]
					 *
					 * @description
					 * Text input with URL validation. Sets the `url` validation error key if the content is not a
					 * valid URL.
					 *
					 * <div class="alert alert-warning">
					 * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
					 * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
					 * the built-in validators (see the {@link guide/forms Forms guide})
					 * </div>
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {string=} required Sets `required` validation error key if the value is not entered.
					 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
					 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
					 *    `required` when you want to data-bind to the `required` attribute.
					 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
					 *    minlength.
					 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
					 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
					 *    any length.
					 * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
					 *    that contains the regular expression body that will be converted to a regular expression
					 *    as in the ngPattern directive.
					 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
					 *    a RegExp found by evaluating the Angular expression given in the attribute value.
					 *    If the expression evaluates to a RegExp object, then this is used directly.
					 *    If the expression evaluates to a string, then it will be converted to a RegExp
					 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
					 *    `new RegExp('^abc$')`.<br />
					 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
					 *    start at the index of the last search's match, thus not taking the whole input value into
					 *    account.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 *
					 * @example
					 <example name="url-input-directive" module="urlExample">
					 <file name="index.html">
					 <script>
					 angular.module('urlExample', [])
					 .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
					 </script>
					 <form name="myForm" ng-controller="ExampleController">
					 <label>URL:
					 <input type="url" name="input" ng-model="url.text" required>
					 <label>
					 <div role="alert">
					 <span class="error" ng-show="myForm.input.$error.required">
					 Required!</span>
					 <span class="error" ng-show="myForm.input.$error.url">
					 Not valid url!</span>
					 </div>
					 <tt>text = {{url.text}}</tt><br/>
					 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
					 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
					 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
					 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
					 <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
					 </form>
					 </file>
					 <file name="protractor.js" type="protractor">
					 var text = element(by.binding('url.text'));
					 var valid = element(by.binding('myForm.input.$valid'));
					 var input = element(by.model('url.text'));

					 it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });

					 it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

					 it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');
	
	            expect(valid.getText()).toContain('false');
	          });
					 </file>
					 </example>
					 */
					'url': urlInputType,


					/**
					 * @ngdoc input
					 * @name input[email]
					 *
					 * @description
					 * Text input with email validation. Sets the `email` validation error key if not a valid email
					 * address.
					 *
					 * <div class="alert alert-warning">
					 * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
					 * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
					 * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
					 * </div>
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {string=} required Sets `required` validation error key if the value is not entered.
					 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
					 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
					 *    `required` when you want to data-bind to the `required` attribute.
					 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
					 *    minlength.
					 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
					 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
					 *    any length.
					 * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
					 *    that contains the regular expression body that will be converted to a regular expression
					 *    as in the ngPattern directive.
					 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
					 *    a RegExp found by evaluating the Angular expression given in the attribute value.
					 *    If the expression evaluates to a RegExp object, then this is used directly.
					 *    If the expression evaluates to a string, then it will be converted to a RegExp
					 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
					 *    `new RegExp('^abc$')`.<br />
					 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
					 *    start at the index of the last search's match, thus not taking the whole input value into
					 *    account.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 *
					 * @example
					 <example name="email-input-directive" module="emailExample">
					 <file name="index.html">
					 <script>
					 angular.module('emailExample', [])
					 .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
					 </script>
					 <form name="myForm" ng-controller="ExampleController">
					 <label>Email:
					 <input type="email" name="input" ng-model="email.text" required>
					 </label>
					 <div role="alert">
					 <span class="error" ng-show="myForm.input.$error.required">
					 Required!</span>
					 <span class="error" ng-show="myForm.input.$error.email">
					 Not valid email!</span>
					 </div>
					 <tt>text = {{email.text}}</tt><br/>
					 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
					 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
					 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
					 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
					 <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
					 </form>
					 </file>
					 <file name="protractor.js" type="protractor">
					 var text = element(by.binding('email.text'));
					 var valid = element(by.binding('myForm.input.$valid'));
					 var input = element(by.model('email.text'));

					 it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });

					 it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

					 it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');
	
	            expect(valid.getText()).toContain('false');
	          });
					 </file>
					 </example>
					 */
					'email': emailInputType,


					/**
					 * @ngdoc input
					 * @name input[radio]
					 *
					 * @description
					 * HTML radio button.
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string} value The value to which the `ngModel` expression should be set when selected.
					 *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
					 *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
					 *    is selected. Should be used instead of the `value` attribute if you need
					 *    a non-string `ngModel` (`boolean`, `array`, ...).
					 *
					 * @example
					 <example name="radio-input-directive" module="radioExample">
					 <file name="index.html">
					 <script>
					 angular.module('radioExample', [])
					 .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
					 </script>
					 <form name="myForm" ng-controller="ExampleController">
					 <label>
					 <input type="radio" ng-model="color.name" value="red">
					 Red
					 </label><br/>
					 <label>
					 <input type="radio" ng-model="color.name" ng-value="specialValue">
					 Green
					 </label><br/>
					 <label>
					 <input type="radio" ng-model="color.name" value="blue">
					 Blue
					 </label><br/>
					 <tt>color = {{color.name | json}}</tt><br/>
					 </form>
					 Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
					 </file>
					 <file name="protractor.js" type="protractor">
					 it('should change state', function() {
	            var color = element(by.binding('color.name'));
	
	            expect(color.getText()).toContain('blue');
	
	            element.all(by.model('color.name')).get(0).click();
	
	            expect(color.getText()).toContain('red');
	          });
					 </file>
					 </example>
					 */
					'radio': radioInputType,


					/**
					 * @ngdoc input
					 * @name input[checkbox]
					 *
					 * @description
					 * HTML checkbox.
					 *
					 * @param {string} ngModel Assignable angular expression to data-bind to.
					 * @param {string=} name Property name of the form under which the control is published.
					 * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
					 * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
					 * @param {string=} ngChange Angular expression to be executed when input changes due to user
					 *    interaction with the input element.
					 *
					 * @example
					 <example name="checkbox-input-directive" module="checkboxExample">
					 <file name="index.html">
					 <script>
					 angular.module('checkboxExample', [])
					 .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
					 </script>
					 <form name="myForm" ng-controller="ExampleController">
					 <label>Value1:
					 <input type="checkbox" ng-model="checkboxModel.value1">
					 </label><br/>
					 <label>Value2:
					 <input type="checkbox" ng-model="checkboxModel.value2"
					 ng-true-value="'YES'" ng-false-value="'NO'">
					 </label><br/>
					 <tt>value1 = {{checkboxModel.value1}}</tt><br/>
					 <tt>value2 = {{checkboxModel.value2}}</tt><br/>
					 </form>
					 </file>
					 <file name="protractor.js" type="protractor">
					 it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));
	
	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');
	
	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();
	
	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
					 </file>
					 </example>
					 */
					'checkbox': checkboxInputType,

					'hidden': noop,
					'button': noop,
					'submit': noop,
					'reset': noop,
					'file': noop
				};

				function stringBasedInputType(ctrl) {
					ctrl.$formatters.push(function (value) {
						return ctrl.$isEmpty(value) ? value : value.toString();
					});
				}

				function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
					baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
					stringBasedInputType(ctrl);
				}

				function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
					var type = lowercase(element[0].type);

					// In composition mode, users are still inputing intermediate text buffer,
					// hold the listener until composition is done.
					// More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
					if (!$sniffer.android) {
						var composing = false;

						element.on('compositionstart', function (data) {
							composing = true;
						});

						element.on('compositionend', function () {
							composing = false;
							listener();
						});
					}

					var listener = function (ev) {
						if (timeout) {
							$browser.defer.cancel(timeout);
							timeout = null;
						}
						if (composing) return;
						var value = element.val(),
							event = ev && ev.type;

						// By default we will trim the value
						// If the attribute ng-trim exists we will avoid trimming
						// If input type is 'password', the value is never trimmed
						if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
							value = trim(value);
						}

						// If a control is suffering from bad input (due to native validators), browsers discard its
						// value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
						// control's value is the same empty value twice in a row.
						if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
							ctrl.$setViewValue(value, event);
						}
					};

					// if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
					// input event on backspace, delete or cut
					if ($sniffer.hasEvent('input')) {
						element.on('input', listener);
					} else {
						var timeout;

						var deferListener = function (ev, input, origValue) {
							if (!timeout) {
								timeout = $browser.defer(function () {
									timeout = null;
									if (!input || input.value !== origValue) {
										listener(ev);
									}
								});
							}
						};

						element.on('keydown', function (event) {
							var key = event.keyCode;

							// ignore
							//    command            modifiers                   arrows
							if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

							deferListener(event, this, this.value);
						});

						// if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
						if ($sniffer.hasEvent('paste')) {
							element.on('paste cut', deferListener);
						}
					}

					// if user paste into input using mouse on older browser
					// or form autocomplete on newer browser, we need "change" event to catch it
					element.on('change', listener);

					ctrl.$render = function () {
						element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
					};
				}

				function weekParser(isoWeek, existingDate) {
					if (isDate(isoWeek)) {
						return isoWeek;
					}

					if (isString(isoWeek)) {
						WEEK_REGEXP.lastIndex = 0;
						var parts = WEEK_REGEXP.exec(isoWeek);
						if (parts) {
							var year = +parts[1],
								week = +parts[2],
								hours = 0,
								minutes = 0,
								seconds = 0,
								milliseconds = 0,
								firstThurs = getFirstThursdayOfYear(year),
								addDays = (week - 1) * 7;

							if (existingDate) {
								hours = existingDate.getHours();
								minutes = existingDate.getMinutes();
								seconds = existingDate.getSeconds();
								milliseconds = existingDate.getMilliseconds();
							}

							return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
						}
					}

					return NaN;
				}

				function createDateParser(regexp, mapping) {
					return function (iso, date) {
						var parts, map;

						if (isDate(iso)) {
							return iso;
						}

						if (isString(iso)) {
							// When a date is JSON'ified to wraps itself inside of an extra
							// set of double quotes. This makes the date parsing code unable
							// to match the date string and parse it as a date.
							if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
								iso = iso.substring(1, iso.length - 1);
							}
							if (ISO_DATE_REGEXP.test(iso)) {
								return new Date(iso);
							}
							regexp.lastIndex = 0;
							parts = regexp.exec(iso);

							if (parts) {
								parts.shift();
								if (date) {
									map = {
										yyyy: date.getFullYear(),
										MM: date.getMonth() + 1,
										dd: date.getDate(),
										HH: date.getHours(),
										mm: date.getMinutes(),
										ss: date.getSeconds(),
										sss: date.getMilliseconds() / 1000
									};
								} else {
									map = {yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0};
								}

								forEach(parts, function (part, index) {
									if (index < mapping.length) {
										map[mapping[index]] = +part;
									}
								});
								return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
							}
						}

						return NaN;
					};
				}

				function createDateInputType(type, regexp, parseDate, format) {
					return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
						badInputChecker(scope, element, attr, ctrl);
						baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
						var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
						var previousDate;

						ctrl.$$parserName = type;
						ctrl.$parsers.push(function (value) {
							if (ctrl.$isEmpty(value)) return null;
							if (regexp.test(value)) {
								// Note: We cannot read ctrl.$modelValue, as there might be a different
								// parser/formatter in the processing chain so that the model
								// contains some different data format!
								var parsedDate = parseDate(value, previousDate);
								if (timezone) {
									parsedDate = convertTimezoneToLocal(parsedDate, timezone);
								}
								return parsedDate;
							}
							return undefined;
						});

						ctrl.$formatters.push(function (value) {
							if (value && !isDate(value)) {
								throw $ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
							}
							if (isValidDate(value)) {
								previousDate = value;
								if (previousDate && timezone) {
									previousDate = convertTimezoneToLocal(previousDate, timezone, true);
								}
								return $filter('date')(value, format, timezone);
							} else {
								previousDate = null;
								return '';
							}
						});

						if (isDefined(attr.min) || attr.ngMin) {
							var minVal;
							ctrl.$validators.min = function (value) {
								return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
							};
							attr.$observe('min', function (val) {
								minVal = parseObservedDateValue(val);
								ctrl.$validate();
							});
						}

						if (isDefined(attr.max) || attr.ngMax) {
							var maxVal;
							ctrl.$validators.max = function (value) {
								return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
							};
							attr.$observe('max', function (val) {
								maxVal = parseObservedDateValue(val);
								ctrl.$validate();
							});
						}

						function isValidDate(value) {
							// Invalid Date: getTime() returns NaN
							return value && !(value.getTime && value.getTime() !== value.getTime());
						}

						function parseObservedDateValue(val) {
							return isDefined(val) ? (isDate(val) ? val : parseDate(val)) : undefined;
						}
					};
				}

				function badInputChecker(scope, element, attr, ctrl) {
					var node = element[0];
					var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
					if (nativeValidation) {
						ctrl.$parsers.push(function (value) {
							var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
							// Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):
							// - also sets validity.badInput (should only be validity.typeMismatch).
							// - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)
							// - can ignore this case as we can still read out the erroneous email...
							return validity.badInput && !validity.typeMismatch ? undefined : value;
						});
					}
				}

				function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
					badInputChecker(scope, element, attr, ctrl);
					baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

					ctrl.$$parserName = 'number';
					ctrl.$parsers.push(function (value) {
						if (ctrl.$isEmpty(value))      return null;
						if (NUMBER_REGEXP.test(value)) return parseFloat(value);
						return undefined;
					});

					ctrl.$formatters.push(function (value) {
						if (!ctrl.$isEmpty(value)) {
							if (!isNumber(value)) {
								throw $ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
							}
							value = value.toString();
						}
						return value;
					});

					if (isDefined(attr.min) || attr.ngMin) {
						var minVal;
						ctrl.$validators.min = function (value) {
							return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
						};

						attr.$observe('min', function (val) {
							if (isDefined(val) && !isNumber(val)) {
								val = parseFloat(val, 10);
							}
							minVal = isNumber(val) && !isNaN(val) ? val : undefined;
							// TODO(matsko): implement validateLater to reduce number of validations
							ctrl.$validate();
						});
					}

					if (isDefined(attr.max) || attr.ngMax) {
						var maxVal;
						ctrl.$validators.max = function (value) {
							return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
						};

						attr.$observe('max', function (val) {
							if (isDefined(val) && !isNumber(val)) {
								val = parseFloat(val, 10);
							}
							maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
							// TODO(matsko): implement validateLater to reduce number of validations
							ctrl.$validate();
						});
					}
				}

				function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
					// Note: no badInputChecker here by purpose as `url` is only a validation
					// in browsers, i.e. we can always read out input.value even if it is not valid!
					baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
					stringBasedInputType(ctrl);

					ctrl.$$parserName = 'url';
					ctrl.$validators.url = function (modelValue, viewValue) {
						var value = modelValue || viewValue;
						return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
					};
				}

				function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
					// Note: no badInputChecker here by purpose as `url` is only a validation
					// in browsers, i.e. we can always read out input.value even if it is not valid!
					baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
					stringBasedInputType(ctrl);

					ctrl.$$parserName = 'email';
					ctrl.$validators.email = function (modelValue, viewValue) {
						var value = modelValue || viewValue;
						return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
					};
				}

				function radioInputType(scope, element, attr, ctrl) {
					// make the name unique, if not defined
					if (isUndefined(attr.name)) {
						element.attr('name', nextUid());
					}

					var listener = function (ev) {
						if (element[0].checked) {
							ctrl.$setViewValue(attr.value, ev && ev.type);
						}
					};

					element.on('click', listener);

					ctrl.$render = function () {
						var value = attr.value;
						element[0].checked = (value == ctrl.$viewValue);
					};

					attr.$observe('value', ctrl.$render);
				}

				function parseConstantExpr($parse, context, name, expression, fallback) {
					var parseFn;
					if (isDefined(expression)) {
						parseFn = $parse(expression);
						if (!parseFn.constant) {
							throw minErr('ngModel')('constexpr', 'Expected constant expression for `{0}`, but saw ' +
								'`{1}`.', name, expression);
						}
						return parseFn(context);
					}
					return fallback;
				}

				function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
					var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
					var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

					var listener = function (ev) {
						ctrl.$setViewValue(element[0].checked, ev && ev.type);
					};

					element.on('click', listener);

					ctrl.$render = function () {
						element[0].checked = ctrl.$viewValue;
					};

					// Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
					// This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
					// it to a boolean.
					ctrl.$isEmpty = function (value) {
						return value === false;
					};

					ctrl.$formatters.push(function (value) {
						return equals(value, trueValue);
					});

					ctrl.$parsers.push(function (value) {
						return value ? trueValue : falseValue;
					});
				}


				/**
				 * @ngdoc directive
				 * @name textarea
				 * @restrict E
				 *
				 * @description
				 * HTML textarea element control with angular data-binding. The data-binding and validation
				 * properties of this element are exactly the same as those of the
				 * {@link ng.directive:input input element}.
				 *
				 * @param {string} ngModel Assignable angular expression to data-bind to.
				 * @param {string=} name Property name of the form under which the control is published.
				 * @param {string=} required Sets `required` validation error key if the value is not entered.
				 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
				 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
				 *    `required` when you want to data-bind to the `required` attribute.
				 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
				 *    minlength.
				 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
				 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
				 *    length.
				 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
				 *    a RegExp found by evaluating the Angular expression given in the attribute value.
				 *    If the expression evaluates to a RegExp object, then this is used directly.
				 *    If the expression evaluates to a string, then it will be converted to a RegExp
				 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
				 *    `new RegExp('^abc$')`.<br />
				 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
				 *    start at the index of the last search's match, thus not taking the whole input value into
				 *    account.
				 * @param {string=} ngChange Angular expression to be executed when input changes due to user
				 *    interaction with the input element.
				 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
				 */


				/**
				 * @ngdoc directive
				 * @name input
				 * @restrict E
				 *
				 * @description
				 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
				 * input state control, and validation.
				 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
				 *
				 * <div class="alert alert-warning">
				 * **Note:** Not every feature offered is available for all input types.
				 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
				 * </div>
				 *
				 * @param {string} ngModel Assignable angular expression to data-bind to.
				 * @param {string=} name Property name of the form under which the control is published.
				 * @param {string=} required Sets `required` validation error key if the value is not entered.
				 * @param {boolean=} ngRequired Sets `required` attribute if set to true
				 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
				 *    minlength.
				 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
				 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
				 *    length.
				 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
				 *    a RegExp found by evaluating the Angular expression given in the attribute value.
				 *    If the expression evaluates to a RegExp object, then this is used directly.
				 *    If the expression evaluates to a string, then it will be converted to a RegExp
				 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
				 *    `new RegExp('^abc$')`.<br />
				 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
				 *    start at the index of the last search's match, thus not taking the whole input value into
				 *    account.
				 * @param {string=} ngChange Angular expression to be executed when input changes due to user
				 *    interaction with the input element.
				 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
				 *    This parameter is ignored for input[type=password] controls, which will never trim the
				 *    input.
				 *
				 * @example
				 <example name="input-directive" module="inputExample">
				 <file name="index.html">
				 <script>
				 angular.module('inputExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <form name="myForm">
				 <label>
				 User name:
				 <input type="text" name="userName" ng-model="user.name" required>
				 </label>
				 <div role="alert">
				 <span class="error" ng-show="myForm.userName.$error.required">
				 Required!</span>
				 </div>
				 <label>
				 Last name:
				 <input type="text" name="lastName" ng-model="user.last"
				 ng-minlength="3" ng-maxlength="10">
				 </label>
				 <div role="alert">
				 <span class="error" ng-show="myForm.lastName.$error.minlength">
				 Too short!</span>
				 <span class="error" ng-show="myForm.lastName.$error.maxlength">
				 Too long!</span>
				 </div>
				 </form>
				 <hr>
				 <tt>user = {{user}}</tt><br/>
				 <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
				 <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
				 <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
				 <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
				 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
				 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
				 <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
				 <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 var user = element(by.exactBinding('user'));
				 var userNameValid = element(by.binding('myForm.userName.$valid'));
				 var lastNameValid = element(by.binding('myForm.lastName.$valid'));
				 var lastNameError = element(by.binding('myForm.lastName.$error'));
				 var formValid = element(by.binding('myForm.$valid'));
				 var userNameInput = element(by.model('user.name'));
				 var userLastInput = element(by.model('user.last'));

				 it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

				 it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');
	
	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });

				 it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');
	
	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

				 it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');
	
	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });

				 it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');
	
	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
				 </file>
				 </example>
				 */
				var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
					function ($browser, $sniffer, $filter, $parse) {
						return {
							restrict: 'E',
							require: ['?ngModel'],
							link: {
								pre: function (scope, element, attr, ctrls) {
									if (ctrls[0]) {
										(inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
											$browser, $filter, $parse);
									}
								}
							}
						};
					}];


				var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
				/**
				 * @ngdoc directive
				 * @name ngValue
				 *
				 * @description
				 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
				 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
				 * the bound value.
				 *
				 * `ngValue` is useful when dynamically generating lists of radio buttons using
				 * {@link ngRepeat `ngRepeat`}, as shown below.
				 *
				 * Likewise, `ngValue` can be used to generate `<option>` elements for
				 * the {@link select `select`} element. In that case however, only strings are supported
				 * for the `value `attribute, so the resulting `ngModel` will always be a string.
				 * Support for `select` models with non-string values is available via `ngOptions`.
				 *
				 * @element input
				 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
				 *   of the `input` element
				 *
				 * @example
				 <example name="ngValue-directive" module="valueExample">
				 <file name="index.html">
				 <script>
				 angular.module('valueExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
				 </script>
				 <form ng-controller="ExampleController">
				 <h2>Which is your favorite?</h2>
				 <label ng-repeat="name in names" for="{{name}}">
				 {{name}}
				 <input type="radio"
				 ng-model="my.favorite"
				 ng-value="name"
				 id="{{name}}"
				 name="favorite">
				 </label>
				 <div>You chose {{my.favorite}}</div>
				 </form>
				 </file>
				 <file name="protractor.js" type="protractor">
				 var favorite = element(by.binding('my.favorite'));

				 it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
				 it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
				 </file>
				 </example>
				 */
				var ngValueDirective = function () {
					return {
						restrict: 'A',
						priority: 100,
						compile: function (tpl, tplAttr) {
							if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
								return function ngValueConstantLink(scope, elm, attr) {
									attr.$set('value', scope.$eval(attr.ngValue));
								};
							} else {
								return function ngValueLink(scope, elm, attr) {
									scope.$watch(attr.ngValue, function valueWatchAction(value) {
										attr.$set('value', value);
									});
								};
							}
						}
					};
				};

				/**
				 * @ngdoc directive
				 * @name ngBind
				 * @restrict AC
				 *
				 * @description
				 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
				 * with the value of a given expression, and to update the text content when the value of that
				 * expression changes.
				 *
				 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
				 * `{{ expression }}` which is similar but less verbose.
				 *
				 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
				 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
				 * element attribute, it makes the bindings invisible to the user while the page is loading.
				 *
				 * An alternative solution to this problem would be using the
				 * {@link ng.directive:ngCloak ngCloak} directive.
				 *
				 *
				 * @element ANY
				 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
				 *
				 * @example
				 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
				 <example module="bindExample">
				 <file name="index.html">
				 <script>
				 angular.module('bindExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <label>Enter name: <input type="text" ng-model="name"></label><br>
				 Hello <span ng-bind="name"></span>!
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));
	
	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
				 </file>
				 </example>
				 */
				var ngBindDirective = ['$compile', function ($compile) {
					return {
						restrict: 'AC',
						compile: function ngBindCompile(templateElement) {
							$compile.$$addBindingClass(templateElement);
							return function ngBindLink(scope, element, attr) {
								$compile.$$addBindingInfo(element, attr.ngBind);
								element = element[0];
								scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
									element.textContent = value === undefined ? '' : value;
								});
							};
						}
					};
				}];


				/**
				 * @ngdoc directive
				 * @name ngBindTemplate
				 *
				 * @description
				 * The `ngBindTemplate` directive specifies that the element
				 * text content should be replaced with the interpolation of the template
				 * in the `ngBindTemplate` attribute.
				 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
				 * expressions. This directive is needed since some HTML elements
				 * (such as TITLE and OPTION) cannot contain SPAN elements.
				 *
				 * @element ANY
				 * @param {string} ngBindTemplate template of form
				 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
				 *
				 * @example
				 * Try it here: enter text in text box and watch the greeting change.
				 <example module="bindExample">
				 <file name="index.html">
				 <script>
				 angular.module('bindExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <label>Salutation: <input type="text" ng-model="salutation"></label><br>
				 <label>Name: <input type="text" ng-model="name"></label><br>
				 <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));
	
	         expect(salutationElem.getText()).toBe('Hello World!');
	
	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');
	
	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
				 </file>
				 </example>
				 */
				var ngBindTemplateDirective = ['$interpolate', '$compile', function ($interpolate, $compile) {
					return {
						compile: function ngBindTemplateCompile(templateElement) {
							$compile.$$addBindingClass(templateElement);
							return function ngBindTemplateLink(scope, element, attr) {
								var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
								$compile.$$addBindingInfo(element, interpolateFn.expressions);
								element = element[0];
								attr.$observe('ngBindTemplate', function (value) {
									element.textContent = value === undefined ? '' : value;
								});
							};
						}
					};
				}];


				/**
				 * @ngdoc directive
				 * @name ngBindHtml
				 *
				 * @description
				 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
				 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
				 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
					* ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
				 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
				 *
				 * You may also bypass sanitization for values you know are safe. To do so, bind to
				 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
				 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
				 *
				 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
				 * will have an exception (instead of an exploit.)
				 *
				 * @element ANY
				 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
				 *
				 * @example

				 <example module="bindHtmlExample" deps="angular-sanitize.js">
				 <file name="index.html">
				 <div ng-controller="ExampleController">
				 <p ng-bind-html="myHTML"></p>
				 </div>
				 </file>

				 <file name="script.js">
				 angular.module('bindHtmlExample', ['ngSanitize'])
				 .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
				 </file>

				 <file name="protractor.js" type="protractor">
				 it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
				 </file>
				 </example>
				 */
				var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function ($sce, $parse, $compile) {
					return {
						restrict: 'A',
						compile: function ngBindHtmlCompile(tElement, tAttrs) {
							var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
							var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
								return (value || '').toString();
							});
							$compile.$$addBindingClass(tElement);

							return function ngBindHtmlLink(scope, element, attr) {
								$compile.$$addBindingInfo(element, attr.ngBindHtml);

								scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
									// we re-evaluate the expr because we want a TrustedValueHolderType
									// for $sce, not a string
									element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
								});
							};
						}
					};
				}];

				/**
				 * @ngdoc directive
				 * @name ngChange
				 *
				 * @description
				 * Evaluate the given expression when the user changes the input.
				 * The expression is evaluated immediately, unlike the JavaScript onchange event
				 * which only triggers at the end of a change (usually, when the user leaves the
				 * form element or presses the return key).
				 *
				 * The `ngChange` expression is only evaluated when a change in the input value causes
				 * a new value to be committed to the model.
				 *
				 * It will not be evaluated:
				 * * if the value returned from the `$parsers` transformation pipeline has not changed
				 * * if the input has continued to be invalid since the model will stay `null`
				 * * if the model is changed programmatically and not by a change to the input value
				 *
				 *
				 * Note, this directive requires `ngModel` to be present.
				 *
				 * @element input
				 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
				 * in input value.
				 *
				 * @example
				 * <example name="ngChange-directive" module="changeExample">
				 *   <file name="index.html">
				 *     <script>
				 *       angular.module('changeExample', [])
				 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
				 *     </script>
				 *     <div ng-controller="ExampleController">
				 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
				 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
				 *       <label for="ng-change-example2">Confirmed</label><br />
				 *       <tt>debug = {{confirmed}}</tt><br/>
				 *       <tt>counter = {{counter}}</tt><br/>
				 *     </div>
				 *   </file>
				 *   <file name="protractor.js" type="protractor">
				 *     var counter = element(by.binding('counter'));
				 *     var debug = element(by.binding('confirmed'));
				 *
				 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
				 *
				 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();
	
	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
				 *   </file>
				 * </example>
				 */
				var ngChangeDirective = valueFn({
					restrict: 'A',
					require: 'ngModel',
					link: function (scope, element, attr, ctrl) {
						ctrl.$viewChangeListeners.push(function () {
							scope.$eval(attr.ngChange);
						});
					}
				});

				function classDirective(name, selector) {
					name = 'ngClass' + name;
					return ['$animate', function ($animate) {
						return {
							restrict: 'AC',
							link: function (scope, element, attr) {
								var oldVal;

								scope.$watch(attr[name], ngClassWatchAction, true);

								attr.$observe('class', function (value) {
									ngClassWatchAction(scope.$eval(attr[name]));
								});


								if (name !== 'ngClass') {
									scope.$watch('$index', function ($index, old$index) {
										// jshint bitwise: false
										var mod = $index & 1;
										if (mod !== (old$index & 1)) {
											var classes = arrayClasses(scope.$eval(attr[name]));
											mod === selector ?
												addClasses(classes) :
												removeClasses(classes);
										}
									});
								}

								function addClasses(classes) {
									var newClasses = digestClassCounts(classes, 1);
									attr.$addClass(newClasses);
								}

								function removeClasses(classes) {
									var newClasses = digestClassCounts(classes, -1);
									attr.$removeClass(newClasses);
								}

								function digestClassCounts(classes, count) {
									// Use createMap() to prevent class assumptions involving property
									// names in Object.prototype
									var classCounts = element.data('$classCounts') || createMap();
									var classesToUpdate = [];
									forEach(classes, function (className) {
										if (count > 0 || classCounts[className]) {
											classCounts[className] = (classCounts[className] || 0) + count;
											if (classCounts[className] === +(count > 0)) {
												classesToUpdate.push(className);
											}
										}
									});
									element.data('$classCounts', classCounts);
									return classesToUpdate.join(' ');
								}

								function updateClasses(oldClasses, newClasses) {
									var toAdd = arrayDifference(newClasses, oldClasses);
									var toRemove = arrayDifference(oldClasses, newClasses);
									toAdd = digestClassCounts(toAdd, 1);
									toRemove = digestClassCounts(toRemove, -1);
									if (toAdd && toAdd.length) {
										$animate.addClass(element, toAdd);
									}
									if (toRemove && toRemove.length) {
										$animate.removeClass(element, toRemove);
									}
								}

								function ngClassWatchAction(newVal) {
									if (selector === true || scope.$index % 2 === selector) {
										var newClasses = arrayClasses(newVal || []);
										if (!oldVal) {
											addClasses(newClasses);
										} else if (!equals(newVal, oldVal)) {
											var oldClasses = arrayClasses(oldVal);
											updateClasses(oldClasses, newClasses);
										}
									}
									oldVal = shallowCopy(newVal);
								}
							}
						};

						function arrayDifference(tokens1, tokens2) {
							var values = [];

							outer:
								for (var i = 0; i < tokens1.length; i++) {
									var token = tokens1[i];
									for (var j = 0; j < tokens2.length; j++) {
										if (token == tokens2[j]) continue outer;
									}
									values.push(token);
								}
							return values;
						}

						function arrayClasses(classVal) {
							var classes = [];
							if (isArray(classVal)) {
								forEach(classVal, function (v) {
									classes = classes.concat(arrayClasses(v));
								});
								return classes;
							} else if (isString(classVal)) {
								return classVal.split(' ');
							} else if (isObject(classVal)) {
								forEach(classVal, function (v, k) {
									if (v) {
										classes = classes.concat(k.split(' '));
									}
								});
								return classes;
							}
							return classVal;
						}
					}];
				}

				/**
				 * @ngdoc directive
				 * @name ngClass
				 * @restrict AC
				 *
				 * @description
				 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
				 * an expression that represents all classes to be added.
				 *
				 * The directive operates in three different ways, depending on which of three types the expression
				 * evaluates to:
				 *
				 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
				 * names.
				 *
				 * 2. If the expression evaluates to an object, then for each key-value pair of the
				 * object with a truthy value the corresponding key is used as a class name.
				 *
				 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
				 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
				 * to give you more control over what CSS classes appear. See the code below for an example of this.
				 *
				 *
				 * The directive won't add duplicate classes if a particular class was already set.
				 *
				 * When the expression changes, the previously added classes are removed and only then are the
				 * new classes added.
				 *
				 * @animations
				 * **add** - happens just before the class is applied to the elements
				 *
				 * **remove** - happens just before the class is removed from the element
				 *
				 * @element ANY
				 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
				 *   of the evaluation can be a string representing space delimited class
				 *   names, an array, or a map of class names to boolean values. In the case of a map, the
				 *   names of the properties whose values are truthy will be added as css classes to the
				 *   element.
				 *
				 * @example Example that demonstrates basic bindings via ngClass directive.
				 <example>
				 <file name="index.html">
				 <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
				 <label>
				 <input type="checkbox" ng-model="deleted">
				 deleted (apply "strike" class)
				 </label><br>
				 <label>
				 <input type="checkbox" ng-model="important">
				 important (apply "bold" class)
				 </label><br>
				 <label>
				 <input type="checkbox" ng-model="error">
				 error (apply "has-error" class)
				 </label>
				 <hr>
				 <p ng-class="style">Using String Syntax</p>
				 <input type="text" ng-model="style"
				 placeholder="Type: bold strike red" aria-label="Type: bold strike red">
				 <hr>
				 <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
				 <input ng-model="style1"
				 placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
				 <input ng-model="style2"
				 placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
				 <input ng-model="style3"
				 placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
				 <hr>
				 <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
				 <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
				 <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
				 </file>
				 <file name="style.css">
				 .strike {
	           text-decoration: line-through;
	       }
				 .bold {
	           font-weight: bold;
	       }
				 .red {
	           color: red;
	       }
				 .has-error {
	           color: red;
	           background-color: yellow;
	       }
				 .orange {
	           color: orange;
	       }
				 </file>
				 <file name="protractor.js" type="protractor">
				 var ps = element.all(by.css('p'));

				 it('should let you toggle the class', function() {
	
	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);
	
	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);
	
	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });

				 it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });

				 it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });

				 it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
				 </file>
				 </example>

				 ## Animations

				 The example below demonstrates how to perform animations using ngClass.

				 <example module="ngAnimate" deps="angular-animate.js" animations="true">
				 <file name="index.html">
				 <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
				 <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
				 <br>
				 <span class="base-class" ng-class="myVar">Sample Text</span>
				 </file>
				 <file name="style.css">
				 .base-class {
	         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }

				 .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	
	         element(by.id('setbtn')).click();
	
	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);
	
	         element(by.id('clearbtn')).click();
	
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
				 </file>
				 </example>


				 ## ngClass and pre-existing CSS3 Transitions/Animations
				 The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
				 Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
				 any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
				 to view the step by step details of {@link $animate#addClass $animate.addClass} and
				 {@link $animate#removeClass $animate.removeClass}.
				 */
				var ngClassDirective = classDirective('', true);

				/**
				 * @ngdoc directive
				 * @name ngClassOdd
				 * @restrict AC
				 *
				 * @description
				 * The `ngClassOdd` and `ngClassEven` directives work exactly as
				 * {@link ng.directive:ngClass ngClass}, except they work in
				 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
				 *
				 * This directive can be applied only within the scope of an
				 * {@link ng.directive:ngRepeat ngRepeat}.
				 *
				 * @element ANY
				 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
				 *   of the evaluation can be a string representing space delimited class names or an array.
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
				 <li ng-repeat="name in names">
				 <span ng-class-odd="'odd'" ng-class-even="'even'">
				 {{name}}
				 </span>
				 </li>
				 </ol>
				 </file>
				 <file name="style.css">
				 .odd {
	         color: red;
	       }
				 .even {
	         color: blue;
	       }
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
				 </file>
				 </example>
				 */
				var ngClassOddDirective = classDirective('Odd', 0);

				/**
				 * @ngdoc directive
				 * @name ngClassEven
				 * @restrict AC
				 *
				 * @description
				 * The `ngClassOdd` and `ngClassEven` directives work exactly as
				 * {@link ng.directive:ngClass ngClass}, except they work in
				 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
				 *
				 * This directive can be applied only within the scope of an
				 * {@link ng.directive:ngRepeat ngRepeat}.
				 *
				 * @element ANY
				 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
				 *   result of the evaluation can be a string representing space delimited class names or an array.
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
				 <li ng-repeat="name in names">
				 <span ng-class-odd="'odd'" ng-class-even="'even'">
				 {{name}} &nbsp; &nbsp; &nbsp;
				 </span>
				 </li>
				 </ol>
				 </file>
				 <file name="style.css">
				 .odd {
	         color: red;
	       }
				 .even {
	         color: blue;
	       }
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
				 </file>
				 </example>
				 */
				var ngClassEvenDirective = classDirective('Even', 1);

				/**
				 * @ngdoc directive
				 * @name ngCloak
				 * @restrict AC
				 *
				 * @description
				 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
				 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
				 * directive to avoid the undesirable flicker effect caused by the html template display.
				 *
				 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
				 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
				 * of the browser view.
				 *
				 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
				 * `angular.min.js`.
				 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
				 *
				 * ```css
				 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
				 * ```
				 *
				 * When this css rule is loaded by the browser, all html elements (including their children) that
				 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
				 * during the compilation of the template it deletes the `ngCloak` element attribute, making
				 * the compiled element visible.
				 *
				 * For the best result, the `angular.js` script must be loaded in the head section of the html
				 * document; alternatively, the css rule above must be included in the external stylesheet of the
				 * application.
				 *
				 * @element ANY
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <div id="template1" ng-cloak>{{ 'hello' }}</div>
				 <div id="template2" class="ng-cloak">{{ 'world' }}</div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
				 </file>
				 </example>
				 *
				 */
				var ngCloakDirective = ngDirective({
					compile: function (element, attr) {
						attr.$set('ngCloak', undefined);
						element.removeClass('ng-cloak');
					}
				});

				/**
				 * @ngdoc directive
				 * @name ngController
				 *
				 * @description
				 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
				 * supports the principles behind the Model-View-Controller design pattern.
				 *
				 * MVC components in angular:
				 *
				 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
				 *   are accessed through bindings.
				 * * View — The template (HTML with data bindings) that is rendered into the View.
				 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
				 *   logic behind the application to decorate the scope with functions and values
				 *
				 * Note that you can also attach controllers to the DOM by declaring it in a route definition
				 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
				 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
				 * and executed twice.
				 *
				 * @element ANY
				 * @scope
				 * @priority 500
				 * @param {expression} ngController Name of a constructor function registered with the current
				 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
				 * that on the current scope evaluates to a constructor function.
				 *
				 * The controller instance can be published into a scope property by specifying
				 * `ng-controller="as propertyName"`.
				 *
				 * If the current `$controllerProvider` is configured to use globals (via
				 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
				 * also be the name of a globally accessible constructor function (not recommended).
				 *
				 * @example
				 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
				 * greeting are methods declared on the controller (see source tab). These methods can
				 * easily be called from the angular markup. Any changes to the data are automatically reflected
				 * in the View without the need for a manual update.
				 *
				 * Two different declaration styles are included below:
				 *
				 * * one binds methods and properties directly onto the controller using `this`:
				 * `ng-controller="SettingsController1 as settings"`
				 * * one injects `$scope` into the controller:
				 * `ng-controller="SettingsController2"`
				 *
				 * The second option is more common in the Angular community, and is generally used in boilerplates
				 * and in this guide. However, there are advantages to binding properties directly to the controller
				 * and avoiding scope.
				 *
				 * * Using `controller as` makes it obvious which controller you are accessing in the template when
				 * multiple controllers apply to an element.
				 * * If you are writing your controllers as classes you have easier access to the properties and
				 * methods, which will appear on the scope, from inside the controller code.
				 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
				 * inheritance masking primitives.
				 *
				 * This example demonstrates the `controller as` syntax.
				 *
				 * <example name="ngControllerAs" module="controllerAsExample">
				 *   <file name="index.html">
				 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
				 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
				 *      <button ng-click="settings.greet()">greet</button><br/>
				 *      Contact:
				 *      <ul>
				 *        <li ng-repeat="contact in settings.contacts">
				 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
				 *             <option>phone</option>
				 *             <option>email</option>
				 *          </select>
				 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
				 *          <button ng-click="settings.clearContact(contact)">clear</button>
				 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
				 *        </li>
				 *        <li><button ng-click="settings.addContact()">add</button></li>
				 *     </ul>
				 *    </div>
				 *   </file>
				 *   <file name="app.js">
				 *    angular.module('controllerAsExample', [])
				 *      .controller('SettingsController1', SettingsController1);
				 *
				 *    function SettingsController1() {
	 *      this.name = "John Smith";
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'} ];
	 *    }
				 *
				 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
				 *
				 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
				 *
				 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
				 *
				 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
				 *   </file>
				 *   <file name="protractor.js" type="protractor">
				 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
				 *   </file>
				 * </example>
				 *
				 * This example demonstrates the "attach to `$scope`" style of controller.
				 *
				 * <example name="ngController" module="controllerExample">
				 *  <file name="index.html">
				 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
				 *     <label>Name: <input type="text" ng-model="name"/></label>
				 *     <button ng-click="greet()">greet</button><br/>
				 *     Contact:
				 *     <ul>
				 *       <li ng-repeat="contact in contacts">
				 *         <select ng-model="contact.type" id="select_{{$index}}">
				 *            <option>phone</option>
				 *            <option>email</option>
				 *         </select>
				 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
				 *         <button ng-click="clearContact(contact)">clear</button>
				 *         <button ng-click="removeContact(contact)">X</button>
				 *       </li>
				 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
				 *    </ul>
				 *   </div>
				 *  </file>
				 *  <file name="app.js">
				 *   angular.module('controllerExample', [])
				 *     .controller('SettingsController2', ['$scope', SettingsController2]);
				 *
				 *   function SettingsController2($scope) {
	 *     $scope.name = "John Smith";
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'} ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
				 *  </file>
				 *  <file name="protractor.js" type="protractor">
				 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
				 *  </file>
				 *</example>

				 */
				var ngControllerDirective = [function () {
					return {
						restrict: 'A',
						scope: true,
						controller: '@',
						priority: 500
					};
				}];

				/**
				 * @ngdoc directive
				 * @name ngCsp
				 *
				 * @element html
				 * @description
				 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
				 *
				 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
				 *
				 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
				 * For Angular to be CSP compatible there are only two things that we need to do differently:
				 *
				 * - don't use `Function` constructor to generate optimized value getters
				 * - don't inject custom stylesheet into the document
				 *
				 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
				 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
				 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
				 * be raised.
				 *
				 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
				 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
				 * To make those directives work in CSP mode, include the `angular-csp.css` manually.
				 *
				 * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This
				 * autodetection however triggers a CSP error to be logged in the console:
				 *
				 * ```
				 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
				 * script in the following Content Security Policy directive: "default-src 'self'". Note that
				 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
				 * ```
				 *
				 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
				 * directive on the root element of the application or on the `angular.js` script tag, whichever
				 * appears first in the html document.
				 *
				 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
				 *
				 * @example
				 * This example shows how to apply the `ngCsp` directive to the `html` tag.
				 ```html
				 <!doctype html>
				 <html ng-app ng-csp>
				 ...
				 ...
				 </html>
				 ```
				 * @example
				 // Note: the suffix `.csp` in the example name triggers
				 // csp mode in our http server!
				 <example name="example.csp" module="cspExample" ng-csp="true">
				 <file name="index.html">
				 <div ng-controller="MainController as ctrl">
				 <div>
				 <button ng-click="ctrl.inc()" id="inc">Increment</button>
				 <span id="counter">
				 {{ctrl.counter}}
				 </span>
				 </div>

				 <div>
				 <button ng-click="ctrl.evil()" id="evil">Evil</button>
				 <span id="evilError">
				 {{ctrl.evilError}}
				 </span>
				 </div>
				 </div>
				 </file>
				 <file name="script.js">
				 angular.module('cspExample', [])
				 .controller('MainController', function() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  // jshint evil:true
	                  try {
	                    eval('1+2');
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
				 </file>
				 <file name="protractor.js" type="protractor">
				 var util, webdriver;

				 var incBtn = element(by.id('inc'));
				 var counter = element(by.id('counter'));
				 var evilBtn = element(by.id('evil'));
				 var evilError = element(by.id('evilError'));

				 function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }

				 function clearErrors() {
	            getAndClearSevereErrors();
	          }

				 function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }

				 function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }

				 beforeEach(function() {
	            util = require('util');
	            webdriver = require('protractor/node_modules/selenium-webdriver');
	          });

				 // For now, we only test on Chrome,
				 // as Safari does not load the page with Protractor's injected scripts,
				 // and Firefox webdriver always disables content security policy (#6358)
				 if (browser.params.browser !== 'chrome') {
	            return;
	          }

				 it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });

				 it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });

				 it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
				 </file>
				 </example>
				 */

				// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
				// bootstrap the system (before $parse is instantiated), for this reason we just have
				// the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc

				/**
				 * @ngdoc directive
				 * @name ngClick
				 *
				 * @description
				 * The ngClick directive allows you to specify custom behavior when
				 * an element is clicked.
				 *
				 * @element ANY
				 * @priority 0
				 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
				 * click. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <button ng-click="count = count + 1" ng-init="count=0">
				 Increment
				 </button>
				 <span>
				 count: {{count}}
				 </span>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
				 </file>
				 </example>
				 */
				/*
				 * A collection of directives that allows creation of custom event handlers that are defined as
				 * angular expressions and are compiled and executed within the current scope.
				 */
				var ngEventDirectives = {};

				// For events that might fire synchronously during DOM manipulation
				// we need to execute their event handlers asynchronously using $evalAsync,
				// so that they are not executed in an inconsistent state.
				var forceAsyncEvents = {
					'blur': true,
					'focus': true
				};
				forEach(
					'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
					function (eventName) {
						var directiveName = directiveNormalize('ng-' + eventName);
						ngEventDirectives[directiveName] = ['$parse', '$rootScope', function ($parse, $rootScope) {
							return {
								restrict: 'A',
								compile: function ($element, attr) {
									// We expose the powerful $event object on the scope that provides access to the Window,
									// etc. that isn't protected by the fast paths in $parse.  We explicitly request better
									// checks at the cost of speed since event handler expressions are not executed as
									// frequently as regular change detection.
									var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
									return function ngEventHandler(scope, element) {
										element.on(eventName, function (event) {
											var callback = function () {
												fn(scope, {$event: event});
											};
											if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
												scope.$evalAsync(callback);
											} else {
												scope.$apply(callback);
											}
										});
									};
								}
							};
						}];
					}
				);

				/**
				 * @ngdoc directive
				 * @name ngDblclick
				 *
				 * @description
				 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
				 *
				 * @element ANY
				 * @priority 0
				 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
				 * a dblclick. (The Event object is available as `$event`)
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <button ng-dblclick="count = count + 1" ng-init="count=0">
				 Increment (on double click)
				 </button>
				 count: {{count}}
				 </file>
				 </example>
				 */


				/**
				 * @ngdoc directive
				 * @name ngMousedown
				 *
				 * @description
				 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
				 *
				 * @element ANY
				 * @priority 0
				 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
				 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <button ng-mousedown="count = count + 1" ng-init="count=0">
				 Increment (on mouse down)
				 </button>
				 count: {{count}}
				 </file>
				 </example>
				 */


				/**
				 * @ngdoc directive
				 * @name ngMouseup
				 *
				 * @description
				 * Specify custom behavior on mouseup event.
				 *
				 * @element ANY
				 * @priority 0
				 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
				 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <button ng-mouseup="count = count + 1" ng-init="count=0">
				 Increment (on mouse up)
				 </button>
				 count: {{count}}
				 </file>
				 </example>
				 */

				/**
				 * @ngdoc directive
				 * @name ngMouseover
				 *
				 * @description
				 * Specify custom behavior on mouseover event.
				 *
				 * @element ANY
				 * @priority 0
				 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
				 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <button ng-mouseover="count = count + 1" ng-init="count=0">
				 Increment (when mouse is over)
				 </button>
				 count: {{count}}
				 </file>
				 </example>
				 */


				/**
				 * @ngdoc directive
				 * @name ngMouseenter
				 *
				 * @description
				 * Specify custom behavior on mouseenter event.
				 *
				 * @element ANY
				 * @priority 0
				 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
				 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <button ng-mouseenter="count = count + 1" ng-init="count=0">
				 Increment (when mouse enters)
				 </button>
				 count: {{count}}
				 </file>
				 </example>
				 */


				/**
				 * @ngdoc directive
				 * @name ngMouseleave
				 *
				 * @description
				 * Specify custom behavior on mouseleave event.
				 *
				 * @element ANY
				 * @priority 0
				 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
				 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <button ng-mouseleave="count = count + 1" ng-init="count=0">
				 Increment (when mouse leaves)
				 </button>
				 count: {{count}}
				 </file>
				 </example>
				 */


				/**
				 * @ngdoc directive
				 * @name ngMousemove
				 *
				 * @description
				 * Specify custom behavior on mousemove event.
				 *
				 * @element ANY
				 * @priority 0
				 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
				 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <button ng-mousemove="count = count + 1" ng-init="count=0">
				 Increment (when mouse moves)
				 </button>
				 count: {{count}}
				 </file>
				 </example>
				 */


				/**
				 * @ngdoc directive
				 * @name ngKeydown
				 *
				 * @description
				 * Specify custom behavior on keydown event.
				 *
				 * @element ANY
				 * @priority 0
				 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
				 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <input ng-keydown="count = count + 1" ng-init="count=0">
				 key down count: {{count}}
				 </file>
				 </example>
				 */


				/**
				 * @ngdoc directive
				 * @name ngKeyup
				 *
				 * @description
				 * Specify custom behavior on keyup event.
				 *
				 * @element ANY
				 * @priority 0
				 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
				 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <p>Typing in the input box below updates the key count</p>
				 <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

				 <p>Typing in the input box below updates the keycode</p>
				 <input ng-keyup="event=$event">
				 <p>event keyCode: {{ event.keyCode }}</p>
				 <p>event altKey: {{ event.altKey }}</p>
				 </file>
				 </example>
				 */


				/**
				 * @ngdoc directive
				 * @name ngKeypress
				 *
				 * @description
				 * Specify custom behavior on keypress event.
				 *
				 * @element ANY
				 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
				 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
				 * and can be interrogated for keyCode, altKey, etc.)
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <input ng-keypress="count = count + 1" ng-init="count=0">
				 key press count: {{count}}
				 </file>
				 </example>
				 */


				/**
				 * @ngdoc directive
				 * @name ngSubmit
				 *
				 * @description
				 * Enables binding angular expressions to onsubmit events.
				 *
				 * Additionally it prevents the default action (which for form means sending the request to the
				 * server and reloading the current page), but only if the form does not contain `action`,
				 * `data-action`, or `x-action` attributes.
				 *
				 * <div class="alert alert-warning">
				 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
				 * `ngSubmit` handlers together. See the
				 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
				 * for a detailed discussion of when `ngSubmit` may be triggered.
				 * </div>
				 *
				 * @element form
				 * @priority 0
				 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
				 * ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example module="submitExample">
				 <file name="index.html">
				 <script>
				 angular.module('submitExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
				 </script>
				 <form ng-submit="submit()" ng-controller="ExampleController">
				 Enter text and hit enter:
				 <input type="text" ng-model="text" name="text" />
				 <input type="submit" id="submit" value="Submit" />
				 <pre>list={{list}}</pre>
				 </form>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
				 it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
				 </file>
				 </example>
				 */

				/**
				 * @ngdoc directive
				 * @name ngFocus
				 *
				 * @description
				 * Specify custom behavior on focus event.
				 *
				 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
				 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
				 * during an `$apply` to ensure a consistent state.
				 *
				 * @element window, input, select, textarea, a
				 * @priority 0
				 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
				 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 * See {@link ng.directive:ngClick ngClick}
				 */

				/**
				 * @ngdoc directive
				 * @name ngBlur
				 *
				 * @description
				 * Specify custom behavior on blur event.
				 *
				 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
				 * an element has lost focus.
				 *
				 * Note: As the `blur` event is executed synchronously also during DOM manipulations
				 * (e.g. removing a focussed input),
				 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
				 * during an `$apply` to ensure a consistent state.
				 *
				 * @element window, input, select, textarea, a
				 * @priority 0
				 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
				 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 * See {@link ng.directive:ngClick ngClick}
				 */

				/**
				 * @ngdoc directive
				 * @name ngCopy
				 *
				 * @description
				 * Specify custom behavior on copy event.
				 *
				 * @element window, input, select, textarea, a
				 * @priority 0
				 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
				 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
				 copied: {{copied}}
				 </file>
				 </example>
				 */

				/**
				 * @ngdoc directive
				 * @name ngCut
				 *
				 * @description
				 * Specify custom behavior on cut event.
				 *
				 * @element window, input, select, textarea, a
				 * @priority 0
				 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
				 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
				 cut: {{cut}}
				 </file>
				 </example>
				 */

				/**
				 * @ngdoc directive
				 * @name ngPaste
				 *
				 * @description
				 * Specify custom behavior on paste event.
				 *
				 * @element window, input, select, textarea, a
				 * @priority 0
				 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
				 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
				 pasted: {{paste}}
				 </file>
				 </example>
				 */

				/**
				 * @ngdoc directive
				 * @name ngIf
				 * @restrict A
				 * @multiElement
				 *
				 * @description
				 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
				 * {expression}. If the expression assigned to `ngIf` evaluates to a false
				 * value then the element is removed from the DOM, otherwise a clone of the
				 * element is reinserted into the DOM.
				 *
				 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
				 * element in the DOM rather than changing its visibility via the `display` css property.  A common
				 * case when this difference is significant is when using css selectors that rely on an element's
				 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
				 *
				 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
				 * is created when the element is restored.  The scope created within `ngIf` inherits from
				 * its parent scope using
				 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
				 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
				 * a javascript primitive defined in the parent scope. In this case any modifications made to the
				 * variable within the child scope will override (hide) the value in the parent scope.
				 *
				 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
				 * is if an element's class attribute is directly modified after it's compiled, using something like
				 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
				 * the added class will be lost because the original compiled state is used to regenerate the element.
				 *
				 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
				 * and `leave` effects.
				 *
				 * @animations
				 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
				 * leave - happens just before the `ngIf` contents are removed from the DOM
				 *
				 * @element ANY
				 * @scope
				 * @priority 600
				 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
				 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
				 *     element is added to the DOM tree.
				 *
				 * @example
				 <example module="ngAnimate" deps="angular-animate.js" animations="true">
				 <file name="index.html">
				 <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
				 Show when checked:
				 <span ng-if="checked" class="animate-if">
				 This is removed when the checkbox is unchecked.
				 </span>
				 </file>
				 <file name="animations.css">
				 .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }

				 .animate-if.ng-enter, .animate-if.ng-leave {
	        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }

				 .animate-if.ng-enter,
				 .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }

				 .animate-if.ng-leave,
				 .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
				 </file>
				 </example>
				 */
				var ngIfDirective = ['$animate', function ($animate) {
					return {
						multiElement: true,
						transclude: 'element',
						priority: 600,
						terminal: true,
						restrict: 'A',
						$$tlb: true,
						link: function ($scope, $element, $attr, ctrl, $transclude) {
							var block, childScope, previousElements;
							$scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

								if (value) {
									if (!childScope) {
										$transclude(function (clone, newScope) {
											childScope = newScope;
											clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
											// Note: We only need the first/last node of the cloned nodes.
											// However, we need to keep the reference to the jqlite wrapper as it might be changed later
											// by a directive with templateUrl when its template arrives.
											block = {
												clone: clone
											};
											$animate.enter(clone, $element.parent(), $element);
										});
									}
								} else {
									if (previousElements) {
										previousElements.remove();
										previousElements = null;
									}
									if (childScope) {
										childScope.$destroy();
										childScope = null;
									}
									if (block) {
										previousElements = getBlockNodes(block.clone);
										$animate.leave(previousElements).then(function () {
											previousElements = null;
										});
										block = null;
									}
								}
							});
						}
					};
				}];

				/**
				 * @ngdoc directive
				 * @name ngInclude
				 * @restrict ECA
				 *
				 * @description
				 * Fetches, compiles and includes an external HTML fragment.
				 *
				 * By default, the template URL is restricted to the same domain and protocol as the
				 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
     * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
				 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
				 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
					* ng.$sce Strict Contextual Escaping}.
				 *
				 * In addition, the browser's
				 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
				 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
				 * policy may further restrict whether the template is successfully loaded.
				 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
				 * access on some browsers.
				 *
				 * @animations
				 * enter - animation is used to bring new content into the browser.
				 * leave - animation is used to animate existing content away.
				 *
				 * The enter and leave animation occur concurrently.
				 *
				 * @scope
				 * @priority 400
				 *
				 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
				 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
				 * @param {string=} onload Expression to evaluate when a new partial is loaded.
				 *
				 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
     *                  $anchorScroll} to scroll the viewport after the content is loaded.
				 *
				 *                  - If the attribute is not set, disable scrolling.
				 *                  - If the attribute is set without value, enable scrolling.
				 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
				 *
				 * @example
				 <example module="includeExample" deps="angular-animate.js" animations="true">
				 <file name="index.html">
				 <div ng-controller="ExampleController">
				 <select ng-model="template" ng-options="t.name for t in templates">
				 <option value="">(blank)</option>
				 </select>
				 url of the template: <code>{{template.url}}</code>
				 <hr/>
				 <div class="slide-animate-container">
				 <div class="slide-animate" ng-include="template.url"></div>
				 </div>
				 </div>
				 </file>
				 <file name="script.js">
				 angular.module('includeExample', ['ngAnimate'])
				 .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [ { name: 'template1.html', url: 'template1.html'},
	              { name: 'template2.html', url: 'template2.html'} ];
	          $scope.template = $scope.templates[0];
	        }]);
				 </file>
				 <file name="template1.html">
				 Content of template1.html
				 </file>
				 <file name="template2.html">
				 Content of template2.html
				 </file>
				 <file name="animations.css">
				 .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

				 .slide-animate {
	        padding:10px;
	      }

				 .slide-animate.ng-enter, .slide-animate.ng-leave {
	        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	
	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }

				 .slide-animate.ng-enter {
	        top:-50px;
	      }
				 .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }

				 .slide-animate.ng-leave {
	        top:0;
	      }
				 .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
				 </file>
				 <file name="protractor.js" type="protractor">
				 var templateSelect = element(by.model('template'));
				 var includeElem = element(by.css('[ng-include]'));

				 it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });

				 it('should load template2.html', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });

				 it('should change to blank', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
				 </file>
				 </example>
				 */


				/**
				 * @ngdoc event
				 * @name ngInclude#$includeContentRequested
				 * @eventType emit on the scope ngInclude was declared in
				 * @description
				 * Emitted every time the ngInclude content is requested.
				 *
				 * @param {Object} angularEvent Synthetic event object.
				 * @param {String} src URL of content to load.
				 */


				/**
				 * @ngdoc event
				 * @name ngInclude#$includeContentLoaded
				 * @eventType emit on the current ngInclude scope
				 * @description
				 * Emitted every time the ngInclude content is reloaded.
				 *
				 * @param {Object} angularEvent Synthetic event object.
				 * @param {String} src URL of content to load.
				 */


				/**
				 * @ngdoc event
				 * @name ngInclude#$includeContentError
				 * @eventType emit on the scope ngInclude was declared in
				 * @description
				 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
				 *
				 * @param {Object} angularEvent Synthetic event object.
				 * @param {String} src URL of content to load.
				 */
				var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
					function ($templateRequest, $anchorScroll, $animate) {
						return {
							restrict: 'ECA',
							priority: 400,
							terminal: true,
							transclude: 'element',
							controller: angular.noop,
							compile: function (element, attr) {
								var srcExp = attr.ngInclude || attr.src,
									onloadExp = attr.onload || '',
									autoScrollExp = attr.autoscroll;

								return function (scope, $element, $attr, ctrl, $transclude) {
									var changeCounter = 0,
										currentScope,
										previousElement,
										currentElement;

									var cleanupLastIncludeContent = function () {
										if (previousElement) {
											previousElement.remove();
											previousElement = null;
										}
										if (currentScope) {
											currentScope.$destroy();
											currentScope = null;
										}
										if (currentElement) {
											$animate.leave(currentElement).then(function () {
												previousElement = null;
											});
											previousElement = currentElement;
											currentElement = null;
										}
									};

									scope.$watch(srcExp, function ngIncludeWatchAction(src) {
										var afterAnimation = function () {
											if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
												$anchorScroll();
											}
										};
										var thisChangeId = ++changeCounter;

										if (src) {
											//set the 2nd param to true to ignore the template request error so that the inner
											//contents and scope can be cleaned up.
											$templateRequest(src, true).then(function (response) {
												if (thisChangeId !== changeCounter) return;
												var newScope = scope.$new();
												ctrl.template = response;

												// Note: This will also link all children of ng-include that were contained in the original
												// html. If that content contains controllers, ... they could pollute/change the scope.
												// However, using ng-include on an element with additional content does not make sense...
												// Note: We can't remove them in the cloneAttchFn of $transclude as that
												// function is called before linking the content, which would apply child
												// directives to non existing elements.
												var clone = $transclude(newScope, function (clone) {
													cleanupLastIncludeContent();
													$animate.enter(clone, null, $element).then(afterAnimation);
												});

												currentScope = newScope;
												currentElement = clone;

												currentScope.$emit('$includeContentLoaded', src);
												scope.$eval(onloadExp);
											}, function () {
												if (thisChangeId === changeCounter) {
													cleanupLastIncludeContent();
													scope.$emit('$includeContentError', src);
												}
											});
											scope.$emit('$includeContentRequested', src);
										} else {
											cleanupLastIncludeContent();
											ctrl.template = null;
										}
									});
								};
							}
						};
					}];

				// This directive is called during the $transclude call of the first `ngInclude` directive.
				// It will replace and compile the content of the element with the loaded template.
				// We need this directive so that the element content is already filled when
				// the link function of another directive on the same element as ngInclude
				// is called.
				var ngIncludeFillContentDirective = ['$compile',
					function ($compile) {
						return {
							restrict: 'ECA',
							priority: -400,
							require: 'ngInclude',
							link: function (scope, $element, $attr, ctrl) {
								if (/SVG/.test($element[0].toString())) {
									// WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
									// support innerHTML, so detect this here and try to generate the contents
									// specially.
									$element.empty();
									$compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,
										function namespaceAdaptedClone(clone) {
											$element.append(clone);
										}, {futureParentElement: $element});
									return;
								}

								$element.html(ctrl.template);
								$compile($element.contents())(scope);
							}
						};
					}];

				/**
				 * @ngdoc directive
				 * @name ngInit
				 * @restrict AC
				 *
				 * @description
				 * The `ngInit` directive allows you to evaluate an expression in the
				 * current scope.
				 *
				 * <div class="alert alert-danger">
				 * The only appropriate use of `ngInit` is for aliasing special properties of
				 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
				 * should use {@link guide/controller controllers} rather than `ngInit`
				 * to initialize values on a scope.
				 * </div>
				 * <div class="alert alert-warning">
				 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
				 * sure you have parenthesis for correct precedence:
				 * <pre class="prettyprint">
				 * `<div ng-init="test1 = (data | orderBy:'name')"></div>`
				 * </pre>
				 * </div>
				 *
				 * @priority 450
				 *
				 * @element ANY
				 * @param {expression} ngInit {@link guide/expression Expression} to eval.
				 *
				 * @example
				 <example module="initExample">
				 <file name="index.html">
				 <script>
				 angular.module('initExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
				 <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
				 <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
				 </div>
				 </div>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
				 </file>
				 </example>
				 */
				var ngInitDirective = ngDirective({
					priority: 450,
					compile: function () {
						return {
							pre: function (scope, element, attrs) {
								scope.$eval(attrs.ngInit);
							}
						};
					}
				});

				/**
				 * @ngdoc directive
				 * @name ngList
				 *
				 * @description
				 * Text input that converts between a delimited string and an array of strings. The default
				 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
				 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
				 *
				 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
				 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
				 *   list item is respected. This implies that the user of the directive is responsible for
				 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
				 *   tab or newline character.
				 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
				 *   when joining the list items back together) and whitespace around each list item is stripped
				 *   before it is added to the model.
				 *
				 * ### Example with Validation
				 *
				 * <example name="ngList-directive" module="listExample">
				 *   <file name="app.js">
				 *      angular.module('listExample', [])
				 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
				 *   </file>
				 *   <file name="index.html">
				 *    <form name="myForm" ng-controller="ExampleController">
				 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
				 *      <span role="alert">
				 *        <span class="error" ng-show="myForm.namesInput.$error.required">
				 *        Required!</span>
				 *      </span>
				 *      <br>
				 *      <tt>names = {{names}}</tt><br/>
				 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
				 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
				 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
				 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
				 *     </form>
				 *   </file>
				 *   <file name="protractor.js" type="protractor">
				 *     var listInput = element(by.model('names'));
				 *     var names = element(by.exactBinding('names'));
				 *     var valid = element(by.binding('myForm.namesInput.$valid'));
				 *     var error = element(by.css('span.error'));
				 *
				 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
				 *
				 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
				 *   </file>
				 * </example>
				 *
				 * ### Example - splitting on whitespace
				 * <example name="ngList-directive-newlines">
				 *   <file name="index.html">
				 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
				 *    <pre>{{ list | json }}</pre>
				 *   </file>
				 *   <file name="protractor.js" type="protractor">
				 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
				 *   </file>
				 * </example>
				 *
				 * @element input
				 * @param {string=} ngList optional delimiter that should be used to split the value.
				 */
				var ngListDirective = function () {
					return {
						restrict: 'A',
						priority: 100,
						require: 'ngModel',
						link: function (scope, element, attr, ctrl) {
							// We want to control whitespace trimming so we use this convoluted approach
							// to access the ngList attribute, which doesn't pre-trim the attribute
							var ngList = element.attr(attr.$attr.ngList) || ', ';
							var trimValues = attr.ngTrim !== 'false';
							var separator = trimValues ? trim(ngList) : ngList;

							var parse = function (viewValue) {
								// If the viewValue is invalid (say required but empty) it will be `undefined`
								if (isUndefined(viewValue)) return;

								var list = [];

								if (viewValue) {
									forEach(viewValue.split(separator), function (value) {
										if (value) list.push(trimValues ? trim(value) : value);
									});
								}

								return list;
							};

							ctrl.$parsers.push(parse);
							ctrl.$formatters.push(function (value) {
								if (isArray(value)) {
									return value.join(ngList);
								}

								return undefined;
							});

							// Override the standard $isEmpty because an empty array means the input is empty.
							ctrl.$isEmpty = function (value) {
								return !value || !value.length;
							};
						}
					};
				};

				/* global VALID_CLASS: true,
				 INVALID_CLASS: true,
				 PRISTINE_CLASS: true,
				 DIRTY_CLASS: true,
				 UNTOUCHED_CLASS: true,
				 TOUCHED_CLASS: true,
				 */

				var VALID_CLASS = 'ng-valid',
					INVALID_CLASS = 'ng-invalid',
					PRISTINE_CLASS = 'ng-pristine',
					DIRTY_CLASS = 'ng-dirty',
					UNTOUCHED_CLASS = 'ng-untouched',
					TOUCHED_CLASS = 'ng-touched',
					PENDING_CLASS = 'ng-pending';


				var $ngModelMinErr = new minErr('ngModel');

				/**
				 * @ngdoc type
				 * @name ngModel.NgModelController
				 *
				 * @property {string} $viewValue Actual string value in the view.
				 * @property {*} $modelValue The value in the model that the control is bound to.
				 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
				 the control reads value from the DOM. The functions are called in array order, each passing
				 its return value through to the next. The last return value is forwarded to the
				 {@link ngModel.NgModelController#$validators `$validators`} collection.

				 Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
    `$viewValue`}.

				 Returning `undefined` from a parser means a parse error occurred. In that case,
				 no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
				 will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
				 is set to `true`. The parse error is stored in `ngModel.$error.parse`.

				 *
				 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
				 the model value changes. The functions are called in reverse array order, each passing the value through to the
				 next. The last return value is used as the actual DOM value.
				 Used to format / convert values for display in the control.
				 * ```js
				 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
				 * ngModel.$formatters.push(formatter);
				 * ```
				 *
				 * @property {Object.<string, function>} $validators A collection of validators that are applied
				 *      whenever the model value changes. The key value within the object refers to the name of the
				 *      validator while the function refers to the validation operation. The validation operation is
				 *      provided with the model value as an argument and must return a true or false value depending
				 *      on the response of that validation.
				 *
				 * ```js
				 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
				 * ```
				 *
				 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
				 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
				 *      is expected to return a promise when it is run during the model validation process. Once the promise
				 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
				 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
				 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
				 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
				 *      will only run once all synchronous validators have passed.
				 *
				 * Please note that if $http is used then it is important that the server returns a success HTTP response code
				 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
				 *
				 * ```js
				 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
				 * ```
				 *
				 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
				 *     view value has changed. It is called with no arguments, and its return value is ignored.
				 *     This can be used in place of additional $watches against the model value.
				 *
				 * @property {Object} $error An object hash with all failing validator ids as keys.
				 * @property {Object} $pending An object hash with all pending validator ids as keys.
				 *
				 * @property {boolean} $untouched True if control has not lost focus yet.
				 * @property {boolean} $touched True if control has lost focus.
				 * @property {boolean} $pristine True if user has not interacted with the control yet.
				 * @property {boolean} $dirty True if user has already interacted with the control.
				 * @property {boolean} $valid True if there is no error.
				 * @property {boolean} $invalid True if at least one error on the control.
				 * @property {string} $name The name attribute of the control.
				 *
				 * @description
				 *
				 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
				 * The controller contains services for data-binding, validation, CSS updates, and value formatting
				 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
				 * listening to DOM events.
				 * Such DOM related logic should be provided by other directives which make use of
				 * `NgModelController` for data-binding to control elements.
				 * Angular provides this DOM logic for most {@link input `input`} elements.
				 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
     * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
				 *
				 * @example
				 * ### Custom Control Example
				 * This example shows how to use `NgModelController` with a custom control to achieve
				 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
				 * collaborate together to achieve the desired result.
				 *
				 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
				 * contents be edited in place by the user.
				 *
				 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
				 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
				 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
				 * that content using the `$sce` service.
				 *
				 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
				 <file name="style.css">
				 [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }

				 .ng-invalid {
	        border: 1px solid red;
	      }

				 </file>
				 <file name="script.js">
				 angular.module('customControl', ['ngSanitize']).
				 directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model
	
	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };
	
	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize
	
	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if ( attrs.stripBr && html == '<br>' ) {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
				 </file>
				 <file name="index.html">
				 <form name="myForm">
				 <div contenteditable
				 name="myWidget" ng-model="userContent"
				 strip-br="true"
				 required>Change me!</div>
				 <span ng-show="myForm.myWidget.$error.required">Required!</span>
				 <hr>
				 <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
				 </form>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should data-bind and become invalid', function() {
	      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';
	
	      expect(contentEditable.getText()).toEqual(content);
	
	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
				 </file>
				 * </example>
				 *
				 *
				 */
				var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
					function ($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
						this.$viewValue = Number.NaN;
						this.$modelValue = Number.NaN;
						this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
						this.$validators = {};
						this.$asyncValidators = {};
						this.$parsers = [];
						this.$formatters = [];
						this.$viewChangeListeners = [];
						this.$untouched = true;
						this.$touched = false;
						this.$pristine = true;
						this.$dirty = false;
						this.$valid = true;
						this.$invalid = false;
						this.$error = {}; // keep invalid keys here
						this.$$success = {}; // keep valid keys here
						this.$pending = undefined; // keep pending keys here
						this.$name = $interpolate($attr.name || '', false)($scope);


						var parsedNgModel = $parse($attr.ngModel),
							parsedNgModelAssign = parsedNgModel.assign,
							ngModelGet = parsedNgModel,
							ngModelSet = parsedNgModelAssign,
							pendingDebounce = null,
							parserValid,
							ctrl = this;

						this.$$setOptions = function (options) {
							ctrl.$options = options;
							if (options && options.getterSetter) {
								var invokeModelGetter = $parse($attr.ngModel + '()'),
									invokeModelSetter = $parse($attr.ngModel + '($$$p)');

								ngModelGet = function ($scope) {
									var modelValue = parsedNgModel($scope);
									if (isFunction(modelValue)) {
										modelValue = invokeModelGetter($scope);
									}
									return modelValue;
								};
								ngModelSet = function ($scope, newValue) {
									if (isFunction(parsedNgModel($scope))) {
										invokeModelSetter($scope, {$$$p: ctrl.$modelValue});
									} else {
										parsedNgModelAssign($scope, ctrl.$modelValue);
									}
								};
							} else if (!parsedNgModel.assign) {
								throw $ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
									$attr.ngModel, startingTag($element));
							}
						};

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$render
						 *
						 * @description
						 * Called when the view needs to be updated. It is expected that the user of the ng-model
						 * directive will implement this method.
						 *
						 * The `$render()` method is invoked in the following situations:
						 *
						 * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
						 *   committed value then `$render()` is called to update the input control.
						 * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
						 *   the `$viewValue` are different from last time.
						 *
						 * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
						 * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`
						 * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
						 * invoked if you only change a property on the objects.
						 */
						this.$render = noop;

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$isEmpty
						 *
						 * @description
						 * This is called when we need to determine if the value of an input is empty.
						 *
						 * For instance, the required directive does this to work out if the input has data or not.
						 *
						 * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
						 *
						 * You can override this for input directives whose concept of being empty is different from the
						 * default. The `checkboxInputType` directive does this because in its case a value of `false`
						 * implies empty.
						 *
						 * @param {*} value The value of the input to check for emptiness.
						 * @returns {boolean} True if `value` is "empty".
						 */
						this.$isEmpty = function (value) {
							return isUndefined(value) || value === '' || value === null || value !== value;
						};

						var parentForm = $element.inheritedData('$formController') || nullFormCtrl,
							currentValidationRunId = 0;

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$setValidity
						 *
						 * @description
						 * Change the validity state, and notify the form.
						 *
						 * This method can be called within $parsers/$formatters or a custom validation implementation.
						 * However, in most cases it should be sufficient to use the `ngModel.$validators` and
						 * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
						 *
						 * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
						 *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
						 *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
						 *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
						 *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
						 *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
						 * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
						 *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
						 *                          Skipped is used by Angular when validators do not run because of parse errors and
						 *                          when `$asyncValidators` do not run because any of the `$validators` failed.
						 */
						addSetValidityMethod({
							ctrl: this,
							$element: $element,
							set: function (object, property) {
								object[property] = true;
							},
							unset: function (object, property) {
								delete object[property];
							},
							parentForm: parentForm,
							$animate: $animate
						});

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$setPristine
						 *
						 * @description
						 * Sets the control to its pristine state.
						 *
						 * This method can be called to remove the `ng-dirty` class and set the control to its pristine
						 * state (`ng-pristine` class). A model is considered to be pristine when the control
						 * has not been changed from when first compiled.
						 */
						this.$setPristine = function () {
							ctrl.$dirty = false;
							ctrl.$pristine = true;
							$animate.removeClass($element, DIRTY_CLASS);
							$animate.addClass($element, PRISTINE_CLASS);
						};

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$setDirty
						 *
						 * @description
						 * Sets the control to its dirty state.
						 *
						 * This method can be called to remove the `ng-pristine` class and set the control to its dirty
						 * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
						 * from when first compiled.
						 */
						this.$setDirty = function () {
							ctrl.$dirty = true;
							ctrl.$pristine = false;
							$animate.removeClass($element, PRISTINE_CLASS);
							$animate.addClass($element, DIRTY_CLASS);
							parentForm.$setDirty();
						};

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$setUntouched
						 *
						 * @description
						 * Sets the control to its untouched state.
						 *
						 * This method can be called to remove the `ng-touched` class and set the control to its
						 * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
						 * by default, however this function can be used to restore that state if the model has
						 * already been touched by the user.
						 */
						this.$setUntouched = function () {
							ctrl.$touched = false;
							ctrl.$untouched = true;
							$animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
						};

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$setTouched
						 *
						 * @description
						 * Sets the control to its touched state.
						 *
						 * This method can be called to remove the `ng-untouched` class and set the control to its
						 * touched state (`ng-touched` class). A model is considered to be touched when the user has
						 * first focused the control element and then shifted focus away from the control (blur event).
						 */
						this.$setTouched = function () {
							ctrl.$touched = true;
							ctrl.$untouched = false;
							$animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
						};

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$rollbackViewValue
						 *
						 * @description
						 * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
						 * which may be caused by a pending debounced event or because the input is waiting for a some
						 * future event.
						 *
						 * If you have an input that uses `ng-model-options` to set up debounced events or events such
						 * as blur you can have a situation where there is a period when the `$viewValue`
						 * is out of synch with the ngModel's `$modelValue`.
						 *
						 * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`
						 * programmatically before these debounced/future events have resolved/occurred, because Angular's
						 * dirty checking mechanism is not able to tell whether the model has actually changed or not.
						 *
						 * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
						 * input which may have such events pending. This is important in order to make sure that the
						 * input field will be updated with the new model value and any pending operations are cancelled.
						 *
						 * <example name="ng-model-cancel-update" module="cancel-update-example">
						 *   <file name="app.js">
						 *     angular.module('cancel-update-example', [])
						 *
						 *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.resetWithCancel = function(e) {
	   *         if (e.keyCode == 27) {
	   *           $scope.myForm.myInput1.$rollbackViewValue();
	   *           $scope.myValue = '';
	   *         }
	   *       };
	   *       $scope.resetWithoutCancel = function(e) {
	   *         if (e.keyCode == 27) {
	   *           $scope.myValue = '';
	   *         }
	   *       };
	   *     }]);
						 *   </file>
						 *   <file name="index.html">
						 *     <div ng-controller="CancelUpdateController">
						 *       <p>Try typing something in each input.  See that the model only updates when you
						 *          blur off the input.
						 *        </p>
						 *        <p>Now see what happens if you start typing then press the Escape key</p>
						 *
						 *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
						 *         <p id="inputDescription1">With $rollbackViewValue()</p>
						 *         <input name="myInput1" aria-describedby="inputDescription1" ng-model="myValue"
						 *                ng-keydown="resetWithCancel($event)"><br/>
						 *         myValue: "{{ myValue }}"
						 *
						 *         <p id="inputDescription2">Without $rollbackViewValue()</p>
						 *         <input name="myInput2" aria-describedby="inputDescription2" ng-model="myValue"
						 *                ng-keydown="resetWithoutCancel($event)"><br/>
						 *         myValue: "{{ myValue }}"
						 *       </form>
						 *     </div>
						 *   </file>
						 * </example>
						 */
						this.$rollbackViewValue = function () {
							$timeout.cancel(pendingDebounce);
							ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
							ctrl.$render();
						};

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$validate
						 *
						 * @description
						 * Runs each of the registered validators (first synchronous validators and then
						 * asynchronous validators).
						 * If the validity changes to invalid, the model will be set to `undefined`,
						 * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
						 * If the validity changes to valid, it will set the model to the last available valid
						 * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
						 */
						this.$validate = function () {
							// ignore $validate before model is initialized
							if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
								return;
							}

							var viewValue = ctrl.$$lastCommittedViewValue;
							// Note: we use the $$rawModelValue as $modelValue might have been
							// set to undefined during a view -> model update that found validation
							// errors. We can't parse the view here, since that could change
							// the model although neither viewValue nor the model on the scope changed
							var modelValue = ctrl.$$rawModelValue;

							var prevValid = ctrl.$valid;
							var prevModelValue = ctrl.$modelValue;

							var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

							ctrl.$$runValidators(modelValue, viewValue, function (allValid) {
								// If there was no change in validity, don't update the model
								// This prevents changing an invalid modelValue to undefined
								if (!allowInvalid && prevValid !== allValid) {
									// Note: Don't check ctrl.$valid here, as we could have
									// external validators (e.g. calculated on the server),
									// that just call $setValidity and need the model value
									// to calculate their validity.
									ctrl.$modelValue = allValid ? modelValue : undefined;

									if (ctrl.$modelValue !== prevModelValue) {
										ctrl.$$writeModelToScope();
									}
								}
							});

						};

						this.$$runValidators = function (modelValue, viewValue, doneCallback) {
							currentValidationRunId++;
							var localValidationRunId = currentValidationRunId;

							// check parser error
							if (!processParseErrors()) {
								validationDone(false);
								return;
							}
							if (!processSyncValidators()) {
								validationDone(false);
								return;
							}
							processAsyncValidators();

							function processParseErrors() {
								var errorKey = ctrl.$$parserName || 'parse';
								if (parserValid === undefined) {
									setValidity(errorKey, null);
								} else {
									if (!parserValid) {
										forEach(ctrl.$validators, function (v, name) {
											setValidity(name, null);
										});
										forEach(ctrl.$asyncValidators, function (v, name) {
											setValidity(name, null);
										});
									}
									// Set the parse error last, to prevent unsetting it, should a $validators key == parserName
									setValidity(errorKey, parserValid);
									return parserValid;
								}
								return true;
							}

							function processSyncValidators() {
								var syncValidatorsValid = true;
								forEach(ctrl.$validators, function (validator, name) {
									var result = validator(modelValue, viewValue);
									syncValidatorsValid = syncValidatorsValid && result;
									setValidity(name, result);
								});
								if (!syncValidatorsValid) {
									forEach(ctrl.$asyncValidators, function (v, name) {
										setValidity(name, null);
									});
									return false;
								}
								return true;
							}

							function processAsyncValidators() {
								var validatorPromises = [];
								var allValid = true;
								forEach(ctrl.$asyncValidators, function (validator, name) {
									var promise = validator(modelValue, viewValue);
									if (!isPromiseLike(promise)) {
										throw $ngModelMinErr("$asyncValidators",
											"Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
									}
									setValidity(name, undefined);
									validatorPromises.push(promise.then(function () {
										setValidity(name, true);
									}, function (error) {
										allValid = false;
										setValidity(name, false);
									}));
								});
								if (!validatorPromises.length) {
									validationDone(true);
								} else {
									$q.all(validatorPromises).then(function () {
										validationDone(allValid);
									}, noop);
								}
							}

							function setValidity(name, isValid) {
								if (localValidationRunId === currentValidationRunId) {
									ctrl.$setValidity(name, isValid);
								}
							}

							function validationDone(allValid) {
								if (localValidationRunId === currentValidationRunId) {

									doneCallback(allValid);
								}
							}
						};

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$commitViewValue
						 *
						 * @description
						 * Commit a pending update to the `$modelValue`.
						 *
						 * Updates may be pending by a debounced event or because the input is waiting for a some future
						 * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
						 * usually handles calling this in response to input events.
						 */
						this.$commitViewValue = function () {
							var viewValue = ctrl.$viewValue;

							$timeout.cancel(pendingDebounce);

							// If the view value has not changed then we should just exit, except in the case where there is
							// a native validator on the element. In this case the validation state may have changed even though
							// the viewValue has stayed empty.
							if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
								return;
							}
							ctrl.$$lastCommittedViewValue = viewValue;

							// change to dirty
							if (ctrl.$pristine) {
								this.$setDirty();
							}
							this.$$parseAndValidate();
						};

						this.$$parseAndValidate = function () {
							var viewValue = ctrl.$$lastCommittedViewValue;
							var modelValue = viewValue;
							parserValid = isUndefined(modelValue) ? undefined : true;

							if (parserValid) {
								for (var i = 0; i < ctrl.$parsers.length; i++) {
									modelValue = ctrl.$parsers[i](modelValue);
									if (isUndefined(modelValue)) {
										parserValid = false;
										break;
									}
								}
							}
							if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
								// ctrl.$modelValue has not been touched yet...
								ctrl.$modelValue = ngModelGet($scope);
							}
							var prevModelValue = ctrl.$modelValue;
							var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
							ctrl.$$rawModelValue = modelValue;

							if (allowInvalid) {
								ctrl.$modelValue = modelValue;
								writeToModelIfNeeded();
							}

							// Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
							// This can happen if e.g. $setViewValue is called from inside a parser
							ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function (allValid) {
								if (!allowInvalid) {
									// Note: Don't check ctrl.$valid here, as we could have
									// external validators (e.g. calculated on the server),
									// that just call $setValidity and need the model value
									// to calculate their validity.
									ctrl.$modelValue = allValid ? modelValue : undefined;
									writeToModelIfNeeded();
								}
							});

							function writeToModelIfNeeded() {
								if (ctrl.$modelValue !== prevModelValue) {
									ctrl.$$writeModelToScope();
								}
							}
						};

						this.$$writeModelToScope = function () {
							ngModelSet($scope, ctrl.$modelValue);
							forEach(ctrl.$viewChangeListeners, function (listener) {
								try {
									listener();
								} catch (e) {
									$exceptionHandler(e);
								}
							});
						};

						/**
						 * @ngdoc method
						 * @name ngModel.NgModelController#$setViewValue
						 *
						 * @description
						 * Update the view value.
						 *
						 * This method should be called when an input directive want to change the view value; typically,
						 * this is done from within a DOM event handler.
						 *
						 * For example {@link ng.directive:input input} calls it when the value of the input changes and
						 * {@link ng.directive:select select} calls it when an option is selected.
						 *
						 * If the new `value` is an object (rather than a string or a number), we should make a copy of the
						 * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep
						 * watch of objects, it only looks for a change of identity. If you only change the property of
						 * the object then ngModel will not realise that the object has changed and will not invoke the
						 * `$parsers` and `$validators` pipelines.
						 *
						 * For this reason, you should not change properties of the copy once it has been passed to
						 * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.
						 *
						 * When this method is called, the new `value` will be staged for committing through the `$parsers`
						 * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
						 * value sent directly for processing, finally to be applied to `$modelValue` and then the
						 * **expression** specified in the `ng-model` attribute.
						 *
						 * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
						 *
						 * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
						 * and the `default` trigger is not listed, all those actions will remain pending until one of the
						 * `updateOn` events is triggered on the DOM element.
						 * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
						 * directive is used with a custom debounce for this particular event.
						 *
						 * Note that calling this function does not trigger a `$digest`.
						 *
						 * @param {string} value Value from the view.
						 * @param {string} trigger Event that triggered the update.
						 */
						this.$setViewValue = function (value, trigger) {
							ctrl.$viewValue = value;
							if (!ctrl.$options || ctrl.$options.updateOnDefault) {
								ctrl.$$debounceViewValueCommit(trigger);
							}
						};

						this.$$debounceViewValueCommit = function (trigger) {
							var debounceDelay = 0,
								options = ctrl.$options,
								debounce;

							if (options && isDefined(options.debounce)) {
								debounce = options.debounce;
								if (isNumber(debounce)) {
									debounceDelay = debounce;
								} else if (isNumber(debounce[trigger])) {
									debounceDelay = debounce[trigger];
								} else if (isNumber(debounce['default'])) {
									debounceDelay = debounce['default'];
								}
							}

							$timeout.cancel(pendingDebounce);
							if (debounceDelay) {
								pendingDebounce = $timeout(function () {
									ctrl.$commitViewValue();
								}, debounceDelay);
							} else if ($rootScope.$$phase) {
								ctrl.$commitViewValue();
							} else {
								$scope.$apply(function () {
									ctrl.$commitViewValue();
								});
							}
						};

						// model -> value
						// Note: we cannot use a normal scope.$watch as we want to detect the following:
						// 1. scope value is 'a'
						// 2. user enters 'b'
						// 3. ng-change kicks in and reverts scope value to 'a'
						//    -> scope value did not change since the last digest as
						//       ng-change executes in apply phase
						// 4. view should be changed back to 'a'
						$scope.$watch(function ngModelWatch() {
							var modelValue = ngModelGet($scope);

							// if scope model value and ngModel value are out of sync
							// TODO(perf): why not move this to the action fn?
							if (modelValue !== ctrl.$modelValue &&
									// checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
								(ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
							) {
								ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
								parserValid = undefined;

								var formatters = ctrl.$formatters,
									idx = formatters.length;

								var viewValue = modelValue;
								while (idx--) {
									viewValue = formatters[idx](viewValue);
								}
								if (ctrl.$viewValue !== viewValue) {
									ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
									ctrl.$render();

									ctrl.$$runValidators(modelValue, viewValue, noop);
								}
							}

							return modelValue;
						});
					}];


				/**
				 * @ngdoc directive
				 * @name ngModel
				 *
				 * @element input
				 * @priority 1
				 *
				 * @description
				 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
				 * property on the scope using {@link ngModel.NgModelController NgModelController},
				 * which is created and exposed by this directive.
				 *
				 * `ngModel` is responsible for:
				 *
				 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
				 *   require.
				 * - Providing validation behavior (i.e. required, number, email, url).
				 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
				 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
				 * - Registering the control with its parent {@link ng.directive:form form}.
				 *
				 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
				 * current scope. If the property doesn't already exist on this scope, it will be created
				 * implicitly and added to the scope.
				 *
				 * For best practices on using `ngModel`, see:
				 *
				 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
				 *
				 * For basic examples, how to use `ngModel`, see:
				 *
				 *  - {@link ng.directive:input input}
				 *    - {@link input[text] text}
				 *    - {@link input[checkbox] checkbox}
				 *    - {@link input[radio] radio}
				 *    - {@link input[number] number}
				 *    - {@link input[email] email}
				 *    - {@link input[url] url}
				 *    - {@link input[date] date}
				 *    - {@link input[datetime-local] datetime-local}
				 *    - {@link input[time] time}
				 *    - {@link input[month] month}
				 *    - {@link input[week] week}
				 *  - {@link ng.directive:select select}
				 *  - {@link ng.directive:textarea textarea}
				 *
				 * # CSS classes
				 * The following CSS classes are added and removed on the associated input/select/textarea element
				 * depending on the validity of the model.
				 *
				 *  - `ng-valid`: the model is valid
				 *  - `ng-invalid`: the model is invalid
				 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
				 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
				 *  - `ng-pristine`: the control hasn't been interacted with yet
				 *  - `ng-dirty`: the control has been interacted with
				 *  - `ng-touched`: the control has been blurred
				 *  - `ng-untouched`: the control hasn't been blurred
				 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
				 *
				 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
				 *
				 * ## Animation Hooks
				 *
				 * Animations within models are triggered when any of the associated CSS classes are added and removed
				 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
				 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
				 * The animations that are triggered within ngModel are similar to how they work in ngClass and
				 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
				 *
				 * The following example shows a simple way to utilize CSS transitions to style an input element
				 * that has been rendered as invalid after it has been validated:
				 *
				 * <pre>
				 * //be sure to include ngAnimate as a module to hook into more
				 * //advanced animations
				 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
				 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
				 * </pre>
				 *
				 * @example
				 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
				 <file name="index.html">
				 <script>
				 angular.module('inputExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
				 </script>
				 <style>
				 .my-input {
	           -webkit-transition:all linear 0.5s;
	           transition:all linear 0.5s;
	           background: transparent;
	         }
				 .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
				 </style>
				 <p id="inputDescription">
				 Update input to see transitions when valid/invalid.
				 Integer is a valid value.
				 </p>
				 <form name="testForm" ng-controller="ExampleController">
				 <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
				 aria-describedby="inputDescription" />
				 </form>
				 </file>
				 * </example>
				 *
				 * ## Binding to a getter/setter
				 *
				 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
				 * function that returns a representation of the model when called with zero arguments, and sets
				 * the internal state of a model when called with an argument. It's sometimes useful to use this
				 * for models that have an internal representation that's different from what the model exposes
				 * to the view.
				 *
				 * <div class="alert alert-success">
				 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
				 * frequently than other parts of your code.
				 * </div>
				 *
				 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
				 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
				 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
				 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
				 *
				 * The following example shows how to use `ngModel` with a getter/setter:
				 *
				 * @example
				 * <example name="ngModel-getter-setter" module="getterSetterExample">
				 <file name="index.html">
				 <div ng-controller="ExampleController">
				 <form name="userForm">
				 <label>Name:
				 <input type="text" name="userName"
				 ng-model="user.name"
				 ng-model-options="{ getterSetter: true }" />
				 </label>
				 </form>
				 <pre>user.name = <span ng-bind="user.name()"></span></pre>
				 </div>
				 </file>
				 <file name="app.js">
				 angular.module('getterSetterExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
				 </file>
				 * </example>
				 */
				var ngModelDirective = ['$rootScope', function ($rootScope) {
					return {
						restrict: 'A',
						require: ['ngModel', '^?form', '^?ngModelOptions'],
						controller: NgModelController,
						// Prelink needs to run before any input directive
						// so that we can set the NgModelOptions in NgModelController
						// before anyone else uses it.
						priority: 1,
						compile: function ngModelCompile(element) {
							// Setup initial state of the control
							element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

							return {
								pre: function ngModelPreLink(scope, element, attr, ctrls) {
									var modelCtrl = ctrls[0],
										formCtrl = ctrls[1] || nullFormCtrl;

									modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

									// notify others, especially parent forms
									formCtrl.$addControl(modelCtrl);

									attr.$observe('name', function (newValue) {
										if (modelCtrl.$name !== newValue) {
											formCtrl.$$renameControl(modelCtrl, newValue);
										}
									});

									scope.$on('$destroy', function () {
										formCtrl.$removeControl(modelCtrl);
									});
								},
								post: function ngModelPostLink(scope, element, attr, ctrls) {
									var modelCtrl = ctrls[0];
									if (modelCtrl.$options && modelCtrl.$options.updateOn) {
										element.on(modelCtrl.$options.updateOn, function (ev) {
											modelCtrl.$$debounceViewValueCommit(ev && ev.type);
										});
									}

									element.on('blur', function (ev) {
										if (modelCtrl.$touched) return;

										if ($rootScope.$$phase) {
											scope.$evalAsync(modelCtrl.$setTouched);
										} else {
											scope.$apply(modelCtrl.$setTouched);
										}
									});
								}
							};
						}
					};
				}];

				var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

				/**
				 * @ngdoc directive
				 * @name ngModelOptions
				 *
				 * @description
				 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
				 * events that will trigger a model update and/or a debouncing delay so that the actual update only
				 * takes place when a timer expires; this timer will be reset after another change takes place.
				 *
				 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
				 * be different from the value in the actual model. This means that if you update the model you
				 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
				 * order to make sure it is synchronized with the model and that any debounced action is canceled.
				 *
				 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
				 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
				 * important because `form` controllers are published to the related scope under the name in their
				 * `name` attribute.
				 *
				 * Any pending changes will take place immediately when an enclosing form is submitted via the
				 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
				 * to have access to the updated model.
				 *
				 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
				 *
				 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
				 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
				 *     events using an space delimited list. There is a special event called `default` that
				 *     matches the default events belonging of the control.
				 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
				 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
				 *     custom value for each event. For example:
				 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`
				 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
				 *     not validate correctly instead of the default behavior of setting the model to undefined.
				 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
				 `ngModel` as getters/setters.
				 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
				 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
				 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
				 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
				 *     If not specified, the timezone of the browser will be used.
				 *
				 * @example

				 The following example shows how to override immediate updates. Changes on the inputs within the
				 form will update the model only when the control loses focus (blur event). If `escape` key is
				 pressed while the input field is focused, the value is reset to the value in the current model.

				 <example name="ngModelOptions-directive-blur" module="optionsExample">
				 <file name="index.html">
				 <div ng-controller="ExampleController">
				 <form name="userForm">
				 <label>Name:
				 <input type="text" name="userName"
				 ng-model="user.name"
				 ng-model-options="{ updateOn: 'blur' }"
				 ng-keyup="cancel($event)" />
				 </label><br />
				 <label>Other data:
				 <input type="text" ng-model="user.data" />
				 </label><br />
				 </form>
				 <pre>user.name = <span ng-bind="user.name"></span></pre>
				 </div>
				 </file>
				 <file name="app.js">
				 angular.module('optionsExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'say', data: '' };
	
	          $scope.cancel = function(e) {
	            if (e.keyCode == 27) {
	              $scope.userForm.userName.$rollbackViewValue();
	            }
	          };
	        }]);
				 </file>
				 <file name="protractor.js" type="protractor">
				 var model = element(by.binding('user.name'));
				 var input = element(by.model('user.name'));
				 var other = element(by.model('user.data'));

				 it('should allow custom events', function() {
	        input.sendKeys(' hello');
	        input.click();
	        expect(model.getText()).toEqual('say');
	        other.click();
	        expect(model.getText()).toEqual('say hello');
	      });

				 it('should $rollbackViewValue when model changes', function() {
	        input.sendKeys(' hello');
	        expect(input.getAttribute('value')).toEqual('say hello');
	        input.sendKeys(protractor.Key.ESCAPE);
	        expect(input.getAttribute('value')).toEqual('say');
	        other.click();
	        expect(model.getText()).toEqual('say');
	      });
				 </file>
				 </example>

				 This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
				 If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

				 <example name="ngModelOptions-directive-debounce" module="optionsExample">
				 <file name="index.html">
				 <div ng-controller="ExampleController">
				 <form name="userForm">
				 <label>Name:
				 <input type="text" name="userName"
				 ng-model="user.name"
				 ng-model-options="{ debounce: 1000 }" />
				 </label>
				 <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
				 <br />
				 </form>
				 <pre>user.name = <span ng-bind="user.name"></span></pre>
				 </div>
				 </file>
				 <file name="app.js">
				 angular.module('optionsExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'say' };
	        }]);
				 </file>
				 </example>

				 This one shows how to bind to getter/setters:

				 <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
				 <file name="index.html">
				 <div ng-controller="ExampleController">
				 <form name="userForm">
				 <label>Name:
				 <input type="text" name="userName"
				 ng-model="user.name"
				 ng-model-options="{ getterSetter: true }" />
				 </label>
				 </form>
				 <pre>user.name = <span ng-bind="user.name()"></span></pre>
				 </div>
				 </file>
				 <file name="app.js">
				 angular.module('getterSetterExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	          var _name = 'Brian';
	          $scope.user = {
	            name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	            }
	          };
	        }]);
				 </file>
				 </example>
				 */
				var ngModelOptionsDirective = function () {
					return {
						restrict: 'A',
						controller: ['$scope', '$attrs', function ($scope, $attrs) {
							var that = this;
							this.$options = copy($scope.$eval($attrs.ngModelOptions));
							// Allow adding/overriding bound events
							if (this.$options.updateOn !== undefined) {
								this.$options.updateOnDefault = false;
								// extract "default" pseudo-event from list of events that can trigger a model update
								this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function () {
									that.$options.updateOnDefault = true;
									return ' ';
								}));
							} else {
								this.$options.updateOnDefault = true;
							}
						}]
					};
				};


				// helper methods
				function addSetValidityMethod(context) {
					var ctrl = context.ctrl,
						$element = context.$element,
						classCache = {},
						set = context.set,
						unset = context.unset,
						parentForm = context.parentForm,
						$animate = context.$animate;

					classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

					ctrl.$setValidity = setValidity;

					function setValidity(validationErrorKey, state, controller) {
						if (state === undefined) {
							createAndSet('$pending', validationErrorKey, controller);
						} else {
							unsetAndCleanup('$pending', validationErrorKey, controller);
						}
						if (!isBoolean(state)) {
							unset(ctrl.$error, validationErrorKey, controller);
							unset(ctrl.$$success, validationErrorKey, controller);
						} else {
							if (state) {
								unset(ctrl.$error, validationErrorKey, controller);
								set(ctrl.$$success, validationErrorKey, controller);
							} else {
								set(ctrl.$error, validationErrorKey, controller);
								unset(ctrl.$$success, validationErrorKey, controller);
							}
						}
						if (ctrl.$pending) {
							cachedToggleClass(PENDING_CLASS, true);
							ctrl.$valid = ctrl.$invalid = undefined;
							toggleValidationCss('', null);
						} else {
							cachedToggleClass(PENDING_CLASS, false);
							ctrl.$valid = isObjectEmpty(ctrl.$error);
							ctrl.$invalid = !ctrl.$valid;
							toggleValidationCss('', ctrl.$valid);
						}

						// re-read the state as the set/unset methods could have
						// combined state in ctrl.$error[validationError] (used for forms),
						// where setting/unsetting only increments/decrements the value,
						// and does not replace it.
						var combinedState;
						if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
							combinedState = undefined;
						} else if (ctrl.$error[validationErrorKey]) {
							combinedState = false;
						} else if (ctrl.$$success[validationErrorKey]) {
							combinedState = true;
						} else {
							combinedState = null;
						}

						toggleValidationCss(validationErrorKey, combinedState);
						parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
					}

					function createAndSet(name, value, controller) {
						if (!ctrl[name]) {
							ctrl[name] = {};
						}
						set(ctrl[name], value, controller);
					}

					function unsetAndCleanup(name, value, controller) {
						if (ctrl[name]) {
							unset(ctrl[name], value, controller);
						}
						if (isObjectEmpty(ctrl[name])) {
							ctrl[name] = undefined;
						}
					}

					function cachedToggleClass(className, switchValue) {
						if (switchValue && !classCache[className]) {
							$animate.addClass($element, className);
							classCache[className] = true;
						} else if (!switchValue && classCache[className]) {
							$animate.removeClass($element, className);
							classCache[className] = false;
						}
					}

					function toggleValidationCss(validationErrorKey, isValid) {
						validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

						cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
						cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
					}
				}

				function isObjectEmpty(obj) {
					if (obj) {
						for (var prop in obj) {
							if (obj.hasOwnProperty(prop)) {
								return false;
							}
						}
					}
					return true;
				}

				/**
				 * @ngdoc directive
				 * @name ngNonBindable
				 * @restrict AC
				 * @priority 1000
				 *
				 * @description
				 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
				 * DOM element. This is useful if the element contains what appears to be Angular directives and
				 * bindings but which should be ignored by Angular. This could be the case if you have a site that
				 * displays snippets of code, for instance.
				 *
				 * @element ANY
				 *
				 * @example
				 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
				 * but the one wrapped in `ngNonBindable` is left alone.
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <div>Normal: {{1 + 2}}</div>
				 <div ng-non-bindable>Ignored: {{1 + 2}}</div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
				 </file>
				 </example>
				 */
				var ngNonBindableDirective = ngDirective({terminal: true, priority: 1000});

				/* global jqLiteRemove */

				var ngOptionsMinErr = minErr('ngOptions');

				/**
				 * @ngdoc directive
				 * @name ngOptions
				 * @restrict A
				 *
				 * @description
				 *
				 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
				 * elements for the `<select>` element using the array or object obtained by evaluating the
				 * `ngOptions` comprehension expression.
				 *
				 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
				 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
				 * increasing speed by not creating a new scope for each repeated instance, as well as providing
				 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
				 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
				 *  to a non-string value. This is because an option element can only be bound to string values at
				 * present.
				 *
				 * When an item in the `<select>` menu is selected, the array element or object property
				 * represented by the selected option will be bound to the model identified by the `ngModel`
				 * directive.
				 *
				 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
				 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
				 * option. See example below for demonstration.
				 *
				 * ## Complex Models (objects or collections)
				 *
				 * **Note:** By default, `ngModel` watches the model by reference, not value. This is important when
				 * binding any input directive to a model that is an object or a collection.
				 *
				 * Since this is a common situation for `ngOptions` the directive additionally watches the model using
				 * `$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in
				 * the options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual
				 * object/collection has not changed identity but only a property on the object or an item in the collection
				 * changes.
				 *
				 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
				 * if the model is an array). This means that changing a property deeper inside the object/collection that the
				 * first level will not trigger a re-rendering.
				 *
				 *
				 * ## `select` **`as`**
				 *
				 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
				 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
				 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
				 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
				 *
				 *
				 * ### `select` **`as`** and **`track by`**
				 *
				 * <div class="alert alert-warning">
				 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.
				 * </div>
				 *
				 * Consider the following example:
				 *
				 * ```html
				 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected">
				 * ```
				 *
				 * ```js
				 * $scope.values = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
				 *
				 * $scope.selected = { name: 'aSubItem' };
				 * ```
				 *
				 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element
				 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the
				 * following:
				 *
				 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`
				 * 2. Apply **`track by`** to the already selected value in `ngModel`.
				 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected
				 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to
				 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not
				 *    selected" option.
				 *
				 *
				 * @param {string} ngModel Assignable angular expression to data-bind to.
				 * @param {string=} name Property name of the form under which the control is published.
				 * @param {string=} required The control is considered valid only if value is entered.
				 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
				 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
				 *    `required` when you want to data-bind to the `required` attribute.
				 * @param {comprehension_expression=} ngOptions in one of the following forms:
				 *
				 *   * for array data sources:
				 *     * `label` **`for`** `value` **`in`** `array`
				 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
				 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
				 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
				 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
				 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
				 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
				 *        (for including a filter with `track by`)
				 *   * for object data sources:
				 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
				 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
				 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
				 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
				 *     * `select` **`as`** `label` **`group by`** `group`
				 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
				 *     * `select` **`as`** `label` **`disable when`** `disable`
				 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
				 *
				 * Where:
				 *
				 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
				 *   * `value`: local variable which will refer to each item in the `array` or each property value
				 *      of `object` during iteration.
				 *   * `key`: local variable which will refer to a property name in `object` during iteration.
				 *   * `label`: The result of this expression will be the label for `<option>` element. The
				 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
				 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
				 *      element. If not specified, `select` expression will default to `value`.
				 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
				 *      DOM element.
				 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
				 *      element. Return `true` to disable.
				 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
				 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
				 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
				 *      even when the options are recreated (e.g. reloaded from the server).
				 *
				 * @example
				 <example module="selectExample">
				 <file name="index.html">
				 <script>
				 angular.module('selectExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <ul>
				 <li ng-repeat="color in colors">
				 <label>Name: <input ng-model="color.name"></label>
				 <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
				 <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
				 </li>
				 <li>
				 <button ng-click="colors.push({})">add</button>
				 </li>
				 </ul>
				 <hr/>
				 <label>Color (null not allowed):
				 <select ng-model="myColor" ng-options="color.name for color in colors"></select>
				 </label><br/>
				 <label>Color (null allowed):
				 <span  class="nullable">
				 <select ng-model="myColor" ng-options="color.name for color in colors">
				 <option value="">-- choose color --</option>
				 </select>
				 </span></label><br/>

				 <label>Color grouped by shade:
				 <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
				 </select>
				 </label><br/>

				 <label>Color grouped by shade, with some disabled:
				 <select ng-model="myColor"
				 ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
				 </select>
				 </label><br/>



				 Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
				 <br/>
				 <hr/>
				 Currently selected: {{ {selected_color:myColor} }}
				 <div style="border:solid 1px black; height:20px"
				 ng-style="{'background-color':myColor.name}">
				 </div>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
				 </file>
				 </example>
				 */

				// jshint maxlen: false
				//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
				var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
				// 1: value expression (valueFn)
				// 2: label expression (displayFn)
				// 3: group by expression (groupByFn)
				// 4: disable when expression (disableWhenFn)
				// 5: array item variable name
				// 6: object item key variable name
				// 7: object item value variable name
				// 8: collection expression
				// 9: track by expression
				// jshint maxlen: 100


				var ngOptionsDirective = ['$compile', '$parse', function ($compile, $parse) {

					function parseOptionsExpression(optionsExp, selectElement, scope) {

						var match = optionsExp.match(NG_OPTIONS_REGEXP);
						if (!(match)) {
							throw ngOptionsMinErr('iexp',
								"Expected expression in form of " +
								"'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
								" but got '{0}'. Element: {1}",
								optionsExp, startingTag(selectElement));
						}

						// Extract the parts from the ngOptions expression

						// The variable name for the value of the item in the collection
						var valueName = match[5] || match[7];
						// The variable name for the key of the item in the collection
						var keyName = match[6];

						// An expression that generates the viewValue for an option if there is a label expression
						var selectAs = / as /.test(match[0]) && match[1];
						// An expression that is used to track the id of each object in the options collection
						var trackBy = match[9];
						// An expression that generates the viewValue for an option if there is no label expression
						var valueFn = $parse(match[2] ? match[1] : valueName);
						var selectAsFn = selectAs && $parse(selectAs);
						var viewValueFn = selectAsFn || valueFn;
						var trackByFn = trackBy && $parse(trackBy);

						// Get the value by which we are going to track the option
						// if we have a trackFn then use that (passing scope and locals)
						// otherwise just hash the given viewValue
						var getTrackByValueFn = trackBy ?
							function (value, locals) {
								return trackByFn(scope, locals);
							} :
							function getHashOfValue(value) {
								return hashKey(value);
							};
						var getTrackByValue = function (value, key) {
							return getTrackByValueFn(value, getLocals(value, key));
						};

						var displayFn = $parse(match[2] || match[1]);
						var groupByFn = $parse(match[3] || '');
						var disableWhenFn = $parse(match[4] || '');
						var valuesFn = $parse(match[8]);

						var locals = {};
						var getLocals = keyName ? function (value, key) {
							locals[keyName] = key;
							locals[valueName] = value;
							return locals;
						} : function (value) {
							locals[valueName] = value;
							return locals;
						};


						function Option(selectValue, viewValue, label, group, disabled) {
							this.selectValue = selectValue;
							this.viewValue = viewValue;
							this.label = label;
							this.group = group;
							this.disabled = disabled;
						}

						function getOptionValuesKeys(optionValues) {
							var optionValuesKeys;

							if (!keyName && isArrayLike(optionValues)) {
								optionValuesKeys = optionValues;
							} else {
								// if object, extract keys, in enumeration order, unsorted
								optionValuesKeys = [];
								for (var itemKey in optionValues) {
									if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
										optionValuesKeys.push(itemKey);
									}
								}
							}
							return optionValuesKeys;
						}

						return {
							trackBy: trackBy,
							getTrackByValue: getTrackByValue,
							getWatchables: $parse(valuesFn, function (optionValues) {
								// Create a collection of things that we would like to watch (watchedArray)
								// so that they can all be watched using a single $watchCollection
								// that only runs the handler once if anything changes
								var watchedArray = [];
								optionValues = optionValues || [];

								var optionValuesKeys = getOptionValuesKeys(optionValues);
								var optionValuesLength = optionValuesKeys.length;
								for (var index = 0; index < optionValuesLength; index++) {
									var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
									var value = optionValues[key];

									var locals = getLocals(optionValues[key], key);
									var selectValue = getTrackByValueFn(optionValues[key], locals);
									watchedArray.push(selectValue);

									// Only need to watch the displayFn if there is a specific label expression
									if (match[2] || match[1]) {
										var label = displayFn(scope, locals);
										watchedArray.push(label);
									}

									// Only need to watch the disableWhenFn if there is a specific disable expression
									if (match[4]) {
										var disableWhen = disableWhenFn(scope, locals);
										watchedArray.push(disableWhen);
									}
								}
								return watchedArray;
							}),

							getOptions: function () {

								var optionItems = [];
								var selectValueMap = {};

								// The option values were already computed in the `getWatchables` fn,
								// which must have been called to trigger `getOptions`
								var optionValues = valuesFn(scope) || [];
								var optionValuesKeys = getOptionValuesKeys(optionValues);
								var optionValuesLength = optionValuesKeys.length;

								for (var index = 0; index < optionValuesLength; index++) {
									var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
									var value = optionValues[key];
									var locals = getLocals(value, key);
									var viewValue = viewValueFn(scope, locals);
									var selectValue = getTrackByValueFn(viewValue, locals);
									var label = displayFn(scope, locals);
									var group = groupByFn(scope, locals);
									var disabled = disableWhenFn(scope, locals);
									var optionItem = new Option(selectValue, viewValue, label, group, disabled);

									optionItems.push(optionItem);
									selectValueMap[selectValue] = optionItem;
								}

								return {
									items: optionItems,
									selectValueMap: selectValueMap,
									getOptionFromViewValue: function (value) {
										return selectValueMap[getTrackByValue(value)];
									},
									getViewValueFromOption: function (option) {
										// If the viewValue could be an object that may be mutated by the application,
										// we need to make a copy and not return the reference to the value on the option.
										return trackBy ? angular.copy(option.viewValue) : option.viewValue;
									}
								};
							}
						};
					}


					// we can't just jqLite('<option>') since jqLite is not smart enough
					// to create it in <select> and IE barfs otherwise.
					var optionTemplate = document.createElement('option'),
						optGroupTemplate = document.createElement('optgroup');

					return {
						restrict: 'A',
						terminal: true,
						require: ['select', '?ngModel'],
						link: function (scope, selectElement, attr, ctrls) {

							// if ngModel is not defined, we don't need to do anything
							var ngModelCtrl = ctrls[1];
							if (!ngModelCtrl) return;

							var selectCtrl = ctrls[0];
							var multiple = attr.multiple;

							// The emptyOption allows the application developer to provide their own custom "empty"
							// option when the viewValue does not match any of the option values.
							var emptyOption;
							for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
								if (children[i].value === '') {
									emptyOption = children.eq(i);
									break;
								}
							}

							var providedEmptyOption = !!emptyOption;

							var unknownOption = jqLite(optionTemplate.cloneNode(false));
							unknownOption.val('?');

							var options;
							var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);


							var renderEmptyOption = function () {
								if (!providedEmptyOption) {
									selectElement.prepend(emptyOption);
								}
								selectElement.val('');
								emptyOption.prop('selected', true); // needed for IE
								emptyOption.attr('selected', true);
							};

							var removeEmptyOption = function () {
								if (!providedEmptyOption) {
									emptyOption.remove();
								}
							};


							var renderUnknownOption = function () {
								selectElement.prepend(unknownOption);
								selectElement.val('?');
								unknownOption.prop('selected', true); // needed for IE
								unknownOption.attr('selected', true);
							};

							var removeUnknownOption = function () {
								unknownOption.remove();
							};


							// Update the controller methods for multiple selectable options
							if (!multiple) {

								selectCtrl.writeValue = function writeNgOptionsValue(value) {
									var option = options.getOptionFromViewValue(value);

									if (option && !option.disabled) {
										if (selectElement[0].value !== option.selectValue) {
											removeUnknownOption();
											removeEmptyOption();

											selectElement[0].value = option.selectValue;
											option.element.selected = true;
											option.element.setAttribute('selected', 'selected');
										}
									} else {
										if (value === null || providedEmptyOption) {
											removeUnknownOption();
											renderEmptyOption();
										} else {
											removeEmptyOption();
											renderUnknownOption();
										}
									}
								};

								selectCtrl.readValue = function readNgOptionsValue() {

									var selectedOption = options.selectValueMap[selectElement.val()];

									if (selectedOption && !selectedOption.disabled) {
										removeEmptyOption();
										removeUnknownOption();
										return options.getViewValueFromOption(selectedOption);
									}
									return null;
								};

								// If we are using `track by` then we must watch the tracked value on the model
								// since ngModel only watches for object identity change
								if (ngOptions.trackBy) {
									scope.$watch(
										function () {
											return ngOptions.getTrackByValue(ngModelCtrl.$viewValue);
										},
										function () {
											ngModelCtrl.$render();
										}
									);
								}

							} else {

								ngModelCtrl.$isEmpty = function (value) {
									return !value || value.length === 0;
								};


								selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
									options.items.forEach(function (option) {
										option.element.selected = false;
									});

									if (value) {
										value.forEach(function (item) {
											var option = options.getOptionFromViewValue(item);
											if (option && !option.disabled) option.element.selected = true;
										});
									}
								};


								selectCtrl.readValue = function readNgOptionsMultiple() {
									var selectedValues = selectElement.val() || [],
										selections = [];

									forEach(selectedValues, function (value) {
										var option = options.selectValueMap[value];
										if (!option.disabled) selections.push(options.getViewValueFromOption(option));
									});

									return selections;
								};

								// If we are using `track by` then we must watch these tracked values on the model
								// since ngModel only watches for object identity change
								if (ngOptions.trackBy) {

									scope.$watchCollection(function () {
										if (isArray(ngModelCtrl.$viewValue)) {
											return ngModelCtrl.$viewValue.map(function (value) {
												return ngOptions.getTrackByValue(value);
											});
										}
									}, function () {
										ngModelCtrl.$render();
									});

								}
							}


							if (providedEmptyOption) {

								// we need to remove it before calling selectElement.empty() because otherwise IE will
								// remove the label from the element. wtf?
								emptyOption.remove();

								// compile the element since there might be bindings in it
								$compile(emptyOption)(scope);

								// remove the class, which is added automatically because we recompile the element and it
								// becomes the compilation root
								emptyOption.removeClass('ng-scope');
							} else {
								emptyOption = jqLite(optionTemplate.cloneNode(false));
							}

							// We need to do this here to ensure that the options object is defined
							// when we first hit it in writeNgOptionsValue
							updateOptions();

							// We will re-render the option elements if the option values or labels change
							scope.$watchCollection(ngOptions.getWatchables, updateOptions);

							// ------------------------------------------------------------------ //


							function updateOptionElement(option, element) {
								option.element = element;
								element.disabled = option.disabled;
								if (option.value !== element.value) element.value = option.selectValue;
								if (option.label !== element.label) {
									element.label = option.label;
									element.textContent = option.label;
								}
							}

							function addOrReuseElement(parent, current, type, templateElement) {
								var element;
								// Check whether we can reuse the next element
								if (current && lowercase(current.nodeName) === type) {
									// The next element is the right type so reuse it
									element = current;
								} else {
									// The next element is not the right type so create a new one
									element = templateElement.cloneNode(false);
									if (!current) {
										// There are no more elements so just append it to the select
										parent.appendChild(element);
									} else {
										// The next element is not a group so insert the new one
										parent.insertBefore(element, current);
									}
								}
								return element;
							}


							function removeExcessElements(current) {
								var next;
								while (current) {
									next = current.nextSibling;
									jqLiteRemove(current);
									current = next;
								}
							}


							function skipEmptyAndUnknownOptions(current) {
								var emptyOption_ = emptyOption && emptyOption[0];
								var unknownOption_ = unknownOption && unknownOption[0];

								if (emptyOption_ || unknownOption_) {
									while (current &&
									(current === emptyOption_ ||
									current === unknownOption_)) {
										current = current.nextSibling;
									}
								}
								return current;
							}


							function updateOptions() {

								var previousValue = options && selectCtrl.readValue();

								options = ngOptions.getOptions();

								var groupMap = {};
								var currentElement = selectElement[0].firstChild;

								// Ensure that the empty option is always there if it was explicitly provided
								if (providedEmptyOption) {
									selectElement.prepend(emptyOption);
								}

								currentElement = skipEmptyAndUnknownOptions(currentElement);

								options.items.forEach(function updateOption(option) {
									var group;
									var groupElement;
									var optionElement;

									if (option.group) {

										// This option is to live in a group
										// See if we have already created this group
										group = groupMap[option.group];

										if (!group) {

											// We have not already created this group
											groupElement = addOrReuseElement(selectElement[0],
												currentElement,
												'optgroup',
												optGroupTemplate);
											// Move to the next element
											currentElement = groupElement.nextSibling;

											// Update the label on the group element
											groupElement.label = option.group;

											// Store it for use later
											group = groupMap[option.group] = {
												groupElement: groupElement,
												currentOptionElement: groupElement.firstChild
											};

										}

										// So now we have a group for this option we add the option to the group
										optionElement = addOrReuseElement(group.groupElement,
											group.currentOptionElement,
											'option',
											optionTemplate);
										updateOptionElement(option, optionElement);
										// Move to the next element
										group.currentOptionElement = optionElement.nextSibling;

									} else {

										// This option is not in a group
										optionElement = addOrReuseElement(selectElement[0],
											currentElement,
											'option',
											optionTemplate);
										updateOptionElement(option, optionElement);
										// Move to the next element
										currentElement = optionElement.nextSibling;
									}
								});


								// Now remove all excess options and group
								Object.keys(groupMap).forEach(function (key) {
									removeExcessElements(groupMap[key].currentOptionElement);
								});
								removeExcessElements(currentElement);

								ngModelCtrl.$render();

								// Check to see if the value has changed due to the update to the options
								if (!ngModelCtrl.$isEmpty(previousValue)) {
									var nextValue = selectCtrl.readValue();
									if (ngOptions.trackBy ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
										ngModelCtrl.$setViewValue(nextValue);
										ngModelCtrl.$render();
									}
								}

							}

						}
					};
				}];

				/**
				 * @ngdoc directive
				 * @name ngPluralize
				 * @restrict EA
				 *
				 * @description
				 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
				 * These rules are bundled with angular.js, but can be overridden
				 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
				 * by specifying the mappings between
				 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
				 * and the strings to be displayed.
				 *
				 * # Plural categories and explicit number rules
				 * There are two
				 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
				 * in Angular's default en-US locale: "one" and "other".
				 *
				 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
				 * any number that is not 1), an explicit number rule can only match one number. For example, the
				 * explicit number rule for "3" matches the number 3. There are examples of plural categories
				 * and explicit number rules throughout the rest of this documentation.
				 *
				 * # Configuring ngPluralize
				 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
				 * You can also provide an optional attribute, `offset`.
				 *
				 * The value of the `count` attribute can be either a string or an {@link guide/expression
     * Angular expression}; these are evaluated on the current scope for its bound value.
				 *
				 * The `when` attribute specifies the mappings between plural categories and the actual
				 * string to be displayed. The value of the attribute should be a JSON object.
				 *
				 * The following example shows how to configure ngPluralize:
				 *
				 * ```html
				 * <ng-pluralize count="personCount"
				 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
				 * </ng-pluralize>
				 *```
				 *
				 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
				 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
				 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
				 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
				 * show "a dozen people are viewing".
				 *
				 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
				 * into pluralized strings. In the previous example, Angular will replace `{}` with
				 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
				 * for <span ng-non-bindable>{{numberExpression}}</span>.
				 *
				 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
				 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
				 *
				 * # Configuring ngPluralize with offset
				 * The `offset` attribute allows further customization of pluralized text, which can result in
				 * a better user experience. For example, instead of the message "4 people are viewing this document",
				 * you might display "John, Kate and 2 others are viewing this document".
				 * The offset attribute allows you to offset a number by any desired value.
				 * Let's take a look at an example:
				 *
				 * ```html
				 * <ng-pluralize count="personCount" offset=2
				 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
				 * </ng-pluralize>
				 * ```
				 *
				 * Notice that we are still using two plural categories(one, other), but we added
				 * three explicit number rules 0, 1 and 2.
				 * When one person, perhaps John, views the document, "John is viewing" will be shown.
				 * When three people view the document, no explicit number rule is found, so
				 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
				 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
				 * is shown.
				 *
				 * Note that when you specify offsets, you must provide explicit number rules for
				 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
				 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
				 * plural categories "one" and "other".
				 *
				 * @param {string|expression} count The variable to be bound to.
				 * @param {string} when The mapping between plural category to its corresponding strings.
				 * @param {number=} offset Offset to deduct from the total number.
				 *
				 * @example
				 <example module="pluralizeExample">
				 <file name="index.html">
				 <script>
				 angular.module('pluralizeExample', [])
				 .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
				 <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
				 <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

				 <!--- Example with simple pluralization rules for en locale --->
				 Without Offset:
				 <ng-pluralize count="personCount"
				 when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
				 </ng-pluralize><br>

				 <!--- Example with offset --->
				 With Offset(2):
				 <ng-pluralize count="personCount" offset=2
				 when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
				 </ng-pluralize>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));
	
	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('0');
	
	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('2');
	
	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('3');
	
	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('4');
	
	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
				 it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
				 </file>
				 </example>
				 */
				var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function ($locale, $interpolate, $log) {
					var BRACE = /{}/g,
						IS_WHEN = /^when(Minus)?(.+)$/;

					return {
						link: function (scope, element, attr) {
							var numberExp = attr.count,
								whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
								offset = attr.offset || 0,
								whens = scope.$eval(whenExp) || {},
								whensExpFns = {},
								startSymbol = $interpolate.startSymbol(),
								endSymbol = $interpolate.endSymbol(),
								braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
								watchRemover = angular.noop,
								lastCount;

							forEach(attr, function (expression, attributeName) {
								var tmpMatch = IS_WHEN.exec(attributeName);
								if (tmpMatch) {
									var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
									whens[whenKey] = element.attr(attr.$attr[attributeName]);
								}
							});
							forEach(whens, function (expression, key) {
								whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

							});

							scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
								var count = parseFloat(newVal);
								var countIsNaN = isNaN(count);

								if (!countIsNaN && !(count in whens)) {
									// If an explicit number rule such as 1, 2, 3... is defined, just use it.
									// Otherwise, check it against pluralization rules in $locale service.
									count = $locale.pluralCat(count - offset);
								}

								// If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
								// In JS `NaN !== NaN`, so we have to exlicitly check.
								if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
									watchRemover();
									var whenExpFn = whensExpFns[count];
									if (isUndefined(whenExpFn)) {
										if (newVal != null) {
											$log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
										}
										watchRemover = noop;
										updateElementText();
									} else {
										watchRemover = scope.$watch(whenExpFn, updateElementText);
									}
									lastCount = count;
								}
							});

							function updateElementText(newText) {
								element.text(newText || '');
							}
						}
					};
				}];

				/**
				 * @ngdoc directive
				 * @name ngRepeat
				 * @multiElement
				 *
				 * @description
				 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
				 * instance gets its own scope, where the given loop variable is set to the current collection item,
				 * and `$index` is set to the item index or key.
				 *
				 * Special properties are exposed on the local scope of each template instance, including:
				 *
				 * | Variable  | Type            | Details                                                                     |
				 * |-----------|-----------------|-----------------------------------------------------------------------------|
				 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
				 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
				 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
				 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
				 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
				 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
				 *
				 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
				 * This may be useful when, for instance, nesting ngRepeats.
				 *
				 *
				 * # Iterating over object properties
				 *
				 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
				 * syntax:
				 *
				 * ```js
				 * <div ng-repeat="(key, value) in myObj"> ... </div>
				 * ```
				 *
				 * You need to be aware that the JavaScript specification does not define the order of keys
				 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive
				 * used to sort the keys alphabetically.)
				 *
				 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser
				 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing
				 * keys in the order in which they were defined, although there are exceptions when keys are deleted
				 * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues
				 *
				 * If this is not desired, the recommended workaround is to convert your object into an array
				 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could
				 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
				 * or implement a `$watch` on the object yourself.
				 *
				 *
				 * # Tracking and Duplicates
				 *
				 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:
				 *
				 * * When an item is added, a new instance of the template is added to the DOM.
				 * * When an item is removed, its template instance is removed from the DOM.
				 * * When items are reordered, their respective templates are reordered in the DOM.
				 *
				 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when
				 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection
				 * items and DOM elements.
				 *
				 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
				 * with your own using the `track by` expression.
				 *
				 * For example, you may track items by the index of each item in the collection, using the
				 * special scope property `$index`:
				 * ```html
				 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
				 *      {{n}}
				 *    </div>
				 * ```
				 *
				 * You may use arbitrary expressions in `track by`, including references to custom functions
				 * on the scope:
				 * ```html
				 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
				 *      {{n}}
				 *    </div>
				 * ```
				 *
				 * If you are working with objects that have an identifier property, you can track
				 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
				 * will not have to rebuild the DOM elements for items it has already rendered, even if the
				 * JavaScript objects in the collection have been substituted for new ones:
				 * ```html
				 *    <div ng-repeat="model in collection track by model.id">
				 *      {{model.name}}
				 *    </div>
				 * ```
				 *
				 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
				 * `$id` function, which tracks items by their identity:
				 * ```html
				 *    <div ng-repeat="obj in collection track by $id(obj)">
				 *      {{obj.prop}}
				 *    </div>
				 * ```
				 *
				 * <div class="alert alert-warning">
				 * **Note:** `track by` must always be the last expression:
				 * </div>
				 * ```
				 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
				 *     {{model.name}}
				 * </div>
				 * ```
				 *
				 * # Special repeat start and end points
				 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
				 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
				 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
				 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
				 *
				 * The example below makes use of this feature:
				 * ```html
				 *   <header ng-repeat-start="item in items">
				 *     Header {{ item }}
				 *   </header>
				 *   <div class="body">
				 *     Body {{ item }}
				 *   </div>
				 *   <footer ng-repeat-end>
				 *     Footer {{ item }}
				 *   </footer>
				 * ```
				 *
				 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
				 * ```html
				 *   <header>
				 *     Header A
				 *   </header>
				 *   <div class="body">
				 *     Body A
				 *   </div>
				 *   <footer>
				 *     Footer A
				 *   </footer>
				 *   <header>
				 *     Header B
				 *   </header>
				 *   <div class="body">
				 *     Body B
				 *   </div>
				 *   <footer>
				 *     Footer B
				 *   </footer>
				 * ```
				 *
				 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
				 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
				 *
				 * @animations
				 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
				 *
				 * **.leave** - when an item is removed from the list or when an item is filtered out
				 *
				 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
				 *
				 * @element ANY
				 * @scope
				 * @priority 1000
				 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
				 *   formats are currently supported:
				 *
				 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
				 *     is a scope expression giving the collection to enumerate.
				 *
				 *     For example: `album in artist.albums`.
				 *
				 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
				 *     and `expression` is the scope expression giving the collection to enumerate.
				 *
				 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
				 *
				 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
				 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
				 *     is specified, ng-repeat associates elements by identity. It is an error to have
				 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
				 *     mapped to the same DOM element, which is not possible.)
				 *
				 *     Note that the tracking expression must come last, after any filters, and the alias expression.
				 *
				 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
				 *     will be associated by item identity in the array.
				 *
				 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
				 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
				 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
				 *     element in the same way in the DOM.
				 *
				 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
				 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
				 *     property is same.
				 *
				 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
				 *     to items in conjunction with a tracking expression.
				 *
				 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
				 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
				 *     when a filter is active on the repeater, but the filtered result set is empty.
				 *
				 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
				 *     the items have been processed through the filter.
				 *
				 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
				 *     (and not as operator, inside an expression).
				 *
				 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
				 *
				 * @example
				 * This example initializes the scope to a list of names and
				 * then uses `ngRepeat` to display every person:
				 <example module="ngAnimate" deps="angular-animate.js" animations="true">
				 <file name="index.html">
				 <div ng-init="friends = [
				 {name:'John', age:25, gender:'boy'},
				 {name:'Jessie', age:30, gender:'girl'},
				 {name:'Johanna', age:28, gender:'girl'},
				 {name:'Joy', age:15, gender:'girl'},
				 {name:'Mary', age:28, gender:'girl'},
				 {name:'Peter', age:95, gender:'boy'},
				 {name:'Sebastian', age:50, gender:'boy'},
				 {name:'Erika', age:27, gender:'girl'},
				 {name:'Patrick', age:40, gender:'boy'},
				 {name:'Samantha', age:60, gender:'girl'}
				 ]">
				 I have {{friends.length}} friends. They are:
				 <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
				 <ul class="example-animate-container">
				 <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
				 [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
				 </li>
				 <li class="animate-repeat" ng-if="results.length == 0">
				 <strong>No results found...</strong>
				 </li>
				 </ul>
				 </div>
				 </file>
				 <file name="animations.css">
				 .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }

				 .animate-repeat {
	        line-height:40px;
	        list-style:none;
	        box-sizing:border-box;
	      }

				 .animate-repeat.ng-move,
				 .animate-repeat.ng-enter,
				 .animate-repeat.ng-leave {
	        -webkit-transition:all linear 0.5s;
	        transition:all linear 0.5s;
	      }

				 .animate-repeat.ng-leave.ng-leave-active,
				 .animate-repeat.ng-move,
				 .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }

				 .animate-repeat.ng-leave,
				 .animate-repeat.ng-move.ng-move-active,
				 .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:40px;
	      }
				 </file>
				 <file name="protractor.js" type="protractor">
				 var friends = element.all(by.repeater('friend in friends'));

				 it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });

				 it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);
	
	         element(by.model('q')).sendKeys('ma');
	
	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
				 </file>
				 </example>
				 */
				var ngRepeatDirective = ['$parse', '$animate', function ($parse, $animate) {
					var NG_REMOVED = '$$NG_REMOVED';
					var ngRepeatMinErr = minErr('ngRepeat');

					var updateScope = function (scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
						// TODO(perf): generate setters to shave off ~40ms or 1-1.5%
						scope[valueIdentifier] = value;
						if (keyIdentifier) scope[keyIdentifier] = key;
						scope.$index = index;
						scope.$first = (index === 0);
						scope.$last = (index === (arrayLength - 1));
						scope.$middle = !(scope.$first || scope.$last);
						// jshint bitwise: false
						scope.$odd = !(scope.$even = (index & 1) === 0);
						// jshint bitwise: true
					};

					var getBlockStart = function (block) {
						return block.clone[0];
					};

					var getBlockEnd = function (block) {
						return block.clone[block.clone.length - 1];
					};


					return {
						restrict: 'A',
						multiElement: true,
						transclude: 'element',
						priority: 1000,
						terminal: true,
						$$tlb: true,
						compile: function ngRepeatCompile($element, $attr) {
							var expression = $attr.ngRepeat;
							var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');

							var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

							if (!match) {
								throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
									expression);
							}

							var lhs = match[1];
							var rhs = match[2];
							var aliasAs = match[3];
							var trackByExp = match[4];

							match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

							if (!match) {
								throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
									lhs);
							}
							var valueIdentifier = match[3] || match[1];
							var keyIdentifier = match[2];

							if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
								/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
								throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
									aliasAs);
							}

							var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
							var hashFnLocals = {$id: hashKey};

							if (trackByExp) {
								trackByExpGetter = $parse(trackByExp);
							} else {
								trackByIdArrayFn = function (key, value) {
									return hashKey(value);
								};
								trackByIdObjFn = function (key) {
									return key;
								};
							}

							return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

								if (trackByExpGetter) {
									trackByIdExpFn = function (key, value, index) {
										// assign key, value, and $index to the locals so that they can be used in hash functions
										if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
										hashFnLocals[valueIdentifier] = value;
										hashFnLocals.$index = index;
										return trackByExpGetter($scope, hashFnLocals);
									};
								}

								// Store a list of elements from previous run. This is a hash where key is the item from the
								// iterator, and the value is objects with following properties.
								//   - scope: bound scope
								//   - element: previous element.
								//   - index: position
								//
								// We are using no-proto object so that we don't need to guard against inherited props via
								// hasOwnProperty.
								var lastBlockMap = createMap();

								//watch props
								$scope.$watchCollection(rhs, function ngRepeatAction(collection) {
									var index, length,
										previousNode = $element[0],     // node that cloned nodes should be inserted after
																		// initialized to the comment node anchor
										nextNode,
									// Same as lastBlockMap but it has the current state. It will become the
									// lastBlockMap on the next iteration.
										nextBlockMap = createMap(),
										collectionLength,
										key, value, // key/value of iteration
										trackById,
										trackByIdFn,
										collectionKeys,
										block,       // last object information {scope, element, id}
										nextBlockOrder,
										elementsToRemove;

									if (aliasAs) {
										$scope[aliasAs] = collection;
									}

									if (isArrayLike(collection)) {
										collectionKeys = collection;
										trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
									} else {
										trackByIdFn = trackByIdExpFn || trackByIdObjFn;
										// if object, extract keys, in enumeration order, unsorted
										collectionKeys = [];
										for (var itemKey in collection) {
											if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
												collectionKeys.push(itemKey);
											}
										}
									}

									collectionLength = collectionKeys.length;
									nextBlockOrder = new Array(collectionLength);

									// locate existing items
									for (index = 0; index < collectionLength; index++) {
										key = (collection === collectionKeys) ? index : collectionKeys[index];
										value = collection[key];
										trackById = trackByIdFn(key, value, index);
										if (lastBlockMap[trackById]) {
											// found previously seen block
											block = lastBlockMap[trackById];
											delete lastBlockMap[trackById];
											nextBlockMap[trackById] = block;
											nextBlockOrder[index] = block;
										} else if (nextBlockMap[trackById]) {
											// if collision detected. restore lastBlockMap and throw an error
											forEach(nextBlockOrder, function (block) {
												if (block && block.scope) lastBlockMap[block.id] = block;
											});
											throw ngRepeatMinErr('dupes',
												"Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
												expression, trackById, value);
										} else {
											// new never before seen block
											nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
											nextBlockMap[trackById] = true;
										}
									}

									// remove leftover items
									for (var blockKey in lastBlockMap) {
										block = lastBlockMap[blockKey];
										elementsToRemove = getBlockNodes(block.clone);
										$animate.leave(elementsToRemove);
										if (elementsToRemove[0].parentNode) {
											// if the element was not removed yet because of pending animation, mark it as deleted
											// so that we can ignore it later
											for (index = 0, length = elementsToRemove.length; index < length; index++) {
												elementsToRemove[index][NG_REMOVED] = true;
											}
										}
										block.scope.$destroy();
									}

									// we are not using forEach for perf reasons (trying to avoid #call)
									for (index = 0; index < collectionLength; index++) {
										key = (collection === collectionKeys) ? index : collectionKeys[index];
										value = collection[key];
										block = nextBlockOrder[index];

										if (block.scope) {
											// if we have already seen this object, then we need to reuse the
											// associated scope/element

											nextNode = previousNode;

											// skip nodes that are already pending removal via leave animation
											do {
												nextNode = nextNode.nextSibling;
											} while (nextNode && nextNode[NG_REMOVED]);

											if (getBlockStart(block) != nextNode) {
												// existing item which got moved
												$animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
											}
											previousNode = getBlockEnd(block);
											updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
										} else {
											// new item which we don't know about
											$transclude(function ngRepeatTransclude(clone, scope) {
												block.scope = scope;
												// http://jsperf.com/clone-vs-createcomment
												var endNode = ngRepeatEndComment.cloneNode(false);
												clone[clone.length++] = endNode;

												// TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
												$animate.enter(clone, null, jqLite(previousNode));
												previousNode = endNode;
												// Note: We only need the first/last node of the cloned nodes.
												// However, we need to keep the reference to the jqlite wrapper as it might be changed later
												// by a directive with templateUrl when its template arrives.
												block.clone = clone;
												nextBlockMap[block.id] = block;
												updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
											});
										}
									}
									lastBlockMap = nextBlockMap;
								});
							};
						}
					};
				}];

				var NG_HIDE_CLASS = 'ng-hide';
				var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
				/**
				 * @ngdoc directive
				 * @name ngShow
				 * @multiElement
				 *
				 * @description
				 * The `ngShow` directive shows or hides the given HTML element based on the expression
				 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
				 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
				 * in AngularJS and sets the display style to none (using an !important flag).
				 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
				 *
				 * ```html
				 * <!-- when $scope.myValue is truthy (element is visible) -->
				 * <div ng-show="myValue"></div>
				 *
				 * <!-- when $scope.myValue is falsy (element is hidden) -->
				 * <div ng-show="myValue" class="ng-hide"></div>
				 * ```
				 *
				 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
				 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
				 * from the element causing the element not to appear hidden.
				 *
				 * ## Why is !important used?
				 *
				 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
				 * can be easily overridden by heavier selectors. For example, something as simple
				 * as changing the display style on a HTML list item would make hidden elements appear visible.
				 * This also becomes a bigger issue when dealing with CSS frameworks.
				 *
				 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
				 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
				 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
				 *
				 * ### Overriding `.ng-hide`
				 *
				 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
				 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
				 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
				 * with extra animation classes that can be added.
				 *
				 * ```css
				 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
				 * ```
				 *
				 * By default you don't need to override in CSS anything and the animations will work around the display style.
				 *
				 * ## A note about animations with `ngShow`
				 *
				 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
				 * is true and false. This system works like the animation system present with ngClass except that
				 * you must also include the !important flag to override the display property
				 * so that you can perform an animation when the element is hidden during the time of the animation.
				 *
				 * ```css
				 * //
				 * //a working example can be found at the bottom of this page
				 * //
				 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
				 *
				 * .my-element.ng-hide-add-active,
				 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
				 *
				 * .my-element.ng-hide-add { ... }
				 * .my-element.ng-hide-add.ng-hide-add-active { ... }
				 * .my-element.ng-hide-remove { ... }
				 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
				 * ```
				 *
				 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
				 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
				 *
				 * @animations
				 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
				 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
				 *
				 * @element ANY
				 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
				 *     then the element is shown or hidden respectively.
				 *
				 * @example
				 <example module="ngAnimate" deps="angular-animate.js" animations="true">
				 <file name="index.html">
				 Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
				 <div>
				 Show:
				 <div class="check-element animate-show" ng-show="checked">
				 <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
				 </div>
				 </div>
				 <div>
				 Hide:
				 <div class="check-element animate-show" ng-hide="checked">
				 <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
				 </div>
				 </div>
				 </file>
				 <file name="glyphicons.css">
				 @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
				 </file>
				 <file name="animations.css">
				 .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

				 .animate-show.ng-hide-add.ng-hide-add-active,
				 .animate-show.ng-hide-remove.ng-hide-remove-active {
	        -webkit-transition: all linear 0.5s;
	        transition: all linear 0.5s;
	      }

				 .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

				 .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
				 </file>
				 <file name="protractor.js" type="protractor">
				 var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
				 var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

				 it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();
	
	        element(by.model('checked')).click();
	
	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
				 </file>
				 </example>
				 */
				var ngShowDirective = ['$animate', function ($animate) {
					return {
						restrict: 'A',
						multiElement: true,
						link: function (scope, element, attr) {
							scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
								// we're adding a temporary, animation-specific class for ng-hide since this way
								// we can control when the element is actually displayed on screen without having
								// to have a global/greedy CSS selector that breaks when other animations are run.
								// Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
								$animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
									tempClasses: NG_HIDE_IN_PROGRESS_CLASS
								});
							});
						}
					};
				}];


				/**
				 * @ngdoc directive
				 * @name ngHide
				 * @multiElement
				 *
				 * @description
				 * The `ngHide` directive shows or hides the given HTML element based on the expression
				 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
				 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
				 * in AngularJS and sets the display style to none (using an !important flag).
				 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
				 *
				 * ```html
				 * <!-- when $scope.myValue is truthy (element is hidden) -->
				 * <div ng-hide="myValue" class="ng-hide"></div>
				 *
				 * <!-- when $scope.myValue is falsy (element is visible) -->
				 * <div ng-hide="myValue"></div>
				 * ```
				 *
				 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
				 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
				 * from the element causing the element not to appear hidden.
				 *
				 * ## Why is !important used?
				 *
				 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
				 * can be easily overridden by heavier selectors. For example, something as simple
				 * as changing the display style on a HTML list item would make hidden elements appear visible.
				 * This also becomes a bigger issue when dealing with CSS frameworks.
				 *
				 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
				 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
				 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
				 *
				 * ### Overriding `.ng-hide`
				 *
				 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
				 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
				 * class in CSS:
				 *
				 * ```css
				 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
				 * ```
				 *
				 * By default you don't need to override in CSS anything and the animations will work around the display style.
				 *
				 * ## A note about animations with `ngHide`
				 *
				 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
				 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
				 * CSS class is added and removed for you instead of your own CSS class.
				 *
				 * ```css
				 * //
				 * //a working example can be found at the bottom of this page
				 * //
				 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
				 *
				 * .my-element.ng-hide-add { ... }
				 * .my-element.ng-hide-add.ng-hide-add-active { ... }
				 * .my-element.ng-hide-remove { ... }
				 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
				 * ```
				 *
				 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
				 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
				 *
				 * @animations
				 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
				 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
				 *
				 * @element ANY
				 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
				 *     the element is shown or hidden respectively.
				 *
				 * @example
				 <example module="ngAnimate" deps="angular-animate.js" animations="true">
				 <file name="index.html">
				 Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
				 <div>
				 Show:
				 <div class="check-element animate-hide" ng-show="checked">
				 <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
				 </div>
				 </div>
				 <div>
				 Hide:
				 <div class="check-element animate-hide" ng-hide="checked">
				 <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
				 </div>
				 </div>
				 </file>
				 <file name="glyphicons.css">
				 @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
				 </file>
				 <file name="animations.css">
				 .animate-hide {
	        -webkit-transition: all linear 0.5s;
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

				 .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

				 .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
				 </file>
				 <file name="protractor.js" type="protractor">
				 var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
				 var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

				 it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();
	
	        element(by.model('checked')).click();
	
	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
				 </file>
				 </example>
				 */
				var ngHideDirective = ['$animate', function ($animate) {
					return {
						restrict: 'A',
						multiElement: true,
						link: function (scope, element, attr) {
							scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
								// The comment inside of the ngShowDirective explains why we add and
								// remove a temporary class for the show/hide animation
								$animate[value ? 'addClass' : 'removeClass'](element, NG_HIDE_CLASS, {
									tempClasses: NG_HIDE_IN_PROGRESS_CLASS
								});
							});
						}
					};
				}];

				/**
				 * @ngdoc directive
				 * @name ngStyle
				 * @restrict AC
				 *
				 * @description
				 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
				 *
				 * @element ANY
				 * @param {expression} ngStyle
				 *
				 * {@link guide/expression Expression} which evals to an
				 * object whose keys are CSS style names and values are corresponding values for those CSS
				 * keys.
				 *
				 * Since some CSS style names are not valid keys for an object, they must be quoted.
				 * See the 'background-color' style in the example below.
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <input type="button" value="set color" ng-click="myStyle={color:'red'}">
				 <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
				 <input type="button" value="clear" ng-click="myStyle={}">
				 <br/>
				 <span ng-style="myStyle">Sample Text</span>
				 <pre>myStyle={{myStyle}}</pre>
				 </file>
				 <file name="style.css">
				 span {
	         color: black;
	       }
				 </file>
				 <file name="protractor.js" type="protractor">
				 var colorSpan = element(by.css('span'));

				 it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
				 </file>
				 </example>
				 */
				var ngStyleDirective = ngDirective(function (scope, element, attr) {
					scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
						if (oldStyles && (newStyles !== oldStyles)) {
							forEach(oldStyles, function (val, style) {
								element.css(style, '');
							});
						}
						if (newStyles) element.css(newStyles);
					}, true);
				});

				/**
				 * @ngdoc directive
				 * @name ngSwitch
				 * @restrict EA
				 *
				 * @description
				 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
				 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
				 * as specified in the template.
				 *
				 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
				 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
				 * matches the value obtained from the evaluated expression. In other words, you define a container element
				 * (where you place the directive), place an expression on the **`on="..."` attribute**
				 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
				 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
				 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
				 * attribute is displayed.
				 *
				 * <div class="alert alert-info">
				 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
				 * as literal string values to match against.
				 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
				 * value of the expression `$scope.someVal`.
				 * </div>

				 * @animations
				 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
				 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
				 *
				 * @usage
				 *
				 * ```
				 * <ANY ng-switch="expression">
				 *   <ANY ng-switch-when="matchValue1">...</ANY>
				 *   <ANY ng-switch-when="matchValue2">...</ANY>
				 *   <ANY ng-switch-default>...</ANY>
				 * </ANY>
				 * ```
				 *
				 *
				 * @scope
				 * @priority 1200
				 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
				 * On child elements add:
				 *
				 * * `ngSwitchWhen`: the case statement to match against. If match then this
				 *   case will be displayed. If the same match appears multiple times, all the
				 *   elements will be displayed.
				 * * `ngSwitchDefault`: the default case when no other case match. If there
				 *   are multiple default cases, all of them will be displayed when no other
				 *   case match.
				 *
				 *
				 * @example
				 <example module="switchExample" deps="angular-animate.js" animations="true">
				 <file name="index.html">
				 <div ng-controller="ExampleController">
				 <select ng-model="selection" ng-options="item for item in items">
				 </select>
				 <code>selection={{selection}}</code>
				 <hr/>
				 <div class="animate-switch-container"
				 ng-switch on="selection">
				 <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
				 <div class="animate-switch" ng-switch-when="home">Home Span</div>
				 <div class="animate-switch" ng-switch-default>default</div>
				 </div>
				 </div>
				 </file>
				 <file name="script.js">
				 angular.module('switchExample', ['ngAnimate'])
				 .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
				 </file>
				 <file name="animations.css">
				 .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

				 .animate-switch {
	        padding:10px;
	      }

				 .animate-switch.ng-animate {
	        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	
	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }

				 .animate-switch.ng-leave.ng-leave-active,
				 .animate-switch.ng-enter {
	        top:-50px;
	      }
				 .animate-switch.ng-leave,
				 .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
				 </file>
				 <file name="protractor.js" type="protractor">
				 var switchElem = element(by.css('[ng-switch]'));
				 var select = element(by.model('selection'));

				 it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
				 it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
				 it('should select default', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
				 </file>
				 </example>
				 */
				var ngSwitchDirective = ['$animate', function ($animate) {
					return {
						require: 'ngSwitch',

						// asks for $scope to fool the BC controller module
						controller: ['$scope', function ngSwitchController() {
							this.cases = {};
						}],
						link: function (scope, element, attr, ngSwitchController) {
							var watchExpr = attr.ngSwitch || attr.on,
								selectedTranscludes = [],
								selectedElements = [],
								previousLeaveAnimations = [],
								selectedScopes = [];

							var spliceFactory = function (array, index) {
								return function () {
									array.splice(index, 1);
								};
							};

							scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
								var i, ii;
								for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
									$animate.cancel(previousLeaveAnimations[i]);
								}
								previousLeaveAnimations.length = 0;

								for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
									var selected = getBlockNodes(selectedElements[i].clone);
									selectedScopes[i].$destroy();
									var promise = previousLeaveAnimations[i] = $animate.leave(selected);
									promise.then(spliceFactory(previousLeaveAnimations, i));
								}

								selectedElements.length = 0;
								selectedScopes.length = 0;

								if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
									forEach(selectedTranscludes, function (selectedTransclude) {
										selectedTransclude.transclude(function (caseElement, selectedScope) {
											selectedScopes.push(selectedScope);
											var anchor = selectedTransclude.element;
											caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
											var block = {clone: caseElement};

											selectedElements.push(block);
											$animate.enter(caseElement, anchor.parent(), anchor);
										});
									});
								}
							});
						}
					};
				}];

				var ngSwitchWhenDirective = ngDirective({
					transclude: 'element',
					priority: 1200,
					require: '^ngSwitch',
					multiElement: true,
					link: function (scope, element, attrs, ctrl, $transclude) {
						ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
						ctrl.cases['!' + attrs.ngSwitchWhen].push({transclude: $transclude, element: element});
					}
				});

				var ngSwitchDefaultDirective = ngDirective({
					transclude: 'element',
					priority: 1200,
					require: '^ngSwitch',
					multiElement: true,
					link: function (scope, element, attr, ctrl, $transclude) {
						ctrl.cases['?'] = (ctrl.cases['?'] || []);
						ctrl.cases['?'].push({transclude: $transclude, element: element});
					}
				});

				/**
				 * @ngdoc directive
				 * @name ngTransclude
				 * @restrict EAC
				 *
				 * @description
				 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
				 *
				 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
				 *
				 * @element ANY
				 *
				 * @example
				 <example module="transcludeExample">
				 <file name="index.html">
				 <script>
				 angular.module('transcludeExample', [])
				 .directive('pane', function(){
	             return {
	               restrict: 'E',
	               transclude: true,
	               scope: { title:'@' },
	               template: '<div style="border: 1px solid black;">' +
	                           '<div style="background-color: gray">{{title}}</div>' +
	                           '<ng-transclude></ng-transclude>' +
	                         '</div>'
	             };
	         })
				 .controller('ExampleController', ['$scope', function($scope) {
	           $scope.title = 'Lorem Ipsum';
	           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	         }]);
				 </script>
				 <div ng-controller="ExampleController">
				 <input ng-model="title" aria-label="title"> <br/>
				 <textarea ng-model="text" aria-label="text"></textarea> <br/>
				 <pane title="{{title}}">{{text}}</pane>
				 </div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should have transcluded', function() {
	          var titleElement = element(by.model('title'));
	          titleElement.clear();
	          titleElement.sendKeys('TITLE');
	          var textElement = element(by.model('text'));
	          textElement.clear();
	          textElement.sendKeys('TEXT');
	          expect(element(by.binding('title')).getText()).toEqual('TITLE');
	          expect(element(by.binding('text')).getText()).toEqual('TEXT');
	        });
				 </file>
				 </example>
				 *
				 */
				var ngTranscludeDirective = ngDirective({
					restrict: 'EAC',
					link: function ($scope, $element, $attrs, controller, $transclude) {
						if (!$transclude) {
							throw minErr('ngTransclude')('orphan',
								'Illegal use of ngTransclude directive in the template! ' +
								'No parent directive that requires a transclusion found. ' +
								'Element: {0}',
								startingTag($element));
						}

						$transclude(function (clone) {
							$element.empty();
							$element.append(clone);
						});
					}
				});

				/**
				 * @ngdoc directive
				 * @name script
				 * @restrict E
				 *
				 * @description
				 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
				 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
				 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
				 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
				 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
				 *
				 * @param {string} type Must be set to `'text/ng-template'`.
				 * @param {string} id Cache name of the template.
				 *
				 * @example
				 <example>
				 <file name="index.html">
				 <script type="text/ng-template" id="/tpl.html">
				 Content of the template.
				 </script>

				 <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
				 <div id="tpl-content" ng-include src="currentTpl"></div>
				 </file>
				 <file name="protractor.js" type="protractor">
				 it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
				 </file>
				 </example>
				 */
				var scriptDirective = ['$templateCache', function ($templateCache) {
					return {
						restrict: 'E',
						terminal: true,
						compile: function (element, attr) {
							if (attr.type == 'text/ng-template') {
								var templateUrl = attr.id,
									text = element[0].text;

								$templateCache.put(templateUrl, text);
							}
						}
					};
				}];

				var noopNgModelController = {$setViewValue: noop, $render: noop};

				/**
				 * @ngdoc type
				 * @name  select.SelectController
				 * @description
				 * The controller for the `<select>` directive. This provides support for reading
				 * and writing the selected value(s) of the control and also coordinates dynamically
				 * added `<option>` elements, perhaps by an `ngRepeat` directive.
				 */
				var SelectController =
					['$element', '$scope', '$attrs', function ($element, $scope, $attrs) {

						var self = this,
							optionsMap = new HashMap();

						// If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
						self.ngModelCtrl = noopNgModelController;

						// The "unknown" option is one that is prepended to the list if the viewValue
						// does not match any of the options. When it is rendered the value of the unknown
						// option is '? XXX ?' where XXX is the hashKey of the value that is not known.
						//
						// We can't just jqLite('<option>') since jqLite is not smart enough
						// to create it in <select> and IE barfs otherwise.
						self.unknownOption = jqLite(document.createElement('option'));
						self.renderUnknownOption = function (val) {
							var unknownVal = '? ' + hashKey(val) + ' ?';
							self.unknownOption.val(unknownVal);
							$element.prepend(self.unknownOption);
							$element.val(unknownVal);
						};

						$scope.$on('$destroy', function () {
							// disable unknown option so that we don't do work when the whole select is being destroyed
							self.renderUnknownOption = noop;
						});

						self.removeUnknownOption = function () {
							if (self.unknownOption.parent()) self.unknownOption.remove();
						};


						// Read the value of the select control, the implementation of this changes depending
						// upon whether the select can have multiple values and whether ngOptions is at work.
						self.readValue = function readSingleValue() {
							self.removeUnknownOption();
							return $element.val();
						};


						// Write the value to the select control, the implementation of this changes depending
						// upon whether the select can have multiple values and whether ngOptions is at work.
						self.writeValue = function writeSingleValue(value) {
							if (self.hasOption(value)) {
								self.removeUnknownOption();
								$element.val(value);
								if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
							} else {
								if (value == null && self.emptyOption) {
									self.removeUnknownOption();
									$element.val('');
								} else {
									self.renderUnknownOption(value);
								}
							}
						};


						// Tell the select control that an option, with the given value, has been added
						self.addOption = function (value, element) {
							assertNotHasOwnProperty(value, '"option value"');
							if (value === '') {
								self.emptyOption = element;
							}
							var count = optionsMap.get(value) || 0;
							optionsMap.put(value, count + 1);
						};

						// Tell the select control that an option, with the given value, has been removed
						self.removeOption = function (value) {
							var count = optionsMap.get(value);
							if (count) {
								if (count === 1) {
									optionsMap.remove(value);
									if (value === '') {
										self.emptyOption = undefined;
									}
								} else {
									optionsMap.put(value, count - 1);
								}
							}
						};

						// Check whether the select control has an option matching the given value
						self.hasOption = function (value) {
							return !!optionsMap.get(value);
						};
					}];

				/**
				 * @ngdoc directive
				 * @name select
				 * @restrict E
				 *
				 * @description
				 * HTML `SELECT` element with angular data-binding.
				 *
				 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
     * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits such as reducing
				 * memory and increasing speed by not creating a new scope for each repeated instance, as well as providing
				 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
				 * comprehension expression.
				 *
				 * When an item in the `<select>` menu is selected, the array element or object property
				 * represented by the selected option will be bound to the model identified by the `ngModel`
				 * directive.
				 *
				 * If the viewValue contains a value that doesn't match any of the options then the control
				 * will automatically add an "unknown" option, which it then removes when this is resolved.
				 *
				 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
				 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
				 * option. See example below for demonstration.
				 *
				 * <div class="alert alert-info">
				 * The value of a `select` directive used without `ngOptions` is always a string.
				 * When the model needs to be bound to a non-string value, you must either explictly convert it
				 * using a directive (see example below) or use `ngOptions` to specify the set of options.
				 * This is because an option element can only be bound to string values at present.
				 * </div>
				 *
				 * ### Example (binding `select` to a non-string value)
				 *
				 * <example name="select-with-non-string-options" module="nonStringSelect">
				 *   <file name="index.html">
				 *     <select ng-model="model.id" convert-to-number>
				 *       <option value="0">Zero</option>
				 *       <option value="1">One</option>
				 *       <option value="2">Two</option>
				 *     </select>
				 *     {{ model }}
				 *   </file>
				 *   <file name="app.js">
				 *     angular.module('nonStringSelect', [])
				 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
				 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
				 *   </file>
				 *   <file name="protractor.js" type="protractor">
				 *     it('should initialize to model', function() {
	 *       var select = element(by.css('select'));
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
				 *   </file>
				 * </example>
				 *
				 */
				var selectDirective = function () {

					return {
						restrict: 'E',
						require: ['select', '?ngModel'],
						controller: SelectController,
						link: function (scope, element, attr, ctrls) {

							// if ngModel is not defined, we don't need to do anything
							var ngModelCtrl = ctrls[1];
							if (!ngModelCtrl) return;

							var selectCtrl = ctrls[0];

							selectCtrl.ngModelCtrl = ngModelCtrl;

							// We delegate rendering to the `writeValue` method, which can be changed
							// if the select can have multiple selected values or if the options are being
							// generated by `ngOptions`
							ngModelCtrl.$render = function () {
								selectCtrl.writeValue(ngModelCtrl.$viewValue);
							};

							// When the selected item(s) changes we delegate getting the value of the select control
							// to the `readValue` method, which can be changed if the select can have multiple
							// selected values or if the options are being generated by `ngOptions`
							element.on('change', function () {
								scope.$apply(function () {
									ngModelCtrl.$setViewValue(selectCtrl.readValue());
								});
							});

							// If the select allows multiple values then we need to modify how we read and write
							// values from and to the control; also what it means for the value to be empty and
							// we have to add an extra watch since ngModel doesn't work well with arrays - it
							// doesn't trigger rendering if only an item in the array changes.
							if (attr.multiple) {

								// Read value now needs to check each option to see if it is selected
								selectCtrl.readValue = function readMultipleValue() {
									var array = [];
									forEach(element.find('option'), function (option) {
										if (option.selected) {
											array.push(option.value);
										}
									});
									return array;
								};

								// Write value now needs to set the selected property of each matching option
								selectCtrl.writeValue = function writeMultipleValue(value) {
									var items = new HashMap(value);
									forEach(element.find('option'), function (option) {
										option.selected = isDefined(items.get(option.value));
									});
								};

								// we have to do it on each watch since ngModel watches reference, but
								// we need to work of an array, so we need to see if anything was inserted/removed
								var lastView, lastViewRef = NaN;
								scope.$watch(function selectMultipleWatch() {
									if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
										lastView = shallowCopy(ngModelCtrl.$viewValue);
										ngModelCtrl.$render();
									}
									lastViewRef = ngModelCtrl.$viewValue;
								});

								// If we are a multiple select then value is now a collection
								// so the meaning of $isEmpty changes
								ngModelCtrl.$isEmpty = function (value) {
									return !value || value.length === 0;
								};

							}
						}
					};
				};


				// The option directive is purely designed to communicate the existence (or lack of)
				// of dynamically created (and destroyed) option elements to their containing select
				// directive via its controller.
				var optionDirective = ['$interpolate', function ($interpolate) {

					function chromeHack(optionElement) {
						// Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
						// Adding an <option selected="selected"> element to a <select required="required"> should
						// automatically select the new element
						if (optionElement[0].hasAttribute('selected')) {
							optionElement[0].selected = true;
						}
					}

					return {
						restrict: 'E',
						priority: 100,
						compile: function (element, attr) {

							// If the value attribute is not defined then we fall back to the
							// text content of the option element, which may be interpolated
							if (isUndefined(attr.value)) {
								var interpolateFn = $interpolate(element.text(), true);
								if (!interpolateFn) {
									attr.$set('value', element.text());
								}
							}

							return function (scope, element, attr) {

								// This is an optimization over using ^^ since we don't want to have to search
								// all the way to the root of the DOM for every single option element
								var selectCtrlName = '$selectController',
									parent = element.parent(),
									selectCtrl = parent.data(selectCtrlName) ||
										parent.parent().data(selectCtrlName); // in case we are in optgroup

								// Only update trigger option updates if this is an option within a `select`
								// that also has `ngModel` attached
								if (selectCtrl && selectCtrl.ngModelCtrl) {

									if (interpolateFn) {
										scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
											attr.$set('value', newVal);
											if (oldVal !== newVal) {
												selectCtrl.removeOption(oldVal);
											}
											selectCtrl.addOption(newVal, element);
											selectCtrl.ngModelCtrl.$render();
											chromeHack(element);
										});
									} else {
										selectCtrl.addOption(attr.value, element);
										selectCtrl.ngModelCtrl.$render();
										chromeHack(element);
									}

									element.on('$destroy', function () {
										selectCtrl.removeOption(attr.value);
										selectCtrl.ngModelCtrl.$render();
									});
								}
							};
						}
					};
				}];

				var styleDirective = valueFn({
					restrict: 'E',
					terminal: false
				});

				var requiredDirective = function () {
					return {
						restrict: 'A',
						require: '?ngModel',
						link: function (scope, elm, attr, ctrl) {
							if (!ctrl) return;
							attr.required = true; // force truthy in case we are on non input element

							ctrl.$validators.required = function (modelValue, viewValue) {
								return !attr.required || !ctrl.$isEmpty(viewValue);
							};

							attr.$observe('required', function () {
								ctrl.$validate();
							});
						}
					};
				};


				var patternDirective = function () {
					return {
						restrict: 'A',
						require: '?ngModel',
						link: function (scope, elm, attr, ctrl) {
							if (!ctrl) return;

							var regexp, patternExp = attr.ngPattern || attr.pattern;
							attr.$observe('pattern', function (regex) {
								if (isString(regex) && regex.length > 0) {
									regex = new RegExp('^' + regex + '$');
								}

								if (regex && !regex.test) {
									throw minErr('ngPattern')('noregexp',
										'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
										regex, startingTag(elm));
								}

								regexp = regex || undefined;
								ctrl.$validate();
							});

							ctrl.$validators.pattern = function (value) {
								return ctrl.$isEmpty(value) || isUndefined(regexp) || regexp.test(value);
							};
						}
					};
				};


				var maxlengthDirective = function () {
					return {
						restrict: 'A',
						require: '?ngModel',
						link: function (scope, elm, attr, ctrl) {
							if (!ctrl) return;

							var maxlength = -1;
							attr.$observe('maxlength', function (value) {
								var intVal = toInt(value);
								maxlength = isNaN(intVal) ? -1 : intVal;
								ctrl.$validate();
							});
							ctrl.$validators.maxlength = function (modelValue, viewValue) {
								return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
							};
						}
					};
				};

				var minlengthDirective = function () {
					return {
						restrict: 'A',
						require: '?ngModel',
						link: function (scope, elm, attr, ctrl) {
							if (!ctrl) return;

							var minlength = 0;
							attr.$observe('minlength', function (value) {
								minlength = toInt(value) || 0;
								ctrl.$validate();
							});
							ctrl.$validators.minlength = function (modelValue, viewValue) {
								return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
							};
						}
					};
				};

				if (window.angular.bootstrap) {
					//AngularJS is already loaded, so we can return here...
					console.log('WARNING: Tried to load angular more than once.');
					return;
				}

				//try to bind to jquery now so that one can write jqLite(document).ready()
				//but we will rebind on bootstrap again.
				bindJQuery();

				publishExternalAPI(angular);

				jqLite(document).ready(function () {
					angularInit(document, bootstrap);
				});

			})(window, document);

			!window.angular.$$csp() && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 244 */
	/***/ function (module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (C) 2006 Google Inc.
		//
		// Licensed under the Apache License, Version 2.0 (the "License");
		// you may not use this file except in compliance with the License.
		// You may obtain a copy of the License at
		//
		//      http://www.apache.org/licenses/LICENSE-2.0
		//
		// Unless required by applicable law or agreed to in writing, software
		// distributed under the License is distributed on an "AS IS" BASIS,
		// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		// See the License for the specific language governing permissions and
		// limitations under the License.

		/**
		 * @fileoverview
		 * some functions for browser-side pretty printing of code contained in html.
		 *
		 * <p>
		 * For a fairly comprehensive set of languages see the
		 * <a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html#langs">README</a>
		 * file that came with this source.  At a minimum, the lexer should work on a
		 * number of languages including C and friends, Java, Python, Bash, SQL, HTML,
		 * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk
		 * and a subset of Perl, but, because of commenting conventions, doesn't work on
		 * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.
		 * <p>
		 * Usage: <ol>
		 * <li> include this source file in an html page via
		 *   {@code <script type="text/javascript" src="/path/to/prettify.js"></script>}
		 * <li> define style rules.  See the example page for examples.
		 * <li> mark the {@code <pre>} and {@code <code>} tags in your source with
		 *    {@code class=prettyprint.}
		 *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty
		 *    printer needs to do more substantial DOM manipulations to support that, so
		 *    some css styles may not be preserved.
		 * </ol>
		 * That's it.  I wanted to keep the API as simple as possible, so there's no
		 * need to specify which language the code is in, but if you wish, you can add
		 * another class to the {@code <pre>} or {@code <code>} element to specify the
		 * language, as in {@code <pre class="prettyprint lang-java">}.  Any class that
		 * starts with "lang-" followed by a file extension, specifies the file type.
		 * See the "lang-*.js" files in this directory for code that implements
		 * per-language file handlers.
		 * <p>
		 * Change log:<br>
		 * cbeust, 2006/08/22
		 * <blockquote>
		 *   Java annotations (start with "@") are now captured as literals ("lit")
		 * </blockquote>
		 * @requires console
		 */

		// JSLint declarations
		/*global console, document, navigator, setTimeout, window, define */

		/**
		 * Split {@code prettyPrint} into multiple timeouts so as not to interfere with
		 * UI events.
		 * If set to {@code false}, {@code prettyPrint()} is synchronous.
		 */
		"use strict";

		window['PR_SHOULD_USE_CONTINUATION'] = true;

		/**
		 * Find all the {@code <pre>} and {@code <code>} tags in the DOM with
		 * {@code class=prettyprint} and prettify them.
		 *
		 * @param {Function?} opt_whenDone if specified, called when the last entry
		 *     has been finished.
		 */
		var prettyPrintOne;
		/**
		 * Pretty print a chunk of code.
		 *
		 * @param {string} sourceCodeHtml code as html
		 * @return {string} code as html, but prettier
		 */
		var prettyPrint;

		(function () {
			var win = window;
			// Keyword lists for various languages.
			// We use things that coerce to strings to make them compact when minified
			// and to defeat aggressive optimizers that fold large string constants.
			var FLOW_CONTROL_KEYWORDS = ["break,continue,do,else,for,if,return,while"];
			var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS, "auto,case,char,const,default," + "double,enum,extern,float,goto,int,long,register,short,signed,sizeof," + "static,struct,switch,typedef,union,unsigned,void,volatile"];
			var COMMON_KEYWORDS = [C_KEYWORDS, "catch,class,delete,false,import," + "new,operator,private,protected,public,this,throw,true,try,typeof"];
			var CPP_KEYWORDS = [COMMON_KEYWORDS, "alignof,align_union,asm,axiom,bool," + "concept,concept_map,const_cast,constexpr,decltype," + "dynamic_cast,explicit,export,friend,inline,late_check," + "mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast," + "template,typeid,typename,using,virtual,where"];
			var JAVA_KEYWORDS = [COMMON_KEYWORDS, "abstract,boolean,byte,extends,final,finally,implements,import," + "instanceof,null,native,package,strictfp,super,synchronized,throws," + "transient"];
			var CSHARP_KEYWORDS = [JAVA_KEYWORDS, "as,base,by,checked,decimal,delegate,descending,dynamic,event," + "fixed,foreach,from,group,implicit,in,interface,internal,into,is,let," + "lock,object,out,override,orderby,params,partial,readonly,ref,sbyte," + "sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort," + "var,virtual,where"];
			var COFFEE_KEYWORDS = "all,and,by,catch,class,else,extends,false,finally," + "for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then," + "throw,true,try,unless,until,when,while,yes";
			var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS, "debugger,eval,export,function,get,null,set,undefined,var,with," + "Infinity,NaN"];
			var PERL_KEYWORDS = "caller,delete,die,do,dump,elsif,eval,exit,foreach,for," + "goto,if,import,last,local,my,next,no,our,print,package,redo,require," + "sub,undef,unless,until,use,wantarray,while,BEGIN,END";
			var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, "and,as,assert,class,def,del," + "elif,except,exec,finally,from,global,import,in,is,lambda," + "nonlocal,not,or,pass,print,raise,try,with,yield," + "False,True,None"];
			var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, "alias,and,begin,case,class," + "def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo," + "rescue,retry,self,super,then,true,undef,unless,until,when,yield," + "BEGIN,END"];
			var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, "case,done,elif,esac,eval,fi," + "function,in,local,set,then,until"];
			var ALL_KEYWORDS = [CPP_KEYWORDS, CSHARP_KEYWORDS, JSCRIPT_KEYWORDS, PERL_KEYWORDS + PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];
			var C_TYPES = /^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)\b/;

			// token style names.  correspond to css classes
			/**
			 * token style for a string literal
			 * @const
			 */
			var PR_STRING = 'str';
			/**
			 * token style for a keyword
			 * @const
			 */
			var PR_KEYWORD = 'kwd';
			/**
			 * token style for a comment
			 * @const
			 */
			var PR_COMMENT = 'com';
			/**
			 * token style for a type
			 * @const
			 */
			var PR_TYPE = 'typ';
			/**
			 * token style for a literal value.  e.g. 1, null, true.
			 * @const
			 */
			var PR_LITERAL = 'lit';
			/**
			 * token style for a punctuation string.
			 * @const
			 */
			var PR_PUNCTUATION = 'pun';
			/**
			 * token style for plain text.
			 * @const
			 */
			var PR_PLAIN = 'pln';

			/**
			 * token style for an sgml tag.
			 * @const
			 */
			var PR_TAG = 'tag';
			/**
			 * token style for a markup declaration such as a DOCTYPE.
			 * @const
			 */
			var PR_DECLARATION = 'dec';
			/**
			 * token style for embedded source.
			 * @const
			 */
			var PR_SOURCE = 'src';
			/**
			 * token style for an sgml attribute name.
			 * @const
			 */
			var PR_ATTRIB_NAME = 'atn';
			/**
			 * token style for an sgml attribute value.
			 * @const
			 */
			var PR_ATTRIB_VALUE = 'atv';

			/**
			 * A class that indicates a section of markup that is not code, e.g. to allow
			 * embedding of line numbers within code listings.
			 * @const
			 */
			var PR_NOCODE = 'nocode';

			/**
			 * A set of tokens that can precede a regular expression literal in
			 * javascript
			 * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html
			 * has the full list, but I've removed ones that might be problematic when
			 * seen in languages that don't support regular expression literals.
			 *
			 * <p>Specifically, I've removed any keywords that can't precede a regexp
			 * literal in a syntactically legal javascript program, and I've removed the
			 * "in" keyword since it's not a keyword in many languages, and might be used
			 * as a count of inches.
			 *
			 * <p>The link above does not accurately describe EcmaScript rules since
			 * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works
			 * very well in practice.
			 *
			 * @private
			 * @const
			 */
			var REGEXP_PRECEDER_PATTERN = '(?:^^\\.?|[+-]|[!=]=?=?|\\#|%=?|&&?=?|\\(|\\*=?|[+\\-]=|->|\\/=?|::?|<<?=?|>>?>?=?|,|;|\\?|@|\\[|~|{|\\^\\^?=?|\\|\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*';

			// CAVEAT: this does not properly handle the case where a regular
			// expression immediately follows another since a regular expression may
			// have flags for case-sensitivity and the like.  Having regexp tokens
			// adjacent is not valid in any language I'm aware of, so I'm punting.
			// TODO: maybe style special characters inside a regexp as punctuation.

			/**
			 * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally
			 * matches the union of the sets of strings matched by the input RegExp.
			 * Since it matches globally, if the input strings have a start-of-input
			 * anchor (/^.../), it is ignored for the purposes of unioning.
			 * @param {Array.<RegExp>} regexs non multiline, non-global regexs.
			 * @return {RegExp} a global regex.
			 */
			function combinePrefixPatterns(regexs) {
				var capturedGroupIndex = 0;

				var needToFoldCase = false;
				var ignoreCase = false;
				for (var i = 0, n = regexs.length; i < n; ++i) {
					var regex = regexs[i];
					if (regex.ignoreCase) {
						ignoreCase = true;
					} else if (/[a-z]/i.test(regex.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi, ''))) {
						needToFoldCase = true;
						ignoreCase = false;
						break;
					}
				}

				var escapeCharToCodeUnit = {
					'b': 8,
					't': 9,
					'n': 0xa,
					'v': 0xb,
					'f': 0xc,
					'r': 0xd
				};

				function decodeEscape(charsetPart) {
					var cc0 = charsetPart.charCodeAt(0);
					if (cc0 !== 92 /* \\ */) {
						return cc0;
					}
					var c1 = charsetPart.charAt(1);
					cc0 = escapeCharToCodeUnit[c1];
					if (cc0) {
						return cc0;
					} else if ('0' <= c1 && c1 <= '7') {
						return parseInt(charsetPart.substring(1), 8);
					} else if (c1 === 'u' || c1 === 'x') {
						return parseInt(charsetPart.substring(2), 16);
					} else {
						return charsetPart.charCodeAt(1);
					}
				}

				function encodeEscape(charCode) {
					if (charCode < 0x20) {
						return (charCode < 0x10 ? '\\x0' : '\\x') + charCode.toString(16);
					}
					var ch = String.fromCharCode(charCode);
					return ch === '\\' || ch === '-' || ch === ']' || ch === '^' ? "\\" + ch : ch;
				}

				function caseFoldCharset(charSet) {
					var charsetParts = charSet.substring(1, charSet.length - 1).match(new RegExp("\\\\u[0-9A-Fa-f]{4}" + '|\\\\x[0-9A-Fa-f]{2}' + '|\\\\[0-3][0-7]{0,2}' + '|\\\\[0-7]{1,2}' + '|\\\\[\\s\\S]' + '|-' + '|[^-\\\\]', 'g'));
					var ranges = [];
					var inverse = charsetParts[0] === '^';

					var out = ['['];
					if (inverse) {
						out.push('^');
					}

					for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {
						var p = charsetParts[i];
						if (/\\[bdsw]/i.test(p)) {
							// Don't muck with named groups.
							out.push(p);
						} else {
							var start = decodeEscape(p);
							var end;
							if (i + 2 < n && '-' === charsetParts[i + 1]) {
								end = decodeEscape(charsetParts[i + 2]);
								i += 2;
							} else {
								end = start;
							}
							ranges.push([start, end]);
							// If the range might intersect letters, then expand it.
							// This case handling is too simplistic.
							// It does not deal with non-latin case folding.
							// It works for latin source code identifiers though.
							if (!(end < 65 || start > 122)) {
								if (!(end < 65 || start > 90)) {
									ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);
								}
								if (!(end < 97 || start > 122)) {
									ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);
								}
							}
						}
					}

					// [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]
					// -> [[1, 12], [14, 14], [16, 17]]
					ranges.sort(function (a, b) {
						return a[0] - b[0] || b[1] - a[1];
					});
					var consolidatedRanges = [];
					var lastRange = [];
					for (var i = 0; i < ranges.length; ++i) {
						var range = ranges[i];
						if (range[0] <= lastRange[1] + 1) {
							lastRange[1] = Math.max(lastRange[1], range[1]);
						} else {
							consolidatedRanges.push(lastRange = range);
						}
					}

					for (var i = 0; i < consolidatedRanges.length; ++i) {
						var range = consolidatedRanges[i];
						out.push(encodeEscape(range[0]));
						if (range[1] > range[0]) {
							if (range[1] + 1 > range[0]) {
								out.push('-');
							}
							out.push(encodeEscape(range[1]));
						}
					}
					out.push(']');
					return out.join('');
				}

				function allowAnywhereFoldCaseAndRenumberGroups(regex) {
					// Split into character sets, escape sequences, punctuation strings
					// like ('(', '(?:', ')', '^'), and runs of characters that do not
					// include any of the above.
					var parts = regex.source.match(new RegExp('(?:' + '\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]' // a character set
						+ "|\\\\u[A-Fa-f0-9]{4}" // a unicode escape
						+ '|\\\\x[A-Fa-f0-9]{2}' // a hex escape
						+ '|\\\\[0-9]+' // a back-reference or octal escape
						+ '|\\\\[^ux0-9]' // other escape sequence
						+ '|\\(\\?[:!=]' // start of a non-capturing group
						+ '|[\\(\\)\\^]' // start/end of a group, or line start
						+ '|[^\\x5B\\x5C\\(\\)\\^]+' // run of other characters
						+ ')', 'g'));
					var n = parts.length;

					// Maps captured group numbers to the number they will occupy in
					// the output or to -1 if that has not been determined, or to
					// undefined if they need not be capturing in the output.
					var capturedGroups = [];

					// Walk over and identify back references to build the capturedGroups
					// mapping.
					for (var i = 0, groupIndex = 0; i < n; ++i) {
						var p = parts[i];
						if (p === '(') {
							// groups are 1-indexed, so max group index is count of '('
							++groupIndex;
						} else if ('\\' === p.charAt(0)) {
							var decimalValue = +p.substring(1);
							if (decimalValue) {
								if (decimalValue <= groupIndex) {
									capturedGroups[decimalValue] = -1;
								} else {
									// Replace with an unambiguous escape sequence so that
									// an octal escape sequence does not turn into a backreference
									// to a capturing group from an earlier regex.
									parts[i] = encodeEscape(decimalValue);
								}
							}
						}
					}

					// Renumber groups and reduce capturing groups to non-capturing groups
					// where possible.
					for (var i = 1; i < capturedGroups.length; ++i) {
						if (-1 === capturedGroups[i]) {
							capturedGroups[i] = ++capturedGroupIndex;
						}
					}
					for (var i = 0, groupIndex = 0; i < n; ++i) {
						var p = parts[i];
						if (p === '(') {
							++groupIndex;
							if (!capturedGroups[groupIndex]) {
								parts[i] = '(?:';
							}
						} else if ('\\' === p.charAt(0)) {
							var decimalValue = +p.substring(1);
							if (decimalValue && decimalValue <= groupIndex) {
								parts[i] = '\\' + capturedGroups[decimalValue];
							}
						}
					}

					// Remove any prefix anchors so that the output will match anywhere.
					// ^^ really does mean an anchored match though.
					for (var i = 0; i < n; ++i) {
						if ('^' === parts[i] && '^' !== parts[i + 1]) {
							parts[i] = '';
						}
					}

					// Expand letters to groups to handle mixing of case-sensitive and
					// case-insensitive patterns if necessary.
					if (regex.ignoreCase && needToFoldCase) {
						for (var i = 0; i < n; ++i) {
							var p = parts[i];
							var ch0 = p.charAt(0);
							if (p.length >= 2 && ch0 === '[') {
								parts[i] = caseFoldCharset(p);
							} else if (ch0 !== '\\') {
								// TODO: handle letters in numeric escapes.
								parts[i] = p.replace(/[a-zA-Z]/g, function (ch) {
									var cc = ch.charCodeAt(0);
									return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';
								});
							}
						}
					}

					return parts.join('');
				}

				var rewritten = [];
				for (var i = 0, n = regexs.length; i < n; ++i) {
					var regex = regexs[i];
					if (regex.global || regex.multiline) {
						throw new Error('' + regex);
					}
					rewritten.push('(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');
				}

				return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');
			}

			/**
			 * Split markup into a string of source code and an array mapping ranges in
			 * that string to the text nodes in which they appear.
			 *
			 * <p>
			 * The HTML DOM structure:</p>
			 * <pre>
			 * (Element   "p"
			 *   (Element "b"
			 *     (Text  "print "))       ; #1
			 *   (Text    "'Hello '")      ; #2
			 *   (Element "br")            ; #3
			 *   (Text    "  + 'World';")) ; #4
			 * </pre>
			 * <p>
			 * corresponds to the HTML
			 * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>
			 *
			 * <p>
			 * It will produce the output:</p>
			 * <pre>
			 * {
	   *   sourceCode: "print 'Hello '\n  + 'World';",
	   *   //                     1          2
	   *   //           012345678901234 5678901234567
	   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]
	   * }
			 * </pre>
			 * <p>
			 * where #1 is a reference to the {@code "print "} text node above, and so
			 * on for the other text nodes.
			 * </p>
			 *
			 * <p>
			 * The {@code} spans array is an array of pairs.  Even elements are the start
			 * indices of substrings, and odd elements are the text nodes (or BR elements)
			 * that contain the text for those substrings.
			 * Substrings continue until the next index or the end of the source.
			 * </p>
			 *
			 * @param {Node} node an HTML DOM subtree containing source-code.
			 * @param {boolean} isPreformatted true if white-space in text nodes should
			 *    be considered significant.
			 * @return {Object} source code and the text nodes in which they occur.
			 */
			function extractSourceSpans(node, isPreformatted) {
				var nocode = /(?:^|\s)nocode(?:\s|$)/;

				var chunks = [];
				var length = 0;
				var spans = [];
				var k = 0;

				function walk(node) {
					switch (node.nodeType) {
						case 1:
							// Element
							if (nocode.test(node.className)) {
								return;
							}
							for (var child = node.firstChild; child; child = child.nextSibling) {
								walk(child);
							}
							var nodeName = node.nodeName.toLowerCase();
							if ('br' === nodeName || 'li' === nodeName) {
								chunks[k] = '\n';
								spans[k << 1] = length++;
								spans[k++ << 1 | 1] = node;
							}
							break;
						case 3:
						case 4:
							// Text
							var text = node.nodeValue;
							if (text.length) {
								if (!isPreformatted) {
									text = text.replace(/[ \t\r\n]+/g, ' ');
								} else {
									text = text.replace(/\r\n?/g, '\n'); // Normalize newlines.
								}
								// TODO: handle tabs here?
								chunks[k] = text;
								spans[k << 1] = length;
								length += text.length;
								spans[k++ << 1 | 1] = node;
							}
							break;
					}
				}

				walk(node);

				return {
					sourceCode: chunks.join('').replace(/\n$/, ''),
					spans: spans
				};
			}

			/**
			 * Apply the given language handler to sourceCode and add the resulting
			 * decorations to out.
			 * @param {number} basePos the index of sourceCode within the chunk of source
			 *    whose decorations are already present on out.
			 */
			function appendDecorations(basePos, sourceCode, langHandler, out) {
				if (!sourceCode) {
					return;
				}
				var job = {
					sourceCode: sourceCode,
					basePos: basePos
				};
				langHandler(job);
				out.push.apply(out, job.decorations);
			}

			var notWs = /\S/;

			/**
			 * Given an element, if it contains only one child element and any text nodes
			 * it contains contain only space characters, return the sole child element.
			 * Otherwise returns undefined.
			 * <p>
			 * This is meant to return the CODE element in {@code <pre><code ...>} when
			 * there is a single child element that contains all the non-space textual
			 * content, but not to return anything where there are multiple child elements
			 * as in {@code <pre><code>...</code><code>...</code></pre>} or when there
			 * is textual content.
			 */
			function childContentWrapper(element) {
				var wrapper = undefined;
				for (var c = element.firstChild; c; c = c.nextSibling) {
					var type = c.nodeType;
					wrapper = type === 1 ? // Element Node
						wrapper ? element : c : type === 3 ? // Text Node
						notWs.test(c.nodeValue) ? element : wrapper : wrapper;
				}
				return wrapper === element ? undefined : wrapper;
			}

			/** Given triples of [style, pattern, context] returns a lexing function,
			 * The lexing function interprets the patterns to find token boundaries and
			 * returns a decoration list of the form
			 * [index_0, style_0, index_1, style_1, ..., index_n, style_n]
			 * where index_n is an index into the sourceCode, and style_n is a style
			 * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to
			 * all characters in sourceCode[index_n-1:index_n].
			 *
			 * The stylePatterns is a list whose elements have the form
			 * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].
			 *
			 * Style is a style constant like PR_PLAIN, or can be a string of the
			 * form 'lang-FOO', where FOO is a language extension describing the
			 * language of the portion of the token in $1 after pattern executes.
			 * E.g., if style is 'lang-lisp', and group 1 contains the text
			 * '(hello (world))', then that portion of the token will be passed to the
			 * registered lisp handler for formatting.
			 * The text before and after group 1 will be restyled using this decorator
			 * so decorators should take care that this doesn't result in infinite
			 * recursion.  For example, the HTML lexer rule for SCRIPT elements looks
			 * something like ['lang-js', /<[s]cript>(.+?)<\/script>/].  This may match
			 * '<script>foo()<\/script>', which would cause the current decorator to
			 * be called with '<script>' which would not match the same rule since
			 * group 1 must not be empty, so it would be instead styled as PR_TAG by
			 * the generic tag rule.  The handler registered for the 'js' extension would
			 * then be called with 'foo()', and finally, the current decorator would
			 * be called with '<\/script>' which would not match the original rule and
			 * so the generic tag rule would identify it as a tag.
			 *
			 * Pattern must only match prefixes, and if it matches a prefix, then that
			 * match is considered a token with the same style.
			 *
			 * Context is applied to the last non-whitespace, non-comment token
			 * recognized.
			 *
			 * Shortcut is an optional string of characters, any of which, if the first
			 * character, gurantee that this pattern and only this pattern matches.
			 *
			 * @param {Array} shortcutStylePatterns patterns that always start with
			 *   a known character.  Must have a shortcut string.
			 * @param {Array} fallthroughStylePatterns patterns that will be tried in
			 *   order if the shortcut ones fail.  May have shortcuts.
			 *
			 * @return {function (Object)} a
			 *   function that takes source code and returns a list of decorations.
			 */
			function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {
				var shortcuts = {};
				var tokenizer;
				(function () {
					var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);
					var allRegexs = [];
					var regexKeys = {};
					for (var i = 0, n = allPatterns.length; i < n; ++i) {
						var patternParts = allPatterns[i];
						var shortcutChars = patternParts[3];
						if (shortcutChars) {
							for (var c = shortcutChars.length; --c >= 0;) {
								shortcuts[shortcutChars.charAt(c)] = patternParts;
							}
						}
						var regex = patternParts[1];
						var k = '' + regex;
						if (!regexKeys.hasOwnProperty(k)) {
							allRegexs.push(regex);
							regexKeys[k] = null;
						}
					}
					allRegexs.push(/[\0-\uffff]/);
					tokenizer = combinePrefixPatterns(allRegexs);
				})();

				var nPatterns = fallthroughStylePatterns.length;

				/**
				 * Lexes job.sourceCode and produces an output array job.decorations of
				 * style classes preceded by the position at which they start in
				 * job.sourceCode in order.
				 *
				 * @param {Object} job an object like <pre>{
	     *    sourceCode: {string} sourceText plain text,
	     *    basePos: {int} position of job.sourceCode in the larger chunk of
	     *        sourceCode.
	     * }</pre>
				 */
				var decorate = function decorate(job) {
					var sourceCode = job.sourceCode,
						basePos = job.basePos;
					/** Even entries are positions in source in ascending order.  Odd enties
					 * are style markers (e.g., PR_COMMENT) that run from that position until
					 * the end.
					 * @type {Array.<number|string>}
					 */
					var decorations = [basePos, PR_PLAIN];
					var pos = 0; // index into sourceCode
					var tokens = sourceCode.match(tokenizer) || [];
					var styleCache = {};

					for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {
						var token = tokens[ti];
						var style = styleCache[token];
						var match = void 0;

						var isEmbedded;
						if (typeof style === 'string') {
							isEmbedded = false;
						} else {
							var patternParts = shortcuts[token.charAt(0)];
							if (patternParts) {
								match = token.match(patternParts[1]);
								style = patternParts[0];
							} else {
								for (var i = 0; i < nPatterns; ++i) {
									patternParts = fallthroughStylePatterns[i];
									match = token.match(patternParts[1]);
									if (match) {
										style = patternParts[0];
										break;
									}
								}

								if (!match) {
									// make sure that we make progress
									style = PR_PLAIN;
								}
							}

							isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);
							if (isEmbedded && !(match && typeof match[1] === 'string')) {
								isEmbedded = false;
								style = PR_SOURCE;
							}

							if (!isEmbedded) {
								styleCache[token] = style;
							}
						}

						var tokenStart = pos;
						pos += token.length;

						if (!isEmbedded) {
							decorations.push(basePos + tokenStart, style);
						} else {
							// Treat group 1 as an embedded block of source code.
							var embeddedSource = match[1];
							var embeddedSourceStart = token.indexOf(embeddedSource);
							var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;
							if (match[2]) {
								// If embeddedSource can be blank, then it would match at the
								// beginning which would cause us to infinitely recurse on the
								// entire token, so we catch the right context in match[2].
								embeddedSourceEnd = token.length - match[2].length;
								embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;
							}
							var lang = style.substring(5);
							// Decorate the left of the embedded source
							appendDecorations(basePos + tokenStart, token.substring(0, embeddedSourceStart), decorate, decorations);
							// Decorate the embedded source
							appendDecorations(basePos + tokenStart + embeddedSourceStart, embeddedSource, langHandlerForExtension(lang, embeddedSource), decorations);
							// Decorate the right of the embedded section
							appendDecorations(basePos + tokenStart + embeddedSourceEnd, token.substring(embeddedSourceEnd), decorate, decorations);
						}
					}
					job.decorations = decorations;
				};
				return decorate;
			}

			/** returns a function that produces a list of decorations from source text.
			 *
			 * This code treats ", ', and ` as string delimiters, and \ as a string
			 * escape.  It does not recognize perl's qq() style strings.
			 * It has no special handling for double delimiter escapes as in basic, or
			 * the tripled delimiters used in python, but should work on those regardless
			 * although in those cases a single string literal may be broken up into
			 * multiple adjacent string literals.
			 *
			 * It recognizes C, C++, and shell style comments.
			 *
			 * @param {Object} options a set of optional parameters.
			 * @return {function (Object)} a function that examines the source code
			 *     in the input job and builds the decoration list.
			 */
			function sourceDecorator(options) {
				var shortcutStylePatterns = [],
					fallthroughStylePatterns = [];
				if (options['tripleQuotedStrings']) {
					// '''multi-line-string''', 'single-line-string', and double-quoted
					shortcutStylePatterns.push([PR_STRING, /^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/, null, '\'"']);
				} else if (options['multiLineStrings']) {
					// 'multi-line-string', "multi-line-string"
					shortcutStylePatterns.push([PR_STRING, /^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/, null, '\'"`']);
				} else {
					// 'single-line-string', "single-line-string"
					shortcutStylePatterns.push([PR_STRING, /^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/, null, '"\'']);
				}
				if (options['verbatimStrings']) {
					// verbatim-string-literal production from the C# grammar.  See issue 93.
					fallthroughStylePatterns.push([PR_STRING, /^@\"(?:[^\"]|\"\")*(?:\"|$)/, null]);
				}
				var hc = options['hashComments'];
				if (hc) {
					if (options['cStyleComments']) {
						if (hc > 1) {
							// multiline hash comments
							shortcutStylePatterns.push([PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);
						} else {
							// Stop C preprocessor declarations at an unclosed open comment
							shortcutStylePatterns.push([PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\r\n]*)/, null, '#']);
						}
						// #include <stdio.h>
						fallthroughStylePatterns.push([PR_STRING, /^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/, null]);
					} else {
						shortcutStylePatterns.push([PR_COMMENT, /^#[^\r\n]*/, null, '#']);
					}
				}
				if (options['cStyleComments']) {
					fallthroughStylePatterns.push([PR_COMMENT, /^\/\/[^\r\n]*/, null]);
					fallthroughStylePatterns.push([PR_COMMENT, /^\/\*[\s\S]*?(?:\*\/|$)/, null]);
				}
				if (options['regexLiterals']) {
					/**
					 * @const
					 */
					var REGEX_LITERAL =
						// A regular expression literal starts with a slash that is
						// not followed by * or / so that it is not confused with
						// comments.
						'/(?=[^/*])'
							// and then contains any number of raw characters,
						+ '(?:[^/\\x5B\\x5C]'
							// escape sequences (\x5C),
						+ '|\\x5C[\\s\\S]'
							// or non-nesting character sets (\x5B\x5D);
						+ '|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+'
							// finally closed by a /.
						+ '/';
					fallthroughStylePatterns.push(['lang-regex', new RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')]);
				}

				var types = options['types'];
				if (types) {
					fallthroughStylePatterns.push([PR_TYPE, types]);
				}

				var keywords = ("" + options['keywords']).replace(/^ | $/g, '');
				if (keywords.length) {
					fallthroughStylePatterns.push([PR_KEYWORD, new RegExp('^(?:' + keywords.replace(/[\s,]+/g, '|') + ')\\b'), null]);
				}

				shortcutStylePatterns.push([PR_PLAIN, /^\s+/, null, ' \r\n\t\xA0']);

				var punctuation =
					// The Bash man page says

					// A word is a sequence of characters considered as a single
					// unit by GRUB. Words are separated by metacharacters,
					// which are the following plus space, tab, and newline: { }
					// | & $ ; < >
					// ...

					// A word beginning with # causes that word and all remaining
					// characters on that line to be ignored.

					// which means that only a '#' after /(?:^|[{}|&$;<>\s])/ starts a
					// comment but empirically
					// $ echo {#}
					// {#}
					// $ echo \$#
					// $#
					// $ echo }#
					// }#

					// so /(?:^|[|&;<>\s])/ is more appropriate.

					// http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3
					// suggests that this definition is compatible with a
					// default mode that tries to use a single token definition
					// to recognize both bash/python style comments and C
					// preprocessor directives.

					// This definition of punctuation does not include # in the list of
					// follow-on exclusions, so # will not be broken before if preceeded
					// by a punctuation character.  We could try to exclude # after
					// [|&;<>] but that doesn't seem to cause many major problems.
					// If that does turn out to be a problem, we should change the below
					// when hc is truthy to include # in the run of punctuation characters
					// only when not followint [|&;<>].
					/^.[^\s\w\.$@\'\"\`\/\\]*/;

				fallthroughStylePatterns.push(
					// TODO(mikesamuel): recognize non-latin letters and numerals in idents
					[PR_LITERAL, /^@[a-z_$][a-z_$@0-9]*/i, null], [PR_TYPE, /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/, null], [PR_PLAIN, /^[a-z_$][a-z_$@0-9]*/i, null], [PR_LITERAL, new RegExp('^(?:'
							// A hex number
						+ '0x[a-f0-9]+'
							// or an octal or decimal number,
						+ '|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)'
							// possibly in scientific notation
						+ '(?:e[+\\-]?\\d+)?' + ')'
							// with an optional modifier like UL for unsigned long
						+ '[a-z]*', 'i'), null, '0123456789'],
					// Don't treat escaped quotes in bash as starting strings.  See issue 144.
					[PR_PLAIN, /^\\[\s\S]?/, null], [PR_PUNCTUATION, punctuation, null]);

				return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);
			}

			var decorateSource = sourceDecorator({
				'keywords': ALL_KEYWORDS,
				'hashComments': true,
				'cStyleComments': true,
				'multiLineStrings': true,
				'regexLiterals': true
			});

			/**
			 * Given a DOM subtree, wraps it in a list, and puts each line into its own
			 * list item.
			 *
			 * @param {Node} node modified in place.  Its content is pulled into an
			 *     HTMLOListElement, and each line is moved into a separate list item.
			 *     This requires cloning elements, so the input might not have unique
			 *     IDs after numbering.
			 * @param {boolean} isPreformatted true iff white-space in text nodes should
			 *     be treated as significant.
			 */
			function numberLines(node, opt_startLineNum, isPreformatted) {
				var nocode = /(?:^|\s)nocode(?:\s|$)/;
				var lineBreak = /\r\n?|\n/;

				var document = node.ownerDocument;

				var li = document.createElement('li');
				while (node.firstChild) {
					li.appendChild(node.firstChild);
				}
				// An array of lines.  We split below, so this is initialized to one
				// un-split line.
				var listItems = [li];

				function walk(node) {
					switch (node.nodeType) {
						case 1:
							// Element
							if (nocode.test(node.className)) {
								break;
							}
							if ('br' === node.nodeName) {
								breakAfter(node);
								// Discard the <BR> since it is now flush against a </LI>.
								if (node.parentNode) {
									node.parentNode.removeChild(node);
								}
							} else {
								for (var child = node.firstChild; child; child = child.nextSibling) {
									walk(child);
								}
							}
							break;
						case 3:
						case 4:
							// Text
							if (isPreformatted) {
								var text = node.nodeValue;
								var match = text.match(lineBreak);
								if (match) {
									var firstLine = text.substring(0, match.index);
									node.nodeValue = firstLine;
									var tail = text.substring(match.index + match[0].length);
									if (tail) {
										var parent = node.parentNode;
										parent.insertBefore(document.createTextNode(tail), node.nextSibling);
									}
									breakAfter(node);
									if (!firstLine) {
										// Don't leave blank text nodes in the DOM.
										node.parentNode.removeChild(node);
									}
								}
							}
							break;
					}
				}

				// Split a line after the given node.
				function breakAfter(lineEndNode) {
					// If there's nothing to the right, then we can skip ending the line
					// here, and move root-wards since splitting just before an end-tag
					// would require us to create a bunch of empty copies.
					while (!lineEndNode.nextSibling) {
						lineEndNode = lineEndNode.parentNode;
						if (!lineEndNode) {
							return;
						}
					}

					function breakLeftOf(limit, copy) {
						// Clone shallowly if this node needs to be on both sides of the break.
						var rightSide = copy ? limit.cloneNode(false) : limit;
						var parent = limit.parentNode;
						if (parent) {
							// We clone the parent chain.
							// This helps us resurrect important styling elements that cross lines.
							// E.g. in <i>Foo<br>Bar</i>
							// should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.
							var parentClone = breakLeftOf(parent, 1);
							// Move the clone and everything to the right of the original
							// onto the cloned parent.
							var next = limit.nextSibling;
							parentClone.appendChild(rightSide);
							for (var sibling = next; sibling; sibling = next) {
								next = sibling.nextSibling;
								parentClone.appendChild(sibling);
							}
						}
						return rightSide;
					}

					var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);

					// Walk the parent chain until we reach an unattached LI.
					for (var parent;
						// Check nodeType since IE invents document fragments.
						 (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {
						copiedListItem = parent;
					}
					// Put it on the list of lines for later processing.
					listItems.push(copiedListItem);
				}

				// Split lines while there are lines left to split.
				for (var i = 0; // Number of lines that have been split so far.
					 i < listItems.length; // length updated by breakAfter calls.
					 ++i) {
					walk(listItems[i]);
				}

				// Make sure numeric indices show correctly.
				if (opt_startLineNum === (opt_startLineNum | 0)) {
					listItems[0].setAttribute('value', opt_startLineNum);
				}

				var ol = document.createElement('ol');
				ol.className = 'linenums';
				var offset = Math.max(0, opt_startLineNum - 1 /* zero index */ | 0) || 0;
				for (var i = 0, n = listItems.length; i < n; ++i) {
					li = listItems[i];
					// Stick a class on the LIs so that stylesheets can
					// color odd/even rows, or any other row pattern that
					// is co-prime with 10.
					li.className = 'L' + (i + offset) % 10;
					if (!li.firstChild) {
						li.appendChild(document.createTextNode('\xA0'));
					}
					ol.appendChild(li);
				}

				node.appendChild(ol);
			}

			/**
			 * Breaks {@code job.sourceCode} around style boundaries in
			 * {@code job.decorations} and modifies {@code job.sourceNode} in place.
			 * @param {Object} job like <pre>{
	   *    sourceCode: {string} source as plain text,
	   *    spans: {Array.<number|Node>} alternating span start indices into source
	   *       and the text node or element (e.g. {@code <BR>}) corresponding to that
	   *       span.
	   *    decorations: {Array.<number|string} an array of style classes preceded
	   *       by the position at which they start in job.sourceCode in order
	   * }</pre>
			 * @private
			 */
			function recombineTagsAndDecorations(job) {
				var isIE8OrEarlier = /\bMSIE\s(\d+)/.exec(navigator.userAgent);
				isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;
				var newlineRe = /\n/g;

				var source = job.sourceCode;
				var sourceLength = source.length;
				// Index into source after the last code-unit recombined.
				var sourceIndex = 0;

				var spans = job.spans;
				var nSpans = spans.length;
				// Index into spans after the last span which ends at or before sourceIndex.
				var spanIndex = 0;

				var decorations = job.decorations;
				var nDecorations = decorations.length;
				// Index into decorations after the last decoration which ends at or before
				// sourceIndex.
				var decorationIndex = 0;

				// Remove all zero-length decorations.
				decorations[nDecorations] = sourceLength;
				var decPos, i;
				for (i = decPos = 0; i < nDecorations;) {
					if (decorations[i] !== decorations[i + 2]) {
						decorations[decPos++] = decorations[i++];
						decorations[decPos++] = decorations[i++];
					} else {
						i += 2;
					}
				}
				nDecorations = decPos;

				// Simplify decorations.
				for (i = decPos = 0; i < nDecorations;) {
					var startPos = decorations[i];
					// Conflate all adjacent decorations that use the same style.
					var startDec = decorations[i + 1];
					var end = i + 2;
					while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {
						end += 2;
					}
					decorations[decPos++] = startPos;
					decorations[decPos++] = startDec;
					i = end;
				}

				nDecorations = decorations.length = decPos;

				var sourceNode = job.sourceNode;
				var oldDisplay;
				if (sourceNode) {
					oldDisplay = sourceNode.style.display;
					sourceNode.style.display = 'none';
				}
				try {
					var decoration = null;
					while (spanIndex < nSpans) {
						var spanStart = spans[spanIndex];
						var spanEnd = spans[spanIndex + 2] || sourceLength;

						var decEnd = decorations[decorationIndex + 2] || sourceLength;

						var end = Math.min(spanEnd, decEnd);

						var textNode = spans[spanIndex + 1];
						var styledText;
						if (textNode.nodeType !== 1 // Don't muck with <BR>s or <LI>s
								// Don't introduce spans around empty text nodes.
							&& (styledText = source.substring(sourceIndex, end))) {
							// This may seem bizarre, and it is.  Emitting LF on IE causes the
							// code to display with spaces instead of line breaks.
							// Emitting Windows standard issue linebreaks (CRLF) causes a blank
							// space to appear at the beginning of every line but the first.
							// Emitting an old Mac OS 9 line separator makes everything spiffy.
							if (isIE8OrEarlier) {
								styledText = styledText.replace(newlineRe, '\r');
							}
							textNode.nodeValue = styledText;
							var document = textNode.ownerDocument;
							var span = document.createElement('span');
							span.className = decorations[decorationIndex + 1];
							var parentNode = textNode.parentNode;
							parentNode.replaceChild(span, textNode);
							span.appendChild(textNode);
							if (sourceIndex < spanEnd) {
								// Split off a text node.
								spans[spanIndex + 1] = textNode
									// TODO: Possibly optimize by using '' if there's no flicker.
									= document.createTextNode(source.substring(end, spanEnd));
								parentNode.insertBefore(textNode, span.nextSibling);
							}
						}

						sourceIndex = end;

						if (sourceIndex >= spanEnd) {
							spanIndex += 2;
						}
						if (sourceIndex >= decEnd) {
							decorationIndex += 2;
						}
					}
				} finally {
					if (sourceNode) {
						sourceNode.style.display = oldDisplay;
					}
				}
			}

			/** Maps language-specific file extensions to handlers. */
			var langHandlerRegistry = {};

			/** Register a language handler for the given file extensions.
			 * @param {function (Object)} handler a function from source code to a list
			 *      of decorations.  Takes a single argument job which describes the
			 *      state of the computation.   The single parameter has the form
			 *      {@code {
			 *        sourceCode: {string} as plain text.
			 *        decorations: {Array.<number|string>} an array of style classes
			 *                     preceded by the position at which they start in
			 *                     job.sourceCode in order.
			 *                     The language handler should assigned this field.
			 *        basePos: {int} the position of source in the larger source chunk.
			 *                 All positions in the output decorations array are relative
			 *                 to the larger source chunk.
			 *      } }
			 * @param {Array.<string>} fileExtensions
			 */
			function registerLangHandler(handler, fileExtensions) {
				for (var i = fileExtensions.length; --i >= 0;) {
					var ext = fileExtensions[i];
					if (!langHandlerRegistry.hasOwnProperty(ext)) {
						langHandlerRegistry[ext] = handler;
					} else if (win['console']) {
						console['warn']('cannot override language handler %s', ext);
					}
				}
			}

			function langHandlerForExtension(extension, source) {
				if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {
					// Treat it as markup if the first non whitespace character is a < and
					// the last non-whitespace character is a >.
					extension = /^\s*</.test(source) ? 'default-markup' : 'default-code';
				}
				return langHandlerRegistry[extension];
			}

			registerLangHandler(decorateSource, ['default-code']);
			registerLangHandler(createSimpleLexer([], [[PR_PLAIN, /^[^<?]+/], [PR_DECLARATION, /^<!\w[^>]*(?:>|$)/], [PR_COMMENT, /^<\!--[\s\S]*?(?:-\->|$)/],
				// Unescaped content in an unknown language
				['lang-', /^<\?([\s\S]+?)(?:\?>|$)/], ['lang-', /^<%([\s\S]+?)(?:%>|$)/], [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/], ['lang-', /^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],
				// Unescaped content in javascript.  (Or possibly vbscript).
				['lang-js', /^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],
				// Contains unescaped stylesheet content
				['lang-css', /^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i], ['lang-in.tag', /^(<\/?[a-z][^<>]*>)/i]]), ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);
			registerLangHandler(createSimpleLexer([[PR_PLAIN, /^[\s]+/, null, ' \t\r\n'], [PR_ATTRIB_VALUE, /^(?:\"[^\"]*\"?|\'[^\']*\'?)/, null, '\"\'']], [[PR_TAG, /^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i], [PR_ATTRIB_NAME, /^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i], ['lang-uq.val', /^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/], [PR_PUNCTUATION, /^[=<>\/]+/], ['lang-js', /^on\w+\s*=\s*\"([^\"]+)\"/i], ['lang-js', /^on\w+\s*=\s*\'([^\']+)\'/i], ['lang-js', /^on\w+\s*=\s*([^\"\'>\s]+)/i], ['lang-css', /^style\s*=\s*\"([^\"]+)\"/i], ['lang-css', /^style\s*=\s*\'([^\']+)\'/i], ['lang-css', /^style\s*=\s*([^\"\'>\s]+)/i]]), ['in.tag']);
			registerLangHandler(createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\s\S]+/]]), ['uq.val']);
			registerLangHandler(sourceDecorator({
				'keywords': CPP_KEYWORDS,
				'hashComments': true,
				'cStyleComments': true,
				'types': C_TYPES
			}), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);
			registerLangHandler(sourceDecorator({
				'keywords': 'null,true,false'
			}), ['json']);
			registerLangHandler(sourceDecorator({
				'keywords': CSHARP_KEYWORDS,
				'hashComments': true,
				'cStyleComments': true,
				'verbatimStrings': true,
				'types': C_TYPES
			}), ['cs']);
			registerLangHandler(sourceDecorator({
				'keywords': JAVA_KEYWORDS,
				'cStyleComments': true
			}), ['java']);
			registerLangHandler(sourceDecorator({
				'keywords': SH_KEYWORDS,
				'hashComments': true,
				'multiLineStrings': true
			}), ['bsh', 'csh', 'sh']);
			registerLangHandler(sourceDecorator({
				'keywords': PYTHON_KEYWORDS,
				'hashComments': true,
				'multiLineStrings': true,
				'tripleQuotedStrings': true
			}), ['cv', 'py']);
			registerLangHandler(sourceDecorator({
				'keywords': PERL_KEYWORDS,
				'hashComments': true,
				'multiLineStrings': true,
				'regexLiterals': true
			}), ['perl', 'pl', 'pm']);
			registerLangHandler(sourceDecorator({
				'keywords': RUBY_KEYWORDS,
				'hashComments': true,
				'multiLineStrings': true,
				'regexLiterals': true
			}), ['rb']);
			registerLangHandler(sourceDecorator({
				'keywords': JSCRIPT_KEYWORDS,
				'cStyleComments': true,
				'regexLiterals': true
			}), ['js']);
			registerLangHandler(sourceDecorator({
				'keywords': COFFEE_KEYWORDS,
				'hashComments': 3, // ### style block comments
				'cStyleComments': true,
				'multilineStrings': true,
				'tripleQuotedStrings': true,
				'regexLiterals': true
			}), ['coffee']);
			registerLangHandler(createSimpleLexer([], [[PR_STRING, /^[\s\S]+/]]), ['regex']);

			function applyDecorator(job) {
				var opt_langExtension = job.langExtension;

				try {
					// Extract tags, and convert the source code to plain text.
					var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);
					/** Plain text. @type {string} */
					var source = sourceAndSpans.sourceCode;
					job.sourceCode = source;
					job.spans = sourceAndSpans.spans;
					job.basePos = 0;

					// Apply the appropriate language handler
					langHandlerForExtension(opt_langExtension, source)(job);

					// Integrate the decorations and tags back into the source code,
					// modifying the sourceNode in place.
					recombineTagsAndDecorations(job);
				} catch (e) {
					if (win['console']) {
						console['log'](e && e['stack'] ? e['stack'] : e);
					}
				}
			}

			/**
			 * @param sourceCodeHtml {string} The HTML to pretty print.
			 * @param opt_langExtension {string} The language name to use.
			 *     Typically, a filename extension like 'cpp' or 'java'.
			 * @param opt_numberLines {number|boolean} True to number lines,
			 *     or the 1-indexed number of the first line in sourceCodeHtml.
			 */
			function prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {
				var container = document.createElement('pre');
				// This could cause images to load and onload listeners to fire.
				// E.g. <img onerror="alert(1337)" src="nosuchimage.png">.
				// We assume that the inner HTML is from a trusted source.
				container.innerHTML = sourceCodeHtml;
				if (opt_numberLines) {
					numberLines(container, opt_numberLines, true);
				}

				var job = {
					langExtension: opt_langExtension,
					numberLines: opt_numberLines,
					sourceNode: container,
					pre: 1
				};
				applyDecorator(job);
				return container.innerHTML;
			}

			function prettyPrint(opt_whenDone) {
				function byTagName(tn) {
					return document.getElementsByTagName(tn);
				}

				// fetch a list of nodes to rewrite
				var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];
				var elements = [];
				for (var i = 0; i < codeSegments.length; ++i) {
					for (var j = 0, n = codeSegments[i].length; j < n; ++j) {
						elements.push(codeSegments[i][j]);
					}
				}
				codeSegments = null;

				var clock = Date;
				if (!clock['now']) {
					clock = {
						'now': function now() {
							return +new Date();
						}
					};
				}

				// The loop is broken into a series of continuations to make sure that we
				// don't make the browser unresponsive when rewriting a large page.
				var k = 0;
				var prettyPrintingJob;

				var langExtensionRe = /\blang(?:uage)?-([\w.]+)(?!\S)/;
				var prettyPrintRe = /\bprettyprint\b/;
				var prettyPrintedRe = /\bprettyprinted\b/;
				var preformattedTagNameRe = /pre|xmp/i;
				var codeRe = /^code$/i;
				var preCodeXmpRe = /^(?:pre|code|xmp)$/i;

				function doWork() {
					var endTime = win['PR_SHOULD_USE_CONTINUATION'] ? clock['now']() + 250 /* ms */ : Infinity;
					for (; k < elements.length && clock['now']() < endTime; k++) {
						var cs = elements[k];
						var className = cs.className;
						if (prettyPrintRe.test(className)
								// Don't redo this if we've already done it.
								// This allows recalling pretty print to just prettyprint elements
								// that have been added to the page since last call.
							&& !prettyPrintedRe.test(className)) {

							// make sure this is not nested in an already prettified element
							var nested = false;
							for (var p = cs.parentNode; p; p = p.parentNode) {
								var tn = p.tagName;
								if (preCodeXmpRe.test(tn) && p.className && prettyPrintRe.test(p.className)) {
									nested = true;
									break;
								}
							}
							if (!nested) {
								// Mark done.  If we fail to prettyprint for whatever reason,
								// we shouldn't try again.
								cs.className += ' prettyprinted';

								// If the classes includes a language extensions, use it.
								// Language extensions can be specified like
								//     <pre class="prettyprint lang-cpp">
								// the language extension "cpp" is used to find a language handler
								// as passed to PR.registerLangHandler.
								// HTML5 recommends that a language be specified using "language-"
								// as the prefix instead.  Google Code Prettify supports both.
								// http://dev.w3.org/html5/spec-author-view/the-code-element.html
								var langExtension = className.match(langExtensionRe);
								// Support <pre class="prettyprint"><code class="language-c">
								var wrapper;
								if (!langExtension && (wrapper = childContentWrapper(cs)) && codeRe.test(wrapper.tagName)) {
									langExtension = wrapper.className.match(langExtensionRe);
								}

								if (langExtension) {
									langExtension = langExtension[1];
								}

								var preformatted;
								if (preformattedTagNameRe.test(cs.tagName)) {
									preformatted = 1;
								} else {
									var currentStyle = cs['currentStyle'];
									var whitespace = currentStyle ? currentStyle['whiteSpace'] : document.defaultView && document.defaultView.getComputedStyle ? document.defaultView.getComputedStyle(cs, null).getPropertyValue('white-space') : 0;
									preformatted = whitespace && 'pre' === whitespace.substring(0, 3);
								}

								// Look for a class like linenums or linenums:<n> where <n> is the
								// 1-indexed number of the first line.
								var lineNums = cs.className.match(/\blinenums\b(?::(\d+))?/);
								lineNums = lineNums ? lineNums[1] && lineNums[1].length ? +lineNums[1] : true : false;
								if (lineNums) {
									numberLines(cs, lineNums, preformatted);
								}

								// do the pretty printing
								prettyPrintingJob = {
									langExtension: langExtension,
									sourceNode: cs,
									numberLines: lineNums,
									pre: preformatted
								};
								applyDecorator(prettyPrintingJob);
							}
						}
					}
					if (k < elements.length) {
						// finish up in a continuation
						setTimeout(doWork, 250);
					} else if (opt_whenDone) {
						opt_whenDone();
					}
				}

				doWork();
			}

			/**
			 * Contains functions for creating and registering new language handlers.
			 * @type {Object}
			 */
			var PR = win['PR'] = {
				'createSimpleLexer': createSimpleLexer,
				'registerLangHandler': registerLangHandler,
				'sourceDecorator': sourceDecorator,
				'PR_ATTRIB_NAME': PR_ATTRIB_NAME,
				'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,
				'PR_COMMENT': PR_COMMENT,
				'PR_DECLARATION': PR_DECLARATION,
				'PR_KEYWORD': PR_KEYWORD,
				'PR_LITERAL': PR_LITERAL,
				'PR_NOCODE': PR_NOCODE,
				'PR_PLAIN': PR_PLAIN,
				'PR_PUNCTUATION': PR_PUNCTUATION,
				'PR_SOURCE': PR_SOURCE,
				'PR_STRING': PR_STRING,
				'PR_TAG': PR_TAG,
				'PR_TYPE': PR_TYPE,
				'prettyPrintOne': win['prettyPrintOne'] = prettyPrintOne,
				'prettyPrint': win['prettyPrint'] = prettyPrint
			};

			// Make PR available via the Asynchronous Module Definition (AMD) API.
			// Per https://github.com/amdjs/amdjs-api/wiki/AMD:
			// The Asynchronous Module Definition (AMD) API specifies a
			// mechanism for defining modules such that the module and its
			// dependencies can be asynchronously loaded.
			// ...
			// To allow a clear indicator that a global define function (as
			// needed for script src browser loading) conforms to the AMD API,
			// any global define function SHOULD have a property called "amd"
			// whose value is an object. This helps avoid conflict with any
			// other existing JavaScript code that could have defined a define()
			// function that does not conform to the AMD API.
			if ("function" === "function" && __webpack_require__(245)['amd']) {
				!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
					return PR;
				}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			}
		})();

		/***/
	},
	/* 245 */
	/***/ function (module, exports) {

		module.exports = function () {
			throw new Error("define cannot be used indirect");
		};


		/***/
	},
	/* 246 */
	/***/ function (module, exports) {

		'use strict';

		var directive = {};
		var service = {value: {}};

		var DEPENDENCIES = {
			'angular.js': 'http://code.angularjs.org/' + angular.version.full + '/angular.min.js',
			'angular-resource.js': 'http://code.angularjs.org/' + angular.version.full + '/angular-resource.min.js',
			'angular-route.js': 'http://code.angularjs.org/' + angular.version.full + '/angular-route.min.js',
			'angular-animate.js': 'http://code.angularjs.org/' + angular.version.full + '/angular-animate.min.js',
			'angular-sanitize.js': 'http://code.angularjs.org/' + angular.version.full + '/angular-sanitize.min.js',
			'angular-cookies.js': 'http://code.angularjs.org/' + angular.version.full + '/angular-cookies.min.js'
		};

		function escape(text) {
			return text.replace(/\&/g, '&amp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;').replace(/"/g, '&quot;');
		}

		/**
		 * http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie
		 * http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript
		 */
		function setHtmlIe8SafeWay(element, html) {
			var newElement = angular.element('<pre>' + html + '</pre>');

			element.empty();
			element.append(newElement.contents());
			return element;
		}

		directive.jsFiddle = function (getEmbeddedTemplate, escape, script) {
			return {
				terminal: true,
				link: function link(scope, element, attr) {
					var name = '',
						stylesheet = '<link rel="stylesheet" href="http://twitter.github.com/bootstrap/assets/css/bootstrap.css">\n',
						fields = {
							html: '',
							css: '',
							js: ''
						};

					angular.forEach(attr.jsFiddle.split(' '), function (file, index) {
						var fileType = file.split('.')[1];

						if (fileType == 'html') {
							if (index == 0) {
								fields[fileType] += '<div ng-app' + (attr.module ? '="' + attr.module + '"' : '') + '>\n' + getEmbeddedTemplate(file, 2);
							} else {
								fields[fileType] += '\n\n\n  <!-- CACHE FILE: ' + file + ' -->\n' + '  <script type="text/ng-template" id="' + file + '">\n' + getEmbeddedTemplate(file, 4) + '  </script>\n';
							}
						} else {
							fields[fileType] += getEmbeddedTemplate(file) + '\n';
						}
					});

					fields.html += '</div>\n';

					setHtmlIe8SafeWay(element, '<form class="jsfiddle" method="post" action="http://jsfiddle.net/api/post/library/pure/" target="_blank">' + hiddenField('title', 'AngularJS Example: ' + name) + hiddenField('css', '</style> <!-- Ugly Hack due to jsFiddle issue: http://goo.gl/BUfGZ --> \n' + stylesheet + script.angular + (attr.resource ? script.resource : '') + '<style>\n' + fields.css) + hiddenField('html', fields.html) + hiddenField('js', fields.js) + '<button class="btn btn-primary"><i class="icon-white icon-pencil"></i> Edit Me</button>' + '</form>');

					function hiddenField(name, value) {
						return '<input type="hidden" name="' + name + '" value="' + escape(value) + '">';
					}
				}
			};
		};

		directive.code = function () {
			return {restrict: 'E', terminal: true};
		};

		directive.prettyprint = ['reindentCode', function (reindentCode) {
			return {
				restrict: 'C',
				compile: function compile(element) {
					var html = element.html();
					//ensure that angular won't compile {{ curly }} values
					html = html.replace(/\{\{/g, '<span>{{</span>').replace(/\}\}/g, '<span>}}</span>');
					if (window.RUNNING_IN_NG_TEST_RUNNER) {
						element.html(html);
					} else {
						element.html(window.prettyPrintOne(reindentCode(html), undefined, true));
					}
				}
			};
		}];

		directive.ngSetText = ['getEmbeddedTemplate', function (getEmbeddedTemplate) {
			return {
				restrict: 'CA',
				priority: 10,
				compile: function compile(element, attr) {
					setHtmlIe8SafeWay(element, escape(getEmbeddedTemplate(attr.ngSetText)));
				}
			};
		}];

		directive.ngHtmlWrap = ['reindentCode', 'templateMerge', function (reindentCode, templateMerge) {
			return {
				compile: function compile(element, attr) {
					var properties = {
							head: '',
							module: '',
							body: element.text()
						},
						html = "<!doctype html>\n<html ng-app{{module}}>\n  <head>\n{{head:4}}  </head>\n  <body>\n{{body:4}}  </body>\n</html>";

					angular.forEach((attr.ngHtmlWrap || '').split(' '), function (dep) {
						if (!dep) return;
						dep = DEPENDENCIES[dep] || dep;

						var ext = dep.split(/\./).pop();

						if (ext == 'css') {
							properties.head += '<link rel="stylesheet" href="' + dep + '" type="text/css">\n';
						} else if (ext == 'js') {
							properties.head += '<script src="' + dep + '"></script>\n';
						} else {
							properties.module = '="' + dep + '"';
						}
					});

					setHtmlIe8SafeWay(element, escape(templateMerge(html, properties)));
				}
			};
		}];

		directive.ngSetHtml = ['getEmbeddedTemplate', function (getEmbeddedTemplate) {
			return {
				restrict: 'CA',
				priority: 10,
				compile: function compile(element, attr) {
					setHtmlIe8SafeWay(element, getEmbeddedTemplate(attr.ngSetHtml));
				}
			};
		}];

		directive.ngEvalJavascript = ['getEmbeddedTemplate', function (getEmbeddedTemplate) {
			return {
				compile: function compile(element, attr) {
					var fileNames = attr.ngEvalJavascript.split(' ');
					angular.forEach(fileNames, function (fileName) {
						var script = getEmbeddedTemplate(fileName);
						try {
							if (window.execScript) {
								// IE
								window.execScript(script || '""'); // IE complains when evaling empty string
							} else {
								window.eval(script + '//@ sourceURL=' + fileName);
							}
						} catch (e) {
							if (window.console) {
								window.console.log(script, '\n', e);
							} else {
								window.alert(e);
							}
						}
					});
				}
			};
		}];

		directive.ngEmbedApp = ['$templateCache', '$browser', '$rootScope', '$location', '$sniffer', '$animate', '$exceptionHandler', function ($templateCache, $browser, docsRootScope, $location, $sniffer, $animate, $exceptionHandler) {
			return {
				terminal: true,
				link: function link(scope, element, attrs) {
					var modules = ['ngAnimate'],
						embedRootScope,
						deregisterEmbedRootScope;

					modules.push(['$provide', function ($provide) {
						$provide.value('$templateCache', $templateCache);
						$provide.value('$anchorScroll', angular.noop);
						$provide.value('$browser', $browser);
						$provide.value('$sniffer', $sniffer);
						$provide.value('$animate', $animate);
						$provide.provider('$location', function () {
							this.$get = ['$rootScope', function ($rootScope) {
								docsRootScope.$on('$locationChangeSuccess', function (event, oldUrl, newUrl) {
									$rootScope.$broadcast('$locationChangeSuccess', oldUrl, newUrl);
								});
								return $location;
							}];
							this.html5Mode = angular.noop;
							this.hashPrefix = function () {
								return '';
							};
						});

						$provide.decorator('$rootScope', ['$delegate', function ($delegate) {
							embedRootScope = $delegate;

							// Since we are teleporting the $animate service, which relies on the $$postDigestQueue
							// we need the embedded scope to use the same $$postDigestQueue as the outer scope
							function docsRootDigest() {
								var postDigestQueue = docsRootScope.$$postDigestQueue;
								while (postDigestQueue.length) {
									try {
										postDigestQueue.shift()();
									} catch (e) {
										$exceptionHandler(e);
									}
								}
							}

							embedRootScope.$watch(function () {
								embedRootScope.$$postDigest(docsRootDigest);
							});

							deregisterEmbedRootScope = docsRootScope.$watch(function embedRootScopeDigestWatch() {
								embedRootScope.$digest();
							});

							return embedRootScope;
						}]);
					}]);
					if (attrs.ngEmbedApp) modules.push(attrs.ngEmbedApp);

					element.on('click', function (event) {
						if (event.target.attributes.getNamedItem('ng-click')) {
							event.preventDefault();
						}
					});

					element.bind('$destroy', function () {
						deregisterEmbedRootScope();
						embedRootScope.$destroy();
					});

					element.data('$injector', null);
					angular.bootstrap(element, modules);
				}
			};
		}];

		service.reindentCode = function () {
			return function (text, spaces) {
				if (!text) return text;
				var lines = text.split(/\r?\n/);
				var prefix = '      '.substr(0, spaces || 0);
				var i;

				// remove any leading blank lines
				while (lines.length && lines[0].match(/^\s*$/)) lines.shift();
				// remove any trailing blank lines
				while (lines.length && lines[lines.length - 1].match(/^\s*$/)) lines.pop();
				var minIndent = 999;
				for (i = 0; i < lines.length; i++) {
					var line = lines[0];
					var reindentCode = line.match(/^\s*/)[0];
					if (reindentCode !== line && reindentCode.length < minIndent) {
						minIndent = reindentCode.length;
					}
				}

				for (i = 0; i < lines.length; i++) {
					lines[i] = prefix + lines[i].substring(minIndent);
				}
				lines.push('');
				return lines.join('\n');
			};
		};

		service.templateMerge = ['reindentCode', function (indentCode) {
			return function (template, properties) {
				return template.replace(/\{\{(\w+)(?:\:(\d+))?\}\}/g, function (_, key, indent) {
					var value = properties[key];

					if (indent) {
						value = indentCode(value, indent);
					}

					return value == undefined ? '' : value;
				});
			};
		}];

		service.getEmbeddedTemplate = ['reindentCode', function (reindentCode) {
			return function (id) {
				var element = document.getElementById(id);

				if (!element) {
					return null;
				}

				return reindentCode(angular.element(element).html(), 0);
			};
		}];

		angular.module('bootstrapPrettify', []).directive(directive).factory(service);

		/***/
	},
	/* 247 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(248);


		/***/
	},
	/* 248 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactWithAddons
		 */

			/**
			 * This module exists purely in the open source project, and is meant as a way
			 * to create a separate standalone build of React. This build has "addons", or
			 * functionality we've built and think might be useful but doesn't have a good
			 * place to live inside React core.
			 */

			'use strict';

			var LinkedStateMixin = __webpack_require__(272);
			var React = __webpack_require__(274);
			var ReactComponentWithPureRenderMixin =
				__webpack_require__(406);
			var ReactCSSTransitionGroup = __webpack_require__(407);
			var ReactFragment = __webpack_require__(265);
			var ReactTransitionGroup = __webpack_require__(408);
			var ReactUpdates = __webpack_require__(249);

			var cx = __webpack_require__(416);
			var cloneWithProps = __webpack_require__(410);
			var update = __webpack_require__(417);

			React.addons = {
				CSSTransitionGroup: ReactCSSTransitionGroup,
				LinkedStateMixin: LinkedStateMixin,
				PureRenderMixin: ReactComponentWithPureRenderMixin,
				TransitionGroup: ReactTransitionGroup,

				batchedUpdates: ReactUpdates.batchedUpdates,
				classSet: cx,
				cloneWithProps: cloneWithProps,
				createFragment: ReactFragment.create,
				update: update
			};

			if ("production" !== process.env.NODE_ENV) {
				React.addons.Perf = __webpack_require__(398);
				React.addons.TestUtils = __webpack_require__(418);
			}

			module.exports = React;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 249 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactUpdates
			 */

			'use strict';

			var CallbackQueue = __webpack_require__(250);
			var PooledClass = __webpack_require__(251);
			var ReactCurrentOwner = __webpack_require__(254);
			var ReactPerf = __webpack_require__(255);
			var ReactReconciler = __webpack_require__(256);
			var Transaction = __webpack_require__(271);

			var assign = __webpack_require__(253);
			var invariant = __webpack_require__(252);
			var warning = __webpack_require__(263);

			var dirtyComponents = [];
			var asapCallbackQueue = CallbackQueue.getPooled();
			var asapEnqueued = false;

			var batchingStrategy = null;

			function ensureInjected() {
				("production" !== process.env.NODE_ENV ? invariant(
					ReactUpdates.ReactReconcileTransaction && batchingStrategy,
					'ReactUpdates: must inject a reconcile transaction class and batching ' +
					'strategy'
				) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
			}

			var NESTED_UPDATES = {
				initialize: function () {
					this.dirtyComponentsLength = dirtyComponents.length;
				},
				close: function () {
					if (this.dirtyComponentsLength !== dirtyComponents.length) {
						// Additional updates were enqueued by componentDidUpdate handlers or
						// similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
						// these new updates so that if A's componentDidUpdate calls setState on
						// B, B will update before the callback A's updater provided when calling
						// setState.
						dirtyComponents.splice(0, this.dirtyComponentsLength);
						flushBatchedUpdates();
					} else {
						dirtyComponents.length = 0;
					}
				}
			};

			var UPDATE_QUEUEING = {
				initialize: function () {
					this.callbackQueue.reset();
				},
				close: function () {
					this.callbackQueue.notifyAll();
				}
			};

			var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

			function ReactUpdatesFlushTransaction() {
				this.reinitializeTransaction();
				this.dirtyComponentsLength = null;
				this.callbackQueue = CallbackQueue.getPooled();
				this.reconcileTransaction =
					ReactUpdates.ReactReconcileTransaction.getPooled();
			}

			assign(
				ReactUpdatesFlushTransaction.prototype,
				Transaction.Mixin, {
					getTransactionWrappers: function () {
						return TRANSACTION_WRAPPERS;
					},

					destructor: function () {
						this.dirtyComponentsLength = null;
						CallbackQueue.release(this.callbackQueue);
						this.callbackQueue = null;
						ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
						this.reconcileTransaction = null;
					},

					perform: function (method, scope, a) {
						// Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
						// with this transaction's wrappers around it.
						return Transaction.Mixin.perform.call(
							this,
							this.reconcileTransaction.perform,
							this.reconcileTransaction,
							method,
							scope,
							a
						);
					}
				});

			PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

			function batchedUpdates(callback, a, b, c, d) {
				ensureInjected();
				batchingStrategy.batchedUpdates(callback, a, b, c, d);
			}

			/**
			 * Array comparator for ReactComponents by mount ordering.
			 *
			 * @param {ReactComponent} c1 first component you're comparing
			 * @param {ReactComponent} c2 second component you're comparing
			 * @return {number} Return value usable by Array.prototype.sort().
			 */
			function mountOrderComparator(c1, c2) {
				return c1._mountOrder - c2._mountOrder;
			}

			function runBatchedUpdates(transaction) {
				var len = transaction.dirtyComponentsLength;
				("production" !== process.env.NODE_ENV ? invariant(
					len === dirtyComponents.length,
					'Expected flush transaction\'s stored dirty-components length (%s) to ' +
					'match dirty-components array length (%s).',
					len,
					dirtyComponents.length
				) : invariant(len === dirtyComponents.length));

				// Since reconciling a component higher in the owner hierarchy usually (not
				// always -- see shouldComponentUpdate()) will reconcile children, reconcile
				// them before their children by sorting the array.
				dirtyComponents.sort(mountOrderComparator);

				for (var i = 0; i < len; i++) {
					// If a component is unmounted before pending changes apply, it will still
					// be here, but we assume that it has cleared its _pendingCallbacks and
					// that performUpdateIfNecessary is a noop.
					var component = dirtyComponents[i];

					// If performUpdateIfNecessary happens to enqueue any new updates, we
					// shouldn't execute the callbacks until the next render happens, so
					// stash the callbacks first
					var callbacks = component._pendingCallbacks;
					component._pendingCallbacks = null;

					ReactReconciler.performUpdateIfNecessary(
						component,
						transaction.reconcileTransaction
					);

					if (callbacks) {
						for (var j = 0; j < callbacks.length; j++) {
							transaction.callbackQueue.enqueue(
								callbacks[j],
								component.getPublicInstance()
							);
						}
					}
				}
			}

			var flushBatchedUpdates = function () {
				// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
				// array and perform any updates enqueued by mount-ready handlers (i.e.,
				// componentDidUpdate) but we need to check here too in order to catch
				// updates enqueued by setState callbacks and asap calls.
				while (dirtyComponents.length || asapEnqueued) {
					if (dirtyComponents.length) {
						var transaction = ReactUpdatesFlushTransaction.getPooled();
						transaction.perform(runBatchedUpdates, null, transaction);
						ReactUpdatesFlushTransaction.release(transaction);
					}

					if (asapEnqueued) {
						asapEnqueued = false;
						var queue = asapCallbackQueue;
						asapCallbackQueue = CallbackQueue.getPooled();
						queue.notifyAll();
						CallbackQueue.release(queue);
					}
				}
			};
			flushBatchedUpdates = ReactPerf.measure(
				'ReactUpdates',
				'flushBatchedUpdates',
				flushBatchedUpdates
			);

			/**
			 * Mark a component as needing a rerender, adding an optional callback to a
			 * list of functions which will be executed once the rerender occurs.
			 */
			function enqueueUpdate(component) {
				ensureInjected();

				// Various parts of our code (such as ReactCompositeComponent's
				// _renderValidatedComponent) assume that calls to render aren't nested;
				// verify that that's the case. (This is called by each top-level update
				// function, like setProps, setState, forceUpdate, etc.; creation and
				// destruction of top-level components is guarded in ReactMount.)
				("production" !== process.env.NODE_ENV ? warning(
					ReactCurrentOwner.current == null,
					'enqueueUpdate(): Render methods should be a pure function of props ' +
					'and state; triggering nested component updates from render is not ' +
					'allowed. If necessary, trigger nested updates in ' +
					'componentDidUpdate.'
				) : null);

				if (!batchingStrategy.isBatchingUpdates) {
					batchingStrategy.batchedUpdates(enqueueUpdate, component);
					return;
				}

				dirtyComponents.push(component);
			}

			/**
			 * Enqueue a callback to be run at the end of the current batching cycle. Throws
			 * if no updates are currently being performed.
			 */
			function asap(callback, context) {
				("production" !== process.env.NODE_ENV ? invariant(
					batchingStrategy.isBatchingUpdates,
					'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
					'updates are not being batched.'
				) : invariant(batchingStrategy.isBatchingUpdates));
				asapCallbackQueue.enqueue(callback, context);
				asapEnqueued = true;
			}

			var ReactUpdatesInjection = {
				injectReconcileTransaction: function (ReconcileTransaction) {
					("production" !== process.env.NODE_ENV ? invariant(
						ReconcileTransaction,
						'ReactUpdates: must provide a reconcile transaction class'
					) : invariant(ReconcileTransaction));
					ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
				},

				injectBatchingStrategy: function (_batchingStrategy) {
					("production" !== process.env.NODE_ENV ? invariant(
						_batchingStrategy,
						'ReactUpdates: must provide a batching strategy'
					) : invariant(_batchingStrategy));
					("production" !== process.env.NODE_ENV ? invariant(
						typeof _batchingStrategy.batchedUpdates === 'function',
						'ReactUpdates: must provide a batchedUpdates() function'
					) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
					("production" !== process.env.NODE_ENV ? invariant(
						typeof _batchingStrategy.isBatchingUpdates === 'boolean',
						'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
					) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
					batchingStrategy = _batchingStrategy;
				}
			};

			var ReactUpdates = {
				/**
				 * React references `ReactReconcileTransaction` using this property in order
				 * to allow dependency injection.
				 *
				 * @internal
				 */
				ReactReconcileTransaction: null,

				batchedUpdates: batchedUpdates,
				enqueueUpdate: enqueueUpdate,
				flushBatchedUpdates: flushBatchedUpdates,
				injection: ReactUpdatesInjection,
				asap: asap
			};

			module.exports = ReactUpdates;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 250 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule CallbackQueue
			 */

			'use strict';

			var PooledClass = __webpack_require__(251);

			var assign = __webpack_require__(253);
			var invariant = __webpack_require__(252);

			/**
			 * A specialized pseudo-event module to help keep track of components waiting to
			 * be notified when their DOM representations are available for use.
			 *
			 * This implements `PooledClass`, so you should never need to instantiate this.
			 * Instead, use `CallbackQueue.getPooled()`.
			 *
			 * @class ReactMountReady
			 * @implements PooledClass
			 * @internal
			 */
			function CallbackQueue() {
				this._callbacks = null;
				this._contexts = null;
			}

			assign(CallbackQueue.prototype, {

				/**
				 * Enqueues a callback to be invoked when `notifyAll` is invoked.
				 *
				 * @param {function} callback Invoked when `notifyAll` is invoked.
				 * @param {?object} context Context to call `callback` with.
				 * @internal
				 */
				enqueue: function (callback, context) {
					this._callbacks = this._callbacks || [];
					this._contexts = this._contexts || [];
					this._callbacks.push(callback);
					this._contexts.push(context);
				},

				/**
				 * Invokes all enqueued callbacks and clears the queue. This is invoked after
				 * the DOM representation of a component has been created or updated.
				 *
				 * @internal
				 */
				notifyAll: function () {
					var callbacks = this._callbacks;
					var contexts = this._contexts;
					if (callbacks) {
						("production" !== process.env.NODE_ENV ? invariant(
							callbacks.length === contexts.length,
							'Mismatched list of contexts in callback queue'
						) : invariant(callbacks.length === contexts.length));
						this._callbacks = null;
						this._contexts = null;
						for (var i = 0, l = callbacks.length; i < l; i++) {
							callbacks[i].call(contexts[i]);
						}
						callbacks.length = 0;
						contexts.length = 0;
					}
				},

				/**
				 * Resets the internal queue.
				 *
				 * @internal
				 */
				reset: function () {
					this._callbacks = null;
					this._contexts = null;
				},

				/**
				 * `PooledClass` looks for this.
				 */
				destructor: function () {
					this.reset();
				}

			});

			PooledClass.addPoolingTo(CallbackQueue);

			module.exports = CallbackQueue;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 251 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule PooledClass
			 */

			'use strict';

			var invariant = __webpack_require__(252);

			/**
			 * Static poolers. Several custom versions for each potential number of
			 * arguments. A completely generic pooler is easy to implement, but would
			 * require accessing the `arguments` object. In each of these, `this` refers to
			 * the Class itself, not an instance. If any others are needed, simply add them
			 * here, or in their own files.
			 */
			var oneArgumentPooler = function (copyFieldsFrom) {
				var Klass = this;
				if (Klass.instancePool.length) {
					var instance = Klass.instancePool.pop();
					Klass.call(instance, copyFieldsFrom);
					return instance;
				} else {
					return new Klass(copyFieldsFrom);
				}
			};

			var twoArgumentPooler = function (a1, a2) {
				var Klass = this;
				if (Klass.instancePool.length) {
					var instance = Klass.instancePool.pop();
					Klass.call(instance, a1, a2);
					return instance;
				} else {
					return new Klass(a1, a2);
				}
			};

			var threeArgumentPooler = function (a1, a2, a3) {
				var Klass = this;
				if (Klass.instancePool.length) {
					var instance = Klass.instancePool.pop();
					Klass.call(instance, a1, a2, a3);
					return instance;
				} else {
					return new Klass(a1, a2, a3);
				}
			};

			var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
				var Klass = this;
				if (Klass.instancePool.length) {
					var instance = Klass.instancePool.pop();
					Klass.call(instance, a1, a2, a3, a4, a5);
					return instance;
				} else {
					return new Klass(a1, a2, a3, a4, a5);
				}
			};

			var standardReleaser = function (instance) {
				var Klass = this;
				("production" !== process.env.NODE_ENV ? invariant(
					instance instanceof Klass,
					'Trying to release an instance into a pool of a different type.'
				) : invariant(instance instanceof Klass));
				if (instance.destructor) {
					instance.destructor();
				}
				if (Klass.instancePool.length < Klass.poolSize) {
					Klass.instancePool.push(instance);
				}
			};

			var DEFAULT_POOL_SIZE = 10;
			var DEFAULT_POOLER = oneArgumentPooler;

			/**
			 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
			 * itself (statically) not adding any prototypical fields. Any CopyConstructor
			 * you give this may have a `poolSize` property, and will look for a
			 * prototypical `destructor` on instances (optional).
			 *
			 * @param {Function} CopyConstructor Constructor that can be used to reset.
			 * @param {Function} pooler Customizable pooler.
			 */
			var addPoolingTo = function (CopyConstructor, pooler) {
				var NewKlass = CopyConstructor;
				NewKlass.instancePool = [];
				NewKlass.getPooled = pooler || DEFAULT_POOLER;
				if (!NewKlass.poolSize) {
					NewKlass.poolSize = DEFAULT_POOL_SIZE;
				}
				NewKlass.release = standardReleaser;
				return NewKlass;
			};

			var PooledClass = {
				addPoolingTo: addPoolingTo,
				oneArgumentPooler: oneArgumentPooler,
				twoArgumentPooler: twoArgumentPooler,
				threeArgumentPooler: threeArgumentPooler,
				fiveArgumentPooler: fiveArgumentPooler
			};

			module.exports = PooledClass;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 252 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule invariant
			 */

			"use strict";

			/**
			 * Use invariant() to assert state which your program assumes to be true.
			 *
			 * Provide sprintf-style format (only %s is supported) and arguments
			 * to provide information about what broke and what you were
			 * expecting.
			 *
			 * The invariant message will be stripped in production, but the invariant
			 * will remain to ensure logic does not differ in production.
			 */

			var invariant = function (condition, format, a, b, c, d, e, f) {
				if ("production" !== process.env.NODE_ENV) {
					if (format === undefined) {
						throw new Error('invariant requires an error message argument');
					}
				}

				if (!condition) {
					var error;
					if (format === undefined) {
						error = new Error(
							'Minified exception occurred; use the non-minified dev environment ' +
							'for the full error message and additional helpful warnings.'
						);
					} else {
						var args = [a, b, c, d, e, f];
						var argIndex = 0;
						error = new Error(
							'Invariant Violation: ' +
							format.replace(/%s/g, function () {
								return args[argIndex++];
							})
						);
					}

					error.framesToPop = 1; // we don't care about invariant's own frame
					throw error;
				}
			};

			module.exports = invariant;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 253 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule Object.assign
		 */

			// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

		'use strict';

		function assign(target, sources) {
			if (target == null) {
				throw new TypeError('Object.assign target cannot be null or undefined');
			}

			var to = Object(target);
			var hasOwnProperty = Object.prototype.hasOwnProperty;

			for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
				var nextSource = arguments[nextIndex];
				if (nextSource == null) {
					continue;
				}

				var from = Object(nextSource);

				// We don't currently support accessors nor proxies. Therefore this
				// copy cannot throw. If we ever supported this then we must handle
				// exceptions and side-effects. We don't support symbols so they won't
				// be transferred.

				for (var key in from) {
					if (hasOwnProperty.call(from, key)) {
						to[key] = from[key];
					}
				}
			}

			return to;
		}

		module.exports = assign;


		/***/
	},
	/* 254 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactCurrentOwner
		 */

		'use strict';

		/**
		 * Keeps track of the current owner.
		 *
		 * The current owner is the component who should own any components that are
		 * currently being constructed.
		 *
		 * The depth indicate how many composite components are above this render level.
		 */
		var ReactCurrentOwner = {

			/**
			 * @internal
			 * @type {ReactComponent}
			 */
			current: null

		};

		module.exports = ReactCurrentOwner;


		/***/
	},
	/* 255 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactPerf
			 * @typechecks static-only
			 */

			'use strict';

			/**
			 * ReactPerf is a general AOP system designed to measure performance. This
			 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
			 */
			var ReactPerf = {
				/**
				 * Boolean to enable/disable measurement. Set to false by default to prevent
				 * accidental logging and perf loss.
				 */
				enableMeasure: false,

				/**
				 * Holds onto the measure function in use. By default, don't measure
				 * anything, but we'll override this if we inject a measure function.
				 */
				storedMeasure: _noMeasure,

				/**
				 * @param {object} object
				 * @param {string} objectName
				 * @param {object<string>} methodNames
				 */
				measureMethods: function (object, objectName, methodNames) {
					if ("production" !== process.env.NODE_ENV) {
						for (var key in methodNames) {
							if (!methodNames.hasOwnProperty(key)) {
								continue;
							}
							object[key] = ReactPerf.measure(
								objectName,
								methodNames[key],
								object[key]
							);
						}
					}
				},

				/**
				 * Use this to wrap methods you want to measure. Zero overhead in production.
				 *
				 * @param {string} objName
				 * @param {string} fnName
				 * @param {function} func
				 * @return {function}
				 */
				measure: function (objName, fnName, func) {
					if ("production" !== process.env.NODE_ENV) {
						var measuredFunc = null;
						var wrapper = function () {
							if (ReactPerf.enableMeasure) {
								if (!measuredFunc) {
									measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
								}
								return measuredFunc.apply(this, arguments);
							}
							return func.apply(this, arguments);
						};
						wrapper.displayName = objName + '_' + fnName;
						return wrapper;
					}
					return func;
				},

				injection: {
					/**
					 * @param {function} measure
					 */
					injectMeasure: function (measure) {
						ReactPerf.storedMeasure = measure;
					}
				}
			};

			/**
			 * Simply passes through the measured function, without measuring it.
			 *
			 * @param {string} objName
			 * @param {string} fnName
			 * @param {function} func
			 * @return {function}
			 */
			function _noMeasure(objName, fnName, func) {
				return func;
			}

			module.exports = ReactPerf;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 256 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactReconciler
			 */

			'use strict';

			var ReactRef = __webpack_require__(257);
			var ReactElementValidator = __webpack_require__(259);

			/**
			 * Helper to call ReactRef.attachRefs with this composite component, split out
			 * to avoid allocations in the transaction mount-ready queue.
			 */
			function attachRefs() {
				ReactRef.attachRefs(this, this._currentElement);
			}

			var ReactReconciler = {

				/**
				 * Initializes the component, renders markup, and registers event listeners.
				 *
				 * @param {ReactComponent} internalInstance
				 * @param {string} rootID DOM ID of the root node.
				 * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
				 * @return {?string} Rendered markup to be inserted into the DOM.
				 * @final
				 * @internal
				 */
				mountComponent: function (internalInstance, rootID, transaction, context) {
					var markup = internalInstance.mountComponent(rootID, transaction, context);
					if ("production" !== process.env.NODE_ENV) {
						ReactElementValidator.checkAndWarnForMutatedProps(
							internalInstance._currentElement
						);
					}
					transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
					return markup;
				},

				/**
				 * Releases any resources allocated by `mountComponent`.
				 *
				 * @final
				 * @internal
				 */
				unmountComponent: function (internalInstance) {
					ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
					internalInstance.unmountComponent();
				},

				/**
				 * Update a component using a new element.
				 *
				 * @param {ReactComponent} internalInstance
				 * @param {ReactElement} nextElement
				 * @param {ReactReconcileTransaction} transaction
				 * @param {object} context
				 * @internal
				 */
				receiveComponent: function (internalInstance, nextElement, transaction, context) {
					var prevElement = internalInstance._currentElement;

					if (nextElement === prevElement && nextElement._owner != null) {
						// Since elements are immutable after the owner is rendered,
						// we can do a cheap identity compare here to determine if this is a
						// superfluous reconcile. It's possible for state to be mutable but such
						// change should trigger an update of the owner which would recreate
						// the element. We explicitly check for the existence of an owner since
						// it's possible for an element created outside a composite to be
						// deeply mutated and reused.
						return;
					}

					if ("production" !== process.env.NODE_ENV) {
						ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
					}

					var refsChanged = ReactRef.shouldUpdateRefs(
						prevElement,
						nextElement
					);

					if (refsChanged) {
						ReactRef.detachRefs(internalInstance, prevElement);
					}

					internalInstance.receiveComponent(nextElement, transaction, context);

					if (refsChanged) {
						transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
					}
				},

				/**
				 * Flush any dirty changes in a component.
				 *
				 * @param {ReactComponent} internalInstance
				 * @param {ReactReconcileTransaction} transaction
				 * @internal
				 */
				performUpdateIfNecessary: function (internalInstance,
													transaction) {
					internalInstance.performUpdateIfNecessary(transaction);
				}

			};

			module.exports = ReactReconciler;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 257 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactRef
		 */

		'use strict';

		var ReactOwner = __webpack_require__(258);

		var ReactRef = {};

		function attachRef(ref, component, owner) {
			if (typeof ref === 'function') {
				ref(component.getPublicInstance());
			} else {
				// Legacy ref
				ReactOwner.addComponentAsRefTo(component, ref, owner);
			}
		}

		function detachRef(ref, component, owner) {
			if (typeof ref === 'function') {
				ref(null);
			} else {
				// Legacy ref
				ReactOwner.removeComponentAsRefFrom(component, ref, owner);
			}
		}

		ReactRef.attachRefs = function (instance, element) {
			var ref = element.ref;
			if (ref != null) {
				attachRef(ref, instance, element._owner);
			}
		};

		ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
			// If either the owner or a `ref` has changed, make sure the newest owner
			// has stored a reference to `this`, and the previous owner (if different)
			// has forgotten the reference to `this`. We use the element instead
			// of the public this.props because the post processing cannot determine
			// a ref. The ref conceptually lives on the element.

			// TODO: Should this even be possible? The owner cannot change because
			// it's forbidden by shouldUpdateReactComponent. The ref can change
			// if you swap the keys of but not the refs. Reconsider where this check
			// is made. It probably belongs where the key checking and
			// instantiateReactComponent is done.

			return (
				nextElement._owner !== prevElement._owner ||
				nextElement.ref !== prevElement.ref
			);
		};

		ReactRef.detachRefs = function (instance, element) {
			var ref = element.ref;
			if (ref != null) {
				detachRef(ref, instance, element._owner);
			}
		};

		module.exports = ReactRef;


		/***/
	},
	/* 258 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactOwner
			 */

			'use strict';

			var invariant = __webpack_require__(252);

			/**
			 * ReactOwners are capable of storing references to owned components.
			 *
			 * All components are capable of //being// referenced by owner components, but
			 * only ReactOwner components are capable of //referencing// owned components.
			 * The named reference is known as a "ref".
			 *
			 * Refs are available when mounted and updated during reconciliation.
			 *
			 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
			 *
			 * Refs should rarely be used. When refs are used, they should only be done to
			 * control data that is not handled by React's data flow.
			 *
			 * @class ReactOwner
			 */
			var ReactOwner = {

				/**
				 * @param {?object} object
				 * @return {boolean} True if `object` is a valid owner.
				 * @final
				 */
				isValidOwner: function (object) {
					return !!(
						(object &&
						typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
					);
				},

				/**
				 * Adds a component by ref to an owner component.
				 *
				 * @param {ReactComponent} component Component to reference.
				 * @param {string} ref Name by which to refer to the component.
				 * @param {ReactOwner} owner Component on which to record the ref.
				 * @final
				 * @internal
				 */
				addComponentAsRefTo: function (component, ref, owner) {
					("production" !== process.env.NODE_ENV ? invariant(
						ReactOwner.isValidOwner(owner),
						'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
						'usually means that you\'re trying to add a ref to a component that ' +
						'doesn\'t have an owner (that is, was not created inside of another ' +
						'component\'s `render` method). Try rendering this component inside of ' +
						'a new top-level component which will hold the ref.'
					) : invariant(ReactOwner.isValidOwner(owner)));
					owner.attachRef(ref, component);
				},

				/**
				 * Removes a component by ref from an owner component.
				 *
				 * @param {ReactComponent} component Component to dereference.
				 * @param {string} ref Name of the ref to remove.
				 * @param {ReactOwner} owner Component on which the ref is recorded.
				 * @final
				 * @internal
				 */
				removeComponentAsRefFrom: function (component, ref, owner) {
					("production" !== process.env.NODE_ENV ? invariant(
						ReactOwner.isValidOwner(owner),
						'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
						'usually means that you\'re trying to remove a ref to a component that ' +
						'doesn\'t have an owner (that is, was not created inside of another ' +
						'component\'s `render` method). Try rendering this component inside of ' +
						'a new top-level component which will hold the ref.'
					) : invariant(ReactOwner.isValidOwner(owner)));
					// Check that `component` is still the current ref because we do not want to
					// detach the ref if another component stole it.
					if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
						owner.detachRef(ref);
					}
				}

			};

			module.exports = ReactOwner;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 259 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactElementValidator
		 */

			/**
			 * ReactElementValidator provides a wrapper around a element factory
			 * which validates the props passed to the element. This is intended to be
			 * used only in DEV and could be replaced by a static type checker for languages
			 * that support it.
			 */

			'use strict';

			var ReactElement = __webpack_require__(260);
			var ReactFragment = __webpack_require__(265);
			var ReactPropTypeLocations = __webpack_require__(266);
			var ReactPropTypeLocationNames = __webpack_require__(268);
			var ReactCurrentOwner = __webpack_require__(254);
			var ReactNativeComponent = __webpack_require__(269);

			var getIteratorFn = __webpack_require__(270);
			var invariant = __webpack_require__(252);
			var warning = __webpack_require__(263);

			function getDeclarationErrorAddendum() {
				if (ReactCurrentOwner.current) {
					var name = ReactCurrentOwner.current.getName();
					if (name) {
						return ' Check the render method of `' + name + '`.';
					}
				}
				return '';
			}

			/**
			 * Warn if there's no key explicitly set on dynamic arrays of children or
			 * object keys are not valid. This allows us to keep track of children between
			 * updates.
			 */
			var ownerHasKeyUseWarning = {};

			var loggedTypeFailures = {};

			var NUMERIC_PROPERTY_REGEX = /^\d+$/;

			/**
			 * Gets the instance's name for use in warnings.
			 *
			 * @internal
			 * @return {?string} Display name or undefined
			 */
			function getName(instance) {
				var publicInstance = instance && instance.getPublicInstance();
				if (!publicInstance) {
					return undefined;
				}
				var constructor = publicInstance.constructor;
				if (!constructor) {
					return undefined;
				}
				return constructor.displayName || constructor.name || undefined;
			}

			/**
			 * Gets the current owner's displayName for use in warnings.
			 *
			 * @internal
			 * @return {?string} Display name or undefined
			 */
			function getCurrentOwnerDisplayName() {
				var current = ReactCurrentOwner.current;
				return (
					current && getName(current) || undefined
				);
			}

			/**
			 * Warn if the element doesn't have an explicit key assigned to it.
			 * This element is in an array. The array could grow and shrink or be
			 * reordered. All children that haven't already been validated are required to
			 * have a "key" property assigned to it.
			 *
			 * @internal
			 * @param {ReactElement} element Element that requires a key.
			 * @param {*} parentType element's parent's type.
			 */
			function validateExplicitKey(element, parentType) {
				if (element._store.validated || element.key != null) {
					return;
				}
				element._store.validated = true;

				warnAndMonitorForKeyUse(
					'Each child in an array or iterator should have a unique "key" prop.',
					element,
					parentType
				);
			}

			/**
			 * Warn if the key is being defined as an object property but has an incorrect
			 * value.
			 *
			 * @internal
			 * @param {string} name Property name of the key.
			 * @param {ReactElement} element Component that requires a key.
			 * @param {*} parentType element's parent's type.
			 */
			function validatePropertyKey(name, element, parentType) {
				if (!NUMERIC_PROPERTY_REGEX.test(name)) {
					return;
				}
				warnAndMonitorForKeyUse(
					'Child objects should have non-numeric keys so ordering is preserved.',
					element,
					parentType
				);
			}

			/**
			 * Shared warning and monitoring code for the key warnings.
			 *
			 * @internal
			 * @param {string} message The base warning that gets output.
			 * @param {ReactElement} element Component that requires a key.
			 * @param {*} parentType element's parent's type.
			 */
			function warnAndMonitorForKeyUse(message, element, parentType) {
				var ownerName = getCurrentOwnerDisplayName();
				var parentName = typeof parentType === 'string' ?
					parentType : parentType.displayName || parentType.name;

				var useName = ownerName || parentName;
				var memoizer = ownerHasKeyUseWarning[message] || (
						(ownerHasKeyUseWarning[message] = {})
					);
				if (memoizer.hasOwnProperty(useName)) {
					return;
				}
				memoizer[useName] = true;

				var parentOrOwnerAddendum =
					ownerName ? (" Check the render method of " + ownerName + ".") :
						parentName ? (" Check the React.render call using <" + parentName + ">.") :
							'';

				// Usually the current owner is the offender, but if it accepts children as a
				// property, it may be the creator of the child that's responsible for
				// assigning it a key.
				var childOwnerAddendum = '';
				if (element &&
					element._owner &&
					element._owner !== ReactCurrentOwner.current) {
					// Name of the component that originally created this child.
					var childOwnerName = getName(element._owner);

					childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
				}

				("production" !== process.env.NODE_ENV ? warning(
					false,
					message + '%s%s See https://fb.me/react-warning-keys for more information.',
					parentOrOwnerAddendum,
					childOwnerAddendum
				) : null);
			}

			/**
			 * Ensure that every element either is passed in a static location, in an
			 * array with an explicit keys property defined, or in an object literal
			 * with valid key property.
			 *
			 * @internal
			 * @param {ReactNode} node Statically passed child of any type.
			 * @param {*} parentType node's parent's type.
			 */
			function validateChildKeys(node, parentType) {
				if (Array.isArray(node)) {
					for (var i = 0; i < node.length; i++) {
						var child = node[i];
						if (ReactElement.isValidElement(child)) {
							validateExplicitKey(child, parentType);
						}
					}
				} else if (ReactElement.isValidElement(node)) {
					// This element was passed in a valid location.
					node._store.validated = true;
				} else if (node) {
					var iteratorFn = getIteratorFn(node);
					// Entry iterators provide implicit keys.
					if (iteratorFn) {
						if (iteratorFn !== node.entries) {
							var iterator = iteratorFn.call(node);
							var step;
							while (!(step = iterator.next()).done) {
								if (ReactElement.isValidElement(step.value)) {
									validateExplicitKey(step.value, parentType);
								}
							}
						}
					} else if (typeof node === 'object') {
						var fragment = ReactFragment.extractIfFragment(node);
						for (var key in fragment) {
							if (fragment.hasOwnProperty(key)) {
								validatePropertyKey(key, fragment[key], parentType);
							}
						}
					}
				}
			}

			/**
			 * Assert that the props are valid
			 *
			 * @param {string} componentName Name of the component for error messages.
			 * @param {object} propTypes Map of prop name to a ReactPropType
			 * @param {object} props
			 * @param {string} location e.g. "prop", "context", "child context"
			 * @private
			 */
			function checkPropTypes(componentName, propTypes, props, location) {
				for (var propName in propTypes) {
					if (propTypes.hasOwnProperty(propName)) {
						var error;
						// Prop type validation may throw. In case they do, we don't want to
						// fail the render phase where it didn't fail before. So we log it.
						// After these have been cleaned up, we'll let them throw.
						try {
							// This is intentionally an invariant that gets caught. It's the same
							// behavior as without this statement except with a better message.
							("production" !== process.env.NODE_ENV ? invariant(
								typeof propTypes[propName] === 'function',
								'%s: %s type `%s` is invalid; it must be a function, usually from ' +
								'React.PropTypes.',
								componentName || 'React class',
								ReactPropTypeLocationNames[location],
								propName
							) : invariant(typeof propTypes[propName] === 'function'));
							error = propTypes[propName](props, propName, componentName, location);
						} catch (ex) {
							error = ex;
						}
						if (error instanceof Error && !(error.message in loggedTypeFailures)) {
							// Only monitor this failure once because there tends to be a lot of the
							// same error.
							loggedTypeFailures[error.message] = true;

							var addendum = getDeclarationErrorAddendum(this);
							("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
						}
					}
				}
			}

			var warnedPropsMutations = {};

			/**
			 * Warn about mutating props when setting `propName` on `element`.
			 *
			 * @param {string} propName The string key within props that was set
			 * @param {ReactElement} element
			 */
			function warnForPropsMutation(propName, element) {
				var type = element.type;
				var elementName = typeof type === 'string' ? type : type.displayName;
				var ownerName = element._owner ?
					element._owner.getPublicInstance().constructor.displayName : null;

				var warningKey = propName + '|' + elementName + '|' + ownerName;
				if (warnedPropsMutations.hasOwnProperty(warningKey)) {
					return;
				}
				warnedPropsMutations[warningKey] = true;

				var elementInfo = '';
				if (elementName) {
					elementInfo = ' <' + elementName + ' />';
				}
				var ownerInfo = '';
				if (ownerName) {
					ownerInfo = ' The element was created by ' + ownerName + '.';
				}

				("production" !== process.env.NODE_ENV ? warning(
					false,
					'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
					'correct value when initially creating the element or use ' +
					'React.cloneElement to make a new element with updated props.%s',
					propName,
					elementInfo,
					ownerInfo
				) : null);
			}

			// Inline Object.is polyfill
			function is(a, b) {
				if (a !== a) {
					// NaN
					return b !== b;
				}
				if (a === 0 && b === 0) {
					// +-0
					return 1 / a === 1 / b;
				}
				return a === b;
			}

			/**
			 * Given an element, check if its props have been mutated since element
			 * creation (or the last call to this function). In particular, check if any
			 * new props have been added, which we can't directly catch by defining warning
			 * properties on the props object.
			 *
			 * @param {ReactElement} element
			 */
			function checkAndWarnForMutatedProps(element) {
				if (!element._store) {
					// Element was created using `new ReactElement` directly or with
					// `ReactElement.createElement`; skip mutation checking
					return;
				}

				var originalProps = element._store.originalProps;
				var props = element.props;

				for (var propName in props) {
					if (props.hasOwnProperty(propName)) {
						if (!originalProps.hasOwnProperty(propName) || !is(originalProps[propName], props[propName])) {
							warnForPropsMutation(propName, element);

							// Copy over the new value so that the two props objects match again
							originalProps[propName] = props[propName];
						}
					}
				}
			}

			/**
			 * Given an element, validate that its props follow the propTypes definition,
			 * provided by the type.
			 *
			 * @param {ReactElement} element
			 */
			function validatePropTypes(element) {
				if (element.type == null) {
					// This has already warned. Don't throw.
					return;
				}
				// Extract the component class from the element. Converts string types
				// to a composite class which may have propTypes.
				// TODO: Validating a string's propTypes is not decoupled from the
				// rendering target which is problematic.
				var componentClass = ReactNativeComponent.getComponentClassForElement(
					element
				);
				var name = componentClass.displayName || componentClass.name;
				if (componentClass.propTypes) {
					checkPropTypes(
						name,
						componentClass.propTypes,
						element.props,
						ReactPropTypeLocations.prop
					);
				}
				if (typeof componentClass.getDefaultProps === 'function') {
					("production" !== process.env.NODE_ENV ? warning(
						componentClass.getDefaultProps.isReactClassApproved,
						'getDefaultProps is only used on classic React.createClass ' +
						'definitions. Use a static property named `defaultProps` instead.'
					) : null);
				}
			}

			var ReactElementValidator = {

				checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

				createElement: function (type, props, children) {
					// We warn in this case but don't throw. We expect the element creation to
					// succeed and there will likely be errors in render.
					("production" !== process.env.NODE_ENV ? warning(
						type != null,
						'React.createElement: type should not be null or undefined. It should ' +
						'be a string (for DOM elements) or a ReactClass (for composite ' +
						'components).'
					) : null);

					var element = ReactElement.createElement.apply(this, arguments);

					// The result can be nullish if a mock or a custom function is used.
					// TODO: Drop this when these are no longer allowed as the type argument.
					if (element == null) {
						return element;
					}

					for (var i = 2; i < arguments.length; i++) {
						validateChildKeys(arguments[i], type);
					}

					validatePropTypes(element);

					return element;
				},

				createFactory: function (type) {
					var validatedFactory = ReactElementValidator.createElement.bind(
						null,
						type
					);
					// Legacy hook TODO: Warn if this is accessed
					validatedFactory.type = type;

					if ("production" !== process.env.NODE_ENV) {
						try {
							Object.defineProperty(
								validatedFactory,
								'type',
								{
									enumerable: false,
									get: function () {
										("production" !== process.env.NODE_ENV ? warning(
											false,
											'Factory.type is deprecated. Access the class directly ' +
											'before passing it to createFactory.'
										) : null);
										Object.defineProperty(this, 'type', {
											value: type
										});
										return type;
									}
								}
							);
						} catch (x) {
							// IE will fail on defineProperty (es5-shim/sham too)
						}
					}


					return validatedFactory;
				},

				cloneElement: function (element, props, children) {
					var newElement = ReactElement.cloneElement.apply(this, arguments);
					for (var i = 2; i < arguments.length; i++) {
						validateChildKeys(arguments[i], newElement.type);
					}
					validatePropTypes(newElement);
					return newElement;
				}

			};

			module.exports = ReactElementValidator;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 260 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2014-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactElement
			 */

			'use strict';

			var ReactContext = __webpack_require__(261);
			var ReactCurrentOwner = __webpack_require__(254);

			var assign = __webpack_require__(253);
			var warning = __webpack_require__(263);

			var RESERVED_PROPS = {
				key: true,
				ref: true
			};

			/**
			 * Warn for mutations.
			 *
			 * @internal
			 * @param {object} object
			 * @param {string} key
			 */
			function defineWarningProperty(object, key) {
				Object.defineProperty(object, key, {

					configurable: false,
					enumerable: true,

					get: function () {
						if (!this._store) {
							return null;
						}
						return this._store[key];
					},

					set: function (value) {
						("production" !== process.env.NODE_ENV ? warning(
							false,
							'Don\'t set the %s property of the React element. Instead, ' +
							'specify the correct value when initially creating the element.',
							key
						) : null);
						this._store[key] = value;
					}

				});
			}

			/**
			 * This is updated to true if the membrane is successfully created.
			 */
			var useMutationMembrane = false;

			/**
			 * Warn for mutations.
			 *
			 * @internal
			 * @param {object} element
			 */
			function defineMutationMembrane(prototype) {
				try {
					var pseudoFrozenProperties = {
						props: true
					};
					for (var key in pseudoFrozenProperties) {
						defineWarningProperty(prototype, key);
					}
					useMutationMembrane = true;
				} catch (x) {
					// IE will fail on defineProperty
				}
			}

			/**
			 * Base constructor for all React elements. This is only used to make this
			 * work with a dynamic instanceof check. Nothing should live on this prototype.
			 *
			 * @param {*} type
			 * @param {string|object} ref
			 * @param {*} key
			 * @param {*} props
			 * @internal
			 */
			var ReactElement = function (type, key, ref, owner, context, props) {
				// Built-in properties that belong on the element
				this.type = type;
				this.key = key;
				this.ref = ref;

				// Record the component responsible for creating this element.
				this._owner = owner;

				// TODO: Deprecate withContext, and then the context becomes accessible
				// through the owner.
				this._context = context;

				if ("production" !== process.env.NODE_ENV) {
					// The validation flag and props are currently mutative. We put them on
					// an external backing store so that we can freeze the whole object.
					// This can be replaced with a WeakMap once they are implemented in
					// commonly used development environments.
					this._store = {props: props, originalProps: assign({}, props)};

					// To make comparing ReactElements easier for testing purposes, we make
					// the validation flag non-enumerable (where possible, which should
					// include every environment we run tests in), so the test framework
					// ignores it.
					try {
						Object.defineProperty(this._store, 'validated', {
							configurable: false,
							enumerable: false,
							writable: true
						});
					} catch (x) {
					}
					this._store.validated = false;

					// We're not allowed to set props directly on the object so we early
					// return and rely on the prototype membrane to forward to the backing
					// store.
					if (useMutationMembrane) {
						Object.freeze(this);
						return;
					}
				}

				this.props = props;
			};

			// We intentionally don't expose the function on the constructor property.
			// ReactElement should be indistinguishable from a plain object.
			ReactElement.prototype = {
				_isReactElement: true
			};

			if ("production" !== process.env.NODE_ENV) {
				defineMutationMembrane(ReactElement.prototype);
			}

			ReactElement.createElement = function (type, config, children) {
				var propName;

				// Reserved names are extracted
				var props = {};

				var key = null;
				var ref = null;

				if (config != null) {
					ref = config.ref === undefined ? null : config.ref;
					key = config.key === undefined ? null : '' + config.key;
					// Remaining properties are added to a new props object
					for (propName in config) {
						if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
							props[propName] = config[propName];
						}
					}
				}

				// Children can be more than one argument, and those are transferred onto
				// the newly allocated props object.
				var childrenLength = arguments.length - 2;
				if (childrenLength === 1) {
					props.children = children;
				} else if (childrenLength > 1) {
					var childArray = Array(childrenLength);
					for (var i = 0; i < childrenLength; i++) {
						childArray[i] = arguments[i + 2];
					}
					props.children = childArray;
				}

				// Resolve default props
				if (type && type.defaultProps) {
					var defaultProps = type.defaultProps;
					for (propName in defaultProps) {
						if (typeof props[propName] === 'undefined') {
							props[propName] = defaultProps[propName];
						}
					}
				}

				return new ReactElement(
					type,
					key,
					ref,
					ReactCurrentOwner.current,
					ReactContext.current,
					props
				);
			};

			ReactElement.createFactory = function (type) {
				var factory = ReactElement.createElement.bind(null, type);
				// Expose the type on the factory and the prototype so that it can be
				// easily accessed on elements. E.g. <Foo />.type === Foo.type.
				// This should not be named `constructor` since this may not be the function
				// that created the element, and it may not even be a constructor.
				// Legacy hook TODO: Warn if this is accessed
				factory.type = type;
				return factory;
			};

			ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
				var newElement = new ReactElement(
					oldElement.type,
					oldElement.key,
					oldElement.ref,
					oldElement._owner,
					oldElement._context,
					newProps
				);

				if ("production" !== process.env.NODE_ENV) {
					// If the key on the original is valid, then the clone is valid
					newElement._store.validated = oldElement._store.validated;
				}
				return newElement;
			};

			ReactElement.cloneElement = function (element, config, children) {
				var propName;

				// Original props are copied
				var props = assign({}, element.props);

				// Reserved names are extracted
				var key = element.key;
				var ref = element.ref;

				// Owner will be preserved, unless ref is overridden
				var owner = element._owner;

				if (config != null) {
					if (config.ref !== undefined) {
						// Silently steal the ref from the parent.
						ref = config.ref;
						owner = ReactCurrentOwner.current;
					}
					if (config.key !== undefined) {
						key = '' + config.key;
					}
					// Remaining properties override existing props
					for (propName in config) {
						if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
							props[propName] = config[propName];
						}
					}
				}

				// Children can be more than one argument, and those are transferred onto
				// the newly allocated props object.
				var childrenLength = arguments.length - 2;
				if (childrenLength === 1) {
					props.children = children;
				} else if (childrenLength > 1) {
					var childArray = Array(childrenLength);
					for (var i = 0; i < childrenLength; i++) {
						childArray[i] = arguments[i + 2];
					}
					props.children = childArray;
				}

				return new ReactElement(
					element.type,
					key,
					ref,
					owner,
					element._context,
					props
				);
			};

			/**
			 * @param {?object} object
			 * @return {boolean} True if `object` is a valid component.
			 * @final
			 */
			ReactElement.isValidElement = function (object) {
				// ReactTestUtils is often used outside of beforeEach where as React is
				// within it. This leads to two different instances of React on the same
				// page. To identify a element from a different React instance we use
				// a flag instead of an instanceof check.
				var isElement = !!(object && object._isReactElement);
				// if (isElement && !(object instanceof ReactElement)) {
				// This is an indicator that you're using multiple versions of React at the
				// same time. This will screw with ownership and stuff. Fix it, please.
				// TODO: We could possibly warn here.
				// }
				return isElement;
			};

			module.exports = ReactElement;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 261 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactContext
			 */

			'use strict';

			var assign = __webpack_require__(253);
			var emptyObject = __webpack_require__(262);
			var warning = __webpack_require__(263);

			var didWarn = false;

			/**
			 * Keeps track of the current context.
			 *
			 * The context is automatically passed down the component ownership hierarchy
			 * and is accessible via `this.context` on ReactCompositeComponents.
			 */
			var ReactContext = {

				/**
				 * @internal
				 * @type {object}
				 */
				current: emptyObject,

				/**
				 * Temporarily extends the current context while executing scopedCallback.
				 *
				 * A typical use case might look like
				 *
				 *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
				 *
				 * @param {object} newContext New context to merge into the existing context
				 * @param {function} scopedCallback Callback to run with the new context
				 * @return {ReactComponent|array<ReactComponent>}
				 */
				withContext: function (newContext, scopedCallback) {
					if ("production" !== process.env.NODE_ENV) {
						("production" !== process.env.NODE_ENV ? warning(
							didWarn,
							'withContext is deprecated and will be removed in a future version. ' +
							'Use a wrapper component with getChildContext instead.'
						) : null);

						didWarn = true;
					}

					var result;
					var previousContext = ReactContext.current;
					ReactContext.current = assign({}, previousContext, newContext);
					try {
						result = scopedCallback();
					} finally {
						ReactContext.current = previousContext;
					}
					return result;
				}

			};

			module.exports = ReactContext;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 262 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule emptyObject
			 */

			"use strict";

			var emptyObject = {};

			if ("production" !== process.env.NODE_ENV) {
				Object.freeze(emptyObject);
			}

			module.exports = emptyObject;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 263 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2014-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule warning
			 */

			"use strict";

			var emptyFunction = __webpack_require__(264);

			/**
			 * Similar to invariant but only logs a warning if the condition is not met.
			 * This can be used to log issues in development environments in critical
			 * paths. Removing the logging code for production environments will keep the
			 * same logic and follow the same code paths.
			 */

			var warning = emptyFunction;

			if ("production" !== process.env.NODE_ENV) {
				warning = function (condition, format) {
					for (var args = [], $__0 = 2, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);
					if (format === undefined) {
						throw new Error(
							'`warning(condition, format, ...args)` requires a warning ' +
							'message argument'
						);
					}

					if (format.length < 10 || /^[s\W]*$/.test(format)) {
						throw new Error(
							'The warning format should be able to uniquely identify this ' +
							'warning. Please, use a more descriptive format than: ' + format
						);
					}

					if (format.indexOf('Failed Composite propType: ') === 0) {
						return; // Ignore CompositeComponent proptype check.
					}

					if (!condition) {
						var argIndex = 0;
						var message = 'Warning: ' + format.replace(/%s/g, function () {
								return args[argIndex++];
							});
						console.warn(message);
						try {
							// --- Welcome to debugging React ---
							// This error was thrown as a convenience so that you can use this stack
							// to find the callsite that caused this warning to fire.
							throw new Error(message);
						} catch (x) {
						}
					}
				};
			}

			module.exports = warning;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 264 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule emptyFunction
		 */

		function makeEmptyFunction(arg) {
			return function () {
				return arg;
			};
		}

		/**
		 * This function accepts and discards inputs; it has no side effects. This is
		 * primarily useful idiomatically for overridable function endpoints which
		 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
		 */
		function emptyFunction() {
		}

		emptyFunction.thatReturns = makeEmptyFunction;
		emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
		emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
		emptyFunction.thatReturnsNull = makeEmptyFunction(null);
		emptyFunction.thatReturnsThis = function () {
			return this;
		};
		emptyFunction.thatReturnsArgument = function (arg) {
			return arg;
		};

		module.exports = emptyFunction;


		/***/
	},
	/* 265 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactFragment
			 */

			'use strict';

			var ReactElement = __webpack_require__(260);

			var warning = __webpack_require__(263);

			/**
			 * We used to allow keyed objects to serve as a collection of ReactElements,
			 * or nested sets. This allowed us a way to explicitly key a set a fragment of
			 * components. This is now being replaced with an opaque data structure.
			 * The upgrade path is to call React.addons.createFragment({ key: value }) to
			 * create a keyed fragment. The resulting data structure is opaque, for now.
			 */

			if ("production" !== process.env.NODE_ENV) {
				var fragmentKey = '_reactFragment';
				var didWarnKey = '_reactDidWarn';
				var canWarnForReactFragment = false;

				try {
					// Feature test. Don't even try to issue this warning if we can't use
					// enumerable: false.

					var dummy = function () {
						return 1;
					};

					Object.defineProperty(
						{},
						fragmentKey,
						{enumerable: false, value: true}
					);

					Object.defineProperty(
						{},
						'key',
						{enumerable: true, get: dummy}
					);

					canWarnForReactFragment = true;
				} catch (x) {
				}

				var proxyPropertyAccessWithWarning = function (obj, key) {
					Object.defineProperty(obj, key, {
						enumerable: true,
						get: function () {
							("production" !== process.env.NODE_ENV ? warning(
								this[didWarnKey],
								'A ReactFragment is an opaque type. Accessing any of its ' +
								'properties is deprecated. Pass it to one of the React.Children ' +
								'helpers.'
							) : null);
							this[didWarnKey] = true;
							return this[fragmentKey][key];
						},
						set: function (value) {
							("production" !== process.env.NODE_ENV ? warning(
								this[didWarnKey],
								'A ReactFragment is an immutable opaque type. Mutating its ' +
								'properties is deprecated.'
							) : null);
							this[didWarnKey] = true;
							this[fragmentKey][key] = value;
						}
					});
				};

				var issuedWarnings = {};

				var didWarnForFragment = function (fragment) {
					// We use the keys and the type of the value as a heuristic to dedupe the
					// warning to avoid spamming too much.
					var fragmentCacheKey = '';
					for (var key in fragment) {
						fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
					}
					var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
					issuedWarnings[fragmentCacheKey] = true;
					return alreadyWarnedOnce;
				};
			}

			var ReactFragment = {
				// Wrap a keyed object in an opaque proxy that warns you if you access any
				// of its properties.
				create: function (object) {
					if ("production" !== process.env.NODE_ENV) {
						if (typeof object !== 'object' || !object || Array.isArray(object)) {
							("production" !== process.env.NODE_ENV ? warning(
								false,
								'React.addons.createFragment only accepts a single object.',
								object
							) : null);
							return object;
						}
						if (ReactElement.isValidElement(object)) {
							("production" !== process.env.NODE_ENV ? warning(
								false,
								'React.addons.createFragment does not accept a ReactElement ' +
								'without a wrapper object.'
							) : null);
							return object;
						}
						if (canWarnForReactFragment) {
							var proxy = {};
							Object.defineProperty(proxy, fragmentKey, {
								enumerable: false,
								value: object
							});
							Object.defineProperty(proxy, didWarnKey, {
								writable: true,
								enumerable: false,
								value: false
							});
							for (var key in object) {
								proxyPropertyAccessWithWarning(proxy, key);
							}
							Object.preventExtensions(proxy);
							return proxy;
						}
					}
					return object;
				},
				// Extract the original keyed object from the fragment opaque type. Warn if
				// a plain object is passed here.
				extract: function (fragment) {
					if ("production" !== process.env.NODE_ENV) {
						if (canWarnForReactFragment) {
							if (!fragment[fragmentKey]) {
								("production" !== process.env.NODE_ENV ? warning(
									didWarnForFragment(fragment),
									'Any use of a keyed object should be wrapped in ' +
									'React.addons.createFragment(object) before being passed as a ' +
									'child.'
								) : null);
								return fragment;
							}
							return fragment[fragmentKey];
						}
					}
					return fragment;
				},
				// Check if this is a fragment and if so, extract the keyed object. If it
				// is a fragment-like object, warn that it should be wrapped. Ignore if we
				// can't determine what kind of object this is.
				extractIfFragment: function (fragment) {
					if ("production" !== process.env.NODE_ENV) {
						if (canWarnForReactFragment) {
							// If it is the opaque type, return the keyed object.
							if (fragment[fragmentKey]) {
								return fragment[fragmentKey];
							}
							// Otherwise, check each property if it has an element, if it does
							// it is probably meant as a fragment, so we can warn early. Defer,
							// the warning to extract.
							for (var key in fragment) {
								if (fragment.hasOwnProperty(key) &&
									ReactElement.isValidElement(fragment[key])) {
									// This looks like a fragment object, we should provide an
									// early warning.
									return ReactFragment.extract(fragment);
								}
							}
						}
					}
					return fragment;
				}
			};

			module.exports = ReactFragment;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 266 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactPropTypeLocations
		 */

		'use strict';

		var keyMirror = __webpack_require__(267);

		var ReactPropTypeLocations = keyMirror({
			prop: null,
			context: null,
			childContext: null
		});

		module.exports = ReactPropTypeLocations;


		/***/
	},
	/* 267 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule keyMirror
			 * @typechecks static-only
			 */

			'use strict';

			var invariant = __webpack_require__(252);

			/**
			 * Constructs an enumeration with keys equal to their value.
			 *
			 * For example:
			 *
			 *   var COLORS = keyMirror({blue: null, red: null});
			 *   var myColor = COLORS.blue;
			 *   var isColorValid = !!COLORS[myColor];
			 *
			 * The last line could not be performed if the values of the generated enum were
			 * not equal to their keys.
			 *
			 *   Input:  {key1: val1, key2: val2}
			 *   Output: {key1: key1, key2: key2}
			 *
			 * @param {object} obj
			 * @return {object}
			 */
			var keyMirror = function (obj) {
				var ret = {};
				var key;
				("production" !== process.env.NODE_ENV ? invariant(
					obj instanceof Object && !Array.isArray(obj),
					'keyMirror(...): Argument must be an object.'
				) : invariant(obj instanceof Object && !Array.isArray(obj)));
				for (key in obj) {
					if (!obj.hasOwnProperty(key)) {
						continue;
					}
					ret[key] = key;
				}
				return ret;
			};

			module.exports = keyMirror;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 268 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactPropTypeLocationNames
			 */

			'use strict';

			var ReactPropTypeLocationNames = {};

			if ("production" !== process.env.NODE_ENV) {
				ReactPropTypeLocationNames = {
					prop: 'prop',
					context: 'context',
					childContext: 'child context'
				};
			}

			module.exports = ReactPropTypeLocationNames;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 269 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2014-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactNativeComponent
			 */

			'use strict';

			var assign = __webpack_require__(253);
			var invariant = __webpack_require__(252);

			var autoGenerateWrapperClass = null;
			var genericComponentClass = null;
			// This registry keeps track of wrapper classes around native tags
			var tagToComponentClass = {};
			var textComponentClass = null;

			var ReactNativeComponentInjection = {
				// This accepts a class that receives the tag string. This is a catch all
				// that can render any kind of tag.
				injectGenericComponentClass: function (componentClass) {
					genericComponentClass = componentClass;
				},
				// This accepts a text component class that takes the text string to be
				// rendered as props.
				injectTextComponentClass: function (componentClass) {
					textComponentClass = componentClass;
				},
				// This accepts a keyed object with classes as values. Each key represents a
				// tag. That particular tag will use this class instead of the generic one.
				injectComponentClasses: function (componentClasses) {
					assign(tagToComponentClass, componentClasses);
				},
				// Temporary hack since we expect DOM refs to behave like composites,
				// for this release.
				injectAutoWrapper: function (wrapperFactory) {
					autoGenerateWrapperClass = wrapperFactory;
				}
			};

			/**
			 * Get a composite component wrapper class for a specific tag.
			 *
			 * @param {ReactElement} element The tag for which to get the class.
			 * @return {function} The React class constructor function.
			 */
			function getComponentClassForElement(element) {
				if (typeof element.type === 'function') {
					return element.type;
				}
				var tag = element.type;
				var componentClass = tagToComponentClass[tag];
				if (componentClass == null) {
					tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
				}
				return componentClass;
			}

			/**
			 * Get a native internal component class for a specific tag.
			 *
			 * @param {ReactElement} element The element to create.
			 * @return {function} The internal class constructor function.
			 */
			function createInternalComponent(element) {
				("production" !== process.env.NODE_ENV ? invariant(
					genericComponentClass,
					'There is no registered component for the tag %s',
					element.type
				) : invariant(genericComponentClass));
				return new genericComponentClass(element.type, element.props);
			}

			/**
			 * @param {ReactText} text
			 * @return {ReactComponent}
			 */
			function createInstanceForText(text) {
				return new textComponentClass(text);
			}

			/**
			 * @param {ReactComponent} component
			 * @return {boolean}
			 */
			function isTextComponent(component) {
				return component instanceof textComponentClass;
			}

			var ReactNativeComponent = {
				getComponentClassForElement: getComponentClassForElement,
				createInternalComponent: createInternalComponent,
				createInstanceForText: createInstanceForText,
				isTextComponent: isTextComponent,
				injection: ReactNativeComponentInjection
			};

			module.exports = ReactNativeComponent;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 270 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule getIteratorFn
		 * @typechecks static-only
		 */

		'use strict';

		/* global Symbol */
		var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

		/**
		 * Returns the iterator method function contained on the iterable object.
		 *
		 * Be sure to invoke the function with the iterable as context:
		 *
		 *     var iteratorFn = getIteratorFn(myIterable);
		 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
		 *
		 * @param {?object} maybeIterable
		 * @return {?function}
		 */
		function getIteratorFn(maybeIterable) {
			var iteratorFn = maybeIterable && (
					(ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
				);
			if (typeof iteratorFn === 'function') {
				return iteratorFn;
			}
		}

		module.exports = getIteratorFn;


		/***/
	},
	/* 271 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule Transaction
			 */

			'use strict';

			var invariant = __webpack_require__(252);

			/**
			 * `Transaction` creates a black box that is able to wrap any method such that
			 * certain invariants are maintained before and after the method is invoked
			 * (Even if an exception is thrown while invoking the wrapped method). Whoever
			 * instantiates a transaction can provide enforcers of the invariants at
			 * creation time. The `Transaction` class itself will supply one additional
			 * automatic invariant for you - the invariant that any transaction instance
			 * should not be run while it is already being run. You would typically create a
			 * single instance of a `Transaction` for reuse multiple times, that potentially
			 * is used to wrap several different methods. Wrappers are extremely simple -
			 * they only require implementing two methods.
			 *
			 * <pre>
			 *                       wrappers (injected at creation time)
			 *                                      +        +
			 *                                      |        |
			 *                    +-----------------|--------|--------------+
			 *                    |                 v        |              |
			 *                    |      +---------------+   |              |
			 *                    |   +--|    wrapper1   |---|----+         |
			 *                    |   |  +---------------+   v    |         |
			 *                    |   |          +-------------+  |         |
			 *                    |   |     +----|   wrapper2  |--------+   |
			 *                    |   |     |    +-------------+  |     |   |
			 *                    |   |     |                     |     |   |
			 *                    |   v     v                     v     v   | wrapper
			 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
			 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
			 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
			 *                    | |   | |   |   |         |   |   | |   | |
			 *                    | |   | |   |   |         |   |   | |   | |
			 *                    | |   | |   |   |         |   |   | |   | |
			 *                    | +---+ +---+   +---------+   +---+ +---+ |
			 *                    |  initialize                    close    |
			 *                    +-----------------------------------------+
			 * </pre>
			 *
			 * Use cases:
			 * - Preserving the input selection ranges before/after reconciliation.
			 *   Restoring selection even in the event of an unexpected error.
			 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
			 *   while guaranteeing that afterwards, the event system is reactivated.
			 * - Flushing a queue of collected DOM mutations to the main UI thread after a
			 *   reconciliation takes place in a worker thread.
			 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
			 *   content.
			 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
			 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
			 * - (Future use case): Layout calculations before and after DOM updates.
			 *
			 * Transactional plugin API:
			 * - A module that has an `initialize` method that returns any precomputation.
			 * - and a `close` method that accepts the precomputation. `close` is invoked
			 *   when the wrapped process is completed, or has failed.
			 *
			 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
			 * that implement `initialize` and `close`.
			 * @return {Transaction} Single transaction for reuse in thread.
			 *
			 * @class Transaction
			 */
			var Mixin = {
				/**
				 * Sets up this instance so that it is prepared for collecting metrics. Does
				 * so such that this setup method may be used on an instance that is already
				 * initialized, in a way that does not consume additional memory upon reuse.
				 * That can be useful if you decide to make your subclass of this mixin a
				 * "PooledClass".
				 */
				reinitializeTransaction: function () {
					this.transactionWrappers = this.getTransactionWrappers();
					if (!this.wrapperInitData) {
						this.wrapperInitData = [];
					} else {
						this.wrapperInitData.length = 0;
					}
					this._isInTransaction = false;
				},

				_isInTransaction: false,

				/**
				 * @abstract
				 * @return {Array<TransactionWrapper>} Array of transaction wrappers.
				 */
				getTransactionWrappers: null,

				isInTransaction: function () {
					return !!this._isInTransaction;
				},

				/**
				 * Executes the function within a safety window. Use this for the top level
				 * methods that result in large amounts of computation/mutations that would
				 * need to be safety checked.
				 *
				 * @param {function} method Member of scope to call.
				 * @param {Object} scope Scope to invoke from.
				 * @param {Object?=} args... Arguments to pass to the method (optional).
				 *                           Helps prevent need to bind in many cases.
				 * @return Return value from `method`.
				 */
				perform: function (method, scope, a, b, c, d, e, f) {
					("production" !== process.env.NODE_ENV ? invariant(
						!this.isInTransaction(),
						'Transaction.perform(...): Cannot initialize a transaction when there ' +
						'is already an outstanding transaction.'
					) : invariant(!this.isInTransaction()));
					var errorThrown;
					var ret;
					try {
						this._isInTransaction = true;
						// Catching errors makes debugging more difficult, so we start with
						// errorThrown set to true before setting it to false after calling
						// close -- if it's still set to true in the finally block, it means
						// one of these calls threw.
						errorThrown = true;
						this.initializeAll(0);
						ret = method.call(scope, a, b, c, d, e, f);
						errorThrown = false;
					} finally {
						try {
							if (errorThrown) {
								// If `method` throws, prefer to show that stack trace over any thrown
								// by invoking `closeAll`.
								try {
									this.closeAll(0);
								} catch (err) {
								}
							} else {
								// Since `method` didn't throw, we don't want to silence the exception
								// here.
								this.closeAll(0);
							}
						} finally {
							this._isInTransaction = false;
						}
					}
					return ret;
				},

				initializeAll: function (startIndex) {
					var transactionWrappers = this.transactionWrappers;
					for (var i = startIndex; i < transactionWrappers.length; i++) {
						var wrapper = transactionWrappers[i];
						try {
							// Catching errors makes debugging more difficult, so we start with the
							// OBSERVED_ERROR state before overwriting it with the real return value
							// of initialize -- if it's still set to OBSERVED_ERROR in the finally
							// block, it means wrapper.initialize threw.
							this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
							this.wrapperInitData[i] = wrapper.initialize ?
								wrapper.initialize.call(this) :
								null;
						} finally {
							if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
								// The initializer for wrapper i threw an error; initialize the
								// remaining wrappers but silence any exceptions from them to ensure
								// that the first error is the one to bubble up.
								try {
									this.initializeAll(i + 1);
								} catch (err) {
								}
							}
						}
					}
				},

				/**
				 * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
				 * them the respective return values of `this.transactionWrappers.init[i]`
				 * (`close`rs that correspond to initializers that failed will not be
				 * invoked).
				 */
				closeAll: function (startIndex) {
					("production" !== process.env.NODE_ENV ? invariant(
						this.isInTransaction(),
						'Transaction.closeAll(): Cannot close transaction when none are open.'
					) : invariant(this.isInTransaction()));
					var transactionWrappers = this.transactionWrappers;
					for (var i = startIndex; i < transactionWrappers.length; i++) {
						var wrapper = transactionWrappers[i];
						var initData = this.wrapperInitData[i];
						var errorThrown;
						try {
							// Catching errors makes debugging more difficult, so we start with
							// errorThrown set to true before setting it to false after calling
							// close -- if it's still set to true in the finally block, it means
							// wrapper.close threw.
							errorThrown = true;
							if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
								wrapper.close.call(this, initData);
							}
							errorThrown = false;
						} finally {
							if (errorThrown) {
								// The closer for wrapper i threw an error; close the remaining
								// wrappers but silence any exceptions from them to ensure that the
								// first error is the one to bubble up.
								try {
									this.closeAll(i + 1);
								} catch (e) {
								}
							}
						}
					}
					this.wrapperInitData.length = 0;
				}
			};

			var Transaction = {

				Mixin: Mixin,

				/**
				 * Token to look for to determine if an error occured.
				 */
				OBSERVED_ERROR: {}

			};

			module.exports = Transaction;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 272 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule LinkedStateMixin
		 * @typechecks static-only
		 */

		'use strict';

		var ReactLink = __webpack_require__(273);
		var ReactStateSetters = __webpack_require__(405);

		/**
		 * A simple mixin around ReactLink.forState().
		 */
		var LinkedStateMixin = {
			/**
			 * Create a ReactLink that's linked to part of this component's state. The
			 * ReactLink will have the current value of this.state[key] and will call
			 * setState() when a change is requested.
			 *
			 * @param {string} key state key to update. Note: you may want to use keyOf()
			 * if you're using Google Closure Compiler advanced mode.
			 * @return {ReactLink} ReactLink instance linking to the state.
			 */
			linkState: function (key) {
				return new ReactLink(
					this.state[key],
					ReactStateSetters.createStateKeySetter(this, key)
				);
			}
		};

		module.exports = LinkedStateMixin;


		/***/
	},
	/* 273 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactLink
		 * @typechecks static-only
		 */

		'use strict';

		/**
		 * ReactLink encapsulates a common pattern in which a component wants to modify
		 * a prop received from its parent. ReactLink allows the parent to pass down a
		 * value coupled with a callback that, when invoked, expresses an intent to
		 * modify that value. For example:
		 *
		 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   this._handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
		 *
		 * We have provided some sugary mixins to make the creation and
		 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
		 */

		var React = __webpack_require__(274);

		/**
		 * @param {*} value current value of the link
		 * @param {function} requestChange callback to request a change
		 */
		function ReactLink(value, requestChange) {
			this.value = value;
			this.requestChange = requestChange;
		}

		/**
		 * Creates a PropType that enforces the ReactLink API and optionally checks the
		 * type of the value being passed inside the link. Example:
		 *
		 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
		 */
		function createLinkTypeChecker(linkType) {
			var shapes = {
				value: typeof linkType === 'undefined' ?
					React.PropTypes.any.isRequired :
					linkType.isRequired,
				requestChange: React.PropTypes.func.isRequired
			};
			return React.PropTypes.shape(shapes);
		}

		ReactLink.PropTypes = {
			link: createLinkTypeChecker
		};

		module.exports = ReactLink;


		/***/
	},
	/* 274 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule React
		 */

			/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

			'use strict';

			var EventPluginUtils = __webpack_require__(275);
			var ReactChildren = __webpack_require__(277);
			var ReactComponent = __webpack_require__(281);
			var ReactClass = __webpack_require__(285);
			var ReactContext = __webpack_require__(261);
			var ReactCurrentOwner = __webpack_require__(254);
			var ReactElement = __webpack_require__(260);
			var ReactElementValidator = __webpack_require__(259);
			var ReactDOM = __webpack_require__(288);
			var ReactDOMTextComponent = __webpack_require__(290);
			var ReactDefaultInjection = __webpack_require__(339);
			var ReactInstanceHandles = __webpack_require__(279);
			var ReactMount = __webpack_require__(315);
			var ReactPerf = __webpack_require__(255);
			var ReactPropTypes = __webpack_require__(370);
			var ReactReconciler = __webpack_require__(256);
			var ReactServerRendering = __webpack_require__(402);

			var assign = __webpack_require__(253);
			var findDOMNode = __webpack_require__(359);
			var onlyChild = __webpack_require__(404);

			ReactDefaultInjection.inject();

			var createElement = ReactElement.createElement;
			var createFactory = ReactElement.createFactory;
			var cloneElement = ReactElement.cloneElement;

			if ("production" !== process.env.NODE_ENV) {
				createElement = ReactElementValidator.createElement;
				createFactory = ReactElementValidator.createFactory;
				cloneElement = ReactElementValidator.cloneElement;
			}

			var render = ReactPerf.measure('React', 'render', ReactMount.render);

			var React = {
				Children: {
					map: ReactChildren.map,
					forEach: ReactChildren.forEach,
					count: ReactChildren.count,
					only: onlyChild
				},
				Component: ReactComponent,
				DOM: ReactDOM,
				PropTypes: ReactPropTypes,
				initializeTouchEvents: function (shouldUseTouch) {
					EventPluginUtils.useTouchEvents = shouldUseTouch;
				},
				createClass: ReactClass.createClass,
				createElement: createElement,
				cloneElement: cloneElement,
				createFactory: createFactory,
				createMixin: function (mixin) {
					// Currently a noop. Will be used to validate and trace mixins.
					return mixin;
				},
				constructAndRenderComponent: ReactMount.constructAndRenderComponent,
				constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
				findDOMNode: findDOMNode,
				render: render,
				renderToString: ReactServerRendering.renderToString,
				renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
				unmountComponentAtNode: ReactMount.unmountComponentAtNode,
				isValidElement: ReactElement.isValidElement,
				withContext: ReactContext.withContext,

				// Hook for JSX spread, don't use this for anything else.
				__spread: assign
			};

			// Inject the runtime into a devtools global hook regardless of browser.
			// Allows for debugging when the hook is injected on the page.
			if (
				typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
				typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
				__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
					CurrentOwner: ReactCurrentOwner,
					InstanceHandles: ReactInstanceHandles,
					Mount: ReactMount,
					Reconciler: ReactReconciler,
					TextComponent: ReactDOMTextComponent
				});
			}

			if ("production" !== process.env.NODE_ENV) {
				var ExecutionEnvironment = __webpack_require__(299);
				if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

					// If we're in Chrome, look for the devtools marker and provide a download
					// link if not installed.
					if (navigator.userAgent.indexOf('Chrome') > -1) {
						if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
							console.debug(
								'Download the React DevTools for a better development experience: ' +
								'https://fb.me/react-devtools'
							);
						}
					}

					var expectedFeatures = [
						// shims
						Array.isArray,
						Array.prototype.every,
						Array.prototype.forEach,
						Array.prototype.indexOf,
						Array.prototype.map,
						Date.now,
						Function.prototype.bind,
						Object.keys,
						String.prototype.split,
						String.prototype.trim,

						// shams
						Object.create,
						Object.freeze
					];

					for (var i = 0; i < expectedFeatures.length; i++) {
						if (!expectedFeatures[i]) {
							console.error(
								'One or more ES5 shim/shams expected by React are not available: ' +
								'https://fb.me/react-warning-polyfills'
							);
							break;
						}
					}
				}
			}

			React.version = '0.13.3';

			module.exports = React;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 275 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule EventPluginUtils
			 */

			'use strict';

			var EventConstants = __webpack_require__(276);

			var invariant = __webpack_require__(252);

			/**
			 * Injected dependencies:
			 */

			/**
			 * - `Mount`: [required] Module that can convert between React dom IDs and
			 *   actual node references.
			 */
			var injection = {
				Mount: null,
				injectMount: function (InjectedMount) {
					injection.Mount = InjectedMount;
					if ("production" !== process.env.NODE_ENV) {
						("production" !== process.env.NODE_ENV ? invariant(
							InjectedMount && InjectedMount.getNode,
							'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
							'is missing getNode.'
						) : invariant(InjectedMount && InjectedMount.getNode));
					}
				}
			};

			var topLevelTypes = EventConstants.topLevelTypes;

			function isEndish(topLevelType) {
				return topLevelType === topLevelTypes.topMouseUp ||
					topLevelType === topLevelTypes.topTouchEnd ||
					topLevelType === topLevelTypes.topTouchCancel;
			}

			function isMoveish(topLevelType) {
				return topLevelType === topLevelTypes.topMouseMove ||
					topLevelType === topLevelTypes.topTouchMove;
			}

			function isStartish(topLevelType) {
				return topLevelType === topLevelTypes.topMouseDown ||
					topLevelType === topLevelTypes.topTouchStart;
			}


			var validateEventDispatches;
			if ("production" !== process.env.NODE_ENV) {
				validateEventDispatches = function (event) {
					var dispatchListeners = event._dispatchListeners;
					var dispatchIDs = event._dispatchIDs;

					var listenersIsArr = Array.isArray(dispatchListeners);
					var idsIsArr = Array.isArray(dispatchIDs);
					var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
					var listenersLen = listenersIsArr ?
						dispatchListeners.length :
						dispatchListeners ? 1 : 0;

					("production" !== process.env.NODE_ENV ? invariant(
						idsIsArr === listenersIsArr && IDsLen === listenersLen,
						'EventPluginUtils: Invalid `event`.'
					) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
				};
			}

			/**
			 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
			 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
			 * kept separate to conserve memory.
			 */
			function forEachEventDispatch(event, cb) {
				var dispatchListeners = event._dispatchListeners;
				var dispatchIDs = event._dispatchIDs;
				if ("production" !== process.env.NODE_ENV) {
					validateEventDispatches(event);
				}
				if (Array.isArray(dispatchListeners)) {
					for (var i = 0; i < dispatchListeners.length; i++) {
						if (event.isPropagationStopped()) {
							break;
						}
						// Listeners and IDs are two parallel arrays that are always in sync.
						cb(event, dispatchListeners[i], dispatchIDs[i]);
					}
				} else if (dispatchListeners) {
					cb(event, dispatchListeners, dispatchIDs);
				}
			}

			/**
			 * Default implementation of PluginModule.executeDispatch().
			 * @param {SyntheticEvent} SyntheticEvent to handle
			 * @param {function} Application-level callback
			 * @param {string} domID DOM id to pass to the callback.
			 */
			function executeDispatch(event, listener, domID) {
				event.currentTarget = injection.Mount.getNode(domID);
				var returnValue = listener(event, domID);
				event.currentTarget = null;
				return returnValue;
			}

			/**
			 * Standard/simple iteration through an event's collected dispatches.
			 */
			function executeDispatchesInOrder(event, cb) {
				forEachEventDispatch(event, cb);
				event._dispatchListeners = null;
				event._dispatchIDs = null;
			}

			/**
			 * Standard/simple iteration through an event's collected dispatches, but stops
			 * at the first dispatch execution returning true, and returns that id.
			 *
			 * @return id of the first dispatch execution who's listener returns true, or
			 * null if no listener returned true.
			 */
			function executeDispatchesInOrderStopAtTrueImpl(event) {
				var dispatchListeners = event._dispatchListeners;
				var dispatchIDs = event._dispatchIDs;
				if ("production" !== process.env.NODE_ENV) {
					validateEventDispatches(event);
				}
				if (Array.isArray(dispatchListeners)) {
					for (var i = 0; i < dispatchListeners.length; i++) {
						if (event.isPropagationStopped()) {
							break;
						}
						// Listeners and IDs are two parallel arrays that are always in sync.
						if (dispatchListeners[i](event, dispatchIDs[i])) {
							return dispatchIDs[i];
						}
					}
				} else if (dispatchListeners) {
					if (dispatchListeners(event, dispatchIDs)) {
						return dispatchIDs;
					}
				}
				return null;
			}

			/**
			 * @see executeDispatchesInOrderStopAtTrueImpl
			 */
			function executeDispatchesInOrderStopAtTrue(event) {
				var ret = executeDispatchesInOrderStopAtTrueImpl(event);
				event._dispatchIDs = null;
				event._dispatchListeners = null;
				return ret;
			}

			/**
			 * Execution of a "direct" dispatch - there must be at most one dispatch
			 * accumulated on the event or it is considered an error. It doesn't really make
			 * sense for an event with multiple dispatches (bubbled) to keep track of the
			 * return values at each dispatch execution, but it does tend to make sense when
			 * dealing with "direct" dispatches.
			 *
			 * @return The return value of executing the single dispatch.
			 */
			function executeDirectDispatch(event) {
				if ("production" !== process.env.NODE_ENV) {
					validateEventDispatches(event);
				}
				var dispatchListener = event._dispatchListeners;
				var dispatchID = event._dispatchIDs;
				("production" !== process.env.NODE_ENV ? invariant(
					!Array.isArray(dispatchListener),
					'executeDirectDispatch(...): Invalid `event`.'
				) : invariant(!Array.isArray(dispatchListener)));
				var res = dispatchListener ?
					dispatchListener(event, dispatchID) :
					null;
				event._dispatchListeners = null;
				event._dispatchIDs = null;
				return res;
			}

			/**
			 * @param {SyntheticEvent} event
			 * @return {bool} True iff number of dispatches accumulated is greater than 0.
			 */
			function hasDispatches(event) {
				return !!event._dispatchListeners;
			}

			/**
			 * General utilities that are useful in creating custom Event Plugins.
			 */
			var EventPluginUtils = {
				isEndish: isEndish,
				isMoveish: isMoveish,
				isStartish: isStartish,

				executeDirectDispatch: executeDirectDispatch,
				executeDispatch: executeDispatch,
				executeDispatchesInOrder: executeDispatchesInOrder,
				executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
				hasDispatches: hasDispatches,
				injection: injection,
				useTouchEvents: false
			};

			module.exports = EventPluginUtils;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 276 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule EventConstants
		 */

		'use strict';

		var keyMirror = __webpack_require__(267);

		var PropagationPhases = keyMirror({bubbled: null, captured: null});

		/**
		 * Types of raw signals from the browser caught at the top level.
		 */
		var topLevelTypes = keyMirror({
			topBlur: null,
			topChange: null,
			topClick: null,
			topCompositionEnd: null,
			topCompositionStart: null,
			topCompositionUpdate: null,
			topContextMenu: null,
			topCopy: null,
			topCut: null,
			topDoubleClick: null,
			topDrag: null,
			topDragEnd: null,
			topDragEnter: null,
			topDragExit: null,
			topDragLeave: null,
			topDragOver: null,
			topDragStart: null,
			topDrop: null,
			topError: null,
			topFocus: null,
			topInput: null,
			topKeyDown: null,
			topKeyPress: null,
			topKeyUp: null,
			topLoad: null,
			topMouseDown: null,
			topMouseMove: null,
			topMouseOut: null,
			topMouseOver: null,
			topMouseUp: null,
			topPaste: null,
			topReset: null,
			topScroll: null,
			topSelectionChange: null,
			topSubmit: null,
			topTextInput: null,
			topTouchCancel: null,
			topTouchEnd: null,
			topTouchMove: null,
			topTouchStart: null,
			topWheel: null
		});

		var EventConstants = {
			topLevelTypes: topLevelTypes,
			PropagationPhases: PropagationPhases
		};

		module.exports = EventConstants;


		/***/
	},
	/* 277 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactChildren
			 */

			'use strict';

			var PooledClass = __webpack_require__(251);
			var ReactFragment = __webpack_require__(265);

			var traverseAllChildren = __webpack_require__(278);
			var warning = __webpack_require__(263);

			var twoArgumentPooler = PooledClass.twoArgumentPooler;
			var threeArgumentPooler = PooledClass.threeArgumentPooler;

			/**
			 * PooledClass representing the bookkeeping associated with performing a child
			 * traversal. Allows avoiding binding callbacks.
			 *
			 * @constructor ForEachBookKeeping
			 * @param {!function} forEachFunction Function to perform traversal with.
			 * @param {?*} forEachContext Context to perform context with.
			 */
			function ForEachBookKeeping(forEachFunction, forEachContext) {
				this.forEachFunction = forEachFunction;
				this.forEachContext = forEachContext;
			}

			PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

			function forEachSingleChild(traverseContext, child, name, i) {
				var forEachBookKeeping = traverseContext;
				forEachBookKeeping.forEachFunction.call(
					forEachBookKeeping.forEachContext, child, i);
			}

			/**
			 * Iterates through children that are typically specified as `props.children`.
			 *
			 * The provided forEachFunc(child, index) will be called for each
			 * leaf child.
			 *
			 * @param {?*} children Children tree container.
			 * @param {function(*, int)} forEachFunc.
			 * @param {*} forEachContext Context for forEachContext.
			 */
			function forEachChildren(children, forEachFunc, forEachContext) {
				if (children == null) {
					return children;
				}

				var traverseContext =
					ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
				traverseAllChildren(children, forEachSingleChild, traverseContext);
				ForEachBookKeeping.release(traverseContext);
			}

			/**
			 * PooledClass representing the bookkeeping associated with performing a child
			 * mapping. Allows avoiding binding callbacks.
			 *
			 * @constructor MapBookKeeping
			 * @param {!*} mapResult Object containing the ordered map of results.
			 * @param {!function} mapFunction Function to perform mapping with.
			 * @param {?*} mapContext Context to perform mapping with.
			 */
			function MapBookKeeping(mapResult, mapFunction, mapContext) {
				this.mapResult = mapResult;
				this.mapFunction = mapFunction;
				this.mapContext = mapContext;
			}

			PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

			function mapSingleChildIntoContext(traverseContext, child, name, i) {
				var mapBookKeeping = traverseContext;
				var mapResult = mapBookKeeping.mapResult;

				var keyUnique = !mapResult.hasOwnProperty(name);
				if ("production" !== process.env.NODE_ENV) {
					("production" !== process.env.NODE_ENV ? warning(
						keyUnique,
						'ReactChildren.map(...): Encountered two children with the same key, ' +
						'`%s`. Child keys must be unique; when two children share a key, only ' +
						'the first child will be used.',
						name
					) : null);
				}

				if (keyUnique) {
					var mappedChild =
						mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
					mapResult[name] = mappedChild;
				}
			}

			/**
			 * Maps children that are typically specified as `props.children`.
			 *
			 * The provided mapFunction(child, key, index) will be called for each
			 * leaf child.
			 *
			 * TODO: This may likely break any calls to `ReactChildren.map` that were
			 * previously relying on the fact that we guarded against null children.
			 *
			 * @param {?*} children Children tree container.
			 * @param {function(*, int)} mapFunction.
			 * @param {*} mapContext Context for mapFunction.
			 * @return {object} Object containing the ordered map of results.
			 */
			function mapChildren(children, func, context) {
				if (children == null) {
					return children;
				}

				var mapResult = {};
				var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
				traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
				MapBookKeeping.release(traverseContext);
				return ReactFragment.create(mapResult);
			}

			function forEachSingleChildDummy(traverseContext, child, name, i) {
				return null;
			}

			/**
			 * Count the number of children that are typically specified as
			 * `props.children`.
			 *
			 * @param {?*} children Children tree container.
			 * @return {number} The number of children.
			 */
			function countChildren(children, context) {
				return traverseAllChildren(children, forEachSingleChildDummy, null);
			}

			var ReactChildren = {
				forEach: forEachChildren,
				map: mapChildren,
				count: countChildren
			};

			module.exports = ReactChildren;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 278 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule traverseAllChildren
			 */

			'use strict';

			var ReactElement = __webpack_require__(260);
			var ReactFragment = __webpack_require__(265);
			var ReactInstanceHandles = __webpack_require__(279);

			var getIteratorFn = __webpack_require__(270);
			var invariant = __webpack_require__(252);
			var warning = __webpack_require__(263);

			var SEPARATOR = ReactInstanceHandles.SEPARATOR;
			var SUBSEPARATOR = ':';

			/**
			 * TODO: Test that a single child and an array with one item have the same key
			 * pattern.
			 */

			var userProvidedKeyEscaperLookup = {
				'=': '=0',
				'.': '=1',
				':': '=2'
			};

			var userProvidedKeyEscapeRegex = /[=.:]/g;

			var didWarnAboutMaps = false;

			function userProvidedKeyEscaper(match) {
				return userProvidedKeyEscaperLookup[match];
			}

			/**
			 * Generate a key string that identifies a component within a set.
			 *
			 * @param {*} component A component that could contain a manual key.
			 * @param {number} index Index that is used if a manual key is not provided.
			 * @return {string}
			 */
			function getComponentKey(component, index) {
				if (component && component.key != null) {
					// Explicit key
					return wrapUserProvidedKey(component.key);
				}
				// Implicit key determined by the index in the set
				return index.toString(36);
			}

			/**
			 * Escape a component key so that it is safe to use in a reactid.
			 *
			 * @param {*} key Component key to be escaped.
			 * @return {string} An escaped string.
			 */
			function escapeUserProvidedKey(text) {
				return ('' + text).replace(
					userProvidedKeyEscapeRegex,
					userProvidedKeyEscaper
				);
			}

			/**
			 * Wrap a `key` value explicitly provided by the user to distinguish it from
			 * implicitly-generated keys generated by a component's index in its parent.
			 *
			 * @param {string} key Value of a user-provided `key` attribute
			 * @return {string}
			 */
			function wrapUserProvidedKey(key) {
				return '$' + escapeUserProvidedKey(key);
			}

			/**
			 * @param {?*} children Children tree container.
			 * @param {!string} nameSoFar Name of the key path so far.
			 * @param {!number} indexSoFar Number of children encountered until this point.
			 * @param {!function} callback Callback to invoke with each child found.
			 * @param {?*} traverseContext Used to pass information throughout the traversal
			 * process.
			 * @return {!number} The number of children in this subtree.
			 */
			function traverseAllChildrenImpl(children,
											 nameSoFar,
											 indexSoFar,
											 callback,
											 traverseContext) {
				var type = typeof children;

				if (type === 'undefined' || type === 'boolean') {
					// All of the above are perceived as null.
					children = null;
				}

				if (children === null ||
					type === 'string' ||
					type === 'number' ||
					ReactElement.isValidElement(children)) {
					callback(
						traverseContext,
						children,
						// If it's the only child, treat the name as if it was wrapped in an array
						// so that it's consistent if the number of children grows.
						nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
						indexSoFar
					);
					return 1;
				}

				var child, nextName, nextIndex;
				var subtreeCount = 0; // Count of children found in the current subtree.

				if (Array.isArray(children)) {
					for (var i = 0; i < children.length; i++) {
						child = children[i];
						nextName = (
							(nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
							getComponentKey(child, i)
						);
						nextIndex = indexSoFar + subtreeCount;
						subtreeCount += traverseAllChildrenImpl(
							child,
							nextName,
							nextIndex,
							callback,
							traverseContext
						);
					}
				} else {
					var iteratorFn = getIteratorFn(children);
					if (iteratorFn) {
						var iterator = iteratorFn.call(children);
						var step;
						if (iteratorFn !== children.entries) {
							var ii = 0;
							while (!(step = iterator.next()).done) {
								child = step.value;
								nextName = (
									(nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
									getComponentKey(child, ii++)
								);
								nextIndex = indexSoFar + subtreeCount;
								subtreeCount += traverseAllChildrenImpl(
									child,
									nextName,
									nextIndex,
									callback,
									traverseContext
								);
							}
						} else {
							if ("production" !== process.env.NODE_ENV) {
								("production" !== process.env.NODE_ENV ? warning(
									didWarnAboutMaps,
									'Using Maps as children is not yet fully supported. It is an ' +
									'experimental feature that might be removed. Convert it to a ' +
									'sequence / iterable of keyed ReactElements instead.'
								) : null);
								didWarnAboutMaps = true;
							}
							// Iterator will provide entry [k,v] tuples rather than values.
							while (!(step = iterator.next()).done) {
								var entry = step.value;
								if (entry) {
									child = entry[1];
									nextName = (
										(nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
										wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
										getComponentKey(child, 0)
									);
									nextIndex = indexSoFar + subtreeCount;
									subtreeCount += traverseAllChildrenImpl(
										child,
										nextName,
										nextIndex,
										callback,
										traverseContext
									);
								}
							}
						}
					} else if (type === 'object') {
						("production" !== process.env.NODE_ENV ? invariant(
							children.nodeType !== 1,
							'traverseAllChildren(...): Encountered an invalid child; DOM ' +
							'elements are not valid children of React components.'
						) : invariant(children.nodeType !== 1));
						var fragment = ReactFragment.extract(children);
						for (var key in fragment) {
							if (fragment.hasOwnProperty(key)) {
								child = fragment[key];
								nextName = (
									(nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
									wrapUserProvidedKey(key) + SUBSEPARATOR +
									getComponentKey(child, 0)
								);
								nextIndex = indexSoFar + subtreeCount;
								subtreeCount += traverseAllChildrenImpl(
									child,
									nextName,
									nextIndex,
									callback,
									traverseContext
								);
							}
						}
					}
				}

				return subtreeCount;
			}

			/**
			 * Traverses children that are typically specified as `props.children`, but
			 * might also be specified through attributes:
			 *
			 * - `traverseAllChildren(this.props.children, ...)`
			 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
			 *
			 * The `traverseContext` is an optional argument that is passed through the
			 * entire traversal. It can be used to store accumulations or anything else that
			 * the callback might find relevant.
			 *
			 * @param {?*} children Children tree object.
			 * @param {!function} callback To invoke upon traversing each child.
			 * @param {?*} traverseContext Context for traversal.
			 * @return {!number} The number of children in this subtree.
			 */
			function traverseAllChildren(children, callback, traverseContext) {
				if (children == null) {
					return 0;
				}

				return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
			}

			module.exports = traverseAllChildren;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 279 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactInstanceHandles
			 * @typechecks static-only
			 */

			'use strict';

			var ReactRootIndex = __webpack_require__(280);

			var invariant = __webpack_require__(252);

			var SEPARATOR = '.';
			var SEPARATOR_LENGTH = SEPARATOR.length;

			/**
			 * Maximum depth of traversals before we consider the possibility of a bad ID.
			 */
			var MAX_TREE_DEPTH = 100;

			/**
			 * Creates a DOM ID prefix to use when mounting React components.
			 *
			 * @param {number} index A unique integer
			 * @return {string} React root ID.
			 * @internal
			 */
			function getReactRootIDString(index) {
				return SEPARATOR + index.toString(36);
			}

			/**
			 * Checks if a character in the supplied ID is a separator or the end.
			 *
			 * @param {string} id A React DOM ID.
			 * @param {number} index Index of the character to check.
			 * @return {boolean} True if the character is a separator or end of the ID.
			 * @private
			 */
			function isBoundary(id, index) {
				return id.charAt(index) === SEPARATOR || index === id.length;
			}

			/**
			 * Checks if the supplied string is a valid React DOM ID.
			 *
			 * @param {string} id A React DOM ID, maybe.
			 * @return {boolean} True if the string is a valid React DOM ID.
			 * @private
			 */
			function isValidID(id) {
				return id === '' || (
						id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
					);
			}

			/**
			 * Checks if the first ID is an ancestor of or equal to the second ID.
			 *
			 * @param {string} ancestorID
			 * @param {string} descendantID
			 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
			 * @internal
			 */
			function isAncestorIDOf(ancestorID, descendantID) {
				return (
					descendantID.indexOf(ancestorID) === 0 &&
					isBoundary(descendantID, ancestorID.length)
				);
			}

			/**
			 * Gets the parent ID of the supplied React DOM ID, `id`.
			 *
			 * @param {string} id ID of a component.
			 * @return {string} ID of the parent, or an empty string.
			 * @private
			 */
			function getParentID(id) {
				return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
			}

			/**
			 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
			 * supplied `destinationID`. If they are equal, the ID is returned.
			 *
			 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
			 * @param {string} destinationID ID of the destination node.
			 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
			 * @private
			 */
			function getNextDescendantID(ancestorID, destinationID) {
				("production" !== process.env.NODE_ENV ? invariant(
					isValidID(ancestorID) && isValidID(destinationID),
					'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
					ancestorID,
					destinationID
				) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
				("production" !== process.env.NODE_ENV ? invariant(
					isAncestorIDOf(ancestorID, destinationID),
					'getNextDescendantID(...): React has made an invalid assumption about ' +
					'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
					ancestorID,
					destinationID
				) : invariant(isAncestorIDOf(ancestorID, destinationID)));
				if (ancestorID === destinationID) {
					return ancestorID;
				}
				// Skip over the ancestor and the immediate separator. Traverse until we hit
				// another separator or we reach the end of `destinationID`.
				var start = ancestorID.length + SEPARATOR_LENGTH;
				var i;
				for (i = start; i < destinationID.length; i++) {
					if (isBoundary(destinationID, i)) {
						break;
					}
				}
				return destinationID.substr(0, i);
			}

			/**
			 * Gets the nearest common ancestor ID of two IDs.
			 *
			 * Using this ID scheme, the nearest common ancestor ID is the longest common
			 * prefix of the two IDs that immediately preceded a "marker" in both strings.
			 *
			 * @param {string} oneID
			 * @param {string} twoID
			 * @return {string} Nearest common ancestor ID, or the empty string if none.
			 * @private
			 */
			function getFirstCommonAncestorID(oneID, twoID) {
				var minLength = Math.min(oneID.length, twoID.length);
				if (minLength === 0) {
					return '';
				}
				var lastCommonMarkerIndex = 0;
				// Use `<=` to traverse until the "EOL" of the shorter string.
				for (var i = 0; i <= minLength; i++) {
					if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
						lastCommonMarkerIndex = i;
					} else if (oneID.charAt(i) !== twoID.charAt(i)) {
						break;
					}
				}
				var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
				("production" !== process.env.NODE_ENV ? invariant(
					isValidID(longestCommonID),
					'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
					oneID,
					twoID,
					longestCommonID
				) : invariant(isValidID(longestCommonID)));
				return longestCommonID;
			}

			/**
			 * Traverses the parent path between two IDs (either up or down). The IDs must
			 * not be the same, and there must exist a parent path between them. If the
			 * callback returns `false`, traversal is stopped.
			 *
			 * @param {?string} start ID at which to start traversal.
			 * @param {?string} stop ID at which to end traversal.
			 * @param {function} cb Callback to invoke each ID with.
			 * @param {?boolean} skipFirst Whether or not to skip the first node.
			 * @param {?boolean} skipLast Whether or not to skip the last node.
			 * @private
			 */
			function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
				start = start || '';
				stop = stop || '';
				("production" !== process.env.NODE_ENV ? invariant(
					start !== stop,
					'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
					start
				) : invariant(start !== stop));
				var traverseUp = isAncestorIDOf(stop, start);
				("production" !== process.env.NODE_ENV ? invariant(
					traverseUp || isAncestorIDOf(start, stop),
					'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
					'not have a parent path.',
					start,
					stop
				) : invariant(traverseUp || isAncestorIDOf(start, stop)));
				// Traverse from `start` to `stop` one depth at a time.
				var depth = 0;
				var traverse = traverseUp ? getParentID : getNextDescendantID;
				for (var id = start; /* until break */; id = traverse(id, stop)) {
					var ret;
					if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
						ret = cb(id, traverseUp, arg);
					}
					if (ret === false || id === stop) {
						// Only break //after// visiting `stop`.
						break;
					}
					("production" !== process.env.NODE_ENV ? invariant(
						depth++ < MAX_TREE_DEPTH,
						'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
						'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
						start, stop
					) : invariant(depth++ < MAX_TREE_DEPTH));
				}
			}

			/**
			 * Manages the IDs assigned to DOM representations of React components. This
			 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
			 * order to simulate events).
			 *
			 * @internal
			 */
			var ReactInstanceHandles = {

				/**
				 * Constructs a React root ID
				 * @return {string} A React root ID.
				 */
				createReactRootID: function () {
					return getReactRootIDString(ReactRootIndex.createReactRootIndex());
				},

				/**
				 * Constructs a React ID by joining a root ID with a name.
				 *
				 * @param {string} rootID Root ID of a parent component.
				 * @param {string} name A component's name (as flattened children).
				 * @return {string} A React ID.
				 * @internal
				 */
				createReactID: function (rootID, name) {
					return rootID + name;
				},

				/**
				 * Gets the DOM ID of the React component that is the root of the tree that
				 * contains the React component with the supplied DOM ID.
				 *
				 * @param {string} id DOM ID of a React component.
				 * @return {?string} DOM ID of the React component that is the root.
				 * @internal
				 */
				getReactRootIDFromNodeID: function (id) {
					if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
						var index = id.indexOf(SEPARATOR, 1);
						return index > -1 ? id.substr(0, index) : id;
					}
					return null;
				},

				/**
				 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
				 * should would receive a `mouseEnter` or `mouseLeave` event.
				 *
				 * NOTE: Does not invoke the callback on the nearest common ancestor because
				 * nothing "entered" or "left" that element.
				 *
				 * @param {string} leaveID ID being left.
				 * @param {string} enterID ID being entered.
				 * @param {function} cb Callback to invoke on each entered/left ID.
				 * @param {*} upArg Argument to invoke the callback with on left IDs.
				 * @param {*} downArg Argument to invoke the callback with on entered IDs.
				 * @internal
				 */
				traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
					var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
					if (ancestorID !== leaveID) {
						traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
					}
					if (ancestorID !== enterID) {
						traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
					}
				},

				/**
				 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
				 *
				 * NOTE: This traversal happens on IDs without touching the DOM.
				 *
				 * @param {string} targetID ID of the target node.
				 * @param {function} cb Callback to invoke.
				 * @param {*} arg Argument to invoke the callback with.
				 * @internal
				 */
				traverseTwoPhase: function (targetID, cb, arg) {
					if (targetID) {
						traverseParentPath('', targetID, cb, arg, true, false);
						traverseParentPath(targetID, '', cb, arg, false, true);
					}
				},

				/**
				 * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
				 * example, passing `.0.$row-0.1` would result in `cb` getting called
				 * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
				 *
				 * NOTE: This traversal happens on IDs without touching the DOM.
				 *
				 * @param {string} targetID ID of the target node.
				 * @param {function} cb Callback to invoke.
				 * @param {*} arg Argument to invoke the callback with.
				 * @internal
				 */
				traverseAncestors: function (targetID, cb, arg) {
					traverseParentPath('', targetID, cb, arg, true, false);
				},

				/**
				 * Exposed for unit testing.
				 * @private
				 */
				_getFirstCommonAncestorID: getFirstCommonAncestorID,

				/**
				 * Exposed for unit testing.
				 * @private
				 */
				_getNextDescendantID: getNextDescendantID,

				isAncestorIDOf: isAncestorIDOf,

				SEPARATOR: SEPARATOR

			};

			module.exports = ReactInstanceHandles;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 280 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactRootIndex
		 * @typechecks
		 */

		'use strict';

		var ReactRootIndexInjection = {
			/**
			 * @param {function} _createReactRootIndex
			 */
			injectCreateReactRootIndex: function (_createReactRootIndex) {
				ReactRootIndex.createReactRootIndex = _createReactRootIndex;
			}
		};

		var ReactRootIndex = {
			createReactRootIndex: null,
			injection: ReactRootIndexInjection
		};

		module.exports = ReactRootIndex;


		/***/
	},
	/* 281 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactComponent
			 */

			'use strict';

			var ReactUpdateQueue = __webpack_require__(282);

			var invariant = __webpack_require__(252);
			var warning = __webpack_require__(263);

			/**
			 * Base class helpers for the updating state of a component.
			 */
			function ReactComponent(props, context) {
				this.props = props;
				this.context = context;
			}

			/**
			 * Sets a subset of the state. Always use this to mutate
			 * state. You should treat `this.state` as immutable.
			 *
			 * There is no guarantee that `this.state` will be immediately updated, so
			 * accessing `this.state` after calling this method may return the old value.
			 *
			 * There is no guarantee that calls to `setState` will run synchronously,
			 * as they may eventually be batched together.  You can provide an optional
			 * callback that will be executed when the call to setState is actually
			 * completed.
			 *
			 * When a function is provided to setState, it will be called at some point in
			 * the future (not synchronously). It will be called with the up to date
			 * component arguments (state, props, context). These values can be different
			 * from this.* because your function may be called after receiveProps but before
			 * shouldComponentUpdate, and this new state, props, and context will not yet be
			 * assigned to this.
			 *
			 * @param {object|function} partialState Next partial state or function to
			 *        produce next partial state to be merged with current state.
			 * @param {?function} callback Called after state is updated.
			 * @final
			 * @protected
			 */
			ReactComponent.prototype.setState = function (partialState, callback) {
				("production" !== process.env.NODE_ENV ? invariant(
					typeof partialState === 'object' ||
					typeof partialState === 'function' ||
					partialState == null,
					'setState(...): takes an object of state variables to update or a ' +
					'function which returns an object of state variables.'
				) : invariant(typeof partialState === 'object' ||
					typeof partialState === 'function' ||
					partialState == null));
				if ("production" !== process.env.NODE_ENV) {
					("production" !== process.env.NODE_ENV ? warning(
						partialState != null,
						'setState(...): You passed an undefined or null state object; ' +
						'instead, use forceUpdate().'
					) : null);
				}
				ReactUpdateQueue.enqueueSetState(this, partialState);
				if (callback) {
					ReactUpdateQueue.enqueueCallback(this, callback);
				}
			};

			/**
			 * Forces an update. This should only be invoked when it is known with
			 * certainty that we are **not** in a DOM transaction.
			 *
			 * You may want to call this when you know that some deeper aspect of the
			 * component's state has changed but `setState` was not called.
			 *
			 * This will not invoke `shouldComponentUpdate`, but it will invoke
			 * `componentWillUpdate` and `componentDidUpdate`.
			 *
			 * @param {?function} callback Called after update is complete.
			 * @final
			 * @protected
			 */
			ReactComponent.prototype.forceUpdate = function (callback) {
				ReactUpdateQueue.enqueueForceUpdate(this);
				if (callback) {
					ReactUpdateQueue.enqueueCallback(this, callback);
				}
			};

			/**
			 * Deprecated APIs. These APIs used to exist on classic React classes but since
			 * we would like to deprecate them, we're not going to move them over to this
			 * modern base class. Instead, we define a getter that warns if it's accessed.
			 */
			if ("production" !== process.env.NODE_ENV) {
				var deprecatedAPIs = {
					getDOMNode: [
						'getDOMNode',
						'Use React.findDOMNode(component) instead.'
					],
					isMounted: [
						'isMounted',
						'Instead, make sure to clean up subscriptions and pending requests in ' +
						'componentWillUnmount to prevent memory leaks.'
					],
					replaceProps: [
						'replaceProps',
						'Instead, call React.render again at the top level.'
					],
					replaceState: [
						'replaceState',
						'Refactor your code to use setState instead (see ' +
						'https://github.com/facebook/react/issues/3236).'
					],
					setProps: [
						'setProps',
						'Instead, call React.render again at the top level.'
					]
				};
				var defineDeprecationWarning = function (methodName, info) {
					try {
						Object.defineProperty(ReactComponent.prototype, methodName, {
							get: function () {
								("production" !== process.env.NODE_ENV ? warning(
									false,
									'%s(...) is deprecated in plain JavaScript React classes. %s',
									info[0],
									info[1]
								) : null);
								return undefined;
							}
						});
					} catch (x) {
						// IE will fail on defineProperty (es5-shim/sham too)
					}
				};
				for (var fnName in deprecatedAPIs) {
					if (deprecatedAPIs.hasOwnProperty(fnName)) {
						defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
					}
				}
			}

			module.exports = ReactComponent;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 282 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactUpdateQueue
			 */

			'use strict';

			var ReactLifeCycle = __webpack_require__(283);
			var ReactCurrentOwner = __webpack_require__(254);
			var ReactElement = __webpack_require__(260);
			var ReactInstanceMap = __webpack_require__(284);
			var ReactUpdates = __webpack_require__(249);

			var assign = __webpack_require__(253);
			var invariant = __webpack_require__(252);
			var warning = __webpack_require__(263);

			function enqueueUpdate(internalInstance) {
				if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
					// If we're in a componentWillMount handler, don't enqueue a rerender
					// because ReactUpdates assumes we're in a browser context (which is
					// wrong for server rendering) and we're about to do a render anyway.
					// See bug in #1740.
					ReactUpdates.enqueueUpdate(internalInstance);
				}
			}

			function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
				("production" !== process.env.NODE_ENV ? invariant(
					ReactCurrentOwner.current == null,
					'%s(...): Cannot update during an existing state transition ' +
					'(such as within `render`). Render methods should be a pure function ' +
					'of props and state.',
					callerName
				) : invariant(ReactCurrentOwner.current == null));

				var internalInstance = ReactInstanceMap.get(publicInstance);
				if (!internalInstance) {
					if ("production" !== process.env.NODE_ENV) {
						// Only warn when we have a callerName. Otherwise we should be silent.
						// We're probably calling from enqueueCallback. We don't want to warn
						// there because we already warned for the corresponding lifecycle method.
						("production" !== process.env.NODE_ENV ? warning(
							!callerName,
							'%s(...): Can only update a mounted or mounting component. ' +
							'This usually means you called %s() on an unmounted ' +
							'component. This is a no-op.',
							callerName,
							callerName
						) : null);
					}
					return null;
				}

				if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
					return null;
				}

				return internalInstance;
			}

			/**
			 * ReactUpdateQueue allows for state updates to be scheduled into a later
			 * reconciliation step.
			 */
			var ReactUpdateQueue = {

				/**
				 * Enqueue a callback that will be executed after all the pending updates
				 * have processed.
				 *
				 * @param {ReactClass} publicInstance The instance to use as `this` context.
				 * @param {?function} callback Called after state is updated.
				 * @internal
				 */
				enqueueCallback: function (publicInstance, callback) {
					("production" !== process.env.NODE_ENV ? invariant(
						typeof callback === 'function',
						'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
						'`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
						'isn\'t callable.'
					) : invariant(typeof callback === 'function'));
					var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

					// Previously we would throw an error if we didn't have an internal
					// instance. Since we want to make it a no-op instead, we mirror the same
					// behavior we have in other enqueue* methods.
					// We also need to ignore callbacks in componentWillMount. See
					// enqueueUpdates.
					if (!internalInstance ||
						internalInstance === ReactLifeCycle.currentlyMountingInstance) {
						return null;
					}

					if (internalInstance._pendingCallbacks) {
						internalInstance._pendingCallbacks.push(callback);
					} else {
						internalInstance._pendingCallbacks = [callback];
					}
					// TODO: The callback here is ignored when setState is called from
					// componentWillMount. Either fix it or disallow doing so completely in
					// favor of getInitialState. Alternatively, we can disallow
					// componentWillMount during server-side rendering.
					enqueueUpdate(internalInstance);
				},

				enqueueCallbackInternal: function (internalInstance, callback) {
					("production" !== process.env.NODE_ENV ? invariant(
						typeof callback === 'function',
						'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
						'`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
						'isn\'t callable.'
					) : invariant(typeof callback === 'function'));
					if (internalInstance._pendingCallbacks) {
						internalInstance._pendingCallbacks.push(callback);
					} else {
						internalInstance._pendingCallbacks = [callback];
					}
					enqueueUpdate(internalInstance);
				},

				/**
				 * Forces an update. This should only be invoked when it is known with
				 * certainty that we are **not** in a DOM transaction.
				 *
				 * You may want to call this when you know that some deeper aspect of the
				 * component's state has changed but `setState` was not called.
				 *
				 * This will not invoke `shouldUpdateComponent`, but it will invoke
				 * `componentWillUpdate` and `componentDidUpdate`.
				 *
				 * @param {ReactClass} publicInstance The instance that should rerender.
				 * @internal
				 */
				enqueueForceUpdate: function (publicInstance) {
					var internalInstance = getInternalInstanceReadyForUpdate(
						publicInstance,
						'forceUpdate'
					);

					if (!internalInstance) {
						return;
					}

					internalInstance._pendingForceUpdate = true;

					enqueueUpdate(internalInstance);
				},

				/**
				 * Replaces all of the state. Always use this or `setState` to mutate state.
				 * You should treat `this.state` as immutable.
				 *
				 * There is no guarantee that `this.state` will be immediately updated, so
				 * accessing `this.state` after calling this method may return the old value.
				 *
				 * @param {ReactClass} publicInstance The instance that should rerender.
				 * @param {object} completeState Next state.
				 * @internal
				 */
				enqueueReplaceState: function (publicInstance, completeState) {
					var internalInstance = getInternalInstanceReadyForUpdate(
						publicInstance,
						'replaceState'
					);

					if (!internalInstance) {
						return;
					}

					internalInstance._pendingStateQueue = [completeState];
					internalInstance._pendingReplaceState = true;

					enqueueUpdate(internalInstance);
				},

				/**
				 * Sets a subset of the state. This only exists because _pendingState is
				 * internal. This provides a merging strategy that is not available to deep
				 * properties which is confusing. TODO: Expose pendingState or don't use it
				 * during the merge.
				 *
				 * @param {ReactClass} publicInstance The instance that should rerender.
				 * @param {object} partialState Next partial state to be merged with state.
				 * @internal
				 */
				enqueueSetState: function (publicInstance, partialState) {
					var internalInstance = getInternalInstanceReadyForUpdate(
						publicInstance,
						'setState'
					);

					if (!internalInstance) {
						return;
					}

					var queue =
						internalInstance._pendingStateQueue ||
						(internalInstance._pendingStateQueue = []);
					queue.push(partialState);

					enqueueUpdate(internalInstance);
				},

				/**
				 * Sets a subset of the props.
				 *
				 * @param {ReactClass} publicInstance The instance that should rerender.
				 * @param {object} partialProps Subset of the next props.
				 * @internal
				 */
				enqueueSetProps: function (publicInstance, partialProps) {
					var internalInstance = getInternalInstanceReadyForUpdate(
						publicInstance,
						'setProps'
					);

					if (!internalInstance) {
						return;
					}

					("production" !== process.env.NODE_ENV ? invariant(
						internalInstance._isTopLevel,
						'setProps(...): You called `setProps` on a ' +
						'component with a parent. This is an anti-pattern since props will ' +
						'get reactively updated when rendered. Instead, change the owner\'s ' +
						'`render` method to pass the correct value as props to the component ' +
						'where it is created.'
					) : invariant(internalInstance._isTopLevel));

					// Merge with the pending element if it exists, otherwise with existing
					// element props.
					var element = internalInstance._pendingElement ||
						internalInstance._currentElement;
					var props = assign({}, element.props, partialProps);
					internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
						element,
						props
					);

					enqueueUpdate(internalInstance);
				},

				/**
				 * Replaces all of the props.
				 *
				 * @param {ReactClass} publicInstance The instance that should rerender.
				 * @param {object} props New props.
				 * @internal
				 */
				enqueueReplaceProps: function (publicInstance, props) {
					var internalInstance = getInternalInstanceReadyForUpdate(
						publicInstance,
						'replaceProps'
					);

					if (!internalInstance) {
						return;
					}

					("production" !== process.env.NODE_ENV ? invariant(
						internalInstance._isTopLevel,
						'replaceProps(...): You called `replaceProps` on a ' +
						'component with a parent. This is an anti-pattern since props will ' +
						'get reactively updated when rendered. Instead, change the owner\'s ' +
						'`render` method to pass the correct value as props to the component ' +
						'where it is created.'
					) : invariant(internalInstance._isTopLevel));

					// Merge with the pending element if it exists, otherwise with existing
					// element props.
					var element = internalInstance._pendingElement ||
						internalInstance._currentElement;
					internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
						element,
						props
					);

					enqueueUpdate(internalInstance);
				},

				enqueueElementInternal: function (internalInstance, newElement) {
					internalInstance._pendingElement = newElement;
					enqueueUpdate(internalInstance);
				}

			};

			module.exports = ReactUpdateQueue;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 283 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactLifeCycle
		 */

		'use strict';

		/**
		 * This module manages the bookkeeping when a component is in the process
		 * of being mounted or being unmounted. This is used as a way to enforce
		 * invariants (or warnings) when it is not recommended to call
		 * setState/forceUpdate.
		 *
		 * currentlyMountingInstance: During the construction phase, it is not possible
		 * to trigger an update since the instance is not fully mounted yet. However, we
		 * currently allow this as a convenience for mutating the initial state.
		 *
		 * currentlyUnmountingInstance: During the unmounting phase, the instance is
		 * still mounted and can therefore schedule an update. However, this is not
		 * recommended and probably an error since it's about to be unmounted.
		 * Therefore we still want to trigger in an error for that case.
		 */

		var ReactLifeCycle = {
			currentlyMountingInstance: null,
			currentlyUnmountingInstance: null
		};

		module.exports = ReactLifeCycle;


		/***/
	},
	/* 284 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactInstanceMap
		 */

		'use strict';

		/**
		 * `ReactInstanceMap` maintains a mapping from a public facing stateful
		 * instance (key) and the internal representation (value). This allows public
		 * methods to accept the user facing instance as an argument and map them back
		 * to internal methods.
		 */

		// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
		var ReactInstanceMap = {

			/**
			 * This API should be called `delete` but we'd have to make sure to always
			 * transform these to strings for IE support. When this transform is fully
			 * supported we can rename it.
			 */
			remove: function (key) {
				key._reactInternalInstance = undefined;
			},

			get: function (key) {
				return key._reactInternalInstance;
			},

			has: function (key) {
				return key._reactInternalInstance !== undefined;
			},

			set: function (key, value) {
				key._reactInternalInstance = value;
			}

		};

		module.exports = ReactInstanceMap;


		/***/
	},
	/* 285 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactClass
			 */

			'use strict';

			var ReactComponent = __webpack_require__(281);
			var ReactCurrentOwner = __webpack_require__(254);
			var ReactElement = __webpack_require__(260);
			var ReactErrorUtils = __webpack_require__(286);
			var ReactInstanceMap = __webpack_require__(284);
			var ReactLifeCycle = __webpack_require__(283);
			var ReactPropTypeLocations = __webpack_require__(266);
			var ReactPropTypeLocationNames = __webpack_require__(268);
			var ReactUpdateQueue = __webpack_require__(282);

			var assign = __webpack_require__(253);
			var invariant = __webpack_require__(252);
			var keyMirror = __webpack_require__(267);
			var keyOf = __webpack_require__(287);
			var warning = __webpack_require__(263);

			var MIXINS_KEY = keyOf({mixins: null});

			/**
			 * Policies that describe methods in `ReactClassInterface`.
			 */
			var SpecPolicy = keyMirror({
				/**
				 * These methods may be defined only once by the class specification or mixin.
				 */
				DEFINE_ONCE: null,
				/**
				 * These methods may be defined by both the class specification and mixins.
				 * Subsequent definitions will be chained. These methods must return void.
				 */
				DEFINE_MANY: null,
				/**
				 * These methods are overriding the base class.
				 */
				OVERRIDE_BASE: null,
				/**
				 * These methods are similar to DEFINE_MANY, except we assume they return
				 * objects. We try to merge the keys of the return values of all the mixed in
				 * functions. If there is a key conflict we throw.
				 */
				DEFINE_MANY_MERGED: null
			});


			var injectedMixins = [];

			/**
			 * Composite components are higher-level components that compose other composite
			 * or native components.
			 *
			 * To create a new type of `ReactClass`, pass a specification of
			 * your new class to `React.createClass`. The only requirement of your class
			 * specification is that you implement a `render` method.
			 *
			 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
			 *
			 * The class specification supports a specific protocol of methods that have
			 * special meaning (e.g. `render`). See `ReactClassInterface` for
			 * more the comprehensive protocol. Any other properties and methods in the
			 * class specification will available on the prototype.
			 *
			 * @interface ReactClassInterface
			 * @internal
			 */
			var ReactClassInterface = {

				/**
				 * An array of Mixin objects to include when defining your component.
				 *
				 * @type {array}
				 * @optional
				 */
				mixins: SpecPolicy.DEFINE_MANY,

				/**
				 * An object containing properties and methods that should be defined on
				 * the component's constructor instead of its prototype (static methods).
				 *
				 * @type {object}
				 * @optional
				 */
				statics: SpecPolicy.DEFINE_MANY,

				/**
				 * Definition of prop types for this component.
				 *
				 * @type {object}
				 * @optional
				 */
				propTypes: SpecPolicy.DEFINE_MANY,

				/**
				 * Definition of context types for this component.
				 *
				 * @type {object}
				 * @optional
				 */
				contextTypes: SpecPolicy.DEFINE_MANY,

				/**
				 * Definition of context types this component sets for its children.
				 *
				 * @type {object}
				 * @optional
				 */
				childContextTypes: SpecPolicy.DEFINE_MANY,

				// ==== Definition methods ====

				/**
				 * Invoked when the component is mounted. Values in the mapping will be set on
				 * `this.props` if that prop is not specified (i.e. using an `in` check).
				 *
				 * This method is invoked before `getInitialState` and therefore cannot rely
				 * on `this.state` or use `this.setState`.
				 *
				 * @return {object}
				 * @optional
				 */
				getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

				/**
				 * Invoked once before the component is mounted. The return value will be used
				 * as the initial value of `this.state`.
				 *
				 *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
				 *
				 * @return {object}
				 * @optional
				 */
				getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

				/**
				 * @return {object}
				 * @optional
				 */
				getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

				/**
				 * Uses props from `this.props` and state from `this.state` to render the
				 * structure of the component.
				 *
				 * No guarantees are made about when or how often this method is invoked, so
				 * it must not have side effects.
				 *
				 *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
				 *
				 * @return {ReactComponent}
				 * @nosideeffects
				 * @required
				 */
				render: SpecPolicy.DEFINE_ONCE,


				// ==== Delegate methods ====

				/**
				 * Invoked when the component is initially created and about to be mounted.
				 * This may have side effects, but any external subscriptions or data created
				 * by this method must be cleaned up in `componentWillUnmount`.
				 *
				 * @optional
				 */
				componentWillMount: SpecPolicy.DEFINE_MANY,

				/**
				 * Invoked when the component has been mounted and has a DOM representation.
				 * However, there is no guarantee that the DOM node is in the document.
				 *
				 * Use this as an opportunity to operate on the DOM when the component has
				 * been mounted (initialized and rendered) for the first time.
				 *
				 * @param {DOMElement} rootNode DOM element representing the component.
				 * @optional
				 */
				componentDidMount: SpecPolicy.DEFINE_MANY,

				/**
				 * Invoked before the component receives new props.
				 *
				 * Use this as an opportunity to react to a prop transition by updating the
				 * state using `this.setState`. Current props are accessed via `this.props`.
				 *
				 *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
				 *
				 * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
				 * transition may cause a state change, but the opposite is not true. If you
				 * need it, you are probably looking for `componentWillUpdate`.
				 *
				 * @param {object} nextProps
				 * @optional
				 */
				componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

				/**
				 * Invoked while deciding if the component should be updated as a result of
				 * receiving new props, state and/or context.
				 *
				 * Use this as an opportunity to `return false` when you're certain that the
				 * transition to the new props/state/context will not require a component
				 * update.
				 *
				 *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
				 *
				 * @param {object} nextProps
				 * @param {?object} nextState
				 * @param {?object} nextContext
				 * @return {boolean} True if the component should update.
				 * @optional
				 */
				shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

				/**
				 * Invoked when the component is about to update due to a transition from
				 * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
				 * and `nextContext`.
				 *
				 * Use this as an opportunity to perform preparation before an update occurs.
				 *
				 * NOTE: You **cannot** use `this.setState()` in this method.
				 *
				 * @param {object} nextProps
				 * @param {?object} nextState
				 * @param {?object} nextContext
				 * @param {ReactReconcileTransaction} transaction
				 * @optional
				 */
				componentWillUpdate: SpecPolicy.DEFINE_MANY,

				/**
				 * Invoked when the component's DOM representation has been updated.
				 *
				 * Use this as an opportunity to operate on the DOM when the component has
				 * been updated.
				 *
				 * @param {object} prevProps
				 * @param {?object} prevState
				 * @param {?object} prevContext
				 * @param {DOMElement} rootNode DOM element representing the component.
				 * @optional
				 */
				componentDidUpdate: SpecPolicy.DEFINE_MANY,

				/**
				 * Invoked when the component is about to be removed from its parent and have
				 * its DOM representation destroyed.
				 *
				 * Use this as an opportunity to deallocate any external resources.
				 *
				 * NOTE: There is no `componentDidUnmount` since your component will have been
				 * destroyed by that point.
				 *
				 * @optional
				 */
				componentWillUnmount: SpecPolicy.DEFINE_MANY,


				// ==== Advanced methods ====

				/**
				 * Updates the component's currently mounted DOM representation.
				 *
				 * By default, this implements React's rendering and reconciliation algorithm.
				 * Sophisticated clients may wish to override this.
				 *
				 * @param {ReactReconcileTransaction} transaction
				 * @internal
				 * @overridable
				 */
				updateComponent: SpecPolicy.OVERRIDE_BASE

			};

			/**
			 * Mapping from class specification keys to special processing functions.
			 *
			 * Although these are declared like instance properties in the specification
			 * when defining classes using `React.createClass`, they are actually static
			 * and are accessible on the constructor instead of the prototype. Despite
			 * being static, they must be defined outside of the "statics" key under
			 * which all other static methods are defined.
			 */
			var RESERVED_SPEC_KEYS = {
				displayName: function (Constructor, displayName) {
					Constructor.displayName = displayName;
				},
				mixins: function (Constructor, mixins) {
					if (mixins) {
						for (var i = 0; i < mixins.length; i++) {
							mixSpecIntoComponent(Constructor, mixins[i]);
						}
					}
				},
				childContextTypes: function (Constructor, childContextTypes) {
					if ("production" !== process.env.NODE_ENV) {
						validateTypeDef(
							Constructor,
							childContextTypes,
							ReactPropTypeLocations.childContext
						);
					}
					Constructor.childContextTypes = assign(
						{},
						Constructor.childContextTypes,
						childContextTypes
					);
				},
				contextTypes: function (Constructor, contextTypes) {
					if ("production" !== process.env.NODE_ENV) {
						validateTypeDef(
							Constructor,
							contextTypes,
							ReactPropTypeLocations.context
						);
					}
					Constructor.contextTypes = assign(
						{},
						Constructor.contextTypes,
						contextTypes
					);
				},
				/**
				 * Special case getDefaultProps which should move into statics but requires
				 * automatic merging.
				 */
				getDefaultProps: function (Constructor, getDefaultProps) {
					if (Constructor.getDefaultProps) {
						Constructor.getDefaultProps = createMergedResultFunction(
							Constructor.getDefaultProps,
							getDefaultProps
						);
					} else {
						Constructor.getDefaultProps = getDefaultProps;
					}
				},
				propTypes: function (Constructor, propTypes) {
					if ("production" !== process.env.NODE_ENV) {
						validateTypeDef(
							Constructor,
							propTypes,
							ReactPropTypeLocations.prop
						);
					}
					Constructor.propTypes = assign(
						{},
						Constructor.propTypes,
						propTypes
					);
				},
				statics: function (Constructor, statics) {
					mixStaticSpecIntoComponent(Constructor, statics);
				}
			};

			function validateTypeDef(Constructor, typeDef, location) {
				for (var propName in typeDef) {
					if (typeDef.hasOwnProperty(propName)) {
						// use a warning instead of an invariant so components
						// don't show up in prod but not in __DEV__
						("production" !== process.env.NODE_ENV ? warning(
							typeof typeDef[propName] === 'function',
							'%s: %s type `%s` is invalid; it must be a function, usually from ' +
							'React.PropTypes.',
							Constructor.displayName || 'ReactClass',
							ReactPropTypeLocationNames[location],
							propName
						) : null);
					}
				}
			}

			function validateMethodOverride(proto, name) {
				var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
					ReactClassInterface[name] :
					null;

				// Disallow overriding of base class methods unless explicitly allowed.
				if (ReactClassMixin.hasOwnProperty(name)) {
					("production" !== process.env.NODE_ENV ? invariant(
						specPolicy === SpecPolicy.OVERRIDE_BASE,
						'ReactClassInterface: You are attempting to override ' +
						'`%s` from your class specification. Ensure that your method names ' +
						'do not overlap with React methods.',
						name
					) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
				}

				// Disallow defining methods more than once unless explicitly allowed.
				if (proto.hasOwnProperty(name)) {
					("production" !== process.env.NODE_ENV ? invariant(
						specPolicy === SpecPolicy.DEFINE_MANY ||
						specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
						'ReactClassInterface: You are attempting to define ' +
						'`%s` on your component more than once. This conflict may be due ' +
						'to a mixin.',
						name
					) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
						specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
				}
			}

			/**
			 * Mixin helper which handles policy validation and reserved
			 * specification keys when building React classses.
			 */
			function mixSpecIntoComponent(Constructor, spec) {
				if (!spec) {
					return;
				}

				("production" !== process.env.NODE_ENV ? invariant(
					typeof spec !== 'function',
					'ReactClass: You\'re attempting to ' +
					'use a component class as a mixin. Instead, just use a regular object.'
				) : invariant(typeof spec !== 'function'));
				("production" !== process.env.NODE_ENV ? invariant(
					!ReactElement.isValidElement(spec),
					'ReactClass: You\'re attempting to ' +
					'use a component as a mixin. Instead, just use a regular object.'
				) : invariant(!ReactElement.isValidElement(spec)));

				var proto = Constructor.prototype;

				// By handling mixins before any other properties, we ensure the same
				// chaining order is applied to methods with DEFINE_MANY policy, whether
				// mixins are listed before or after these methods in the spec.
				if (spec.hasOwnProperty(MIXINS_KEY)) {
					RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
				}

				for (var name in spec) {
					if (!spec.hasOwnProperty(name)) {
						continue;
					}

					if (name === MIXINS_KEY) {
						// We have already handled mixins in a special case above
						continue;
					}

					var property = spec[name];
					validateMethodOverride(proto, name);

					if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
						RESERVED_SPEC_KEYS[name](Constructor, property);
					} else {
						// Setup methods on prototype:
						// The following member methods should not be automatically bound:
						// 1. Expected ReactClass methods (in the "interface").
						// 2. Overridden methods (that were mixed in).
						var isReactClassMethod =
							ReactClassInterface.hasOwnProperty(name);
						var isAlreadyDefined = proto.hasOwnProperty(name);
						var markedDontBind = property && property.__reactDontBind;
						var isFunction = typeof property === 'function';
						var shouldAutoBind =
							isFunction && !isReactClassMethod && !isAlreadyDefined && !markedDontBind;

						if (shouldAutoBind) {
							if (!proto.__reactAutoBindMap) {
								proto.__reactAutoBindMap = {};
							}
							proto.__reactAutoBindMap[name] = property;
							proto[name] = property;
						} else {
							if (isAlreadyDefined) {
								var specPolicy = ReactClassInterface[name];

								// These cases should already be caught by validateMethodOverride
								("production" !== process.env.NODE_ENV ? invariant(
									isReactClassMethod && (
										(specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
									),
									'ReactClass: Unexpected spec policy %s for key %s ' +
									'when mixing in component specs.',
									specPolicy,
									name
								) : invariant(isReactClassMethod && (
										(specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
									)));

								// For methods which are defined more than once, call the existing
								// methods before calling the new property, merging if appropriate.
								if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
									proto[name] = createMergedResultFunction(proto[name], property);
								} else if (specPolicy === SpecPolicy.DEFINE_MANY) {
									proto[name] = createChainedFunction(proto[name], property);
								}
							} else {
								proto[name] = property;
								if ("production" !== process.env.NODE_ENV) {
									// Add verbose displayName to the function, which helps when looking
									// at profiling tools.
									if (typeof property === 'function' && spec.displayName) {
										proto[name].displayName = spec.displayName + '_' + name;
									}
								}
							}
						}
					}
				}
			}

			function mixStaticSpecIntoComponent(Constructor, statics) {
				if (!statics) {
					return;
				}
				for (var name in statics) {
					var property = statics[name];
					if (!statics.hasOwnProperty(name)) {
						continue;
					}

					var isReserved = name in RESERVED_SPEC_KEYS;
					("production" !== process.env.NODE_ENV ? invariant(
						!isReserved,
						'ReactClass: You are attempting to define a reserved ' +
						'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
						'as an instance property instead; it will still be accessible on the ' +
						'constructor.',
						name
					) : invariant(!isReserved));

					var isInherited = name in Constructor;
					("production" !== process.env.NODE_ENV ? invariant(
						!isInherited,
						'ReactClass: You are attempting to define ' +
						'`%s` on your component more than once. This conflict may be ' +
						'due to a mixin.',
						name
					) : invariant(!isInherited));
					Constructor[name] = property;
				}
			}

			/**
			 * Merge two objects, but throw if both contain the same key.
			 *
			 * @param {object} one The first object, which is mutated.
			 * @param {object} two The second object
			 * @return {object} one after it has been mutated to contain everything in two.
			 */
			function mergeIntoWithNoDuplicateKeys(one, two) {
				("production" !== process.env.NODE_ENV ? invariant(
					one && two && typeof one === 'object' && typeof two === 'object',
					'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
				) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

				for (var key in two) {
					if (two.hasOwnProperty(key)) {
						("production" !== process.env.NODE_ENV ? invariant(
							one[key] === undefined,
							'mergeIntoWithNoDuplicateKeys(): ' +
							'Tried to merge two objects with the same key: `%s`. This conflict ' +
							'may be due to a mixin; in particular, this may be caused by two ' +
							'getInitialState() or getDefaultProps() methods returning objects ' +
							'with clashing keys.',
							key
						) : invariant(one[key] === undefined));
						one[key] = two[key];
					}
				}
				return one;
			}

			/**
			 * Creates a function that invokes two functions and merges their return values.
			 *
			 * @param {function} one Function to invoke first.
			 * @param {function} two Function to invoke second.
			 * @return {function} Function that invokes the two argument functions.
			 * @private
			 */
			function createMergedResultFunction(one, two) {
				return function mergedResult() {
					var a = one.apply(this, arguments);
					var b = two.apply(this, arguments);
					if (a == null) {
						return b;
					} else if (b == null) {
						return a;
					}
					var c = {};
					mergeIntoWithNoDuplicateKeys(c, a);
					mergeIntoWithNoDuplicateKeys(c, b);
					return c;
				};
			}

			/**
			 * Creates a function that invokes two functions and ignores their return vales.
			 *
			 * @param {function} one Function to invoke first.
			 * @param {function} two Function to invoke second.
			 * @return {function} Function that invokes the two argument functions.
			 * @private
			 */
			function createChainedFunction(one, two) {
				return function chainedFunction() {
					one.apply(this, arguments);
					two.apply(this, arguments);
				};
			}

			/**
			 * Binds a method to the component.
			 *
			 * @param {object} component Component whose method is going to be bound.
			 * @param {function} method Method to be bound.
			 * @return {function} The bound method.
			 */
			function bindAutoBindMethod(component, method) {
				var boundMethod = method.bind(component);
				if ("production" !== process.env.NODE_ENV) {
					boundMethod.__reactBoundContext = component;
					boundMethod.__reactBoundMethod = method;
					boundMethod.__reactBoundArguments = null;
					var componentName = component.constructor.displayName;
					var _bind = boundMethod.bind;
					/* eslint-disable block-scoped-var, no-undef */
					boundMethod.bind = function (newThis) {
						for (var args = [], $__0 = 1, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);
						// User is trying to bind() an autobound method; we effectively will
						// ignore the value of "this" that the user is trying to use, so
						// let's warn.
						if (newThis !== component && newThis !== null) {
							("production" !== process.env.NODE_ENV ? warning(
								false,
								'bind(): React component methods may only be bound to the ' +
								'component instance. See %s',
								componentName
							) : null);
						} else if (!args.length) {
							("production" !== process.env.NODE_ENV ? warning(
								false,
								'bind(): You are binding a component method to the component. ' +
								'React does this for you automatically in a high-performance ' +
								'way, so you can safely remove this call. See %s',
								componentName
							) : null);
							return boundMethod;
						}
						var reboundMethod = _bind.apply(boundMethod, arguments);
						reboundMethod.__reactBoundContext = component;
						reboundMethod.__reactBoundMethod = method;
						reboundMethod.__reactBoundArguments = args;
						return reboundMethod;
						/* eslint-enable */
					};
				}
				return boundMethod;
			}

			/**
			 * Binds all auto-bound methods in a component.
			 *
			 * @param {object} component Component whose method is going to be bound.
			 */
			function bindAutoBindMethods(component) {
				for (var autoBindKey in component.__reactAutoBindMap) {
					if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
						var method = component.__reactAutoBindMap[autoBindKey];
						component[autoBindKey] = bindAutoBindMethod(
							component,
							ReactErrorUtils.guard(
								method,
								component.constructor.displayName + '.' + autoBindKey
							)
						);
					}
				}
			}

			var typeDeprecationDescriptor = {
				enumerable: false,
				get: function () {
					var displayName = this.displayName || this.name || 'Component';
					("production" !== process.env.NODE_ENV ? warning(
						false,
						'%s.type is deprecated. Use %s directly to access the class.',
						displayName,
						displayName
					) : null);
					Object.defineProperty(this, 'type', {
						value: this
					});
					return this;
				}
			};

			/**
			 * Add more to the ReactClass base class. These are all legacy features and
			 * therefore not already part of the modern ReactComponent.
			 */
			var ReactClassMixin = {

				/**
				 * TODO: This will be deprecated because state should always keep a consistent
				 * type signature and the only use case for this, is to avoid that.
				 */
				replaceState: function (newState, callback) {
					ReactUpdateQueue.enqueueReplaceState(this, newState);
					if (callback) {
						ReactUpdateQueue.enqueueCallback(this, callback);
					}
				},

				/**
				 * Checks whether or not this composite component is mounted.
				 * @return {boolean} True if mounted, false otherwise.
				 * @protected
				 * @final
				 */
				isMounted: function () {
					if ("production" !== process.env.NODE_ENV) {
						var owner = ReactCurrentOwner.current;
						if (owner !== null) {
							("production" !== process.env.NODE_ENV ? warning(
								owner._warnedAboutRefsInRender,
								'%s is accessing isMounted inside its render() function. ' +
								'render() should be a pure function of props and state. It should ' +
								'never access something that requires stale data from the previous ' +
								'render, such as refs. Move this logic to componentDidMount and ' +
								'componentDidUpdate instead.',
								owner.getName() || 'A component'
							) : null);
							owner._warnedAboutRefsInRender = true;
						}
					}
					var internalInstance = ReactInstanceMap.get(this);
					return (
						internalInstance &&
						internalInstance !== ReactLifeCycle.currentlyMountingInstance
					);
				},

				/**
				 * Sets a subset of the props.
				 *
				 * @param {object} partialProps Subset of the next props.
				 * @param {?function} callback Called after props are updated.
				 * @final
				 * @public
				 * @deprecated
				 */
				setProps: function (partialProps, callback) {
					ReactUpdateQueue.enqueueSetProps(this, partialProps);
					if (callback) {
						ReactUpdateQueue.enqueueCallback(this, callback);
					}
				},

				/**
				 * Replace all the props.
				 *
				 * @param {object} newProps Subset of the next props.
				 * @param {?function} callback Called after props are updated.
				 * @final
				 * @public
				 * @deprecated
				 */
				replaceProps: function (newProps, callback) {
					ReactUpdateQueue.enqueueReplaceProps(this, newProps);
					if (callback) {
						ReactUpdateQueue.enqueueCallback(this, callback);
					}
				}
			};

			var ReactClassComponent = function () {
			};
			assign(
				ReactClassComponent.prototype,
				ReactComponent.prototype,
				ReactClassMixin
			);

			/**
			 * Module for creating composite components.
			 *
			 * @class ReactClass
			 */
			var ReactClass = {

				/**
				 * Creates a composite component class given a class specification.
				 *
				 * @param {object} spec Class specification (which must define `render`).
				 * @return {function} Component constructor function.
				 * @public
				 */
				createClass: function (spec) {
					var Constructor = function (props, context) {
						// This constructor is overridden by mocks. The argument is used
						// by mocks to assert on what gets mounted.

						if ("production" !== process.env.NODE_ENV) {
							("production" !== process.env.NODE_ENV ? warning(
								this instanceof Constructor,
								'Something is calling a React component directly. Use a factory or ' +
								'JSX instead. See: https://fb.me/react-legacyfactory'
							) : null);
						}

						// Wire up auto-binding
						if (this.__reactAutoBindMap) {
							bindAutoBindMethods(this);
						}

						this.props = props;
						this.context = context;
						this.state = null;

						// ReactClasses doesn't have constructors. Instead, they use the
						// getInitialState and componentWillMount methods for initialization.

						var initialState = this.getInitialState ? this.getInitialState() : null;
						if ("production" !== process.env.NODE_ENV) {
							// We allow auto-mocks to proceed as if they're returning null.
							if (typeof initialState === 'undefined' &&
								this.getInitialState._isMockFunction) {
								// This is probably bad practice. Consider warning here and
								// deprecating this convenience.
								initialState = null;
							}
						}
						("production" !== process.env.NODE_ENV ? invariant(
							typeof initialState === 'object' && !Array.isArray(initialState),
							'%s.getInitialState(): must return an object or null',
							Constructor.displayName || 'ReactCompositeComponent'
						) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

						this.state = initialState;
					};
					Constructor.prototype = new ReactClassComponent();
					Constructor.prototype.constructor = Constructor;

					injectedMixins.forEach(
						mixSpecIntoComponent.bind(null, Constructor)
					);

					mixSpecIntoComponent(Constructor, spec);

					// Initialize the defaultProps property after all mixins have been merged
					if (Constructor.getDefaultProps) {
						Constructor.defaultProps = Constructor.getDefaultProps();
					}

					if ("production" !== process.env.NODE_ENV) {
						// This is a tag to indicate that the use of these method names is ok,
						// since it's used with createClass. If it's not, then it's likely a
						// mistake so we'll warn you to use the static property, property
						// initializer or constructor respectively.
						if (Constructor.getDefaultProps) {
							Constructor.getDefaultProps.isReactClassApproved = {};
						}
						if (Constructor.prototype.getInitialState) {
							Constructor.prototype.getInitialState.isReactClassApproved = {};
						}
					}

					("production" !== process.env.NODE_ENV ? invariant(
						Constructor.prototype.render,
						'createClass(...): Class specification must implement a `render` method.'
					) : invariant(Constructor.prototype.render));

					if ("production" !== process.env.NODE_ENV) {
						("production" !== process.env.NODE_ENV ? warning(
							!Constructor.prototype.componentShouldUpdate,
							'%s has a method called ' +
							'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
							'The name is phrased as a question because the function is ' +
							'expected to return a value.',
							spec.displayName || 'A component'
						) : null);
					}

					// Reduce time spent doing lookups by setting these on the prototype.
					for (var methodName in ReactClassInterface) {
						if (!Constructor.prototype[methodName]) {
							Constructor.prototype[methodName] = null;
						}
					}

					// Legacy hook
					Constructor.type = Constructor;
					if ("production" !== process.env.NODE_ENV) {
						try {
							Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
						} catch (x) {
							// IE will fail on defineProperty (es5-shim/sham too)
						}
					}

					return Constructor;
				},

				injection: {
					injectMixin: function (mixin) {
						injectedMixins.push(mixin);
					}
				}

			};

			module.exports = ReactClass;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 286 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactErrorUtils
		 * @typechecks
		 */

		"use strict";

		var ReactErrorUtils = {
			/**
			 * Creates a guarded version of a function. This is supposed to make debugging
			 * of event handlers easier. To aid debugging with the browser's debugger,
			 * this currently simply returns the original function.
			 *
			 * @param {function} func Function to be executed
			 * @param {string} name The name of the guard
			 * @return {function}
			 */
			guard: function (func, name) {
				return func;
			}
		};

		module.exports = ReactErrorUtils;


		/***/
	},
	/* 287 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule keyOf
		 */

		/**
		 * Allows extraction of a minified key. Let's the build system minify keys
		 * without loosing the ability to dynamically use key strings as values
		 * themselves. Pass in an object with a single key/val pair and it will return
		 * you the string key of that single record. Suppose you want to grab the
		 * value for a key 'className' inside of an object. Key/val minification may
		 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
		 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
		 * reuse those resolutions.
		 */
		var keyOf = function (oneKeyObj) {
			var key;
			for (key in oneKeyObj) {
				if (!oneKeyObj.hasOwnProperty(key)) {
					continue;
				}
				return key;
			}
			return null;
		};


		module.exports = keyOf;


		/***/
	},
	/* 288 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactDOM
			 * @typechecks static-only
			 */

			'use strict';

			var ReactElement = __webpack_require__(260);
			var ReactElementValidator = __webpack_require__(259);

			var mapObject = __webpack_require__(289);

			/**
			 * Create a factory that creates HTML tag elements.
			 *
			 * @param {string} tag Tag name (e.g. `div`).
			 * @private
			 */
			function createDOMFactory(tag) {
				if ("production" !== process.env.NODE_ENV) {
					return ReactElementValidator.createFactory(tag);
				}
				return ReactElement.createFactory(tag);
			}

			/**
			 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
			 * This is also accessible via `React.DOM`.
			 *
			 * @public
			 */
			var ReactDOM = mapObject({
				a: 'a',
				abbr: 'abbr',
				address: 'address',
				area: 'area',
				article: 'article',
				aside: 'aside',
				audio: 'audio',
				b: 'b',
				base: 'base',
				bdi: 'bdi',
				bdo: 'bdo',
				big: 'big',
				blockquote: 'blockquote',
				body: 'body',
				br: 'br',
				button: 'button',
				canvas: 'canvas',
				caption: 'caption',
				cite: 'cite',
				code: 'code',
				col: 'col',
				colgroup: 'colgroup',
				data: 'data',
				datalist: 'datalist',
				dd: 'dd',
				del: 'del',
				details: 'details',
				dfn: 'dfn',
				dialog: 'dialog',
				div: 'div',
				dl: 'dl',
				dt: 'dt',
				em: 'em',
				embed: 'embed',
				fieldset: 'fieldset',
				figcaption: 'figcaption',
				figure: 'figure',
				footer: 'footer',
				form: 'form',
				h1: 'h1',
				h2: 'h2',
				h3: 'h3',
				h4: 'h4',
				h5: 'h5',
				h6: 'h6',
				head: 'head',
				header: 'header',
				hr: 'hr',
				html: 'html',
				i: 'i',
				iframe: 'iframe',
				img: 'img',
				input: 'input',
				ins: 'ins',
				kbd: 'kbd',
				keygen: 'keygen',
				label: 'label',
				legend: 'legend',
				li: 'li',
				link: 'link',
				main: 'main',
				map: 'map',
				mark: 'mark',
				menu: 'menu',
				menuitem: 'menuitem',
				meta: 'meta',
				meter: 'meter',
				nav: 'nav',
				noscript: 'noscript',
				object: 'object',
				ol: 'ol',
				optgroup: 'optgroup',
				option: 'option',
				output: 'output',
				p: 'p',
				param: 'param',
				picture: 'picture',
				pre: 'pre',
				progress: 'progress',
				q: 'q',
				rp: 'rp',
				rt: 'rt',
				ruby: 'ruby',
				s: 's',
				samp: 'samp',
				script: 'script',
				section: 'section',
				select: 'select',
				small: 'small',
				source: 'source',
				span: 'span',
				strong: 'strong',
				style: 'style',
				sub: 'sub',
				summary: 'summary',
				sup: 'sup',
				table: 'table',
				tbody: 'tbody',
				td: 'td',
				textarea: 'textarea',
				tfoot: 'tfoot',
				th: 'th',
				thead: 'thead',
				time: 'time',
				title: 'title',
				tr: 'tr',
				track: 'track',
				u: 'u',
				ul: 'ul',
				'var': 'var',
				video: 'video',
				wbr: 'wbr',

				// SVG
				circle: 'circle',
				clipPath: 'clipPath',
				defs: 'defs',
				ellipse: 'ellipse',
				g: 'g',
				line: 'line',
				linearGradient: 'linearGradient',
				mask: 'mask',
				path: 'path',
				pattern: 'pattern',
				polygon: 'polygon',
				polyline: 'polyline',
				radialGradient: 'radialGradient',
				rect: 'rect',
				stop: 'stop',
				svg: 'svg',
				text: 'text',
				tspan: 'tspan'

			}, createDOMFactory);

			module.exports = ReactDOM;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 289 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule mapObject
		 */

		'use strict';

		var hasOwnProperty = Object.prototype.hasOwnProperty;

		/**
		 * Executes the provided `callback` once for each enumerable own property in the
		 * object and constructs a new object from the results. The `callback` is
		 * invoked with three arguments:
		 *
		 *  - the property value
		 *  - the property name
		 *  - the object being traversed
		 *
		 * Properties that are added after the call to `mapObject` will not be visited
		 * by `callback`. If the values of existing properties are changed, the value
		 * passed to `callback` will be the value at the time `mapObject` visits them.
		 * Properties that are deleted before being visited are not visited.
		 *
		 * @grep function objectMap()
		 * @grep function objMap()
		 *
		 * @param {?object} object
		 * @param {function} callback
		 * @param {*} context
		 * @return {?object}
		 */
		function mapObject(object, callback, context) {
			if (!object) {
				return null;
			}
			var result = {};
			for (var name in object) {
				if (hasOwnProperty.call(object, name)) {
					result[name] = callback.call(context, object[name], name, object);
				}
			}
			return result;
		}

		module.exports = mapObject;


		/***/
	},
	/* 290 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDOMTextComponent
		 * @typechecks static-only
		 */

		'use strict';

		var DOMPropertyOperations = __webpack_require__(291);
		var ReactComponentBrowserEnvironment =
			__webpack_require__(295);
		var ReactDOMComponent = __webpack_require__(335);

		var assign = __webpack_require__(253);
		var escapeTextContentForBrowser = __webpack_require__(294);

		/**
		 * Text nodes violate a couple assumptions that React makes about components:
		 *
		 *  - When mounting text into the DOM, adjacent text nodes are merged.
		 *  - Text nodes cannot be assigned a React root ID.
		 *
		 * This component is used to wrap strings in elements so that they can undergo
		 * the same reconciliation that is applied to elements.
		 *
		 * TODO: Investigate representing React components in the DOM with text nodes.
		 *
		 * @class ReactDOMTextComponent
		 * @extends ReactComponent
		 * @internal
		 */
		var ReactDOMTextComponent = function (props) {
			// This constructor and its argument is currently used by mocks.
		};

		assign(ReactDOMTextComponent.prototype, {

			/**
			 * @param {ReactText} text
			 * @internal
			 */
			construct: function (text) {
				// TODO: This is really a ReactText (ReactNode), not a ReactElement
				this._currentElement = text;
				this._stringText = '' + text;

				// Properties
				this._rootNodeID = null;
				this._mountIndex = 0;
			},

			/**
			 * Creates the markup for this text node. This node is not intended to have
			 * any features besides containing text content.
			 *
			 * @param {string} rootID DOM ID of the root node.
			 * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
			 * @return {string} Markup for this text node.
			 * @internal
			 */
			mountComponent: function (rootID, transaction, context) {
				this._rootNodeID = rootID;
				var escapedText = escapeTextContentForBrowser(this._stringText);

				if (transaction.renderToStaticMarkup) {
					// Normally we'd wrap this in a `span` for the reasons stated above, but
					// since this is a situation where React won't take over (static pages),
					// we can simply return the text as it is.
					return escapedText;
				}

				return (
					'<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
					escapedText +
					'</span>'
				);
			},

			/**
			 * Updates this component by updating the text content.
			 *
			 * @param {ReactText} nextText The next text content
			 * @param {ReactReconcileTransaction} transaction
			 * @internal
			 */
			receiveComponent: function (nextText, transaction) {
				if (nextText !== this._currentElement) {
					this._currentElement = nextText;
					var nextStringText = '' + nextText;
					if (nextStringText !== this._stringText) {
						// TODO: Save this as pending props and use performUpdateIfNecessary
						// and/or updateComponent to do the actual update for consistency with
						// other component types?
						this._stringText = nextStringText;
						ReactDOMComponent.BackendIDOperations.updateTextContentByID(
							this._rootNodeID,
							nextStringText
						);
					}
				}
			},

			unmountComponent: function () {
				ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
			}

		});

		module.exports = ReactDOMTextComponent;


		/***/
	},
	/* 291 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule DOMPropertyOperations
			 * @typechecks static-only
			 */

			'use strict';

			var DOMProperty = __webpack_require__(292);

			var quoteAttributeValueForBrowser = __webpack_require__(293);
			var warning = __webpack_require__(263);

			function shouldIgnoreValue(name, value) {
				return value == null ||
					(DOMProperty.hasBooleanValue[name] && !value) ||
					(DOMProperty.hasNumericValue[name] && isNaN(value)) ||
					(DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
					(DOMProperty.hasOverloadedBooleanValue[name] && value === false);
			}

			if ("production" !== process.env.NODE_ENV) {
				var reactProps = {
					children: true,
					dangerouslySetInnerHTML: true,
					key: true,
					ref: true
				};
				var warnedProperties = {};

				var warnUnknownProperty = function (name) {
					if (reactProps.hasOwnProperty(name) && reactProps[name] ||
						warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
						return;
					}

					warnedProperties[name] = true;
					var lowerCasedName = name.toLowerCase();

					// data-* attributes should be lowercase; suggest the lowercase version
					var standardName = (
						DOMProperty.isCustomAttribute(lowerCasedName) ?
							lowerCasedName :
							DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
								DOMProperty.getPossibleStandardName[lowerCasedName] :
								null
					);

					// For now, only warn when we have a suggested correction. This prevents
					// logging too much when using transferPropsTo.
					("production" !== process.env.NODE_ENV ? warning(
						standardName == null,
						'Unknown DOM property %s. Did you mean %s?',
						name,
						standardName
					) : null);

				};
			}

			/**
			 * Operations for dealing with DOM properties.
			 */
			var DOMPropertyOperations = {

				/**
				 * Creates markup for the ID property.
				 *
				 * @param {string} id Unescaped ID.
				 * @return {string} Markup string.
				 */
				createMarkupForID: function (id) {
					return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
						quoteAttributeValueForBrowser(id);
				},

				/**
				 * Creates markup for a property.
				 *
				 * @param {string} name
				 * @param {*} value
				 * @return {?string} Markup string, or null if the property was invalid.
				 */
				createMarkupForProperty: function (name, value) {
					if (DOMProperty.isStandardName.hasOwnProperty(name) &&
						DOMProperty.isStandardName[name]) {
						if (shouldIgnoreValue(name, value)) {
							return '';
						}
						var attributeName = DOMProperty.getAttributeName[name];
						if (DOMProperty.hasBooleanValue[name] ||
							(DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
							return attributeName;
						}
						return attributeName + '=' + quoteAttributeValueForBrowser(value);
					} else if (DOMProperty.isCustomAttribute(name)) {
						if (value == null) {
							return '';
						}
						return name + '=' + quoteAttributeValueForBrowser(value);
					} else if ("production" !== process.env.NODE_ENV) {
						warnUnknownProperty(name);
					}
					return null;
				},

				/**
				 * Sets the value for a property on a node.
				 *
				 * @param {DOMElement} node
				 * @param {string} name
				 * @param {*} value
				 */
				setValueForProperty: function (node, name, value) {
					if (DOMProperty.isStandardName.hasOwnProperty(name) &&
						DOMProperty.isStandardName[name]) {
						var mutationMethod = DOMProperty.getMutationMethod[name];
						if (mutationMethod) {
							mutationMethod(node, value);
						} else if (shouldIgnoreValue(name, value)) {
							this.deleteValueForProperty(node, name);
						} else if (DOMProperty.mustUseAttribute[name]) {
							// `setAttribute` with objects becomes only `[object]` in IE8/9,
							// ('' + value) makes it output the correct toString()-value.
							node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
						} else {
							var propName = DOMProperty.getPropertyName[name];
							// Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
							// property type before comparing; only `value` does and is string.
							if (!DOMProperty.hasSideEffects[name] ||
								('' + node[propName]) !== ('' + value)) {
								// Contrary to `setAttribute`, object properties are properly
								// `toString`ed by IE8/9.
								node[propName] = value;
							}
						}
					} else if (DOMProperty.isCustomAttribute(name)) {
						if (value == null) {
							node.removeAttribute(name);
						} else {
							node.setAttribute(name, '' + value);
						}
					} else if ("production" !== process.env.NODE_ENV) {
						warnUnknownProperty(name);
					}
				},

				/**
				 * Deletes the value for a property on a node.
				 *
				 * @param {DOMElement} node
				 * @param {string} name
				 */
				deleteValueForProperty: function (node, name) {
					if (DOMProperty.isStandardName.hasOwnProperty(name) &&
						DOMProperty.isStandardName[name]) {
						var mutationMethod = DOMProperty.getMutationMethod[name];
						if (mutationMethod) {
							mutationMethod(node, undefined);
						} else if (DOMProperty.mustUseAttribute[name]) {
							node.removeAttribute(DOMProperty.getAttributeName[name]);
						} else {
							var propName = DOMProperty.getPropertyName[name];
							var defaultValue = DOMProperty.getDefaultValueForProperty(
								node.nodeName,
								propName
							);
							if (!DOMProperty.hasSideEffects[name] ||
								('' + node[propName]) !== defaultValue) {
								node[propName] = defaultValue;
							}
						}
					} else if (DOMProperty.isCustomAttribute(name)) {
						node.removeAttribute(name);
					} else if ("production" !== process.env.NODE_ENV) {
						warnUnknownProperty(name);
					}
				}

			};

			module.exports = DOMPropertyOperations;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 292 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule DOMProperty
		 * @typechecks static-only
		 */

			/*jslint bitwise: true */

			'use strict';

			var invariant = __webpack_require__(252);

			function checkMask(value, bitmask) {
				return (value & bitmask) === bitmask;
			}

			var DOMPropertyInjection = {
				/**
				 * Mapping from normalized, camelcased property names to a configuration that
				 * specifies how the associated DOM property should be accessed or rendered.
				 */
				MUST_USE_ATTRIBUTE: 0x1,
				MUST_USE_PROPERTY: 0x2,
				HAS_SIDE_EFFECTS: 0x4,
				HAS_BOOLEAN_VALUE: 0x8,
				HAS_NUMERIC_VALUE: 0x10,
				HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
				HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

				/**
				 * Inject some specialized knowledge about the DOM. This takes a config object
				 * with the following properties:
				 *
				 * isCustomAttribute: function that given an attribute name will return true
				 * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
				 * attributes where it's impossible to enumerate all of the possible
				 * attribute names,
				 *
				 * Properties: object mapping DOM property name to one of the
				 * DOMPropertyInjection constants or null. If your attribute isn't in here,
				 * it won't get written to the DOM.
				 *
				 * DOMAttributeNames: object mapping React attribute name to the DOM
				 * attribute name. Attribute names not specified use the **lowercase**
				 * normalized name.
				 *
				 * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
				 * Property names not specified use the normalized name.
				 *
				 * DOMMutationMethods: Properties that require special mutation methods. If
				 * `value` is undefined, the mutation method should unset the property.
				 *
				 * @param {object} domPropertyConfig the config as described above.
				 */
				injectDOMPropertyConfig: function (domPropertyConfig) {
					var Properties = domPropertyConfig.Properties || {};
					var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
					var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
					var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

					if (domPropertyConfig.isCustomAttribute) {
						DOMProperty._isCustomAttributeFunctions.push(
							domPropertyConfig.isCustomAttribute
						);
					}

					for (var propName in Properties) {
						("production" !== process.env.NODE_ENV ? invariant(
							!DOMProperty.isStandardName.hasOwnProperty(propName),
							'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
							'\'%s\' which has already been injected. You may be accidentally ' +
							'injecting the same DOM property config twice, or you may be ' +
							'injecting two configs that have conflicting property names.',
							propName
						) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

						DOMProperty.isStandardName[propName] = true;

						var lowerCased = propName.toLowerCase();
						DOMProperty.getPossibleStandardName[lowerCased] = propName;

						if (DOMAttributeNames.hasOwnProperty(propName)) {
							var attributeName = DOMAttributeNames[propName];
							DOMProperty.getPossibleStandardName[attributeName] = propName;
							DOMProperty.getAttributeName[propName] = attributeName;
						} else {
							DOMProperty.getAttributeName[propName] = lowerCased;
						}

						DOMProperty.getPropertyName[propName] =
							DOMPropertyNames.hasOwnProperty(propName) ?
								DOMPropertyNames[propName] :
								propName;

						if (DOMMutationMethods.hasOwnProperty(propName)) {
							DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
						} else {
							DOMProperty.getMutationMethod[propName] = null;
						}

						var propConfig = Properties[propName];
						DOMProperty.mustUseAttribute[propName] =
							checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
						DOMProperty.mustUseProperty[propName] =
							checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
						DOMProperty.hasSideEffects[propName] =
							checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
						DOMProperty.hasBooleanValue[propName] =
							checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
						DOMProperty.hasNumericValue[propName] =
							checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
						DOMProperty.hasPositiveNumericValue[propName] =
							checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
						DOMProperty.hasOverloadedBooleanValue[propName] =
							checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

						("production" !== process.env.NODE_ENV ? invariant(
							!DOMProperty.mustUseAttribute[propName] || !DOMProperty.mustUseProperty[propName],
							'DOMProperty: Cannot require using both attribute and property: %s',
							propName
						) : invariant(!DOMProperty.mustUseAttribute[propName] || !DOMProperty.mustUseProperty[propName]));
						("production" !== process.env.NODE_ENV ? invariant(
							DOMProperty.mustUseProperty[propName] || !DOMProperty.hasSideEffects[propName],
							'DOMProperty: Properties that have side effects must use property: %s',
							propName
						) : invariant(DOMProperty.mustUseProperty[propName] || !DOMProperty.hasSideEffects[propName]));
						("production" !== process.env.NODE_ENV ? invariant(
							!!DOMProperty.hasBooleanValue[propName] + !!DOMProperty.hasNumericValue[propName] + !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
							'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
							'numeric value, but not a combination: %s',
							propName
						) : invariant(!!DOMProperty.hasBooleanValue[propName] + !!DOMProperty.hasNumericValue[propName] + !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
					}
				}
			};
			var defaultValueCache = {};

			/**
			 * DOMProperty exports lookup objects that can be used like functions:
			 *
			 *   > DOMProperty.isValid['id']
			 *   true
			 *   > DOMProperty.isValid['foobar']
			 *   undefined
			 *
			 * Although this may be confusing, it performs better in general.
			 *
			 * @see http://jsperf.com/key-exists
			 * @see http://jsperf.com/key-missing
			 */
			var DOMProperty = {

				ID_ATTRIBUTE_NAME: 'data-reactid',

				/**
				 * Checks whether a property name is a standard property.
				 * @type {Object}
				 */
				isStandardName: {},

				/**
				 * Mapping from lowercase property names to the properly cased version, used
				 * to warn in the case of missing properties.
				 * @type {Object}
				 */
				getPossibleStandardName: {},

				/**
				 * Mapping from normalized names to attribute names that differ. Attribute
				 * names are used when rendering markup or with `*Attribute()`.
				 * @type {Object}
				 */
				getAttributeName: {},

				/**
				 * Mapping from normalized names to properties on DOM node instances.
				 * (This includes properties that mutate due to external factors.)
				 * @type {Object}
				 */
				getPropertyName: {},

				/**
				 * Mapping from normalized names to mutation methods. This will only exist if
				 * mutation cannot be set simply by the property or `setAttribute()`.
				 * @type {Object}
				 */
				getMutationMethod: {},

				/**
				 * Whether the property must be accessed and mutated as an object property.
				 * @type {Object}
				 */
				mustUseAttribute: {},

				/**
				 * Whether the property must be accessed and mutated using `*Attribute()`.
				 * (This includes anything that fails `<propName> in <element>`.)
				 * @type {Object}
				 */
				mustUseProperty: {},

				/**
				 * Whether or not setting a value causes side effects such as triggering
				 * resources to be loaded or text selection changes. We must ensure that
				 * the value is only set if it has changed.
				 * @type {Object}
				 */
				hasSideEffects: {},

				/**
				 * Whether the property should be removed when set to a falsey value.
				 * @type {Object}
				 */
				hasBooleanValue: {},

				/**
				 * Whether the property must be numeric or parse as a
				 * numeric and should be removed when set to a falsey value.
				 * @type {Object}
				 */
				hasNumericValue: {},

				/**
				 * Whether the property must be positive numeric or parse as a positive
				 * numeric and should be removed when set to a falsey value.
				 * @type {Object}
				 */
				hasPositiveNumericValue: {},

				/**
				 * Whether the property can be used as a flag as well as with a value. Removed
				 * when strictly equal to false; present without a value when strictly equal
				 * to true; present with a value otherwise.
				 * @type {Object}
				 */
				hasOverloadedBooleanValue: {},

				/**
				 * All of the isCustomAttribute() functions that have been injected.
				 */
				_isCustomAttributeFunctions: [],

				/**
				 * Checks whether a property name is a custom attribute.
				 * @method
				 */
				isCustomAttribute: function (attributeName) {
					for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
						var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
						if (isCustomAttributeFn(attributeName)) {
							return true;
						}
					}
					return false;
				},

				/**
				 * Returns the default property value for a DOM property (i.e., not an
				 * attribute). Most default values are '' or false, but not all. Worse yet,
				 * some (in particular, `type`) vary depending on the type of element.
				 *
				 * TODO: Is it better to grab all the possible properties when creating an
				 * element to avoid having to create the same element twice?
				 */
				getDefaultValueForProperty: function (nodeName, prop) {
					var nodeDefaults = defaultValueCache[nodeName];
					var testElement;
					if (!nodeDefaults) {
						defaultValueCache[nodeName] = nodeDefaults = {};
					}
					if (!(prop in nodeDefaults)) {
						testElement = document.createElement(nodeName);
						nodeDefaults[prop] = testElement[prop];
					}
					return nodeDefaults[prop];
				},

				injection: DOMPropertyInjection
			};

			module.exports = DOMProperty;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 293 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule quoteAttributeValueForBrowser
		 */

		'use strict';

		var escapeTextContentForBrowser = __webpack_require__(294);

		/**
		 * Escapes attribute value to prevent scripting attacks.
		 *
		 * @param {*} value Value to escape.
		 * @return {string} An escaped string.
		 */
		function quoteAttributeValueForBrowser(value) {
			return '"' + escapeTextContentForBrowser(value) + '"';
		}

		module.exports = quoteAttributeValueForBrowser;


		/***/
	},
	/* 294 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule escapeTextContentForBrowser
		 */

		'use strict';

		var ESCAPE_LOOKUP = {
			'&': '&amp;',
			'>': '&gt;',
			'<': '&lt;',
			'"': '&quot;',
			'\'': '&#x27;'
		};

		var ESCAPE_REGEX = /[&><"']/g;

		function escaper(match) {
			return ESCAPE_LOOKUP[match];
		}

		/**
		 * Escapes text to prevent scripting attacks.
		 *
		 * @param {*} text Text value to escape.
		 * @return {string} An escaped string.
		 */
		function escapeTextContentForBrowser(text) {
			return ('' + text).replace(ESCAPE_REGEX, escaper);
		}

		module.exports = escapeTextContentForBrowser;


		/***/
	},
	/* 295 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactComponentBrowserEnvironment
		 */

		/*jslint evil: true */

		'use strict';

		var ReactDOMIDOperations = __webpack_require__(296);
		var ReactMount = __webpack_require__(315);

		/**
		 * Abstracts away all functionality of the reconciler that requires knowledge of
		 * the browser context. TODO: These callers should be refactored to avoid the
		 * need for this injection.
		 */
		var ReactComponentBrowserEnvironment = {

			processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

			replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

			/**
			 * If a particular environment requires that some resources be cleaned up,
			 * specify this in the injected Mixin. In the DOM, we would likely want to
			 * purge any cached node ID lookups.
			 *
			 * @private
			 */
			unmountIDFromEnvironment: function (rootNodeID) {
				ReactMount.purgeID(rootNodeID);
			}

		};

		module.exports = ReactComponentBrowserEnvironment;


		/***/
	},
	/* 296 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDOMIDOperations
		 * @typechecks static-only
		 */

			/*jslint evil: true */

			'use strict';

			var CSSPropertyOperations = __webpack_require__(297);
			var DOMChildrenOperations = __webpack_require__(306);
			var DOMPropertyOperations = __webpack_require__(291);
			var ReactMount = __webpack_require__(315);
			var ReactPerf = __webpack_require__(255);

			var invariant = __webpack_require__(252);
			var setInnerHTML = __webpack_require__(314);

			/**
			 * Errors for properties that should not be updated with `updatePropertyById()`.
			 *
			 * @type {object}
			 * @private
			 */
			var INVALID_PROPERTY_ERRORS = {
				dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
				style: '`style` must be set using `updateStylesByID()`.'
			};

			/**
			 * Operations used to process updates to DOM nodes. This is made injectable via
			 * `ReactDOMComponent.BackendIDOperations`.
			 */
			var ReactDOMIDOperations = {

				/**
				 * Updates a DOM node with new property values. This should only be used to
				 * update DOM properties in `DOMProperty`.
				 *
				 * @param {string} id ID of the node to update.
				 * @param {string} name A valid property name, see `DOMProperty`.
				 * @param {*} value New value of the property.
				 * @internal
				 */
				updatePropertyByID: function (id, name, value) {
					var node = ReactMount.getNode(id);
					("production" !== process.env.NODE_ENV ? invariant(
						!INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
						'updatePropertyByID(...): %s',
						INVALID_PROPERTY_ERRORS[name]
					) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

					// If we're updating to null or undefined, we should remove the property
					// from the DOM node instead of inadvertantly setting to a string. This
					// brings us in line with the same behavior we have on initial render.
					if (value != null) {
						DOMPropertyOperations.setValueForProperty(node, name, value);
					} else {
						DOMPropertyOperations.deleteValueForProperty(node, name);
					}
				},

				/**
				 * Updates a DOM node to remove a property. This should only be used to remove
				 * DOM properties in `DOMProperty`.
				 *
				 * @param {string} id ID of the node to update.
				 * @param {string} name A property name to remove, see `DOMProperty`.
				 * @internal
				 */
				deletePropertyByID: function (id, name, value) {
					var node = ReactMount.getNode(id);
					("production" !== process.env.NODE_ENV ? invariant(
						!INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
						'updatePropertyByID(...): %s',
						INVALID_PROPERTY_ERRORS[name]
					) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
					DOMPropertyOperations.deleteValueForProperty(node, name, value);
				},

				/**
				 * Updates a DOM node with new style values. If a value is specified as '',
				 * the corresponding style property will be unset.
				 *
				 * @param {string} id ID of the node to update.
				 * @param {object} styles Mapping from styles to values.
				 * @internal
				 */
				updateStylesByID: function (id, styles) {
					var node = ReactMount.getNode(id);
					CSSPropertyOperations.setValueForStyles(node, styles);
				},

				/**
				 * Updates a DOM node's innerHTML.
				 *
				 * @param {string} id ID of the node to update.
				 * @param {string} html An HTML string.
				 * @internal
				 */
				updateInnerHTMLByID: function (id, html) {
					var node = ReactMount.getNode(id);
					setInnerHTML(node, html);
				},

				/**
				 * Updates a DOM node's text content set by `props.content`.
				 *
				 * @param {string} id ID of the node to update.
				 * @param {string} content Text content.
				 * @internal
				 */
				updateTextContentByID: function (id, content) {
					var node = ReactMount.getNode(id);
					DOMChildrenOperations.updateTextContent(node, content);
				},

				/**
				 * Replaces a DOM node that exists in the document with markup.
				 *
				 * @param {string} id ID of child to be replaced.
				 * @param {string} markup Dangerous markup to inject in place of child.
				 * @internal
				 * @see {Danger.dangerouslyReplaceNodeWithMarkup}
				 */
				dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
					var node = ReactMount.getNode(id);
					DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
				},

				/**
				 * Updates a component's children by processing a series of updates.
				 *
				 * @param {array<object>} updates List of update configurations.
				 * @param {array<string>} markup List of markup strings.
				 * @internal
				 */
				dangerouslyProcessChildrenUpdates: function (updates, markup) {
					for (var i = 0; i < updates.length; i++) {
						updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
					}
					DOMChildrenOperations.processUpdates(updates, markup);
				}
			};

			ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
				updatePropertyByID: 'updatePropertyByID',
				deletePropertyByID: 'deletePropertyByID',
				updateStylesByID: 'updateStylesByID',
				updateInnerHTMLByID: 'updateInnerHTMLByID',
				updateTextContentByID: 'updateTextContentByID',
				dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
				dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
			});

			module.exports = ReactDOMIDOperations;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 297 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule CSSPropertyOperations
			 * @typechecks static-only
			 */

			'use strict';

			var CSSProperty = __webpack_require__(298);
			var ExecutionEnvironment = __webpack_require__(299);

			var camelizeStyleName = __webpack_require__(300);
			var dangerousStyleValue = __webpack_require__(302);
			var hyphenateStyleName = __webpack_require__(303);
			var memoizeStringOnly = __webpack_require__(305);
			var warning = __webpack_require__(263);

			var processStyleName = memoizeStringOnly(function (styleName) {
				return hyphenateStyleName(styleName);
			});

			var styleFloatAccessor = 'cssFloat';
			if (ExecutionEnvironment.canUseDOM) {
				// IE8 only supports accessing cssFloat (standard) as styleFloat
				if (document.documentElement.style.cssFloat === undefined) {
					styleFloatAccessor = 'styleFloat';
				}
			}

			if ("production" !== process.env.NODE_ENV) {
				// 'msTransform' is correct, but the other prefixes should be capitalized
				var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

				// style values shouldn't contain a semicolon
				var badStyleValueWithSemicolonPattern = /;\s*$/;

				var warnedStyleNames = {};
				var warnedStyleValues = {};

				var warnHyphenatedStyleName = function (name) {
					if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
						return;
					}

					warnedStyleNames[name] = true;
					("production" !== process.env.NODE_ENV ? warning(
						false,
						'Unsupported style property %s. Did you mean %s?',
						name,
						camelizeStyleName(name)
					) : null);
				};

				var warnBadVendoredStyleName = function (name) {
					if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
						return;
					}

					warnedStyleNames[name] = true;
					("production" !== process.env.NODE_ENV ? warning(
						false,
						'Unsupported vendor-prefixed style property %s. Did you mean %s?',
						name,
						name.charAt(0).toUpperCase() + name.slice(1)
					) : null);
				};

				var warnStyleValueWithSemicolon = function (name, value) {
					if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
						return;
					}

					warnedStyleValues[value] = true;
					("production" !== process.env.NODE_ENV ? warning(
						false,
						'Style property values shouldn\'t contain a semicolon. ' +
						'Try "%s: %s" instead.',
						name,
						value.replace(badStyleValueWithSemicolonPattern, '')
					) : null);
				};

				/**
				 * @param {string} name
				 * @param {*} value
				 */
				var warnValidStyle = function (name, value) {
					if (name.indexOf('-') > -1) {
						warnHyphenatedStyleName(name);
					} else if (badVendoredStyleNamePattern.test(name)) {
						warnBadVendoredStyleName(name);
					} else if (badStyleValueWithSemicolonPattern.test(value)) {
						warnStyleValueWithSemicolon(name, value);
					}
				};
			}

			/**
			 * Operations for dealing with CSS properties.
			 */
			var CSSPropertyOperations = {

				/**
				 * Serializes a mapping of style properties for use as inline styles:
				 *
				 *   > createMarkupForStyles({width: '200px', height: 0})
				 *   "width:200px;height:0;"
				 *
				 * Undefined values are ignored so that declarative programming is easier.
				 * The result should be HTML-escaped before insertion into the DOM.
				 *
				 * @param {object} styles
				 * @return {?string}
				 */
				createMarkupForStyles: function (styles) {
					var serialized = '';
					for (var styleName in styles) {
						if (!styles.hasOwnProperty(styleName)) {
							continue;
						}
						var styleValue = styles[styleName];
						if ("production" !== process.env.NODE_ENV) {
							warnValidStyle(styleName, styleValue);
						}
						if (styleValue != null) {
							serialized += processStyleName(styleName) + ':';
							serialized += dangerousStyleValue(styleName, styleValue) + ';';
						}
					}
					return serialized || null;
				},

				/**
				 * Sets the value for multiple styles on a node.  If a value is specified as
				 * '' (empty string), the corresponding style property will be unset.
				 *
				 * @param {DOMElement} node
				 * @param {object} styles
				 */
				setValueForStyles: function (node, styles) {
					var style = node.style;
					for (var styleName in styles) {
						if (!styles.hasOwnProperty(styleName)) {
							continue;
						}
						if ("production" !== process.env.NODE_ENV) {
							warnValidStyle(styleName, styles[styleName]);
						}
						var styleValue = dangerousStyleValue(styleName, styles[styleName]);
						if (styleName === 'float') {
							styleName = styleFloatAccessor;
						}
						if (styleValue) {
							style[styleName] = styleValue;
						} else {
							var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
							if (expansion) {
								// Shorthand property that IE8 won't like unsetting, so unset each
								// component to placate it
								for (var individualStyleName in expansion) {
									style[individualStyleName] = '';
								}
							} else {
								style[styleName] = '';
							}
						}
					}
				}

			};

			module.exports = CSSPropertyOperations;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 298 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule CSSProperty
		 */

		'use strict';

		/**
		 * CSS properties which accept numbers but are not in units of "px".
		 */
		var isUnitlessNumber = {
			boxFlex: true,
			boxFlexGroup: true,
			columnCount: true,
			flex: true,
			flexGrow: true,
			flexPositive: true,
			flexShrink: true,
			flexNegative: true,
			fontWeight: true,
			lineClamp: true,
			lineHeight: true,
			opacity: true,
			order: true,
			orphans: true,
			widows: true,
			zIndex: true,
			zoom: true,

			// SVG-related properties
			fillOpacity: true,
			strokeDashoffset: true,
			strokeOpacity: true,
			strokeWidth: true
		};

		/**
		 * @param {string} prefix vendor-specific prefix, eg: Webkit
		 * @param {string} key style name, eg: transitionDuration
		 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
		 * WebkitTransitionDuration
		 */
		function prefixKey(prefix, key) {
			return prefix + key.charAt(0).toUpperCase() + key.substring(1);
		}

		/**
		 * Support style names that may come passed in prefixed by adding permutations
		 * of vendor prefixes.
		 */
		var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

		// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
		// infinite loop, because it iterates over the newly added props too.
		Object.keys(isUnitlessNumber).forEach(function (prop) {
			prefixes.forEach(function (prefix) {
				isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
			});
		});

		/**
		 * Most style properties can be unset by doing .style[prop] = '' but IE8
		 * doesn't like doing that with shorthand properties so for the properties that
		 * IE8 breaks on, which are listed here, we instead unset each of the
		 * individual properties. See http://bugs.jquery.com/ticket/12385.
		 * The 4-value 'clock' properties like margin, padding, border-width seem to
		 * behave without any problems. Curiously, list-style works too without any
		 * special prodding.
		 */
		var shorthandPropertyExpansions = {
			background: {
				backgroundImage: true,
				backgroundPosition: true,
				backgroundRepeat: true,
				backgroundColor: true
			},
			border: {
				borderWidth: true,
				borderStyle: true,
				borderColor: true
			},
			borderBottom: {
				borderBottomWidth: true,
				borderBottomStyle: true,
				borderBottomColor: true
			},
			borderLeft: {
				borderLeftWidth: true,
				borderLeftStyle: true,
				borderLeftColor: true
			},
			borderRight: {
				borderRightWidth: true,
				borderRightStyle: true,
				borderRightColor: true
			},
			borderTop: {
				borderTopWidth: true,
				borderTopStyle: true,
				borderTopColor: true
			},
			font: {
				fontStyle: true,
				fontVariant: true,
				fontWeight: true,
				fontSize: true,
				lineHeight: true,
				fontFamily: true
			}
		};

		var CSSProperty = {
			isUnitlessNumber: isUnitlessNumber,
			shorthandPropertyExpansions: shorthandPropertyExpansions
		};

		module.exports = CSSProperty;


		/***/
	},
	/* 299 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ExecutionEnvironment
		 */

		/*jslint evil: true */

		"use strict";

		var canUseDOM = !!(
			(typeof window !== 'undefined' &&
			window.document && window.document.createElement)
		);

		/**
		 * Simple, lightweight module assisting with the detection and context of
		 * Worker. Helps avoid circular dependencies and allows code to reason about
		 * whether or not they are in a Worker, even if they never include the main
		 * `ReactWorker` dependency.
		 */
		var ExecutionEnvironment = {

			canUseDOM: canUseDOM,

			canUseWorkers: typeof Worker !== 'undefined',

			canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

			canUseViewport: canUseDOM && !!window.screen,

			isInWorker: !canUseDOM // For now, this is true - might change in the future.

		};

		module.exports = ExecutionEnvironment;


		/***/
	},
	/* 300 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule camelizeStyleName
		 * @typechecks
		 */

		"use strict";

		var camelize = __webpack_require__(301);

		var msPattern = /^-ms-/;

		/**
		 * Camelcases a hyphenated CSS property name, for example:
		 *
		 *   > camelizeStyleName('background-color')
		 *   < "backgroundColor"
		 *   > camelizeStyleName('-moz-transition')
		 *   < "MozTransition"
		 *   > camelizeStyleName('-ms-transition')
		 *   < "msTransition"
		 *
		 * As Andi Smith suggests
		 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
		 * is converted to lowercase `ms`.
		 *
		 * @param {string} string
		 * @return {string}
		 */
		function camelizeStyleName(string) {
			return camelize(string.replace(msPattern, 'ms-'));
		}

		module.exports = camelizeStyleName;


		/***/
	},
	/* 301 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule camelize
		 * @typechecks
		 */

		var _hyphenPattern = /-(.)/g;

		/**
		 * Camelcases a hyphenated string, for example:
		 *
		 *   > camelize('background-color')
		 *   < "backgroundColor"
		 *
		 * @param {string} string
		 * @return {string}
		 */
		function camelize(string) {
			return string.replace(_hyphenPattern, function (_, character) {
				return character.toUpperCase();
			});
		}

		module.exports = camelize;


		/***/
	},
	/* 302 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule dangerousStyleValue
		 * @typechecks static-only
		 */

		'use strict';

		var CSSProperty = __webpack_require__(298);

		var isUnitlessNumber = CSSProperty.isUnitlessNumber;

		/**
		 * Convert a value into the proper css writable value. The style name `name`
		 * should be logical (no hyphens), as specified
		 * in `CSSProperty.isUnitlessNumber`.
		 *
		 * @param {string} name CSS property name such as `topMargin`.
		 * @param {*} value CSS property value such as `10px`.
		 * @return {string} Normalized style value with dimensions applied.
		 */
		function dangerousStyleValue(name, value) {
			// Note that we've removed escapeTextForBrowser() calls here since the
			// whole string will be escaped when the attribute is injected into
			// the markup. If you provide unsafe user data here they can inject
			// arbitrary CSS which may be problematic (I couldn't repro this):
			// https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
			// http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
			// This is not an XSS hole but instead a potential CSS injection issue
			// which has lead to a greater discussion about how we're going to
			// trust URLs moving forward. See #2115901

			var isEmpty = value == null || typeof value === 'boolean' || value === '';
			if (isEmpty) {
				return '';
			}

			var isNonNumeric = isNaN(value);
			if (isNonNumeric || value === 0 ||
				isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
				return '' + value; // cast to string
			}

			if (typeof value === 'string') {
				value = value.trim();
			}
			return value + 'px';
		}

		module.exports = dangerousStyleValue;


		/***/
	},
	/* 303 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule hyphenateStyleName
		 * @typechecks
		 */

		"use strict";

		var hyphenate = __webpack_require__(304);

		var msPattern = /^ms-/;

		/**
		 * Hyphenates a camelcased CSS property name, for example:
		 *
		 *   > hyphenateStyleName('backgroundColor')
		 *   < "background-color"
		 *   > hyphenateStyleName('MozTransition')
		 *   < "-moz-transition"
		 *   > hyphenateStyleName('msTransition')
		 *   < "-ms-transition"
		 *
		 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
		 * is converted to `-ms-`.
		 *
		 * @param {string} string
		 * @return {string}
		 */
		function hyphenateStyleName(string) {
			return hyphenate(string).replace(msPattern, '-ms-');
		}

		module.exports = hyphenateStyleName;


		/***/
	},
	/* 304 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule hyphenate
		 * @typechecks
		 */

		var _uppercasePattern = /([A-Z])/g;

		/**
		 * Hyphenates a camelcased string, for example:
		 *
		 *   > hyphenate('backgroundColor')
		 *   < "background-color"
		 *
		 * For CSS style names, use `hyphenateStyleName` instead which works properly
		 * with all vendor prefixes, including `ms`.
		 *
		 * @param {string} string
		 * @return {string}
		 */
		function hyphenate(string) {
			return string.replace(_uppercasePattern, '-$1').toLowerCase();
		}

		module.exports = hyphenate;


		/***/
	},
	/* 305 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule memoizeStringOnly
		 * @typechecks static-only
		 */

		'use strict';

		/**
		 * Memoizes the return value of a function that accepts one string argument.
		 *
		 * @param {function} callback
		 * @return {function}
		 */
		function memoizeStringOnly(callback) {
			var cache = {};
			return function (string) {
				if (!cache.hasOwnProperty(string)) {
					cache[string] = callback.call(this, string);
				}
				return cache[string];
			};
		}

		module.exports = memoizeStringOnly;


		/***/
	},
	/* 306 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule DOMChildrenOperations
			 * @typechecks static-only
			 */

			'use strict';

			var Danger = __webpack_require__(307);
			var ReactMultiChildUpdateTypes = __webpack_require__(312);

			var setTextContent = __webpack_require__(313);
			var invariant = __webpack_require__(252);

			/**
			 * Inserts `childNode` as a child of `parentNode` at the `index`.
			 *
			 * @param {DOMElement} parentNode Parent node in which to insert.
			 * @param {DOMElement} childNode Child node to insert.
			 * @param {number} index Index at which to insert the child.
			 * @internal
			 */
			function insertChildAt(parentNode, childNode, index) {
				// By exploiting arrays returning `undefined` for an undefined index, we can
				// rely exclusively on `insertBefore(node, null)` instead of also using
				// `appendChild(node)`. However, using `undefined` is not allowed by all
				// browsers so we must replace it with `null`.
				parentNode.insertBefore(
					childNode,
					parentNode.childNodes[index] || null
				);
			}

			/**
			 * Operations for updating with DOM children.
			 */
			var DOMChildrenOperations = {

				dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

				updateTextContent: setTextContent,

				/**
				 * Updates a component's children by processing a series of updates. The
				 * update configurations are each expected to have a `parentNode` property.
				 *
				 * @param {array<object>} updates List of update configurations.
				 * @param {array<string>} markupList List of markup strings.
				 * @internal
				 */
				processUpdates: function (updates, markupList) {
					var update;
					// Mapping from parent IDs to initial child orderings.
					var initialChildren = null;
					// List of children that will be moved or removed.
					var updatedChildren = null;

					for (var i = 0; i < updates.length; i++) {
						update = updates[i];
						if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
							update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
							var updatedIndex = update.fromIndex;
							var updatedChild = update.parentNode.childNodes[updatedIndex];
							var parentID = update.parentID;

							("production" !== process.env.NODE_ENV ? invariant(
								updatedChild,
								'processUpdates(): Unable to find child %s of element. This ' +
								'probably means the DOM was unexpectedly mutated (e.g., by the ' +
								'browser), usually due to forgetting a <tbody> when using tables, ' +
								'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
								'in an <svg> parent. Try inspecting the child nodes of the element ' +
								'with React ID `%s`.',
								updatedIndex,
								parentID
							) : invariant(updatedChild));

							initialChildren = initialChildren || {};
							initialChildren[parentID] = initialChildren[parentID] || [];
							initialChildren[parentID][updatedIndex] = updatedChild;

							updatedChildren = updatedChildren || [];
							updatedChildren.push(updatedChild);
						}
					}

					var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

					// Remove updated children first so that `toIndex` is consistent.
					if (updatedChildren) {
						for (var j = 0; j < updatedChildren.length; j++) {
							updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
						}
					}

					for (var k = 0; k < updates.length; k++) {
						update = updates[k];
						switch (update.type) {
							case ReactMultiChildUpdateTypes.INSERT_MARKUP:
								insertChildAt(
									update.parentNode,
									renderedMarkup[update.markupIndex],
									update.toIndex
								);
								break;
							case ReactMultiChildUpdateTypes.MOVE_EXISTING:
								insertChildAt(
									update.parentNode,
									initialChildren[update.parentID][update.fromIndex],
									update.toIndex
								);
								break;
							case ReactMultiChildUpdateTypes.TEXT_CONTENT:
								setTextContent(
									update.parentNode,
									update.textContent
								);
								break;
							case ReactMultiChildUpdateTypes.REMOVE_NODE:
								// Already removed by the for-loop above.
								break;
						}
					}
				}

			};

			module.exports = DOMChildrenOperations;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 307 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule Danger
		 * @typechecks static-only
		 */

			/*jslint evil: true, sub: true */

			'use strict';

			var ExecutionEnvironment = __webpack_require__(299);

			var createNodesFromMarkup = __webpack_require__(308);
			var emptyFunction = __webpack_require__(264);
			var getMarkupWrap = __webpack_require__(311);
			var invariant = __webpack_require__(252);

			var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
			var RESULT_INDEX_ATTR = 'data-danger-index';

			/**
			 * Extracts the `nodeName` from a string of markup.
			 *
			 * NOTE: Extracting the `nodeName` does not require a regular expression match
			 * because we make assumptions about React-generated markup (i.e. there are no
			 * spaces surrounding the opening tag and there is at least one attribute).
			 *
			 * @param {string} markup String of markup.
			 * @return {string} Node name of the supplied markup.
			 * @see http://jsperf.com/extract-nodename
			 */
			function getNodeName(markup) {
				return markup.substring(1, markup.indexOf(' '));
			}

			var Danger = {

				/**
				 * Renders markup into an array of nodes. The markup is expected to render
				 * into a list of root nodes. Also, the length of `resultList` and
				 * `markupList` should be the same.
				 *
				 * @param {array<string>} markupList List of markup strings to render.
				 * @return {array<DOMElement>} List of rendered nodes.
				 * @internal
				 */
				dangerouslyRenderMarkup: function (markupList) {
					("production" !== process.env.NODE_ENV ? invariant(
						ExecutionEnvironment.canUseDOM,
						'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
						'thread. Make sure `window` and `document` are available globally ' +
						'before requiring React when unit testing or use ' +
						'React.renderToString for server rendering.'
					) : invariant(ExecutionEnvironment.canUseDOM));
					var nodeName;
					var markupByNodeName = {};
					// Group markup by `nodeName` if a wrap is necessary, else by '*'.
					for (var i = 0; i < markupList.length; i++) {
						("production" !== process.env.NODE_ENV ? invariant(
							markupList[i],
							'dangerouslyRenderMarkup(...): Missing markup.'
						) : invariant(markupList[i]));
						nodeName = getNodeName(markupList[i]);
						nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
						markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
						markupByNodeName[nodeName][i] = markupList[i];
					}
					var resultList = [];
					var resultListAssignmentCount = 0;
					for (nodeName in markupByNodeName) {
						if (!markupByNodeName.hasOwnProperty(nodeName)) {
							continue;
						}
						var markupListByNodeName = markupByNodeName[nodeName];

						// This for-in loop skips the holes of the sparse array. The order of
						// iteration should follow the order of assignment, which happens to match
						// numerical index order, but we don't rely on that.
						var resultIndex;
						for (resultIndex in markupListByNodeName) {
							if (markupListByNodeName.hasOwnProperty(resultIndex)) {
								var markup = markupListByNodeName[resultIndex];

								// Push the requested markup with an additional RESULT_INDEX_ATTR
								// attribute.  If the markup does not start with a < character, it
								// will be discarded below (with an appropriate console.error).
								markupListByNodeName[resultIndex] = markup.replace(
									OPEN_TAG_NAME_EXP,
									// This index will be parsed back out below.
									'$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
								);
							}
						}

						// Render each group of markup with similar wrapping `nodeName`.
						var renderNodes = createNodesFromMarkup(
							markupListByNodeName.join(''),
							emptyFunction // Do nothing special with <script> tags.
						);

						for (var j = 0; j < renderNodes.length; ++j) {
							var renderNode = renderNodes[j];
							if (renderNode.hasAttribute &&
								renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

								resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
								renderNode.removeAttribute(RESULT_INDEX_ATTR);

								("production" !== process.env.NODE_ENV ? invariant(
									!resultList.hasOwnProperty(resultIndex),
									'Danger: Assigning to an already-occupied result index.'
								) : invariant(!resultList.hasOwnProperty(resultIndex)));

								resultList[resultIndex] = renderNode;

								// This should match resultList.length and markupList.length when
								// we're done.
								resultListAssignmentCount += 1;

							} else if ("production" !== process.env.NODE_ENV) {
								console.error(
									'Danger: Discarding unexpected node:',
									renderNode
								);
							}
						}
					}

					// Although resultList was populated out of order, it should now be a dense
					// array.
					("production" !== process.env.NODE_ENV ? invariant(
						resultListAssignmentCount === resultList.length,
						'Danger: Did not assign to every index of resultList.'
					) : invariant(resultListAssignmentCount === resultList.length));

					("production" !== process.env.NODE_ENV ? invariant(
						resultList.length === markupList.length,
						'Danger: Expected markup to render %s nodes, but rendered %s.',
						markupList.length,
						resultList.length
					) : invariant(resultList.length === markupList.length));

					return resultList;
				},

				/**
				 * Replaces a node with a string of markup at its current position within its
				 * parent. The markup must render into a single root node.
				 *
				 * @param {DOMElement} oldChild Child node to replace.
				 * @param {string} markup Markup to render in place of the child node.
				 * @internal
				 */
				dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
					("production" !== process.env.NODE_ENV ? invariant(
						ExecutionEnvironment.canUseDOM,
						'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
						'worker thread. Make sure `window` and `document` are available ' +
						'globally before requiring React when unit testing or use ' +
						'React.renderToString for server rendering.'
					) : invariant(ExecutionEnvironment.canUseDOM));
					("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
					("production" !== process.env.NODE_ENV ? invariant(
						oldChild.tagName.toLowerCase() !== 'html',
						'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
						'<html> node. This is because browser quirks make this unreliable ' +
						'and/or slow. If you want to render to the root you must use ' +
						'server rendering. See React.renderToString().'
					) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

					var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
					oldChild.parentNode.replaceChild(newChild, oldChild);
				}

			};

			module.exports = Danger;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 308 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule createNodesFromMarkup
		 * @typechecks
		 */

			/*jslint evil: true, sub: true */

			var ExecutionEnvironment = __webpack_require__(299);

			var createArrayFromMixed = __webpack_require__(309);
			var getMarkupWrap = __webpack_require__(311);
			var invariant = __webpack_require__(252);

			/**
			 * Dummy container used to render all markup.
			 */
			var dummyNode =
				ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

			/**
			 * Pattern used by `getNodeName`.
			 */
			var nodeNamePattern = /^\s*<(\w+)/;

			/**
			 * Extracts the `nodeName` of the first element in a string of markup.
			 *
			 * @param {string} markup String of markup.
			 * @return {?string} Node name of the supplied markup.
			 */
			function getNodeName(markup) {
				var nodeNameMatch = markup.match(nodeNamePattern);
				return nodeNameMatch && nodeNameMatch[1].toLowerCase();
			}

			/**
			 * Creates an array containing the nodes rendered from the supplied markup. The
			 * optionally supplied `handleScript` function will be invoked once for each
			 * <script> element that is rendered. If no `handleScript` function is supplied,
			 * an exception is thrown if any <script> elements are rendered.
			 *
			 * @param {string} markup A string of valid HTML markup.
			 * @param {?function} handleScript Invoked once for each rendered <script>.
			 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
			 */
			function createNodesFromMarkup(markup, handleScript) {
				var node = dummyNode;
				("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
				var nodeName = getNodeName(markup);

				var wrap = nodeName && getMarkupWrap(nodeName);
				if (wrap) {
					node.innerHTML = wrap[1] + markup + wrap[2];

					var wrapDepth = wrap[0];
					while (wrapDepth--) {
						node = node.lastChild;
					}
				} else {
					node.innerHTML = markup;
				}

				var scripts = node.getElementsByTagName('script');
				if (scripts.length) {
					("production" !== process.env.NODE_ENV ? invariant(
						handleScript,
						'createNodesFromMarkup(...): Unexpected <script> element rendered.'
					) : invariant(handleScript));
					createArrayFromMixed(scripts).forEach(handleScript);
				}

				var nodes = createArrayFromMixed(node.childNodes);
				while (node.lastChild) {
					node.removeChild(node.lastChild);
				}
				return nodes;
			}

			module.exports = createNodesFromMarkup;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 309 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule createArrayFromMixed
		 * @typechecks
		 */

		var toArray = __webpack_require__(310);

		/**
		 * Perform a heuristic test to determine if an object is "array-like".
		 *
		 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
		 *   Joshu replied: "Mu."
		 *
		 * This function determines if its argument has "array nature": it returns
		 * true if the argument is an actual array, an `arguments' object, or an
		 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
		 *
		 * It will return false for other array-like objects like Filelist.
		 *
		 * @param {*} obj
		 * @return {boolean}
		 */
		function hasArrayNature(obj) {
			return (
				// not null/false
				!!obj &&
					// arrays are objects, NodeLists are functions in Safari
				(typeof obj == 'object' || typeof obj == 'function') &&
					// quacks like an array
				('length' in obj) &&
					// not window
				!('setInterval' in obj) &&
					// no DOM node should be considered an array-like
					// a 'select' element has 'length' and 'item' properties on IE8
				(typeof obj.nodeType != 'number') &&
				(
					// a real array
					(// HTMLCollection/NodeList
						(Array.isArray(obj) ||
							// arguments
						('callee' in obj) || 'item' in obj))
				)
			);
		}

		/**
		 * Ensure that the argument is an array by wrapping it in an array if it is not.
		 * Creates a copy of the argument if it is already an array.
		 *
		 * This is mostly useful idiomatically:
		 *
		 *   var createArrayFromMixed = require('createArrayFromMixed');
		 *
		 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
		 *
		 * This allows you to treat `things' as an array, but accept scalars in the API.
		 *
		 * If you need to convert an array-like object, like `arguments`, into an array
		 * use toArray instead.
		 *
		 * @param {*} obj
		 * @return {array}
		 */
		function createArrayFromMixed(obj) {
			if (!hasArrayNature(obj)) {
				return [obj];
			} else if (Array.isArray(obj)) {
				return obj.slice();
			} else {
				return toArray(obj);
			}
		}

		module.exports = createArrayFromMixed;


		/***/
	},
	/* 310 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2014-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule toArray
			 * @typechecks
			 */

			var invariant = __webpack_require__(252);

			/**
			 * Convert array-like objects to arrays.
			 *
			 * This API assumes the caller knows the contents of the data type. For less
			 * well defined inputs use createArrayFromMixed.
			 *
			 * @param {object|function|filelist} obj
			 * @return {array}
			 */
			function toArray(obj) {
				var length = obj.length;

				// Some browse builtin objects can report typeof 'function' (e.g. NodeList in
				// old versions of Safari).
				("production" !== process.env.NODE_ENV ? invariant(
					!Array.isArray(obj) &&
					(typeof obj === 'object' || typeof obj === 'function'),
					'toArray: Array-like object expected'
				) : invariant(!Array.isArray(obj) &&
					(typeof obj === 'object' || typeof obj === 'function')));

				("production" !== process.env.NODE_ENV ? invariant(
					typeof length === 'number',
					'toArray: Object needs a length property'
				) : invariant(typeof length === 'number'));

				("production" !== process.env.NODE_ENV ? invariant(
					length === 0 ||
					(length - 1) in obj,
					'toArray: Object should have keys for indices'
				) : invariant(length === 0 ||
					(length - 1) in obj));

				// Old IE doesn't give collections access to hasOwnProperty. Assume inputs
				// without method will throw during the slice call and skip straight to the
				// fallback.
				if (obj.hasOwnProperty) {
					try {
						return Array.prototype.slice.call(obj);
					} catch (e) {
						// IE < 9 does not support Array#slice on collections objects
					}
				}

				// Fall back to copying key by key. This assumes all keys have a value,
				// so will not preserve sparsely populated inputs.
				var ret = Array(length);
				for (var ii = 0; ii < length; ii++) {
					ret[ii] = obj[ii];
				}
				return ret;
			}

			module.exports = toArray;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 311 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule getMarkupWrap
			 */

			var ExecutionEnvironment = __webpack_require__(299);

			var invariant = __webpack_require__(252);

			/**
			 * Dummy container used to detect which wraps are necessary.
			 */
			var dummyNode =
				ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

			/**
			 * Some browsers cannot use `innerHTML` to render certain elements standalone,
			 * so we wrap them, render the wrapped nodes, then extract the desired node.
			 *
			 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
			 */
			var shouldWrap = {
				// Force wrapping for SVG elements because if they get created inside a <div>,
				// they will be initialized in the wrong namespace (and will not display).
				'circle': true,
				'clipPath': true,
				'defs': true,
				'ellipse': true,
				'g': true,
				'line': true,
				'linearGradient': true,
				'path': true,
				'polygon': true,
				'polyline': true,
				'radialGradient': true,
				'rect': true,
				'stop': true,
				'text': true
			};

			var selectWrap = [1, '<select multiple="true">', '</select>'];
			var tableWrap = [1, '<table>', '</table>'];
			var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

			var svgWrap = [1, '<svg>', '</svg>'];

			var markupWrap = {
				'*': [1, '?<div>', '</div>'],

				'area': [1, '<map>', '</map>'],
				'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
				'legend': [1, '<fieldset>', '</fieldset>'],
				'param': [1, '<object>', '</object>'],
				'tr': [2, '<table><tbody>', '</tbody></table>'],

				'optgroup': selectWrap,
				'option': selectWrap,

				'caption': tableWrap,
				'colgroup': tableWrap,
				'tbody': tableWrap,
				'tfoot': tableWrap,
				'thead': tableWrap,

				'td': trWrap,
				'th': trWrap,

				'circle': svgWrap,
				'clipPath': svgWrap,
				'defs': svgWrap,
				'ellipse': svgWrap,
				'g': svgWrap,
				'line': svgWrap,
				'linearGradient': svgWrap,
				'path': svgWrap,
				'polygon': svgWrap,
				'polyline': svgWrap,
				'radialGradient': svgWrap,
				'rect': svgWrap,
				'stop': svgWrap,
				'text': svgWrap
			};

			/**
			 * Gets the markup wrap configuration for the supplied `nodeName`.
			 *
			 * NOTE: This lazily detects which wraps are necessary for the current browser.
			 *
			 * @param {string} nodeName Lowercase `nodeName`.
			 * @return {?array} Markup wrap configuration, if applicable.
			 */
			function getMarkupWrap(nodeName) {
				("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
				if (!markupWrap.hasOwnProperty(nodeName)) {
					nodeName = '*';
				}
				if (!shouldWrap.hasOwnProperty(nodeName)) {
					if (nodeName === '*') {
						dummyNode.innerHTML = '<link />';
					} else {
						dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
					}
					shouldWrap[nodeName] = !dummyNode.firstChild;
				}
				return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
			}


			module.exports = getMarkupWrap;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 312 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactMultiChildUpdateTypes
		 */

		'use strict';

		var keyMirror = __webpack_require__(267);

		/**
		 * When a component's children are updated, a series of update configuration
		 * objects are created in order to batch and serialize the required changes.
		 *
		 * Enumerates all the possible types of update configurations.
		 *
		 * @internal
		 */
		var ReactMultiChildUpdateTypes = keyMirror({
			INSERT_MARKUP: null,
			MOVE_EXISTING: null,
			REMOVE_NODE: null,
			TEXT_CONTENT: null
		});

		module.exports = ReactMultiChildUpdateTypes;


		/***/
	},
	/* 313 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule setTextContent
		 */

		'use strict';

		var ExecutionEnvironment = __webpack_require__(299);
		var escapeTextContentForBrowser = __webpack_require__(294);
		var setInnerHTML = __webpack_require__(314);

		/**
		 * Set the textContent property of a node, ensuring that whitespace is preserved
		 * even in IE8. innerText is a poor substitute for textContent and, among many
		 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
		 * as it should.
		 *
		 * @param {DOMElement} node
		 * @param {string} text
		 * @internal
		 */
		var setTextContent = function (node, text) {
			node.textContent = text;
		};

		if (ExecutionEnvironment.canUseDOM) {
			if (!('textContent' in document.documentElement)) {
				setTextContent = function (node, text) {
					setInnerHTML(node, escapeTextContentForBrowser(text));
				};
			}
		}

		module.exports = setTextContent;


		/***/
	},
	/* 314 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule setInnerHTML
		 */

		/* globals MSApp */

		'use strict';

		var ExecutionEnvironment = __webpack_require__(299);

		var WHITESPACE_TEST = /^[ \r\n\t\f]/;
		var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

		/**
		 * Set the innerHTML property of a node, ensuring that whitespace is preserved
		 * even in IE8.
		 *
		 * @param {DOMElement} node
		 * @param {string} html
		 * @internal
		 */
		var setInnerHTML = function (node, html) {
			node.innerHTML = html;
		};

		// Win8 apps: Allow all html to be inserted
		if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
			setInnerHTML = function (node, html) {
				MSApp.execUnsafeLocalFunction(function () {
					node.innerHTML = html;
				});
			};
		}

		if (ExecutionEnvironment.canUseDOM) {
			// IE8: When updating a just created node with innerHTML only leading
			// whitespace is removed. When updating an existing node with innerHTML
			// whitespace in root TextNodes is also collapsed.
			// @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

			// Feature detection; only IE8 is known to behave improperly like this.
			var testElement = document.createElement('div');
			testElement.innerHTML = ' ';
			if (testElement.innerHTML === '') {
				setInnerHTML = function (node, html) {
					// Magic theory: IE8 supposedly differentiates between added and updated
					// nodes when processing innerHTML, innerHTML on updated nodes suffers
					// from worse whitespace behavior. Re-adding a node like this triggers
					// the initial and more favorable whitespace behavior.
					// TODO: What to do on a detached node?
					if (node.parentNode) {
						node.parentNode.replaceChild(node, node);
					}

					// We also implement a workaround for non-visible tags disappearing into
					// thin air on IE8, this only happens if there is no visible text
					// in-front of the non-visible tags. Piggyback on the whitespace fix
					// and simply check if any non-visible tags appear in the source.
					if (WHITESPACE_TEST.test(html) ||
						html[0] === '<' && NONVISIBLE_TEST.test(html)) {
						// Recover leading whitespace by temporarily prepending any character.
						// \uFEFF has the potential advantage of being zero-width/invisible.
						node.innerHTML = '\uFEFF' + html;

						// deleteData leaves an empty `TextNode` which offsets the index of all
						// children. Definitely want to avoid this.
						var textNode = node.firstChild;
						if (textNode.data.length === 1) {
							node.removeChild(textNode);
						} else {
							textNode.deleteData(0, 1);
						}
					} else {
						node.innerHTML = html;
					}
				};
			}
		}

		module.exports = setInnerHTML;


		/***/
	},
	/* 315 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactMount
			 */

			'use strict';

			var DOMProperty = __webpack_require__(292);
			var ReactBrowserEventEmitter = __webpack_require__(316);
			var ReactCurrentOwner = __webpack_require__(254);
			var ReactElement = __webpack_require__(260);
			var ReactElementValidator = __webpack_require__(259);
			var ReactEmptyComponent = __webpack_require__(324);
			var ReactInstanceHandles = __webpack_require__(279);
			var ReactInstanceMap = __webpack_require__(284);
			var ReactMarkupChecksum = __webpack_require__(325);
			var ReactPerf = __webpack_require__(255);
			var ReactReconciler = __webpack_require__(256);
			var ReactUpdateQueue = __webpack_require__(282);
			var ReactUpdates = __webpack_require__(249);

			var emptyObject = __webpack_require__(262);
			var containsNode = __webpack_require__(327);
			var getReactRootElementInContainer = __webpack_require__(330);
			var instantiateReactComponent = __webpack_require__(331);
			var invariant = __webpack_require__(252);
			var setInnerHTML = __webpack_require__(314);
			var shouldUpdateReactComponent = __webpack_require__(334);
			var warning = __webpack_require__(263);

			var SEPARATOR = ReactInstanceHandles.SEPARATOR;

			var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
			var nodeCache = {};

			var ELEMENT_NODE_TYPE = 1;
			var DOC_NODE_TYPE = 9;

			/** Mapping from reactRootID to React component instance. */
			var instancesByReactRootID = {};

			/** Mapping from reactRootID to `container` nodes. */
			var containersByReactRootID = {};

			if ("production" !== process.env.NODE_ENV) {
				/** __DEV__-only mapping from reactRootID to root elements. */
				var rootElementsByReactRootID = {};
			}

			// Used to store breadth-first search state in findComponentRoot.
			var findComponentRootReusableArray = [];

			/**
			 * Finds the index of the first character
			 * that's not common between the two given strings.
			 *
			 * @return {number} the index of the character where the strings diverge
			 */
			function firstDifferenceIndex(string1, string2) {
				var minLen = Math.min(string1.length, string2.length);
				for (var i = 0; i < minLen; i++) {
					if (string1.charAt(i) !== string2.charAt(i)) {
						return i;
					}
				}
				return string1.length === string2.length ? -1 : minLen;
			}

			/**
			 * @param {DOMElement} container DOM element that may contain a React component.
			 * @return {?string} A "reactRoot" ID, if a React component is rendered.
			 */
			function getReactRootID(container) {
				var rootElement = getReactRootElementInContainer(container);
				return rootElement && ReactMount.getID(rootElement);
			}

			/**
			 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
			 * element can return its control whose name or ID equals ATTR_NAME. All
			 * DOM nodes support `getAttributeNode` but this can also get called on
			 * other objects so just return '' if we're given something other than a
			 * DOM node (such as window).
			 *
			 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
			 * @return {string} ID of the supplied `domNode`.
			 */
			function getID(node) {
				var id = internalGetID(node);
				if (id) {
					if (nodeCache.hasOwnProperty(id)) {
						var cached = nodeCache[id];
						if (cached !== node) {
							("production" !== process.env.NODE_ENV ? invariant(
								!isValid(cached, id),
								'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
								ATTR_NAME, id
							) : invariant(!isValid(cached, id)));

							nodeCache[id] = node;
						}
					} else {
						nodeCache[id] = node;
					}
				}

				return id;
			}

			function internalGetID(node) {
				// If node is something like a window, document, or text node, none of
				// which support attributes or a .getAttribute method, gracefully return
				// the empty string, as if the attribute were missing.
				return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
			}

			/**
			 * Sets the React-specific ID of the given node.
			 *
			 * @param {DOMElement} node The DOM node whose ID will be set.
			 * @param {string} id The value of the ID attribute.
			 */
			function setID(node, id) {
				var oldID = internalGetID(node);
				if (oldID !== id) {
					delete nodeCache[oldID];
				}
				node.setAttribute(ATTR_NAME, id);
				nodeCache[id] = node;
			}

			/**
			 * Finds the node with the supplied React-generated DOM ID.
			 *
			 * @param {string} id A React-generated DOM ID.
			 * @return {DOMElement} DOM node with the suppled `id`.
			 * @internal
			 */
			function getNode(id) {
				if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
					nodeCache[id] = ReactMount.findReactNodeByID(id);
				}
				return nodeCache[id];
			}

			/**
			 * Finds the node with the supplied public React instance.
			 *
			 * @param {*} instance A public React instance.
			 * @return {?DOMElement} DOM node with the suppled `id`.
			 * @internal
			 */
			function getNodeFromInstance(instance) {
				var id = ReactInstanceMap.get(instance)._rootNodeID;
				if (ReactEmptyComponent.isNullComponentID(id)) {
					return null;
				}
				if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
					nodeCache[id] = ReactMount.findReactNodeByID(id);
				}
				return nodeCache[id];
			}

			/**
			 * A node is "valid" if it is contained by a currently mounted container.
			 *
			 * This means that the node does not have to be contained by a document in
			 * order to be considered valid.
			 *
			 * @param {?DOMElement} node The candidate DOM node.
			 * @param {string} id The expected ID of the node.
			 * @return {boolean} Whether the node is contained by a mounted container.
			 */
			function isValid(node, id) {
				if (node) {
					("production" !== process.env.NODE_ENV ? invariant(
						internalGetID(node) === id,
						'ReactMount: Unexpected modification of `%s`',
						ATTR_NAME
					) : invariant(internalGetID(node) === id));

					var container = ReactMount.findReactContainerForID(id);
					if (container && containsNode(container, node)) {
						return true;
					}
				}

				return false;
			}

			/**
			 * Causes the cache to forget about one React-specific ID.
			 *
			 * @param {string} id The ID to forget.
			 */
			function purgeID(id) {
				delete nodeCache[id];
			}

			var deepestNodeSoFar = null;

			function findDeepestCachedAncestorImpl(ancestorID) {
				var ancestor = nodeCache[ancestorID];
				if (ancestor && isValid(ancestor, ancestorID)) {
					deepestNodeSoFar = ancestor;
				} else {
					// This node isn't populated in the cache, so presumably none of its
					// descendants are. Break out of the loop.
					return false;
				}
			}

			/**
			 * Return the deepest cached node whose ID is a prefix of `targetID`.
			 */
			function findDeepestCachedAncestor(targetID) {
				deepestNodeSoFar = null;
				ReactInstanceHandles.traverseAncestors(
					targetID,
					findDeepestCachedAncestorImpl
				);

				var foundNode = deepestNodeSoFar;
				deepestNodeSoFar = null;
				return foundNode;
			}

			/**
			 * Mounts this component and inserts it into the DOM.
			 *
			 * @param {ReactComponent} componentInstance The instance to mount.
			 * @param {string} rootID DOM ID of the root node.
			 * @param {DOMElement} container DOM element to mount into.
			 * @param {ReactReconcileTransaction} transaction
			 * @param {boolean} shouldReuseMarkup If true, do not insert markup
			 */
			function mountComponentIntoNode(componentInstance,
											rootID,
											container,
											transaction,
											shouldReuseMarkup) {
				var markup = ReactReconciler.mountComponent(
					componentInstance, rootID, transaction, emptyObject
				);
				componentInstance._isTopLevel = true;
				ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
			}

			/**
			 * Batched mount.
			 *
			 * @param {ReactComponent} componentInstance The instance to mount.
			 * @param {string} rootID DOM ID of the root node.
			 * @param {DOMElement} container DOM element to mount into.
			 * @param {boolean} shouldReuseMarkup If true, do not insert markup
			 */
			function batchedMountComponentIntoNode(componentInstance,
												   rootID,
												   container,
												   shouldReuseMarkup) {
				var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
				transaction.perform(
					mountComponentIntoNode,
					null,
					componentInstance,
					rootID,
					container,
					transaction,
					shouldReuseMarkup
				);
				ReactUpdates.ReactReconcileTransaction.release(transaction);
			}

			/**
			 * Mounting is the process of initializing a React component by creating its
			 * representative DOM elements and inserting them into a supplied `container`.
			 * Any prior content inside `container` is destroyed in the process.
			 *
			 *   ReactMount.render(
			 *     component,
			 *     document.getElementById('container')
			 *   );
			 *
			 *   <div id="container">                   <-- Supplied `container`.
			 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
			 *       // ...                                 component.
			 *     </div>
			 *   </div>
			 *
			 * Inside of `container`, the first element rendered is the "reactRoot".
			 */
			var ReactMount = {
				/** Exposed for debugging purposes **/
				_instancesByReactRootID: instancesByReactRootID,

				/**
				 * This is a hook provided to support rendering React components while
				 * ensuring that the apparent scroll position of its `container` does not
				 * change.
				 *
				 * @param {DOMElement} container The `container` being rendered into.
				 * @param {function} renderCallback This must be called once to do the render.
				 */
				scrollMonitor: function (container, renderCallback) {
					renderCallback();
				},

				/**
				 * Take a component that's already mounted into the DOM and replace its props
				 * @param {ReactComponent} prevComponent component instance already in the DOM
				 * @param {ReactElement} nextElement component instance to render
				 * @param {DOMElement} container container to render into
				 * @param {?function} callback function triggered on completion
				 */
				_updateRootComponent: function (prevComponent,
												nextElement,
												container,
												callback) {
					if ("production" !== process.env.NODE_ENV) {
						ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
					}

					ReactMount.scrollMonitor(container, function () {
						ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
						if (callback) {
							ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
						}
					});

					if ("production" !== process.env.NODE_ENV) {
						// Record the root element in case it later gets transplanted.
						rootElementsByReactRootID[getReactRootID(container)] =
							getReactRootElementInContainer(container);
					}

					return prevComponent;
				},

				/**
				 * Register a component into the instance map and starts scroll value
				 * monitoring
				 * @param {ReactComponent} nextComponent component instance to render
				 * @param {DOMElement} container container to render into
				 * @return {string} reactRoot ID prefix
				 */
				_registerComponent: function (nextComponent, container) {
					("production" !== process.env.NODE_ENV ? invariant(
						container && (
							(container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
						),
						'_registerComponent(...): Target container is not a DOM element.'
					) : invariant(container && (
							(container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
						)));

					ReactBrowserEventEmitter.ensureScrollValueMonitoring();

					var reactRootID = ReactMount.registerContainer(container);
					instancesByReactRootID[reactRootID] = nextComponent;
					return reactRootID;
				},

				/**
				 * Render a new component into the DOM.
				 * @param {ReactElement} nextElement element to render
				 * @param {DOMElement} container container to render into
				 * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
				 * @return {ReactComponent} nextComponent
				 */
				_renderNewRootComponent: function (nextElement,
												   container,
												   shouldReuseMarkup) {
					// Various parts of our code (such as ReactCompositeComponent's
					// _renderValidatedComponent) assume that calls to render aren't nested;
					// verify that that's the case.
					("production" !== process.env.NODE_ENV ? warning(
						ReactCurrentOwner.current == null,
						'_renderNewRootComponent(): Render methods should be a pure function ' +
						'of props and state; triggering nested component updates from ' +
						'render is not allowed. If necessary, trigger nested updates in ' +
						'componentDidUpdate.'
					) : null);

					var componentInstance = instantiateReactComponent(nextElement, null);
					var reactRootID = ReactMount._registerComponent(
						componentInstance,
						container
					);

					// The initial render is synchronous but any updates that happen during
					// rendering, in componentWillMount or componentDidMount, will be batched
					// according to the current batching strategy.

					ReactUpdates.batchedUpdates(
						batchedMountComponentIntoNode,
						componentInstance,
						reactRootID,
						container,
						shouldReuseMarkup
					);

					if ("production" !== process.env.NODE_ENV) {
						// Record the root element in case it later gets transplanted.
						rootElementsByReactRootID[reactRootID] =
							getReactRootElementInContainer(container);
					}

					return componentInstance;
				},

				/**
				 * Renders a React component into the DOM in the supplied `container`.
				 *
				 * If the React component was previously rendered into `container`, this will
				 * perform an update on it and only mutate the DOM as necessary to reflect the
				 * latest React component.
				 *
				 * @param {ReactElement} nextElement Component element to render.
				 * @param {DOMElement} container DOM element to render into.
				 * @param {?function} callback function triggered on completion
				 * @return {ReactComponent} Component instance rendered in `container`.
				 */
				render: function (nextElement, container, callback) {
					("production" !== process.env.NODE_ENV ? invariant(
						ReactElement.isValidElement(nextElement),
						'React.render(): Invalid component element.%s',
						(
							typeof nextElement === 'string' ?
							' Instead of passing an element string, make sure to instantiate ' +
							'it by passing it to React.createElement.' :
								typeof nextElement === 'function' ?
								' Instead of passing a component class, make sure to instantiate ' +
								'it by passing it to React.createElement.' :
									// Check if it quacks like an element
									nextElement != null && nextElement.props !== undefined ?
									' This may be caused by unintentionally loading two independent ' +
									'copies of React.' :
										''
						)
					) : invariant(ReactElement.isValidElement(nextElement)));

					var prevComponent = instancesByReactRootID[getReactRootID(container)];

					if (prevComponent) {
						var prevElement = prevComponent._currentElement;
						if (shouldUpdateReactComponent(prevElement, nextElement)) {
							return ReactMount._updateRootComponent(
								prevComponent,
								nextElement,
								container,
								callback
							).getPublicInstance();
						} else {
							ReactMount.unmountComponentAtNode(container);
						}
					}

					var reactRootElement = getReactRootElementInContainer(container);
					var containerHasReactMarkup =
						reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

					if ("production" !== process.env.NODE_ENV) {
						if (!containerHasReactMarkup || reactRootElement.nextSibling) {
							var rootElementSibling = reactRootElement;
							while (rootElementSibling) {
								if (ReactMount.isRenderedByReact(rootElementSibling)) {
									("production" !== process.env.NODE_ENV ? warning(
										false,
										'render(): Target node has markup rendered by React, but there ' +
										'are unrelated nodes as well. This is most commonly caused by ' +
										'white-space inserted around server-rendered markup.'
									) : null);
									break;
								}

								rootElementSibling = rootElementSibling.nextSibling;
							}
						}
					}

					var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

					var component = ReactMount._renderNewRootComponent(
						nextElement,
						container,
						shouldReuseMarkup
					).getPublicInstance();
					if (callback) {
						callback.call(component);
					}
					return component;
				},

				/**
				 * Constructs a component instance of `constructor` with `initialProps` and
				 * renders it into the supplied `container`.
				 *
				 * @param {function} constructor React component constructor.
				 * @param {?object} props Initial props of the component instance.
				 * @param {DOMElement} container DOM element to render into.
				 * @return {ReactComponent} Component instance rendered in `container`.
				 */
				constructAndRenderComponent: function (constructor, props, container) {
					var element = ReactElement.createElement(constructor, props);
					return ReactMount.render(element, container);
				},

				/**
				 * Constructs a component instance of `constructor` with `initialProps` and
				 * renders it into a container node identified by supplied `id`.
				 *
				 * @param {function} componentConstructor React component constructor
				 * @param {?object} props Initial props of the component instance.
				 * @param {string} id ID of the DOM element to render into.
				 * @return {ReactComponent} Component instance rendered in the container node.
				 */
				constructAndRenderComponentByID: function (constructor, props, id) {
					var domNode = document.getElementById(id);
					("production" !== process.env.NODE_ENV ? invariant(
						domNode,
						'Tried to get element with id of "%s" but it is not present on the page.',
						id
					) : invariant(domNode));
					return ReactMount.constructAndRenderComponent(constructor, props, domNode);
				},

				/**
				 * Registers a container node into which React components will be rendered.
				 * This also creates the "reactRoot" ID that will be assigned to the element
				 * rendered within.
				 *
				 * @param {DOMElement} container DOM element to register as a container.
				 * @return {string} The "reactRoot" ID of elements rendered within.
				 */
				registerContainer: function (container) {
					var reactRootID = getReactRootID(container);
					if (reactRootID) {
						// If one exists, make sure it is a valid "reactRoot" ID.
						reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
					}
					if (!reactRootID) {
						// No valid "reactRoot" ID found, create one.
						reactRootID = ReactInstanceHandles.createReactRootID();
					}
					containersByReactRootID[reactRootID] = container;
					return reactRootID;
				},

				/**
				 * Unmounts and destroys the React component rendered in the `container`.
				 *
				 * @param {DOMElement} container DOM element containing a React component.
				 * @return {boolean} True if a component was found in and unmounted from
				 *                   `container`
				 */
				unmountComponentAtNode: function (container) {
					// Various parts of our code (such as ReactCompositeComponent's
					// _renderValidatedComponent) assume that calls to render aren't nested;
					// verify that that's the case. (Strictly speaking, unmounting won't cause a
					// render but we still don't expect to be in a render call here.)
					("production" !== process.env.NODE_ENV ? warning(
						ReactCurrentOwner.current == null,
						'unmountComponentAtNode(): Render methods should be a pure function of ' +
						'props and state; triggering nested component updates from render is ' +
						'not allowed. If necessary, trigger nested updates in ' +
						'componentDidUpdate.'
					) : null);

					("production" !== process.env.NODE_ENV ? invariant(
						container && (
							(container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
						),
						'unmountComponentAtNode(...): Target container is not a DOM element.'
					) : invariant(container && (
							(container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
						)));

					var reactRootID = getReactRootID(container);
					var component = instancesByReactRootID[reactRootID];
					if (!component) {
						return false;
					}
					ReactMount.unmountComponentFromNode(component, container);
					delete instancesByReactRootID[reactRootID];
					delete containersByReactRootID[reactRootID];
					if ("production" !== process.env.NODE_ENV) {
						delete rootElementsByReactRootID[reactRootID];
					}
					return true;
				},

				/**
				 * Unmounts a component and removes it from the DOM.
				 *
				 * @param {ReactComponent} instance React component instance.
				 * @param {DOMElement} container DOM element to unmount from.
				 * @final
				 * @internal
				 * @see {ReactMount.unmountComponentAtNode}
				 */
				unmountComponentFromNode: function (instance, container) {
					ReactReconciler.unmountComponent(instance);

					if (container.nodeType === DOC_NODE_TYPE) {
						container = container.documentElement;
					}

					// http://jsperf.com/emptying-a-node
					while (container.lastChild) {
						container.removeChild(container.lastChild);
					}
				},

				/**
				 * Finds the container DOM element that contains React component to which the
				 * supplied DOM `id` belongs.
				 *
				 * @param {string} id The ID of an element rendered by a React component.
				 * @return {?DOMElement} DOM element that contains the `id`.
				 */
				findReactContainerForID: function (id) {
					var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
					var container = containersByReactRootID[reactRootID];

					if ("production" !== process.env.NODE_ENV) {
						var rootElement = rootElementsByReactRootID[reactRootID];
						if (rootElement && rootElement.parentNode !== container) {
							("production" !== process.env.NODE_ENV ? invariant(
								// Call internalGetID here because getID calls isValid which calls
								// findReactContainerForID (this function).
								internalGetID(rootElement) === reactRootID,
								'ReactMount: Root element ID differed from reactRootID.'
							) : invariant(// Call internalGetID here because getID calls isValid which calls
								// findReactContainerForID (this function).
								internalGetID(rootElement) === reactRootID));

							var containerChild = container.firstChild;
							if (containerChild &&
								reactRootID === internalGetID(containerChild)) {
								// If the container has a new child with the same ID as the old
								// root element, then rootElementsByReactRootID[reactRootID] is
								// just stale and needs to be updated. The case that deserves a
								// warning is when the container is empty.
								rootElementsByReactRootID[reactRootID] = containerChild;
							} else {
								("production" !== process.env.NODE_ENV ? warning(
									false,
									'ReactMount: Root element has been removed from its original ' +
									'container. New container:', rootElement.parentNode
								) : null);
							}
						}
					}

					return container;
				},

				/**
				 * Finds an element rendered by React with the supplied ID.
				 *
				 * @param {string} id ID of a DOM node in the React component.
				 * @return {DOMElement} Root DOM node of the React component.
				 */
				findReactNodeByID: function (id) {
					var reactRoot = ReactMount.findReactContainerForID(id);
					return ReactMount.findComponentRoot(reactRoot, id);
				},

				/**
				 * True if the supplied `node` is rendered by React.
				 *
				 * @param {*} node DOM Element to check.
				 * @return {boolean} True if the DOM Element appears to be rendered by React.
				 * @internal
				 */
				isRenderedByReact: function (node) {
					if (node.nodeType !== 1) {
						// Not a DOMElement, therefore not a React component
						return false;
					}
					var id = ReactMount.getID(node);
					return id ? id.charAt(0) === SEPARATOR : false;
				},

				/**
				 * Traverses up the ancestors of the supplied node to find a node that is a
				 * DOM representation of a React component.
				 *
				 * @param {*} node
				 * @return {?DOMEventTarget}
				 * @internal
				 */
				getFirstReactDOM: function (node) {
					var current = node;
					while (current && current.parentNode !== current) {
						if (ReactMount.isRenderedByReact(current)) {
							return current;
						}
						current = current.parentNode;
					}
					return null;
				},

				/**
				 * Finds a node with the supplied `targetID` inside of the supplied
				 * `ancestorNode`.  Exploits the ID naming scheme to perform the search
				 * quickly.
				 *
				 * @param {DOMEventTarget} ancestorNode Search from this root.
				 * @pararm {string} targetID ID of the DOM representation of the component.
				 * @return {DOMEventTarget} DOM node with the supplied `targetID`.
				 * @internal
				 */
				findComponentRoot: function (ancestorNode, targetID) {
					var firstChildren = findComponentRootReusableArray;
					var childIndex = 0;

					var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

					firstChildren[0] = deepestAncestor.firstChild;
					firstChildren.length = 1;

					while (childIndex < firstChildren.length) {
						var child = firstChildren[childIndex++];
						var targetChild;

						while (child) {
							var childID = ReactMount.getID(child);
							if (childID) {
								// Even if we find the node we're looking for, we finish looping
								// through its siblings to ensure they're cached so that we don't have
								// to revisit this node again. Otherwise, we make n^2 calls to getID
								// when visiting the many children of a single node in order.

								if (targetID === childID) {
									targetChild = child;
								} else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
									// If we find a child whose ID is an ancestor of the given ID,
									// then we can be sure that we only want to search the subtree
									// rooted at this child, so we can throw out the rest of the
									// search state.
									firstChildren.length = childIndex = 0;
									firstChildren.push(child.firstChild);
								}

							} else {
								// If this child had no ID, then there's a chance that it was
								// injected automatically by the browser, as when a `<table>`
								// element sprouts an extra `<tbody>` child as a side effect of
								// `.innerHTML` parsing. Optimistically continue down this
								// branch, but not before examining the other siblings.
								firstChildren.push(child.firstChild);
							}

							child = child.nextSibling;
						}

						if (targetChild) {
							// Emptying firstChildren/findComponentRootReusableArray is
							// not necessary for correctness, but it helps the GC reclaim
							// any nodes that were left at the end of the search.
							firstChildren.length = 0;

							return targetChild;
						}
					}

					firstChildren.length = 0;

					("production" !== process.env.NODE_ENV ? invariant(
						false,
						'findComponentRoot(..., %s): Unable to find element. This probably ' +
						'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
						'usually due to forgetting a <tbody> when using tables, nesting tags ' +
						'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
						'parent. ' +
						'Try inspecting the child nodes of the element with React ID `%s`.',
						targetID,
						ReactMount.getID(ancestorNode)
					) : invariant(false));
				},

				_mountImageIntoNode: function (markup, container, shouldReuseMarkup) {
					("production" !== process.env.NODE_ENV ? invariant(
						container && (
							(container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
						),
						'mountComponentIntoNode(...): Target container is not valid.'
					) : invariant(container && (
							(container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
						)));

					if (shouldReuseMarkup) {
						var rootElement = getReactRootElementInContainer(container);
						if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
							return;
						} else {
							var checksum = rootElement.getAttribute(
								ReactMarkupChecksum.CHECKSUM_ATTR_NAME
							);
							rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

							var rootMarkup = rootElement.outerHTML;
							rootElement.setAttribute(
								ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
								checksum
							);

							var diffIndex = firstDifferenceIndex(markup, rootMarkup);
							var difference = ' (client) ' +
								markup.substring(diffIndex - 20, diffIndex + 20) +
								'\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

							("production" !== process.env.NODE_ENV ? invariant(
								container.nodeType !== DOC_NODE_TYPE,
								'You\'re trying to render a component to the document using ' +
								'server rendering but the checksum was invalid. This usually ' +
								'means you rendered a different component type or props on ' +
								'the client from the one on the server, or your render() ' +
								'methods are impure. React cannot handle this case due to ' +
								'cross-browser quirks by rendering at the document root. You ' +
								'should look for environment dependent code in your components ' +
								'and ensure the props are the same client and server side:\n%s',
								difference
							) : invariant(container.nodeType !== DOC_NODE_TYPE));

							if ("production" !== process.env.NODE_ENV) {
								("production" !== process.env.NODE_ENV ? warning(
									false,
									'React attempted to reuse markup in a container but the ' +
									'checksum was invalid. This generally means that you are ' +
									'using server rendering and the markup generated on the ' +
									'server was not what the client was expecting. React injected ' +
									'new markup to compensate which works but you have lost many ' +
									'of the benefits of server rendering. Instead, figure out ' +
									'why the markup being generated is different on the client ' +
									'or server:\n%s',
									difference
								) : null);
							}
						}
					}

					("production" !== process.env.NODE_ENV ? invariant(
						container.nodeType !== DOC_NODE_TYPE,
						'You\'re trying to render a component to the document but ' +
						'you didn\'t use server rendering. We can\'t do this ' +
						'without using server rendering due to cross-browser quirks. ' +
						'See React.renderToString() for server rendering.'
					) : invariant(container.nodeType !== DOC_NODE_TYPE));

					setInnerHTML(container, markup);
				},

				/**
				 * React ID utilities.
				 */

				getReactRootID: getReactRootID,

				getID: getID,

				setID: setID,

				getNode: getNode,

				getNodeFromInstance: getNodeFromInstance,

				purgeID: purgeID
			};

			ReactPerf.measureMethods(ReactMount, 'ReactMount', {
				_renderNewRootComponent: '_renderNewRootComponent',
				_mountImageIntoNode: '_mountImageIntoNode'
			});

			module.exports = ReactMount;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 316 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactBrowserEventEmitter
		 * @typechecks static-only
		 */

		'use strict';

		var EventConstants = __webpack_require__(276);
		var EventPluginHub = __webpack_require__(317);
		var EventPluginRegistry = __webpack_require__(318);
		var ReactEventEmitterMixin = __webpack_require__(321);
		var ViewportMetrics = __webpack_require__(322);

		var assign = __webpack_require__(253);
		var isEventSupported = __webpack_require__(323);

		/**
		 * Summary of `ReactBrowserEventEmitter` event handling:
		 *
		 *  - Top-level delegation is used to trap most native browser events. This
		 *    may only occur in the main thread and is the responsibility of
		 *    ReactEventListener, which is injected and can therefore support pluggable
		 *    event sources. This is the only work that occurs in the main thread.
		 *
		 *  - We normalize and de-duplicate events to account for browser quirks. This
		 *    may be done in the worker thread.
		 *
		 *  - Forward these native events (with the associated top-level type used to
		 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
		 *    to extract any synthetic events.
		 *
		 *  - The `EventPluginHub` will then process each event by annotating them with
		 *    "dispatches", a sequence of listeners and IDs that care about that event.
		 *
		 *  - The `EventPluginHub` then dispatches the events.
		 *
		 * Overview of React and the event system:
		 *
		 * +------------+    .
		 * |    DOM     |    .
		 * +------------+    .
		 *       |           .
		 *       v           .
		 * +------------+    .
		 * | ReactEvent |    .
		 * |  Listener  |    .
		 * +------------+    .                         +-----------+
		 *       |           .               +--------+|SimpleEvent|
		 *       |           .               |         |Plugin     |
		 * +-----|------+    .               v         +-----------+
		 * |     |      |    .    +--------------+                    +------------+
		 * |     +-----------.--->|EventPluginHub|                    |    Event   |
		 * |            |    .    |              |     +-----------+  | Propagators|
		 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
		 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
		 * |            |    .    |              |     +-----------+  |  utilities |
		 * |     +-----------.--->|              |                    +------------+
		 * |     |      |    .    +--------------+
		 * +-----|------+    .                ^        +-----------+
		 *       |           .                |        |Enter/Leave|
		 *       +           .                +-------+|Plugin     |
		 * +-------------+   .                         +-----------+
		 * | application |   .
		 * |-------------|   .
		 * |             |   .
		 * |             |   .
		 * +-------------+   .
		 *                   .
		 *    React Core     .  General Purpose Event Plugin System
		 */

		var alreadyListeningTo = {};
		var isMonitoringScrollValue = false;
		var reactTopListenersCounter = 0;

		// For events like 'submit' which don't consistently bubble (which we trap at a
		// lower node than `document`), binding at `document` would cause duplicate
		// events so we don't include them here
		var topEventMapping = {
			topBlur: 'blur',
			topChange: 'change',
			topClick: 'click',
			topCompositionEnd: 'compositionend',
			topCompositionStart: 'compositionstart',
			topCompositionUpdate: 'compositionupdate',
			topContextMenu: 'contextmenu',
			topCopy: 'copy',
			topCut: 'cut',
			topDoubleClick: 'dblclick',
			topDrag: 'drag',
			topDragEnd: 'dragend',
			topDragEnter: 'dragenter',
			topDragExit: 'dragexit',
			topDragLeave: 'dragleave',
			topDragOver: 'dragover',
			topDragStart: 'dragstart',
			topDrop: 'drop',
			topFocus: 'focus',
			topInput: 'input',
			topKeyDown: 'keydown',
			topKeyPress: 'keypress',
			topKeyUp: 'keyup',
			topMouseDown: 'mousedown',
			topMouseMove: 'mousemove',
			topMouseOut: 'mouseout',
			topMouseOver: 'mouseover',
			topMouseUp: 'mouseup',
			topPaste: 'paste',
			topScroll: 'scroll',
			topSelectionChange: 'selectionchange',
			topTextInput: 'textInput',
			topTouchCancel: 'touchcancel',
			topTouchEnd: 'touchend',
			topTouchMove: 'touchmove',
			topTouchStart: 'touchstart',
			topWheel: 'wheel'
		};

		/**
		 * To ensure no conflicts with other potential React instances on the page
		 */
		var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

		function getListeningForDocument(mountAt) {
			// In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
			// directly.
			if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
				mountAt[topListenersIDKey] = reactTopListenersCounter++;
				alreadyListeningTo[mountAt[topListenersIDKey]] = {};
			}
			return alreadyListeningTo[mountAt[topListenersIDKey]];
		}

		/**
		 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
		 * example:
		 *
		 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
		 *
		 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
		 *
		 * @internal
		 */
		var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

			/**
			 * Injectable event backend
			 */
			ReactEventListener: null,

			injection: {
				/**
				 * @param {object} ReactEventListener
				 */
				injectReactEventListener: function (ReactEventListener) {
					ReactEventListener.setHandleTopLevel(
						ReactBrowserEventEmitter.handleTopLevel
					);
					ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
				}
			},

			/**
			 * Sets whether or not any created callbacks should be enabled.
			 *
			 * @param {boolean} enabled True if callbacks should be enabled.
			 */
			setEnabled: function (enabled) {
				if (ReactBrowserEventEmitter.ReactEventListener) {
					ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
				}
			},

			/**
			 * @return {boolean} True if callbacks are enabled.
			 */
			isEnabled: function () {
				return !!(
					(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
				);
			},

			/**
			 * We listen for bubbled touch events on the document object.
			 *
			 * Firefox v8.01 (and possibly others) exhibited strange behavior when
			 * mounting `onmousemove` events at some node that was not the document
			 * element. The symptoms were that if your mouse is not moving over something
			 * contained within that mount point (for example on the background) the
			 * top-level listeners for `onmousemove` won't be called. However, if you
			 * register the `mousemove` on the document object, then it will of course
			 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
			 * top-level listeners to the document object only, at least for these
			 * movement types of events and possibly all events.
			 *
			 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
			 *
			 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
			 * they bubble to document.
			 *
			 * @param {string} registrationName Name of listener (e.g. `onClick`).
			 * @param {object} contentDocumentHandle Document which owns the container
			 */
			listenTo: function (registrationName, contentDocumentHandle) {
				var mountAt = contentDocumentHandle;
				var isListening = getListeningForDocument(mountAt);
				var dependencies = EventPluginRegistry.
					registrationNameDependencies[registrationName];

				var topLevelTypes = EventConstants.topLevelTypes;
				for (var i = 0, l = dependencies.length; i < l; i++) {
					var dependency = dependencies[i];
					if (!(
							(isListening.hasOwnProperty(dependency) && isListening[dependency])
						)) {
						if (dependency === topLevelTypes.topWheel) {
							if (isEventSupported('wheel')) {
								ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
									topLevelTypes.topWheel,
									'wheel',
									mountAt
								);
							} else if (isEventSupported('mousewheel')) {
								ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
									topLevelTypes.topWheel,
									'mousewheel',
									mountAt
								);
							} else {
								// Firefox needs to capture a different mouse scroll event.
								// @see http://www.quirksmode.org/dom/events/tests/scroll.html
								ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
									topLevelTypes.topWheel,
									'DOMMouseScroll',
									mountAt
								);
							}
						} else if (dependency === topLevelTypes.topScroll) {

							if (isEventSupported('scroll', true)) {
								ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
									topLevelTypes.topScroll,
									'scroll',
									mountAt
								);
							} else {
								ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
									topLevelTypes.topScroll,
									'scroll',
									ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
								);
							}
						} else if (dependency === topLevelTypes.topFocus ||
							dependency === topLevelTypes.topBlur) {

							if (isEventSupported('focus', true)) {
								ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
									topLevelTypes.topFocus,
									'focus',
									mountAt
								);
								ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
									topLevelTypes.topBlur,
									'blur',
									mountAt
								);
							} else if (isEventSupported('focusin')) {
								// IE has `focusin` and `focusout` events which bubble.
								// @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
								ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
									topLevelTypes.topFocus,
									'focusin',
									mountAt
								);
								ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
									topLevelTypes.topBlur,
									'focusout',
									mountAt
								);
							}

							// to make sure blur and focus event listeners are only attached once
							isListening[topLevelTypes.topBlur] = true;
							isListening[topLevelTypes.topFocus] = true;
						} else if (topEventMapping.hasOwnProperty(dependency)) {
							ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
								dependency,
								topEventMapping[dependency],
								mountAt
							);
						}

						isListening[dependency] = true;
					}
				}
			},

			trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
				return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
					topLevelType,
					handlerBaseName,
					handle
				);
			},

			trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
				return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
					topLevelType,
					handlerBaseName,
					handle
				);
			},

			/**
			 * Listens to window scroll and resize events. We cache scroll values so that
			 * application code can access them without triggering reflows.
			 *
			 * NOTE: Scroll events do not bubble.
			 *
			 * @see http://www.quirksmode.org/dom/events/scroll.html
			 */
			ensureScrollValueMonitoring: function () {
				if (!isMonitoringScrollValue) {
					var refresh = ViewportMetrics.refreshScrollValues;
					ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
					isMonitoringScrollValue = true;
				}
			},

			eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

			registrationNameModules: EventPluginHub.registrationNameModules,

			putListener: EventPluginHub.putListener,

			getListener: EventPluginHub.getListener,

			deleteListener: EventPluginHub.deleteListener,

			deleteAllListeners: EventPluginHub.deleteAllListeners

		});

		module.exports = ReactBrowserEventEmitter;


		/***/
	},
	/* 317 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule EventPluginHub
			 */

			'use strict';

			var EventPluginRegistry = __webpack_require__(318);
			var EventPluginUtils = __webpack_require__(275);

			var accumulateInto = __webpack_require__(319);
			var forEachAccumulated = __webpack_require__(320);
			var invariant = __webpack_require__(252);

			/**
			 * Internal store for event listeners
			 */
			var listenerBank = {};

			/**
			 * Internal queue of events that have accumulated their dispatches and are
			 * waiting to have their dispatches executed.
			 */
			var eventQueue = null;

			/**
			 * Dispatches an event and releases it back into the pool, unless persistent.
			 *
			 * @param {?object} event Synthetic event to be dispatched.
			 * @private
			 */
			var executeDispatchesAndRelease = function (event) {
				if (event) {
					var executeDispatch = EventPluginUtils.executeDispatch;
					// Plugins can provide custom behavior when dispatching events.
					var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
					if (PluginModule && PluginModule.executeDispatch) {
						executeDispatch = PluginModule.executeDispatch;
					}
					EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

					if (!event.isPersistent()) {
						event.constructor.release(event);
					}
				}
			};

			/**
			 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
			 *   hierarchy given ids of the logical DOM elements involved.
			 */
			var InstanceHandle = null;

			function validateInstanceHandle() {
				var valid =
					InstanceHandle &&
					InstanceHandle.traverseTwoPhase &&
					InstanceHandle.traverseEnterLeave;
				("production" !== process.env.NODE_ENV ? invariant(
					valid,
					'InstanceHandle not injected before use!'
				) : invariant(valid));
			}

			/**
			 * This is a unified interface for event plugins to be installed and configured.
			 *
			 * Event plugins can implement the following properties:
			 *
			 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
			 *     Required. When a top-level event is fired, this method is expected to
			 *     extract synthetic events that will in turn be queued and dispatched.
			 *
			 *   `eventTypes` {object}
			 *     Optional, plugins that fire events must publish a mapping of registration
			 *     names that are used to register listeners. Values of this mapping must
			 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
			 *
			 *   `executeDispatch` {function(object, function, string)}
			 *     Optional, allows plugins to override how an event gets dispatched. By
			 *     default, the listener is simply invoked.
			 *
			 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
			 *
			 * @public
			 */
			var EventPluginHub = {

				/**
				 * Methods for injecting dependencies.
				 */
				injection: {

					/**
					 * @param {object} InjectedMount
					 * @public
					 */
					injectMount: EventPluginUtils.injection.injectMount,

					/**
					 * @param {object} InjectedInstanceHandle
					 * @public
					 */
					injectInstanceHandle: function (InjectedInstanceHandle) {
						InstanceHandle = InjectedInstanceHandle;
						if ("production" !== process.env.NODE_ENV) {
							validateInstanceHandle();
						}
					},

					getInstanceHandle: function () {
						if ("production" !== process.env.NODE_ENV) {
							validateInstanceHandle();
						}
						return InstanceHandle;
					},

					/**
					 * @param {array} InjectedEventPluginOrder
					 * @public
					 */
					injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

					/**
					 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
					 */
					injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

				},

				eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

				registrationNameModules: EventPluginRegistry.registrationNameModules,

				/**
				 * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
				 *
				 * @param {string} id ID of the DOM element.
				 * @param {string} registrationName Name of listener (e.g. `onClick`).
				 * @param {?function} listener The callback to store.
				 */
				putListener: function (id, registrationName, listener) {
					("production" !== process.env.NODE_ENV ? invariant(
						!listener || typeof listener === 'function',
						'Expected %s listener to be a function, instead got type %s',
						registrationName, typeof listener
					) : invariant(!listener || typeof listener === 'function'));

					var bankForRegistrationName =
						listenerBank[registrationName] || (listenerBank[registrationName] = {});
					bankForRegistrationName[id] = listener;
				},

				/**
				 * @param {string} id ID of the DOM element.
				 * @param {string} registrationName Name of listener (e.g. `onClick`).
				 * @return {?function} The stored callback.
				 */
				getListener: function (id, registrationName) {
					var bankForRegistrationName = listenerBank[registrationName];
					return bankForRegistrationName && bankForRegistrationName[id];
				},

				/**
				 * Deletes a listener from the registration bank.
				 *
				 * @param {string} id ID of the DOM element.
				 * @param {string} registrationName Name of listener (e.g. `onClick`).
				 */
				deleteListener: function (id, registrationName) {
					var bankForRegistrationName = listenerBank[registrationName];
					if (bankForRegistrationName) {
						delete bankForRegistrationName[id];
					}
				},

				/**
				 * Deletes all listeners for the DOM element with the supplied ID.
				 *
				 * @param {string} id ID of the DOM element.
				 */
				deleteAllListeners: function (id) {
					for (var registrationName in listenerBank) {
						delete listenerBank[registrationName][id];
					}
				},

				/**
				 * Allows registered plugins an opportunity to extract events from top-level
				 * native browser events.
				 *
				 * @param {string} topLevelType Record from `EventConstants`.
				 * @param {DOMEventTarget} topLevelTarget The listening component root node.
				 * @param {string} topLevelTargetID ID of `topLevelTarget`.
				 * @param {object} nativeEvent Native browser event.
				 * @return {*} An accumulation of synthetic events.
				 * @internal
				 */
				extractEvents: function (topLevelType,
										 topLevelTarget,
										 topLevelTargetID,
										 nativeEvent) {
					var events;
					var plugins = EventPluginRegistry.plugins;
					for (var i = 0, l = plugins.length; i < l; i++) {
						// Not every plugin in the ordering may be loaded at runtime.
						var possiblePlugin = plugins[i];
						if (possiblePlugin) {
							var extractedEvents = possiblePlugin.extractEvents(
								topLevelType,
								topLevelTarget,
								topLevelTargetID,
								nativeEvent
							);
							if (extractedEvents) {
								events = accumulateInto(events, extractedEvents);
							}
						}
					}
					return events;
				},

				/**
				 * Enqueues a synthetic event that should be dispatched when
				 * `processEventQueue` is invoked.
				 *
				 * @param {*} events An accumulation of synthetic events.
				 * @internal
				 */
				enqueueEvents: function (events) {
					if (events) {
						eventQueue = accumulateInto(eventQueue, events);
					}
				},

				/**
				 * Dispatches all synthetic events on the event queue.
				 *
				 * @internal
				 */
				processEventQueue: function () {
					// Set `eventQueue` to null before processing it so that we can tell if more
					// events get enqueued while processing.
					var processingEventQueue = eventQueue;
					eventQueue = null;
					forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
					("production" !== process.env.NODE_ENV ? invariant(
						!eventQueue,
						'processEventQueue(): Additional events were enqueued while processing ' +
						'an event queue. Support for this has not yet been implemented.'
					) : invariant(!eventQueue));
				},

				/**
				 * These are needed for tests only. Do not use!
				 */
				__purge: function () {
					listenerBank = {};
				},

				__getListenerBank: function () {
					return listenerBank;
				}

			};

			module.exports = EventPluginHub;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 318 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule EventPluginRegistry
			 * @typechecks static-only
			 */

			'use strict';

			var invariant = __webpack_require__(252);

			/**
			 * Injectable ordering of event plugins.
			 */
			var EventPluginOrder = null;

			/**
			 * Injectable mapping from names to event plugin modules.
			 */
			var namesToPlugins = {};

			/**
			 * Recomputes the plugin list using the injected plugins and plugin ordering.
			 *
			 * @private
			 */
			function recomputePluginOrdering() {
				if (!EventPluginOrder) {
					// Wait until an `EventPluginOrder` is injected.
					return;
				}
				for (var pluginName in namesToPlugins) {
					var PluginModule = namesToPlugins[pluginName];
					var pluginIndex = EventPluginOrder.indexOf(pluginName);
					("production" !== process.env.NODE_ENV ? invariant(
						pluginIndex > -1,
						'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
						'the plugin ordering, `%s`.',
						pluginName
					) : invariant(pluginIndex > -1));
					if (EventPluginRegistry.plugins[pluginIndex]) {
						continue;
					}
					("production" !== process.env.NODE_ENV ? invariant(
						PluginModule.extractEvents,
						'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
						'method, but `%s` does not.',
						pluginName
					) : invariant(PluginModule.extractEvents));
					EventPluginRegistry.plugins[pluginIndex] = PluginModule;
					var publishedEvents = PluginModule.eventTypes;
					for (var eventName in publishedEvents) {
						("production" !== process.env.NODE_ENV ? invariant(
							publishEventForPlugin(
								publishedEvents[eventName],
								PluginModule,
								eventName
							),
							'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
							eventName,
							pluginName
						) : invariant(publishEventForPlugin(
							publishedEvents[eventName],
							PluginModule,
							eventName
						)));
					}
				}
			}

			/**
			 * Publishes an event so that it can be dispatched by the supplied plugin.
			 *
			 * @param {object} dispatchConfig Dispatch configuration for the event.
			 * @param {object} PluginModule Plugin publishing the event.
			 * @return {boolean} True if the event was successfully published.
			 * @private
			 */
			function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
				("production" !== process.env.NODE_ENV ? invariant(
					!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
					'EventPluginHub: More than one plugin attempted to publish the same ' +
					'event name, `%s`.',
					eventName
				) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
				EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

				var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
				if (phasedRegistrationNames) {
					for (var phaseName in phasedRegistrationNames) {
						if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
							var phasedRegistrationName = phasedRegistrationNames[phaseName];
							publishRegistrationName(
								phasedRegistrationName,
								PluginModule,
								eventName
							);
						}
					}
					return true;
				} else if (dispatchConfig.registrationName) {
					publishRegistrationName(
						dispatchConfig.registrationName,
						PluginModule,
						eventName
					);
					return true;
				}
				return false;
			}

			/**
			 * Publishes a registration name that is used to identify dispatched events and
			 * can be used with `EventPluginHub.putListener` to register listeners.
			 *
			 * @param {string} registrationName Registration name to add.
			 * @param {object} PluginModule Plugin publishing the event.
			 * @private
			 */
			function publishRegistrationName(registrationName, PluginModule, eventName) {
				("production" !== process.env.NODE_ENV ? invariant(
					!EventPluginRegistry.registrationNameModules[registrationName],
					'EventPluginHub: More than one plugin attempted to publish the same ' +
					'registration name, `%s`.',
					registrationName
				) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
				EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
				EventPluginRegistry.registrationNameDependencies[registrationName] =
					PluginModule.eventTypes[eventName].dependencies;
			}

			/**
			 * Registers plugins so that they can extract and dispatch events.
			 *
			 * @see {EventPluginHub}
			 */
			var EventPluginRegistry = {

				/**
				 * Ordered list of injected plugins.
				 */
				plugins: [],

				/**
				 * Mapping from event name to dispatch config
				 */
				eventNameDispatchConfigs: {},

				/**
				 * Mapping from registration name to plugin module
				 */
				registrationNameModules: {},

				/**
				 * Mapping from registration name to event name
				 */
				registrationNameDependencies: {},

				/**
				 * Injects an ordering of plugins (by plugin name). This allows the ordering
				 * to be decoupled from injection of the actual plugins so that ordering is
				 * always deterministic regardless of packaging, on-the-fly injection, etc.
				 *
				 * @param {array} InjectedEventPluginOrder
				 * @internal
				 * @see {EventPluginHub.injection.injectEventPluginOrder}
				 */
				injectEventPluginOrder: function (InjectedEventPluginOrder) {
					("production" !== process.env.NODE_ENV ? invariant(
						!EventPluginOrder,
						'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
						'once. You are likely trying to load more than one copy of React.'
					) : invariant(!EventPluginOrder));
					// Clone the ordering so it cannot be dynamically mutated.
					EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
					recomputePluginOrdering();
				},

				/**
				 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
				 * in the ordering injected by `injectEventPluginOrder`.
				 *
				 * Plugins can be injected as part of page initialization or on-the-fly.
				 *
				 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
				 * @internal
				 * @see {EventPluginHub.injection.injectEventPluginsByName}
				 */
				injectEventPluginsByName: function (injectedNamesToPlugins) {
					var isOrderingDirty = false;
					for (var pluginName in injectedNamesToPlugins) {
						if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
							continue;
						}
						var PluginModule = injectedNamesToPlugins[pluginName];
						if (!namesToPlugins.hasOwnProperty(pluginName) ||
							namesToPlugins[pluginName] !== PluginModule) {
							("production" !== process.env.NODE_ENV ? invariant(
								!namesToPlugins[pluginName],
								'EventPluginRegistry: Cannot inject two different event plugins ' +
								'using the same name, `%s`.',
								pluginName
							) : invariant(!namesToPlugins[pluginName]));
							namesToPlugins[pluginName] = PluginModule;
							isOrderingDirty = true;
						}
					}
					if (isOrderingDirty) {
						recomputePluginOrdering();
					}
				},

				/**
				 * Looks up the plugin for the supplied event.
				 *
				 * @param {object} event A synthetic event.
				 * @return {?object} The plugin that created the supplied event.
				 * @internal
				 */
				getPluginModuleForEvent: function (event) {
					var dispatchConfig = event.dispatchConfig;
					if (dispatchConfig.registrationName) {
						return EventPluginRegistry.registrationNameModules[
								dispatchConfig.registrationName
								] || null;
					}
					for (var phase in dispatchConfig.phasedRegistrationNames) {
						if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
							continue;
						}
						var PluginModule = EventPluginRegistry.registrationNameModules[
							dispatchConfig.phasedRegistrationNames[phase]
							];
						if (PluginModule) {
							return PluginModule;
						}
					}
					return null;
				},

				/**
				 * Exposed for unit testing.
				 * @private
				 */
				_resetEventPlugins: function () {
					EventPluginOrder = null;
					for (var pluginName in namesToPlugins) {
						if (namesToPlugins.hasOwnProperty(pluginName)) {
							delete namesToPlugins[pluginName];
						}
					}
					EventPluginRegistry.plugins.length = 0;

					var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
					for (var eventName in eventNameDispatchConfigs) {
						if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
							delete eventNameDispatchConfigs[eventName];
						}
					}

					var registrationNameModules = EventPluginRegistry.registrationNameModules;
					for (var registrationName in registrationNameModules) {
						if (registrationNameModules.hasOwnProperty(registrationName)) {
							delete registrationNameModules[registrationName];
						}
					}
				}

			};

			module.exports = EventPluginRegistry;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 319 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2014-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule accumulateInto
			 */

			'use strict';

			var invariant = __webpack_require__(252);

			/**
			 *
			 * Accumulates items that must not be null or undefined into the first one. This
			 * is used to conserve memory by avoiding array allocations, and thus sacrifices
			 * API cleanness. Since `current` can be null before being passed in and not
			 * null after this function, make sure to assign it back to `current`:
			 *
			 * `a = accumulateInto(a, b);`
			 *
			 * This API should be sparingly used. Try `accumulate` for something cleaner.
			 *
			 * @return {*|array<*>} An accumulation of items.
			 */

			function accumulateInto(current, next) {
				("production" !== process.env.NODE_ENV ? invariant(
					next != null,
					'accumulateInto(...): Accumulated items must not be null or undefined.'
				) : invariant(next != null));
				if (current == null) {
					return next;
				}

				// Both are not empty. Warning: Never call x.concat(y) when you are not
				// certain that x is an Array (x could be a string with concat method).
				var currentIsArray = Array.isArray(current);
				var nextIsArray = Array.isArray(next);

				if (currentIsArray && nextIsArray) {
					current.push.apply(current, next);
					return current;
				}

				if (currentIsArray) {
					current.push(next);
					return current;
				}

				if (nextIsArray) {
					// A bit too dangerous to mutate `next`.
					return [current].concat(next);
				}

				return [current, next];
			}

			module.exports = accumulateInto;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 320 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule forEachAccumulated
		 */

		'use strict';

		/**
		 * @param {array} an "accumulation" of items which is either an Array or
		 * a single item. Useful when paired with the `accumulate` module. This is a
		 * simple utility that allows us to reason about a collection of items, but
		 * handling the case when there is exactly one item (and we do not need to
		 * allocate an array).
		 */
		var forEachAccumulated = function (arr, cb, scope) {
			if (Array.isArray(arr)) {
				arr.forEach(cb, scope);
			} else if (arr) {
				cb.call(scope, arr);
			}
		};

		module.exports = forEachAccumulated;


		/***/
	},
	/* 321 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactEventEmitterMixin
		 */

		'use strict';

		var EventPluginHub = __webpack_require__(317);

		function runEventQueueInBatch(events) {
			EventPluginHub.enqueueEvents(events);
			EventPluginHub.processEventQueue();
		}

		var ReactEventEmitterMixin = {

			/**
			 * Streams a fired top-level event to `EventPluginHub` where plugins have the
			 * opportunity to create `ReactEvent`s to be dispatched.
			 *
			 * @param {string} topLevelType Record from `EventConstants`.
			 * @param {object} topLevelTarget The listening component root node.
			 * @param {string} topLevelTargetID ID of `topLevelTarget`.
			 * @param {object} nativeEvent Native environment event.
			 */
			handleTopLevel: function (topLevelType,
									  topLevelTarget,
									  topLevelTargetID,
									  nativeEvent) {
				var events = EventPluginHub.extractEvents(
					topLevelType,
					topLevelTarget,
					topLevelTargetID,
					nativeEvent
				);

				runEventQueueInBatch(events);
			}
		};

		module.exports = ReactEventEmitterMixin;


		/***/
	},
	/* 322 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ViewportMetrics
		 */

		'use strict';

		var ViewportMetrics = {

			currentScrollLeft: 0,

			currentScrollTop: 0,

			refreshScrollValues: function (scrollPosition) {
				ViewportMetrics.currentScrollLeft = scrollPosition.x;
				ViewportMetrics.currentScrollTop = scrollPosition.y;
			}

		};

		module.exports = ViewportMetrics;


		/***/
	},
	/* 323 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule isEventSupported
		 */

		'use strict';

		var ExecutionEnvironment = __webpack_require__(299);

		var useHasFeature;
		if (ExecutionEnvironment.canUseDOM) {
			useHasFeature =
				document.implementation &&
				document.implementation.hasFeature &&
					// always returns true in newer browsers as per the standard.
					// @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
				document.implementation.hasFeature('', '') !== true;
		}

		/**
		 * Checks if an event is supported in the current execution environment.
		 *
		 * NOTE: This will not work correctly for non-generic events such as `change`,
		 * `reset`, `load`, `error`, and `select`.
		 *
		 * Borrows from Modernizr.
		 *
		 * @param {string} eventNameSuffix Event name, e.g. "click".
		 * @param {?boolean} capture Check if the capture phase is supported.
		 * @return {boolean} True if the event is supported.
		 * @internal
		 * @license Modernizr 3.0.0pre (Custom Build) | MIT
		 */
		function isEventSupported(eventNameSuffix, capture) {
			if (!ExecutionEnvironment.canUseDOM ||
				capture && !('addEventListener' in document)) {
				return false;
			}

			var eventName = 'on' + eventNameSuffix;
			var isSupported = eventName in document;

			if (!isSupported) {
				var element = document.createElement('div');
				element.setAttribute(eventName, 'return;');
				isSupported = typeof element[eventName] === 'function';
			}

			if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
				// This is the only way to test support for the `wheel` event in IE9+.
				isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
			}

			return isSupported;
		}

		module.exports = isEventSupported;


		/***/
	},
	/* 324 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2014-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactEmptyComponent
			 */

			'use strict';

			var ReactElement = __webpack_require__(260);
			var ReactInstanceMap = __webpack_require__(284);

			var invariant = __webpack_require__(252);

			var component;
			// This registry keeps track of the React IDs of the components that rendered to
			// `null` (in reality a placeholder such as `noscript`)
			var nullComponentIDsRegistry = {};

			var ReactEmptyComponentInjection = {
				injectEmptyComponent: function (emptyComponent) {
					component = ReactElement.createFactory(emptyComponent);
				}
			};

			var ReactEmptyComponentType = function () {
			};
			ReactEmptyComponentType.prototype.componentDidMount = function () {
				var internalInstance = ReactInstanceMap.get(this);
				// TODO: Make sure we run these methods in the correct order, we shouldn't
				// need this check. We're going to assume if we're here it means we ran
				// componentWillUnmount already so there is no internal instance (it gets
				// removed as part of the unmounting process).
				if (!internalInstance) {
					return;
				}
				registerNullComponentID(internalInstance._rootNodeID);
			};
			ReactEmptyComponentType.prototype.componentWillUnmount = function () {
				var internalInstance = ReactInstanceMap.get(this);
				// TODO: Get rid of this check. See TODO in componentDidMount.
				if (!internalInstance) {
					return;
				}
				deregisterNullComponentID(internalInstance._rootNodeID);
			};
			ReactEmptyComponentType.prototype.render = function () {
				("production" !== process.env.NODE_ENV ? invariant(
					component,
					'Trying to return null from a render, but no null placeholder component ' +
					'was injected.'
				) : invariant(component));
				return component();
			};

			var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

			/**
			 * Mark the component as having rendered to null.
			 * @param {string} id Component's `_rootNodeID`.
			 */
			function registerNullComponentID(id) {
				nullComponentIDsRegistry[id] = true;
			}

			/**
			 * Unmark the component as having rendered to null: it renders to something now.
			 * @param {string} id Component's `_rootNodeID`.
			 */
			function deregisterNullComponentID(id) {
				delete nullComponentIDsRegistry[id];
			}

			/**
			 * @param {string} id Component's `_rootNodeID`.
			 * @return {boolean} True if the component is rendered to null.
			 */
			function isNullComponentID(id) {
				return !!nullComponentIDsRegistry[id];
			}

			var ReactEmptyComponent = {
				emptyElement: emptyElement,
				injection: ReactEmptyComponentInjection,
				isNullComponentID: isNullComponentID
			};

			module.exports = ReactEmptyComponent;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 325 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactMarkupChecksum
		 */

		'use strict';

		var adler32 = __webpack_require__(326);

		var ReactMarkupChecksum = {
			CHECKSUM_ATTR_NAME: 'data-react-checksum',

			/**
			 * @param {string} markup Markup string
			 * @return {string} Markup string with checksum attribute attached
			 */
			addChecksumToMarkup: function (markup) {
				var checksum = adler32(markup);
				return markup.replace(
					'>',
					' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
				);
			},

			/**
			 * @param {string} markup to use
			 * @param {DOMElement} element root React element
			 * @returns {boolean} whether or not the markup is the same
			 */
			canReuseMarkup: function (markup, element) {
				var existingChecksum = element.getAttribute(
					ReactMarkupChecksum.CHECKSUM_ATTR_NAME
				);
				existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
				var markupChecksum = adler32(markup);
				return markupChecksum === existingChecksum;
			}
		};

		module.exports = ReactMarkupChecksum;


		/***/
	},
	/* 326 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule adler32
		 */

		/* jslint bitwise:true */

		'use strict';

		var MOD = 65521;

		// This is a clean-room implementation of adler32 designed for detecting
		// if markup is not what we expect it to be. It does not need to be
		// cryptographically strong, only reasonably good at detecting if markup
		// generated on the server is different than that on the client.
		function adler32(data) {
			var a = 1;
			var b = 0;
			for (var i = 0; i < data.length; i++) {
				a = (a + data.charCodeAt(i)) % MOD;
				b = (b + a) % MOD;
			}
			return a | (b << 16);
		}

		module.exports = adler32;


		/***/
	},
	/* 327 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule containsNode
		 * @typechecks
		 */

		var isTextNode = __webpack_require__(328);

		/*jslint bitwise:true */

		/**
		 * Checks if a given DOM node contains or is another DOM node.
		 *
		 * @param {?DOMNode} outerNode Outer DOM node.
		 * @param {?DOMNode} innerNode Inner DOM node.
		 * @return {boolean} True if `outerNode` contains or is `innerNode`.
		 */
		function containsNode(outerNode, innerNode) {
			if (!outerNode || !innerNode) {
				return false;
			} else if (outerNode === innerNode) {
				return true;
			} else if (isTextNode(outerNode)) {
				return false;
			} else if (isTextNode(innerNode)) {
				return containsNode(outerNode, innerNode.parentNode);
			} else if (outerNode.contains) {
				return outerNode.contains(innerNode);
			} else if (outerNode.compareDocumentPosition) {
				return !!(outerNode.compareDocumentPosition(innerNode) & 16);
			} else {
				return false;
			}
		}

		module.exports = containsNode;


		/***/
	},
	/* 328 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule isTextNode
		 * @typechecks
		 */

		var isNode = __webpack_require__(329);

		/**
		 * @param {*} object The object to check.
		 * @return {boolean} Whether or not the object is a DOM text node.
		 */
		function isTextNode(object) {
			return isNode(object) && object.nodeType == 3;
		}

		module.exports = isTextNode;


		/***/
	},
	/* 329 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule isNode
		 * @typechecks
		 */

		/**
		 * @param {*} object The object to check.
		 * @return {boolean} Whether or not the object is a DOM node.
		 */
		function isNode(object) {
			return !!(object && (
				((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
				typeof object.nodeType === 'number' &&
				typeof object.nodeName === 'string'))
			));
		}

		module.exports = isNode;


		/***/
	},
	/* 330 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule getReactRootElementInContainer
		 */

		'use strict';

		var DOC_NODE_TYPE = 9;

		/**
		 * @param {DOMElement|DOMDocument} container DOM element that may contain
		 *                                           a React component
		 * @return {?*} DOM element that may have the reactRoot ID, or null.
		 */
		function getReactRootElementInContainer(container) {
			if (!container) {
				return null;
			}

			if (container.nodeType === DOC_NODE_TYPE) {
				return container.documentElement;
			} else {
				return container.firstChild;
			}
		}

		module.exports = getReactRootElementInContainer;


		/***/
	},
	/* 331 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule instantiateReactComponent
			 * @typechecks static-only
			 */

			'use strict';

			var ReactCompositeComponent = __webpack_require__(332);
			var ReactEmptyComponent = __webpack_require__(324);
			var ReactNativeComponent = __webpack_require__(269);

			var assign = __webpack_require__(253);
			var invariant = __webpack_require__(252);
			var warning = __webpack_require__(263);

			// To avoid a cyclic dependency, we create the final class in this module
			var ReactCompositeComponentWrapper = function () {
			};
			assign(
				ReactCompositeComponentWrapper.prototype,
				ReactCompositeComponent.Mixin,
				{
					_instantiateReactComponent: instantiateReactComponent
				}
			);

			/**
			 * Check if the type reference is a known internal type. I.e. not a user
			 * provided composite type.
			 *
			 * @param {function} type
			 * @return {boolean} Returns true if this is a valid internal type.
			 */
			function isInternalComponentType(type) {
				return (
					typeof type === 'function' &&
					typeof type.prototype !== 'undefined' &&
					typeof type.prototype.mountComponent === 'function' &&
					typeof type.prototype.receiveComponent === 'function'
				);
			}

			/**
			 * Given a ReactNode, create an instance that will actually be mounted.
			 *
			 * @param {ReactNode} node
			 * @param {*} parentCompositeType The composite type that resolved this.
			 * @return {object} A new instance of the element's constructor.
			 * @protected
			 */
			function instantiateReactComponent(node, parentCompositeType) {
				var instance;

				if (node === null || node === false) {
					node = ReactEmptyComponent.emptyElement;
				}

				if (typeof node === 'object') {
					var element = node;
					if ("production" !== process.env.NODE_ENV) {
						("production" !== process.env.NODE_ENV ? warning(
							element && (typeof element.type === 'function' ||
							typeof element.type === 'string'),
							'Only functions or strings can be mounted as React components.'
						) : null);
					}

					// Special case string values
					if (parentCompositeType === element.type &&
						typeof element.type === 'string') {
						// Avoid recursion if the wrapper renders itself.
						instance = ReactNativeComponent.createInternalComponent(element);
						// All native components are currently wrapped in a composite so we're
						// safe to assume that this is what we should instantiate.
					} else if (isInternalComponentType(element.type)) {
						// This is temporarily available for custom components that are not string
						// represenations. I.e. ART. Once those are updated to use the string
						// representation, we can drop this code path.
						instance = new element.type(element);
					} else {
						instance = new ReactCompositeComponentWrapper();
					}
				} else if (typeof node === 'string' || typeof node === 'number') {
					instance = ReactNativeComponent.createInstanceForText(node);
				} else {
					("production" !== process.env.NODE_ENV ? invariant(
						false,
						'Encountered invalid React node of type %s',
						typeof node
					) : invariant(false));
				}

				if ("production" !== process.env.NODE_ENV) {
					("production" !== process.env.NODE_ENV ? warning(
						typeof instance.construct === 'function' &&
						typeof instance.mountComponent === 'function' &&
						typeof instance.receiveComponent === 'function' &&
						typeof instance.unmountComponent === 'function',
						'Only React Components can be mounted.'
					) : null);
				}

				// Sets up the instance. This can probably just move into the constructor now.
				instance.construct(node);

				// These two fields are used by the DOM and ART diffing algorithms
				// respectively. Instead of using expandos on components, we should be
				// storing the state needed by the diffing algorithms elsewhere.
				instance._mountIndex = 0;
				instance._mountImage = null;

				if ("production" !== process.env.NODE_ENV) {
					instance._isOwnerNecessary = false;
					instance._warnedAboutRefsInRender = false;
				}

				// Internal instances should fully constructed at this point, so they should
				// not get any new fields added to them at this point.
				if ("production" !== process.env.NODE_ENV) {
					if (Object.preventExtensions) {
						Object.preventExtensions(instance);
					}
				}

				return instance;
			}

			module.exports = instantiateReactComponent;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 332 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactCompositeComponent
			 */

			'use strict';

			var ReactComponentEnvironment = __webpack_require__(333);
			var ReactContext = __webpack_require__(261);
			var ReactCurrentOwner = __webpack_require__(254);
			var ReactElement = __webpack_require__(260);
			var ReactElementValidator = __webpack_require__(259);
			var ReactInstanceMap = __webpack_require__(284);
			var ReactLifeCycle = __webpack_require__(283);
			var ReactNativeComponent = __webpack_require__(269);
			var ReactPerf = __webpack_require__(255);
			var ReactPropTypeLocations = __webpack_require__(266);
			var ReactPropTypeLocationNames = __webpack_require__(268);
			var ReactReconciler = __webpack_require__(256);
			var ReactUpdates = __webpack_require__(249);

			var assign = __webpack_require__(253);
			var emptyObject = __webpack_require__(262);
			var invariant = __webpack_require__(252);
			var shouldUpdateReactComponent = __webpack_require__(334);
			var warning = __webpack_require__(263);

			function getDeclarationErrorAddendum(component) {
				var owner = component._currentElement._owner || null;
				if (owner) {
					var name = owner.getName();
					if (name) {
						return ' Check the render method of `' + name + '`.';
					}
				}
				return '';
			}

			/**
			 * ------------------ The Life-Cycle of a Composite Component ------------------
			 *
			 * - constructor: Initialization of state. The instance is now retained.
			 *   - componentWillMount
			 *   - render
			 *   - [children's constructors]
			 *     - [children's componentWillMount and render]
			 *     - [children's componentDidMount]
			 *     - componentDidMount
			 *
			 *       Update Phases:
			 *       - componentWillReceiveProps (only called if parent updated)
			 *       - shouldComponentUpdate
			 *         - componentWillUpdate
			 *           - render
			 *           - [children's constructors or receive props phases]
			 *         - componentDidUpdate
			 *
			 *     - componentWillUnmount
			 *     - [children's componentWillUnmount]
			 *   - [children destroyed]
			 * - (destroyed): The instance is now blank, released by React and ready for GC.
			 *
			 * -----------------------------------------------------------------------------
			 */

			/**
			 * An incrementing ID assigned to each component when it is mounted. This is
			 * used to enforce the order in which `ReactUpdates` updates dirty components.
			 *
			 * @private
			 */
			var nextMountID = 1;

			/**
			 * @lends {ReactCompositeComponent.prototype}
			 */
			var ReactCompositeComponentMixin = {

				/**
				 * Base constructor for all composite component.
				 *
				 * @param {ReactElement} element
				 * @final
				 * @internal
				 */
				construct: function (element) {
					this._currentElement = element;
					this._rootNodeID = null;
					this._instance = null;

					// See ReactUpdateQueue
					this._pendingElement = null;
					this._pendingStateQueue = null;
					this._pendingReplaceState = false;
					this._pendingForceUpdate = false;

					this._renderedComponent = null;

					this._context = null;
					this._mountOrder = 0;
					this._isTopLevel = false;

					// See ReactUpdates and ReactUpdateQueue.
					this._pendingCallbacks = null;
				},

				/**
				 * Initializes the component, renders markup, and registers event listeners.
				 *
				 * @param {string} rootID DOM ID of the root node.
				 * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
				 * @return {?string} Rendered markup to be inserted into the DOM.
				 * @final
				 * @internal
				 */
				mountComponent: function (rootID, transaction, context) {
					this._context = context;
					this._mountOrder = nextMountID++;
					this._rootNodeID = rootID;

					var publicProps = this._processProps(this._currentElement.props);
					var publicContext = this._processContext(this._currentElement._context);

					var Component = ReactNativeComponent.getComponentClassForElement(
						this._currentElement
					);

					// Initialize the public class
					var inst = new Component(publicProps, publicContext);

					if ("production" !== process.env.NODE_ENV) {
						// This will throw later in _renderValidatedComponent, but add an early
						// warning now to help debugging
						("production" !== process.env.NODE_ENV ? warning(
							inst.render != null,
							'%s(...): No `render` method found on the returned component ' +
							'instance: you may have forgotten to define `render` in your ' +
							'component or you may have accidentally tried to render an element ' +
							'whose type is a function that isn\'t a React component.',
							Component.displayName || Component.name || 'Component'
						) : null);
					}

					// These should be set up in the constructor, but as a convenience for
					// simpler class abstractions, we set them up after the fact.
					inst.props = publicProps;
					inst.context = publicContext;
					inst.refs = emptyObject;

					this._instance = inst;

					// Store a reference from the instance back to the internal representation
					ReactInstanceMap.set(inst, this);

					if ("production" !== process.env.NODE_ENV) {
						this._warnIfContextsDiffer(this._currentElement._context, context);
					}

					if ("production" !== process.env.NODE_ENV) {
						// Since plain JS classes are defined without any special initialization
						// logic, we can not catch common errors early. Therefore, we have to
						// catch them here, at initialization time, instead.
						("production" !== process.env.NODE_ENV ? warning(
							!inst.getInitialState ||
							inst.getInitialState.isReactClassApproved,
							'getInitialState was defined on %s, a plain JavaScript class. ' +
							'This is only supported for classes created using React.createClass. ' +
							'Did you mean to define a state property instead?',
							this.getName() || 'a component'
						) : null);
						("production" !== process.env.NODE_ENV ? warning(
							!inst.getDefaultProps ||
							inst.getDefaultProps.isReactClassApproved,
							'getDefaultProps was defined on %s, a plain JavaScript class. ' +
							'This is only supported for classes created using React.createClass. ' +
							'Use a static property to define defaultProps instead.',
							this.getName() || 'a component'
						) : null);
						("production" !== process.env.NODE_ENV ? warning(
							!inst.propTypes,
							'propTypes was defined as an instance property on %s. Use a static ' +
							'property to define propTypes instead.',
							this.getName() || 'a component'
						) : null);
						("production" !== process.env.NODE_ENV ? warning(
							!inst.contextTypes,
							'contextTypes was defined as an instance property on %s. Use a ' +
							'static property to define contextTypes instead.',
							this.getName() || 'a component'
						) : null);
						("production" !== process.env.NODE_ENV ? warning(
							typeof inst.componentShouldUpdate !== 'function',
							'%s has a method called ' +
							'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
							'The name is phrased as a question because the function is ' +
							'expected to return a value.',
							(this.getName() || 'A component')
						) : null);
					}

					var initialState = inst.state;
					if (initialState === undefined) {
						inst.state = initialState = null;
					}
					("production" !== process.env.NODE_ENV ? invariant(
						typeof initialState === 'object' && !Array.isArray(initialState),
						'%s.state: must be set to an object or null',
						this.getName() || 'ReactCompositeComponent'
					) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

					this._pendingStateQueue = null;
					this._pendingReplaceState = false;
					this._pendingForceUpdate = false;

					var childContext;
					var renderedElement;

					var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
					ReactLifeCycle.currentlyMountingInstance = this;
					try {
						if (inst.componentWillMount) {
							inst.componentWillMount();
							// When mounting, calls to `setState` by `componentWillMount` will set
							// `this._pendingStateQueue` without triggering a re-render.
							if (this._pendingStateQueue) {
								inst.state = this._processPendingState(inst.props, inst.context);
							}
						}

						childContext = this._getValidatedChildContext(context);
						renderedElement = this._renderValidatedComponent(childContext);
					} finally {
						ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
					}

					this._renderedComponent = this._instantiateReactComponent(
						renderedElement,
						this._currentElement.type // The wrapping type
					);

					var markup = ReactReconciler.mountComponent(
						this._renderedComponent,
						rootID,
						transaction,
						this._mergeChildContext(context, childContext)
					);
					if (inst.componentDidMount) {
						transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
					}

					return markup;
				},

				/**
				 * Releases any resources allocated by `mountComponent`.
				 *
				 * @final
				 * @internal
				 */
				unmountComponent: function () {
					var inst = this._instance;

					if (inst.componentWillUnmount) {
						var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
						ReactLifeCycle.currentlyUnmountingInstance = this;
						try {
							inst.componentWillUnmount();
						} finally {
							ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
						}
					}

					ReactReconciler.unmountComponent(this._renderedComponent);
					this._renderedComponent = null;

					// Reset pending fields
					this._pendingStateQueue = null;
					this._pendingReplaceState = false;
					this._pendingForceUpdate = false;
					this._pendingCallbacks = null;
					this._pendingElement = null;

					// These fields do not really need to be reset since this object is no
					// longer accessible.
					this._context = null;
					this._rootNodeID = null;

					// Delete the reference from the instance to this internal representation
					// which allow the internals to be properly cleaned up even if the user
					// leaks a reference to the public instance.
					ReactInstanceMap.remove(inst);

					// Some existing components rely on inst.props even after they've been
					// destroyed (in event handlers).
					// TODO: inst.props = null;
					// TODO: inst.state = null;
					// TODO: inst.context = null;
				},

				/**
				 * Schedule a partial update to the props. Only used for internal testing.
				 *
				 * @param {object} partialProps Subset of the next props.
				 * @param {?function} callback Called after props are updated.
				 * @final
				 * @internal
				 */
				_setPropsInternal: function (partialProps, callback) {
					// This is a deoptimized path. We optimize for always having an element.
					// This creates an extra internal element.
					var element = this._pendingElement || this._currentElement;
					this._pendingElement = ReactElement.cloneAndReplaceProps(
						element,
						assign({}, element.props, partialProps)
					);
					ReactUpdates.enqueueUpdate(this, callback);
				},

				/**
				 * Filters the context object to only contain keys specified in
				 * `contextTypes`
				 *
				 * @param {object} context
				 * @return {?object}
				 * @private
				 */
				_maskContext: function (context) {
					var maskedContext = null;
					// This really should be getting the component class for the element,
					// but we know that we're not going to need it for built-ins.
					if (typeof this._currentElement.type === 'string') {
						return emptyObject;
					}
					var contextTypes = this._currentElement.type.contextTypes;
					if (!contextTypes) {
						return emptyObject;
					}
					maskedContext = {};
					for (var contextName in contextTypes) {
						maskedContext[contextName] = context[contextName];
					}
					return maskedContext;
				},

				/**
				 * Filters the context object to only contain keys specified in
				 * `contextTypes`, and asserts that they are valid.
				 *
				 * @param {object} context
				 * @return {?object}
				 * @private
				 */
				_processContext: function (context) {
					var maskedContext = this._maskContext(context);
					if ("production" !== process.env.NODE_ENV) {
						var Component = ReactNativeComponent.getComponentClassForElement(
							this._currentElement
						);
						if (Component.contextTypes) {
							this._checkPropTypes(
								Component.contextTypes,
								maskedContext,
								ReactPropTypeLocations.context
							);
						}
					}
					return maskedContext;
				},

				/**
				 * @param {object} currentContext
				 * @return {object}
				 * @private
				 */
				_getValidatedChildContext: function (currentContext) {
					var inst = this._instance;
					var childContext = inst.getChildContext && inst.getChildContext();
					if (childContext) {
						("production" !== process.env.NODE_ENV ? invariant(
							typeof inst.constructor.childContextTypes === 'object',
							'%s.getChildContext(): childContextTypes must be defined in order to ' +
							'use getChildContext().',
							this.getName() || 'ReactCompositeComponent'
						) : invariant(typeof inst.constructor.childContextTypes === 'object'));
						if ("production" !== process.env.NODE_ENV) {
							this._checkPropTypes(
								inst.constructor.childContextTypes,
								childContext,
								ReactPropTypeLocations.childContext
							);
						}
						for (var name in childContext) {
							("production" !== process.env.NODE_ENV ? invariant(
								name in inst.constructor.childContextTypes,
								'%s.getChildContext(): key "%s" is not defined in childContextTypes.',
								this.getName() || 'ReactCompositeComponent',
								name
							) : invariant(name in inst.constructor.childContextTypes));
						}
						return childContext;
					}
					return null;
				},

				_mergeChildContext: function (currentContext, childContext) {
					if (childContext) {
						return assign({}, currentContext, childContext);
					}
					return currentContext;
				},

				/**
				 * Processes props by setting default values for unspecified props and
				 * asserting that the props are valid. Does not mutate its argument; returns
				 * a new props object with defaults merged in.
				 *
				 * @param {object} newProps
				 * @return {object}
				 * @private
				 */
				_processProps: function (newProps) {
					if ("production" !== process.env.NODE_ENV) {
						var Component = ReactNativeComponent.getComponentClassForElement(
							this._currentElement
						);
						if (Component.propTypes) {
							this._checkPropTypes(
								Component.propTypes,
								newProps,
								ReactPropTypeLocations.prop
							);
						}
					}
					return newProps;
				},

				/**
				 * Assert that the props are valid
				 *
				 * @param {object} propTypes Map of prop name to a ReactPropType
				 * @param {object} props
				 * @param {string} location e.g. "prop", "context", "child context"
				 * @private
				 */
				_checkPropTypes: function (propTypes, props, location) {
					// TODO: Stop validating prop types here and only use the element
					// validation.
					var componentName = this.getName();
					for (var propName in propTypes) {
						if (propTypes.hasOwnProperty(propName)) {
							var error;
							try {
								// This is intentionally an invariant that gets caught. It's the same
								// behavior as without this statement except with a better message.
								("production" !== process.env.NODE_ENV ? invariant(
									typeof propTypes[propName] === 'function',
									'%s: %s type `%s` is invalid; it must be a function, usually ' +
									'from React.PropTypes.',
									componentName || 'React class',
									ReactPropTypeLocationNames[location],
									propName
								) : invariant(typeof propTypes[propName] === 'function'));
								error = propTypes[propName](props, propName, componentName, location);
							} catch (ex) {
								error = ex;
							}
							if (error instanceof Error) {
								// We may want to extend this logic for similar errors in
								// React.render calls, so I'm abstracting it away into
								// a function to minimize refactoring in the future
								var addendum = getDeclarationErrorAddendum(this);

								if (location === ReactPropTypeLocations.prop) {
									// Preface gives us something to blacklist in warning module
									("production" !== process.env.NODE_ENV ? warning(
										false,
										'Failed Composite propType: %s%s',
										error.message,
										addendum
									) : null);
								} else {
									("production" !== process.env.NODE_ENV ? warning(
										false,
										'Failed Context Types: %s%s',
										error.message,
										addendum
									) : null);
								}
							}
						}
					}
				},

				receiveComponent: function (nextElement, transaction, nextContext) {
					var prevElement = this._currentElement;
					var prevContext = this._context;

					this._pendingElement = null;

					this.updateComponent(
						transaction,
						prevElement,
						nextElement,
						prevContext,
						nextContext
					);
				},

				/**
				 * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
				 * is set, update the component.
				 *
				 * @param {ReactReconcileTransaction} transaction
				 * @internal
				 */
				performUpdateIfNecessary: function (transaction) {
					if (this._pendingElement != null) {
						ReactReconciler.receiveComponent(
							this,
							this._pendingElement || this._currentElement,
							transaction,
							this._context
						);
					}

					if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
						if ("production" !== process.env.NODE_ENV) {
							ReactElementValidator.checkAndWarnForMutatedProps(
								this._currentElement
							);
						}

						this.updateComponent(
							transaction,
							this._currentElement,
							this._currentElement,
							this._context,
							this._context
						);
					}
				},

				/**
				 * Compare two contexts, warning if they are different
				 * TODO: Remove this check when owner-context is removed
				 */
				_warnIfContextsDiffer: function (ownerBasedContext, parentBasedContext) {
					ownerBasedContext = this._maskContext(ownerBasedContext);
					parentBasedContext = this._maskContext(parentBasedContext);
					var parentKeys = Object.keys(parentBasedContext).sort();
					var displayName = this.getName() || 'ReactCompositeComponent';
					for (var i = 0; i < parentKeys.length; i++) {
						var key = parentKeys[i];
						("production" !== process.env.NODE_ENV ? warning(
							ownerBasedContext[key] === parentBasedContext[key],
							'owner-based and parent-based contexts differ ' +
							'(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
							'(see: http://fb.me/react-context-by-parent)',
							ownerBasedContext[key],
							parentBasedContext[key],
							key,
							displayName
						) : null);
					}
				},

				/**
				 * Perform an update to a mounted component. The componentWillReceiveProps and
				 * shouldComponentUpdate methods are called, then (assuming the update isn't
				 * skipped) the remaining update lifecycle methods are called and the DOM
				 * representation is updated.
				 *
				 * By default, this implements React's rendering and reconciliation algorithm.
				 * Sophisticated clients may wish to override this.
				 *
				 * @param {ReactReconcileTransaction} transaction
				 * @param {ReactElement} prevParentElement
				 * @param {ReactElement} nextParentElement
				 * @internal
				 * @overridable
				 */
				updateComponent: function (transaction,
										   prevParentElement,
										   nextParentElement,
										   prevUnmaskedContext,
										   nextUnmaskedContext) {
					var inst = this._instance;

					var nextContext = inst.context;
					var nextProps = inst.props;

					// Distinguish between a props update versus a simple state update
					if (prevParentElement !== nextParentElement) {
						nextContext = this._processContext(nextParentElement._context);
						nextProps = this._processProps(nextParentElement.props);

						if ("production" !== process.env.NODE_ENV) {
							if (nextUnmaskedContext != null) {
								this._warnIfContextsDiffer(
									nextParentElement._context,
									nextUnmaskedContext
								);
							}
						}

						// An update here will schedule an update but immediately set
						// _pendingStateQueue which will ensure that any state updates gets
						// immediately reconciled instead of waiting for the next batch.

						if (inst.componentWillReceiveProps) {
							inst.componentWillReceiveProps(nextProps, nextContext);
						}
					}

					var nextState = this._processPendingState(nextProps, nextContext);

					var shouldUpdate =
						this._pendingForceUpdate || !inst.shouldComponentUpdate ||
						inst.shouldComponentUpdate(nextProps, nextState, nextContext);

					if ("production" !== process.env.NODE_ENV) {
						("production" !== process.env.NODE_ENV ? warning(
							typeof shouldUpdate !== 'undefined',
							'%s.shouldComponentUpdate(): Returned undefined instead of a ' +
							'boolean value. Make sure to return true or false.',
							this.getName() || 'ReactCompositeComponent'
						) : null);
					}

					if (shouldUpdate) {
						this._pendingForceUpdate = false;
						// Will set `this.props`, `this.state` and `this.context`.
						this._performComponentUpdate(
							nextParentElement,
							nextProps,
							nextState,
							nextContext,
							transaction,
							nextUnmaskedContext
						);
					} else {
						// If it's determined that a component should not update, we still want
						// to set props and state but we shortcut the rest of the update.
						this._currentElement = nextParentElement;
						this._context = nextUnmaskedContext;
						inst.props = nextProps;
						inst.state = nextState;
						inst.context = nextContext;
					}
				},

				_processPendingState: function (props, context) {
					var inst = this._instance;
					var queue = this._pendingStateQueue;
					var replace = this._pendingReplaceState;
					this._pendingReplaceState = false;
					this._pendingStateQueue = null;

					if (!queue) {
						return inst.state;
					}

					if (replace && queue.length === 1) {
						return queue[0];
					}

					var nextState = assign({}, replace ? queue[0] : inst.state);
					for (var i = replace ? 1 : 0; i < queue.length; i++) {
						var partial = queue[i];
						assign(
							nextState,
							typeof partial === 'function' ?
								partial.call(inst, nextState, props, context) :
								partial
						);
					}

					return nextState;
				},

				/**
				 * Merges new props and state, notifies delegate methods of update and
				 * performs update.
				 *
				 * @param {ReactElement} nextElement Next element
				 * @param {object} nextProps Next public object to set as properties.
				 * @param {?object} nextState Next object to set as state.
				 * @param {?object} nextContext Next public object to set as context.
				 * @param {ReactReconcileTransaction} transaction
				 * @param {?object} unmaskedContext
				 * @private
				 */
				_performComponentUpdate: function (nextElement,
												   nextProps,
												   nextState,
												   nextContext,
												   transaction,
												   unmaskedContext) {
					var inst = this._instance;

					var prevProps = inst.props;
					var prevState = inst.state;
					var prevContext = inst.context;

					if (inst.componentWillUpdate) {
						inst.componentWillUpdate(nextProps, nextState, nextContext);
					}

					this._currentElement = nextElement;
					this._context = unmaskedContext;
					inst.props = nextProps;
					inst.state = nextState;
					inst.context = nextContext;

					this._updateRenderedComponent(transaction, unmaskedContext);

					if (inst.componentDidUpdate) {
						transaction.getReactMountReady().enqueue(
							inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
							inst
						);
					}
				},

				/**
				 * Call the component's `render` method and update the DOM accordingly.
				 *
				 * @param {ReactReconcileTransaction} transaction
				 * @internal
				 */
				_updateRenderedComponent: function (transaction, context) {
					var prevComponentInstance = this._renderedComponent;
					var prevRenderedElement = prevComponentInstance._currentElement;
					var childContext = this._getValidatedChildContext();
					var nextRenderedElement = this._renderValidatedComponent(childContext);
					if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
						ReactReconciler.receiveComponent(
							prevComponentInstance,
							nextRenderedElement,
							transaction,
							this._mergeChildContext(context, childContext)
						);
					} else {
						// These two IDs are actually the same! But nothing should rely on that.
						var thisID = this._rootNodeID;
						var prevComponentID = prevComponentInstance._rootNodeID;
						ReactReconciler.unmountComponent(prevComponentInstance);

						this._renderedComponent = this._instantiateReactComponent(
							nextRenderedElement,
							this._currentElement.type
						);
						var nextMarkup = ReactReconciler.mountComponent(
							this._renderedComponent,
							thisID,
							transaction,
							this._mergeChildContext(context, childContext)
						);
						this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
					}
				},

				/**
				 * @protected
				 */
				_replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
					ReactComponentEnvironment.replaceNodeWithMarkupByID(
						prevComponentID,
						nextMarkup
					);
				},

				/**
				 * @protected
				 */
				_renderValidatedComponentWithoutOwnerOrContext: function () {
					var inst = this._instance;
					var renderedComponent = inst.render();
					if ("production" !== process.env.NODE_ENV) {
						// We allow auto-mocks to proceed as if they're returning null.
						if (typeof renderedComponent === 'undefined' &&
							inst.render._isMockFunction) {
							// This is probably bad practice. Consider warning here and
							// deprecating this convenience.
							renderedComponent = null;
						}
					}

					return renderedComponent;
				},

				/**
				 * @private
				 */
				_renderValidatedComponent: function (childContext) {
					var renderedComponent;
					var previousContext = ReactContext.current;
					ReactContext.current = this._mergeChildContext(
						this._currentElement._context,
						childContext
					);
					ReactCurrentOwner.current = this;
					try {
						renderedComponent =
							this._renderValidatedComponentWithoutOwnerOrContext();
					} finally {
						ReactContext.current = previousContext;
						ReactCurrentOwner.current = null;
					}
					("production" !== process.env.NODE_ENV ? invariant(
						// TODO: An `isValidNode` function would probably be more appropriate
						renderedComponent === null || renderedComponent === false ||
						ReactElement.isValidElement(renderedComponent),
						'%s.render(): A valid ReactComponent must be returned. You may have ' +
						'returned undefined, an array or some other invalid object.',
						this.getName() || 'ReactCompositeComponent'
					) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
						renderedComponent === null || renderedComponent === false ||
						ReactElement.isValidElement(renderedComponent)));
					return renderedComponent;
				},

				/**
				 * Lazily allocates the refs object and stores `component` as `ref`.
				 *
				 * @param {string} ref Reference name.
				 * @param {component} component Component to store as `ref`.
				 * @final
				 * @private
				 */
				attachRef: function (ref, component) {
					var inst = this.getPublicInstance();
					var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
					refs[ref] = component.getPublicInstance();
				},

				/**
				 * Detaches a reference name.
				 *
				 * @param {string} ref Name to dereference.
				 * @final
				 * @private
				 */
				detachRef: function (ref) {
					var refs = this.getPublicInstance().refs;
					delete refs[ref];
				},

				/**
				 * Get a text description of the component that can be used to identify it
				 * in error messages.
				 * @return {string} The name or null.
				 * @internal
				 */
				getName: function () {
					var type = this._currentElement.type;
					var constructor = this._instance && this._instance.constructor;
					return (
						type.displayName || (constructor && constructor.displayName) ||
						type.name || (constructor && constructor.name) ||
						null
					);
				},

				/**
				 * Get the publicly accessible representation of this component - i.e. what
				 * is exposed by refs and returned by React.render. Can be null for stateless
				 * components.
				 *
				 * @return {ReactComponent} the public component instance.
				 * @internal
				 */
				getPublicInstance: function () {
					return this._instance;
				},

				// Stub
				_instantiateReactComponent: null

			};

			ReactPerf.measureMethods(
				ReactCompositeComponentMixin,
				'ReactCompositeComponent',
				{
					mountComponent: 'mountComponent',
					updateComponent: 'updateComponent',
					_renderValidatedComponent: '_renderValidatedComponent'
				}
			);

			var ReactCompositeComponent = {

				Mixin: ReactCompositeComponentMixin

			};

			module.exports = ReactCompositeComponent;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 333 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2014-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactComponentEnvironment
			 */

			'use strict';

			var invariant = __webpack_require__(252);

			var injected = false;

			var ReactComponentEnvironment = {

				/**
				 * Optionally injectable environment dependent cleanup hook. (server vs.
				 * browser etc). Example: A browser system caches DOM nodes based on component
				 * ID and must remove that cache entry when this instance is unmounted.
				 */
				unmountIDFromEnvironment: null,

				/**
				 * Optionally injectable hook for swapping out mount images in the middle of
				 * the tree.
				 */
				replaceNodeWithMarkupByID: null,

				/**
				 * Optionally injectable hook for processing a queue of child updates. Will
				 * later move into MultiChildComponents.
				 */
				processChildrenUpdates: null,

				injection: {
					injectEnvironment: function (environment) {
						("production" !== process.env.NODE_ENV ? invariant(
							!injected,
							'ReactCompositeComponent: injectEnvironment() can only be called once.'
						) : invariant(!injected));
						ReactComponentEnvironment.unmountIDFromEnvironment =
							environment.unmountIDFromEnvironment;
						ReactComponentEnvironment.replaceNodeWithMarkupByID =
							environment.replaceNodeWithMarkupByID;
						ReactComponentEnvironment.processChildrenUpdates =
							environment.processChildrenUpdates;
						injected = true;
					}
				}

			};

			module.exports = ReactComponentEnvironment;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 334 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule shouldUpdateReactComponent
			 * @typechecks static-only
			 */

			'use strict';

			var warning = __webpack_require__(263);

			/**
			 * Given a `prevElement` and `nextElement`, determines if the existing
			 * instance should be updated as opposed to being destroyed or replaced by a new
			 * instance. Both arguments are elements. This ensures that this logic can
			 * operate on stateless trees without any backing instance.
			 *
			 * @param {?object} prevElement
			 * @param {?object} nextElement
			 * @return {boolean} True if the existing instance should be updated.
			 * @protected
			 */
			function shouldUpdateReactComponent(prevElement, nextElement) {
				if (prevElement != null && nextElement != null) {
					var prevType = typeof prevElement;
					var nextType = typeof nextElement;
					if (prevType === 'string' || prevType === 'number') {
						return (nextType === 'string' || nextType === 'number');
					} else {
						if (nextType === 'object' &&
							prevElement.type === nextElement.type &&
							prevElement.key === nextElement.key) {
							var ownersMatch = prevElement._owner === nextElement._owner;
							var prevName = null;
							var nextName = null;
							var nextDisplayName = null;
							if ("production" !== process.env.NODE_ENV) {
								if (!ownersMatch) {
									if (prevElement._owner != null &&
										prevElement._owner.getPublicInstance() != null &&
										prevElement._owner.getPublicInstance().constructor != null) {
										prevName =
											prevElement._owner.getPublicInstance().constructor.displayName;
									}
									if (nextElement._owner != null &&
										nextElement._owner.getPublicInstance() != null &&
										nextElement._owner.getPublicInstance().constructor != null) {
										nextName =
											nextElement._owner.getPublicInstance().constructor.displayName;
									}
									if (nextElement.type != null &&
										nextElement.type.displayName != null) {
										nextDisplayName = nextElement.type.displayName;
									}
									if (nextElement.type != null && typeof nextElement.type === 'string') {
										nextDisplayName = nextElement.type;
									}
									if (typeof nextElement.type !== 'string' ||
										nextElement.type === 'input' ||
										nextElement.type === 'textarea') {
										if ((prevElement._owner != null &&
											prevElement._owner._isOwnerNecessary === false) ||
											(nextElement._owner != null &&
											nextElement._owner._isOwnerNecessary === false)) {
											if (prevElement._owner != null) {
												prevElement._owner._isOwnerNecessary = true;
											}
											if (nextElement._owner != null) {
												nextElement._owner._isOwnerNecessary = true;
											}
											("production" !== process.env.NODE_ENV ? warning(
												false,
												'<%s /> is being rendered by both %s and %s using the same ' +
												'key (%s) in the same place. Currently, this means that ' +
												'they don\'t preserve state. This behavior should be very ' +
												'rare so we\'re considering deprecating it. Please contact ' +
												'the React team and explain your use case so that we can ' +
												'take that into consideration.',
												nextDisplayName || 'Unknown Component',
												prevName || '[Unknown]',
												nextName || '[Unknown]',
												prevElement.key
											) : null);
										}
									}
								}
							}
							return ownersMatch;
						}
					}
				}
				return false;
			}

			module.exports = shouldUpdateReactComponent;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 335 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDOMComponent
		 * @typechecks static-only
		 */

			/* global hasOwnProperty:true */

			'use strict';

			var CSSPropertyOperations = __webpack_require__(297);
			var DOMProperty = __webpack_require__(292);
			var DOMPropertyOperations = __webpack_require__(291);
			var ReactBrowserEventEmitter = __webpack_require__(316);
			var ReactComponentBrowserEnvironment =
				__webpack_require__(295);
			var ReactMount = __webpack_require__(315);
			var ReactMultiChild = __webpack_require__(336);
			var ReactPerf = __webpack_require__(255);

			var assign = __webpack_require__(253);
			var escapeTextContentForBrowser = __webpack_require__(294);
			var invariant = __webpack_require__(252);
			var isEventSupported = __webpack_require__(323);
			var keyOf = __webpack_require__(287);
			var warning = __webpack_require__(263);

			var deleteListener = ReactBrowserEventEmitter.deleteListener;
			var listenTo = ReactBrowserEventEmitter.listenTo;
			var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

			// For quickly matching children type, to test if can be treated as content.
			var CONTENT_TYPES = {'string': true, 'number': true};

			var STYLE = keyOf({style: null});

			var ELEMENT_NODE_TYPE = 1;

			/**
			 * Optionally injectable operations for mutating the DOM
			 */
			var BackendIDOperations = null;

			/**
			 * @param {?object} props
			 */
			function assertValidProps(props) {
				if (!props) {
					return;
				}
				// Note the use of `==` which checks for null or undefined.
				if (props.dangerouslySetInnerHTML != null) {
					("production" !== process.env.NODE_ENV ? invariant(
						props.children == null,
						'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
					) : invariant(props.children == null));
					("production" !== process.env.NODE_ENV ? invariant(
						typeof props.dangerouslySetInnerHTML === 'object' &&
						'__html' in props.dangerouslySetInnerHTML,
						'`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
						'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
						'for more information.'
					) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
						'__html' in props.dangerouslySetInnerHTML));
				}
				if ("production" !== process.env.NODE_ENV) {
					("production" !== process.env.NODE_ENV ? warning(
						props.innerHTML == null,
						'Directly setting property `innerHTML` is not permitted. ' +
						'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
					) : null);
					("production" !== process.env.NODE_ENV ? warning(
						!props.contentEditable || props.children == null,
						'A component is `contentEditable` and contains `children` managed by ' +
						'React. It is now your responsibility to guarantee that none of ' +
						'those nodes are unexpectedly modified or duplicated. This is ' +
						'probably not intentional.'
					) : null);
				}
				("production" !== process.env.NODE_ENV ? invariant(
					props.style == null || typeof props.style === 'object',
					'The `style` prop expects a mapping from style properties to values, ' +
					'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
					'using JSX.'
				) : invariant(props.style == null || typeof props.style === 'object'));
			}

			function putListener(id, registrationName, listener, transaction) {
				if ("production" !== process.env.NODE_ENV) {
					// IE8 has no API for event capturing and the `onScroll` event doesn't
					// bubble.
					("production" !== process.env.NODE_ENV ? warning(
						registrationName !== 'onScroll' || isEventSupported('scroll', true),
						'This browser doesn\'t support the `onScroll` event'
					) : null);
				}
				var container = ReactMount.findReactContainerForID(id);
				if (container) {
					var doc = container.nodeType === ELEMENT_NODE_TYPE ?
						container.ownerDocument :
						container;
					listenTo(registrationName, doc);
				}
				transaction.getPutListenerQueue().enqueuePutListener(
					id,
					registrationName,
					listener
				);
			}

			// For HTML, certain tags should omit their close tag. We keep a whitelist for
			// those special cased tags.

			var omittedCloseTags = {
				'area': true,
				'base': true,
				'br': true,
				'col': true,
				'embed': true,
				'hr': true,
				'img': true,
				'input': true,
				'keygen': true,
				'link': true,
				'meta': true,
				'param': true,
				'source': true,
				'track': true,
				'wbr': true
				// NOTE: menuitem's close tag should be omitted, but that causes problems.
			};

			// We accept any tag to be rendered but since this gets injected into abitrary
			// HTML, we want to make sure that it's a safe tag.
			// http://www.w3.org/TR/REC-xml/#NT-Name

			var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
			var validatedTagCache = {};
			var hasOwnProperty = {}.hasOwnProperty;

			function validateDangerousTag(tag) {
				if (!hasOwnProperty.call(validatedTagCache, tag)) {
					("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
					validatedTagCache[tag] = true;
				}
			}

			/**
			 * Creates a new React class that is idempotent and capable of containing other
			 * React components. It accepts event listeners and DOM properties that are
			 * valid according to `DOMProperty`.
			 *
			 *  - Event listeners: `onClick`, `onMouseDown`, etc.
			 *  - DOM properties: `className`, `name`, `title`, etc.
			 *
			 * The `style` property functions differently from the DOM API. It accepts an
			 * object mapping of style properties to values.
			 *
			 * @constructor ReactDOMComponent
			 * @extends ReactMultiChild
			 */
			function ReactDOMComponent(tag) {
				validateDangerousTag(tag);
				this._tag = tag;
				this._renderedChildren = null;
				this._previousStyleCopy = null;
				this._rootNodeID = null;
			}

			ReactDOMComponent.displayName = 'ReactDOMComponent';

			ReactDOMComponent.Mixin = {

				construct: function (element) {
					this._currentElement = element;
				},

				/**
				 * Generates root tag markup then recurses. This method has side effects and
				 * is not idempotent.
				 *
				 * @internal
				 * @param {string} rootID The root DOM ID for this node.
				 * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
				 * @return {string} The computed markup.
				 */
				mountComponent: function (rootID, transaction, context) {
					this._rootNodeID = rootID;
					assertValidProps(this._currentElement.props);
					var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
					return (
						this._createOpenTagMarkupAndPutListeners(transaction) +
						this._createContentMarkup(transaction, context) +
						closeTag
					);
				},

				/**
				 * Creates markup for the open tag and all attributes.
				 *
				 * This method has side effects because events get registered.
				 *
				 * Iterating over object properties is faster than iterating over arrays.
				 * @see http://jsperf.com/obj-vs-arr-iteration
				 *
				 * @private
				 * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
				 * @return {string} Markup of opening tag.
				 */
				_createOpenTagMarkupAndPutListeners: function (transaction) {
					var props = this._currentElement.props;
					var ret = '<' + this._tag;

					for (var propKey in props) {
						if (!props.hasOwnProperty(propKey)) {
							continue;
						}
						var propValue = props[propKey];
						if (propValue == null) {
							continue;
						}
						if (registrationNameModules.hasOwnProperty(propKey)) {
							putListener(this._rootNodeID, propKey, propValue, transaction);
						} else {
							if (propKey === STYLE) {
								if (propValue) {
									propValue = this._previousStyleCopy = assign({}, props.style);
								}
								propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
							}
							var markup =
								DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
							if (markup) {
								ret += ' ' + markup;
							}
						}
					}

					// For static pages, no need to put React ID and checksum. Saves lots of
					// bytes.
					if (transaction.renderToStaticMarkup) {
						return ret + '>';
					}

					var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
					return ret + ' ' + markupForID + '>';
				},

				/**
				 * Creates markup for the content between the tags.
				 *
				 * @private
				 * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
				 * @param {object} context
				 * @return {string} Content markup.
				 */
				_createContentMarkup: function (transaction, context) {
					var prefix = '';
					if (this._tag === 'listing' ||
						this._tag === 'pre' ||
						this._tag === 'textarea') {
						// Add an initial newline because browsers ignore the first newline in
						// a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
						// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
						prefix = '\n';
					}

					var props = this._currentElement.props;

					// Intentional use of != to avoid catching zero/false.
					var innerHTML = props.dangerouslySetInnerHTML;
					if (innerHTML != null) {
						if (innerHTML.__html != null) {
							return prefix + innerHTML.__html;
						}
					} else {
						var contentToUse =
							CONTENT_TYPES[typeof props.children] ? props.children : null;
						var childrenToUse = contentToUse != null ? null : props.children;
						if (contentToUse != null) {
							return prefix + escapeTextContentForBrowser(contentToUse);
						} else if (childrenToUse != null) {
							var mountImages = this.mountChildren(
								childrenToUse,
								transaction,
								context
							);
							return prefix + mountImages.join('');
						}
					}
					return prefix;
				},

				receiveComponent: function (nextElement, transaction, context) {
					var prevElement = this._currentElement;
					this._currentElement = nextElement;
					this.updateComponent(transaction, prevElement, nextElement, context);
				},

				/**
				 * Updates a native DOM component after it has already been allocated and
				 * attached to the DOM. Reconciles the root DOM node, then recurses.
				 *
				 * @param {ReactReconcileTransaction} transaction
				 * @param {ReactElement} prevElement
				 * @param {ReactElement} nextElement
				 * @internal
				 * @overridable
				 */
				updateComponent: function (transaction, prevElement, nextElement, context) {
					assertValidProps(this._currentElement.props);
					this._updateDOMProperties(prevElement.props, transaction);
					this._updateDOMChildren(prevElement.props, transaction, context);
				},

				/**
				 * Reconciles the properties by detecting differences in property values and
				 * updating the DOM as necessary. This function is probably the single most
				 * critical path for performance optimization.
				 *
				 * TODO: Benchmark whether checking for changed values in memory actually
				 *       improves performance (especially statically positioned elements).
				 * TODO: Benchmark the effects of putting this at the top since 99% of props
				 *       do not change for a given reconciliation.
				 * TODO: Benchmark areas that can be improved with caching.
				 *
				 * @private
				 * @param {object} lastProps
				 * @param {ReactReconcileTransaction} transaction
				 */
				_updateDOMProperties: function (lastProps, transaction) {
					var nextProps = this._currentElement.props;
					var propKey;
					var styleName;
					var styleUpdates;
					for (propKey in lastProps) {
						if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
							continue;
						}
						if (propKey === STYLE) {
							var lastStyle = this._previousStyleCopy;
							for (styleName in lastStyle) {
								if (lastStyle.hasOwnProperty(styleName)) {
									styleUpdates = styleUpdates || {};
									styleUpdates[styleName] = '';
								}
							}
							this._previousStyleCopy = null;
						} else if (registrationNameModules.hasOwnProperty(propKey)) {
							deleteListener(this._rootNodeID, propKey);
						} else if (
							DOMProperty.isStandardName[propKey] ||
							DOMProperty.isCustomAttribute(propKey)) {
							BackendIDOperations.deletePropertyByID(
								this._rootNodeID,
								propKey
							);
						}
					}
					for (propKey in nextProps) {
						var nextProp = nextProps[propKey];
						var lastProp = propKey === STYLE ?
							this._previousStyleCopy :
							lastProps[propKey];
						if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
							continue;
						}
						if (propKey === STYLE) {
							if (nextProp) {
								nextProp = this._previousStyleCopy = assign({}, nextProp);
							} else {
								this._previousStyleCopy = null;
							}
							if (lastProp) {
								// Unset styles on `lastProp` but not on `nextProp`.
								for (styleName in lastProp) {
									if (lastProp.hasOwnProperty(styleName) &&
										(!nextProp || !nextProp.hasOwnProperty(styleName))) {
										styleUpdates = styleUpdates || {};
										styleUpdates[styleName] = '';
									}
								}
								// Update styles that changed since `lastProp`.
								for (styleName in nextProp) {
									if (nextProp.hasOwnProperty(styleName) &&
										lastProp[styleName] !== nextProp[styleName]) {
										styleUpdates = styleUpdates || {};
										styleUpdates[styleName] = nextProp[styleName];
									}
								}
							} else {
								// Relies on `updateStylesByID` not mutating `styleUpdates`.
								styleUpdates = nextProp;
							}
						} else if (registrationNameModules.hasOwnProperty(propKey)) {
							putListener(this._rootNodeID, propKey, nextProp, transaction);
						} else if (
							DOMProperty.isStandardName[propKey] ||
							DOMProperty.isCustomAttribute(propKey)) {
							BackendIDOperations.updatePropertyByID(
								this._rootNodeID,
								propKey,
								nextProp
							);
						}
					}
					if (styleUpdates) {
						BackendIDOperations.updateStylesByID(
							this._rootNodeID,
							styleUpdates
						);
					}
				},

				/**
				 * Reconciles the children with the various properties that affect the
				 * children content.
				 *
				 * @param {object} lastProps
				 * @param {ReactReconcileTransaction} transaction
				 */
				_updateDOMChildren: function (lastProps, transaction, context) {
					var nextProps = this._currentElement.props;

					var lastContent =
						CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
					var nextContent =
						CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

					var lastHtml =
						lastProps.dangerouslySetInnerHTML &&
						lastProps.dangerouslySetInnerHTML.__html;
					var nextHtml =
						nextProps.dangerouslySetInnerHTML &&
						nextProps.dangerouslySetInnerHTML.__html;

					// Note the use of `!=` which checks for null or undefined.
					var lastChildren = lastContent != null ? null : lastProps.children;
					var nextChildren = nextContent != null ? null : nextProps.children;

					// If we're switching from children to content/html or vice versa, remove
					// the old content
					var lastHasContentOrHtml = lastContent != null || lastHtml != null;
					var nextHasContentOrHtml = nextContent != null || nextHtml != null;
					if (lastChildren != null && nextChildren == null) {
						this.updateChildren(null, transaction, context);
					} else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
						this.updateTextContent('');
					}

					if (nextContent != null) {
						if (lastContent !== nextContent) {
							this.updateTextContent('' + nextContent);
						}
					} else if (nextHtml != null) {
						if (lastHtml !== nextHtml) {
							BackendIDOperations.updateInnerHTMLByID(
								this._rootNodeID,
								nextHtml
							);
						}
					} else if (nextChildren != null) {
						this.updateChildren(nextChildren, transaction, context);
					}
				},

				/**
				 * Destroys all event registrations for this instance. Does not remove from
				 * the DOM. That must be done by the parent.
				 *
				 * @internal
				 */
				unmountComponent: function () {
					this.unmountChildren();
					ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
					ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
					this._rootNodeID = null;
				}

			};

			ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
				mountComponent: 'mountComponent',
				updateComponent: 'updateComponent'
			});

			assign(
				ReactDOMComponent.prototype,
				ReactDOMComponent.Mixin,
				ReactMultiChild.Mixin
			);

			ReactDOMComponent.injection = {
				injectIDOperations: function (IDOperations) {
					ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
				}
			};

			module.exports = ReactDOMComponent;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 336 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactMultiChild
		 * @typechecks static-only
		 */

		'use strict';

		var ReactComponentEnvironment = __webpack_require__(333);
		var ReactMultiChildUpdateTypes = __webpack_require__(312);

		var ReactReconciler = __webpack_require__(256);
		var ReactChildReconciler = __webpack_require__(337);

		/**
		 * Updating children of a component may trigger recursive updates. The depth is
		 * used to batch recursive updates to render markup more efficiently.
		 *
		 * @type {number}
		 * @private
		 */
		var updateDepth = 0;

		/**
		 * Queue of update configuration objects.
		 *
		 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
		 *
		 * @type {array<object>}
		 * @private
		 */
		var updateQueue = [];

		/**
		 * Queue of markup to be rendered.
		 *
		 * @type {array<string>}
		 * @private
		 */
		var markupQueue = [];

		/**
		 * Enqueues markup to be rendered and inserted at a supplied index.
		 *
		 * @param {string} parentID ID of the parent component.
		 * @param {string} markup Markup that renders into an element.
		 * @param {number} toIndex Destination index.
		 * @private
		 */
		function enqueueMarkup(parentID, markup, toIndex) {
			// NOTE: Null values reduce hidden classes.
			updateQueue.push({
				parentID: parentID,
				parentNode: null,
				type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
				markupIndex: markupQueue.push(markup) - 1,
				textContent: null,
				fromIndex: null,
				toIndex: toIndex
			});
		}

		/**
		 * Enqueues moving an existing element to another index.
		 *
		 * @param {string} parentID ID of the parent component.
		 * @param {number} fromIndex Source index of the existing element.
		 * @param {number} toIndex Destination index of the element.
		 * @private
		 */
		function enqueueMove(parentID, fromIndex, toIndex) {
			// NOTE: Null values reduce hidden classes.
			updateQueue.push({
				parentID: parentID,
				parentNode: null,
				type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
				markupIndex: null,
				textContent: null,
				fromIndex: fromIndex,
				toIndex: toIndex
			});
		}

		/**
		 * Enqueues removing an element at an index.
		 *
		 * @param {string} parentID ID of the parent component.
		 * @param {number} fromIndex Index of the element to remove.
		 * @private
		 */
		function enqueueRemove(parentID, fromIndex) {
			// NOTE: Null values reduce hidden classes.
			updateQueue.push({
				parentID: parentID,
				parentNode: null,
				type: ReactMultiChildUpdateTypes.REMOVE_NODE,
				markupIndex: null,
				textContent: null,
				fromIndex: fromIndex,
				toIndex: null
			});
		}

		/**
		 * Enqueues setting the text content.
		 *
		 * @param {string} parentID ID of the parent component.
		 * @param {string} textContent Text content to set.
		 * @private
		 */
		function enqueueTextContent(parentID, textContent) {
			// NOTE: Null values reduce hidden classes.
			updateQueue.push({
				parentID: parentID,
				parentNode: null,
				type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
				markupIndex: null,
				textContent: textContent,
				fromIndex: null,
				toIndex: null
			});
		}

		/**
		 * Processes any enqueued updates.
		 *
		 * @private
		 */
		function processQueue() {
			if (updateQueue.length) {
				ReactComponentEnvironment.processChildrenUpdates(
					updateQueue,
					markupQueue
				);
				clearQueue();
			}
		}

		/**
		 * Clears any enqueued updates.
		 *
		 * @private
		 */
		function clearQueue() {
			updateQueue.length = 0;
			markupQueue.length = 0;
		}

		/**
		 * ReactMultiChild are capable of reconciling multiple children.
		 *
		 * @class ReactMultiChild
		 * @internal
		 */
		var ReactMultiChild = {

			/**
			 * Provides common functionality for components that must reconcile multiple
			 * children. This is used by `ReactDOMComponent` to mount, update, and
			 * unmount child components.
			 *
			 * @lends {ReactMultiChild.prototype}
			 */
			Mixin: {

				/**
				 * Generates a "mount image" for each of the supplied children. In the case
				 * of `ReactDOMComponent`, a mount image is a string of markup.
				 *
				 * @param {?object} nestedChildren Nested child maps.
				 * @return {array} An array of mounted representations.
				 * @internal
				 */
				mountChildren: function (nestedChildren, transaction, context) {
					var children = ReactChildReconciler.instantiateChildren(
						nestedChildren, transaction, context
					);
					this._renderedChildren = children;
					var mountImages = [];
					var index = 0;
					for (var name in children) {
						if (children.hasOwnProperty(name)) {
							var child = children[name];
							// Inlined for performance, see `ReactInstanceHandles.createReactID`.
							var rootID = this._rootNodeID + name;
							var mountImage = ReactReconciler.mountComponent(
								child,
								rootID,
								transaction,
								context
							);
							child._mountIndex = index;
							mountImages.push(mountImage);
							index++;
						}
					}
					return mountImages;
				},

				/**
				 * Replaces any rendered children with a text content string.
				 *
				 * @param {string} nextContent String of content.
				 * @internal
				 */
				updateTextContent: function (nextContent) {
					updateDepth++;
					var errorThrown = true;
					try {
						var prevChildren = this._renderedChildren;
						// Remove any rendered children.
						ReactChildReconciler.unmountChildren(prevChildren);
						// TODO: The setTextContent operation should be enough
						for (var name in prevChildren) {
							if (prevChildren.hasOwnProperty(name)) {
								this._unmountChildByName(prevChildren[name], name);
							}
						}
						// Set new text content.
						this.setTextContent(nextContent);
						errorThrown = false;
					} finally {
						updateDepth--;
						if (!updateDepth) {
							if (errorThrown) {
								clearQueue();
							} else {
								processQueue();
							}
						}
					}
				},

				/**
				 * Updates the rendered children with new children.
				 *
				 * @param {?object} nextNestedChildren Nested child maps.
				 * @param {ReactReconcileTransaction} transaction
				 * @internal
				 */
				updateChildren: function (nextNestedChildren, transaction, context) {
					updateDepth++;
					var errorThrown = true;
					try {
						this._updateChildren(nextNestedChildren, transaction, context);
						errorThrown = false;
					} finally {
						updateDepth--;
						if (!updateDepth) {
							if (errorThrown) {
								clearQueue();
							} else {
								processQueue();
							}
						}

					}
				},

				/**
				 * Improve performance by isolating this hot code path from the try/catch
				 * block in `updateChildren`.
				 *
				 * @param {?object} nextNestedChildren Nested child maps.
				 * @param {ReactReconcileTransaction} transaction
				 * @final
				 * @protected
				 */
				_updateChildren: function (nextNestedChildren, transaction, context) {
					var prevChildren = this._renderedChildren;
					var nextChildren = ReactChildReconciler.updateChildren(
						prevChildren, nextNestedChildren, transaction, context
					);
					this._renderedChildren = nextChildren;
					if (!nextChildren && !prevChildren) {
						return;
					}
					var name;
					// `nextIndex` will increment for each child in `nextChildren`, but
					// `lastIndex` will be the last index visited in `prevChildren`.
					var lastIndex = 0;
					var nextIndex = 0;
					for (name in nextChildren) {
						if (!nextChildren.hasOwnProperty(name)) {
							continue;
						}
						var prevChild = prevChildren && prevChildren[name];
						var nextChild = nextChildren[name];
						if (prevChild === nextChild) {
							this.moveChild(prevChild, nextIndex, lastIndex);
							lastIndex = Math.max(prevChild._mountIndex, lastIndex);
							prevChild._mountIndex = nextIndex;
						} else {
							if (prevChild) {
								// Update `lastIndex` before `_mountIndex` gets unset by unmounting.
								lastIndex = Math.max(prevChild._mountIndex, lastIndex);
								this._unmountChildByName(prevChild, name);
							}
							// The child must be instantiated before it's mounted.
							this._mountChildByNameAtIndex(
								nextChild, name, nextIndex, transaction, context
							);
						}
						nextIndex++;
					}
					// Remove children that are no longer present.
					for (name in prevChildren) {
						if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
							this._unmountChildByName(prevChildren[name], name);
						}
					}
				},

				/**
				 * Unmounts all rendered children. This should be used to clean up children
				 * when this component is unmounted.
				 *
				 * @internal
				 */
				unmountChildren: function () {
					var renderedChildren = this._renderedChildren;
					ReactChildReconciler.unmountChildren(renderedChildren);
					this._renderedChildren = null;
				},

				/**
				 * Moves a child component to the supplied index.
				 *
				 * @param {ReactComponent} child Component to move.
				 * @param {number} toIndex Destination index of the element.
				 * @param {number} lastIndex Last index visited of the siblings of `child`.
				 * @protected
				 */
				moveChild: function (child, toIndex, lastIndex) {
					// If the index of `child` is less than `lastIndex`, then it needs to
					// be moved. Otherwise, we do not need to move it because a child will be
					// inserted or moved before `child`.
					if (child._mountIndex < lastIndex) {
						enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
					}
				},

				/**
				 * Creates a child component.
				 *
				 * @param {ReactComponent} child Component to create.
				 * @param {string} mountImage Markup to insert.
				 * @protected
				 */
				createChild: function (child, mountImage) {
					enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
				},

				/**
				 * Removes a child component.
				 *
				 * @param {ReactComponent} child Child to remove.
				 * @protected
				 */
				removeChild: function (child) {
					enqueueRemove(this._rootNodeID, child._mountIndex);
				},

				/**
				 * Sets this text content string.
				 *
				 * @param {string} textContent Text content to set.
				 * @protected
				 */
				setTextContent: function (textContent) {
					enqueueTextContent(this._rootNodeID, textContent);
				},

				/**
				 * Mounts a child with the supplied name.
				 *
				 * NOTE: This is part of `updateChildren` and is here for readability.
				 *
				 * @param {ReactComponent} child Component to mount.
				 * @param {string} name Name of the child.
				 * @param {number} index Index at which to insert the child.
				 * @param {ReactReconcileTransaction} transaction
				 * @private
				 */
				_mountChildByNameAtIndex: function (child,
													name,
													index,
													transaction,
													context) {
					// Inlined for performance, see `ReactInstanceHandles.createReactID`.
					var rootID = this._rootNodeID + name;
					var mountImage = ReactReconciler.mountComponent(
						child,
						rootID,
						transaction,
						context
					);
					child._mountIndex = index;
					this.createChild(child, mountImage);
				},

				/**
				 * Unmounts a rendered child by name.
				 *
				 * NOTE: This is part of `updateChildren` and is here for readability.
				 *
				 * @param {ReactComponent} child Component to unmount.
				 * @param {string} name Name of the child in `this._renderedChildren`.
				 * @private
				 */
				_unmountChildByName: function (child, name) {
					this.removeChild(child);
					child._mountIndex = null;
				}

			}

		};

		module.exports = ReactMultiChild;


		/***/
	},
	/* 337 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactChildReconciler
		 * @typechecks static-only
		 */

		'use strict';

		var ReactReconciler = __webpack_require__(256);

		var flattenChildren = __webpack_require__(338);
		var instantiateReactComponent = __webpack_require__(331);
		var shouldUpdateReactComponent = __webpack_require__(334);

		/**
		 * ReactChildReconciler provides helpers for initializing or updating a set of
		 * children. Its output is suitable for passing it onto ReactMultiChild which
		 * does diffed reordering and insertion.
		 */
		var ReactChildReconciler = {

			/**
			 * Generates a "mount image" for each of the supplied children. In the case
			 * of `ReactDOMComponent`, a mount image is a string of markup.
			 *
			 * @param {?object} nestedChildNodes Nested child maps.
			 * @return {?object} A set of child instances.
			 * @internal
			 */
			instantiateChildren: function (nestedChildNodes, transaction, context) {
				var children = flattenChildren(nestedChildNodes);
				for (var name in children) {
					if (children.hasOwnProperty(name)) {
						var child = children[name];
						// The rendered children must be turned into instances as they're
						// mounted.
						var childInstance = instantiateReactComponent(child, null);
						children[name] = childInstance;
					}
				}
				return children;
			},

			/**
			 * Updates the rendered children and returns a new set of children.
			 *
			 * @param {?object} prevChildren Previously initialized set of children.
			 * @param {?object} nextNestedChildNodes Nested child maps.
			 * @param {ReactReconcileTransaction} transaction
			 * @param {object} context
			 * @return {?object} A new set of child instances.
			 * @internal
			 */
			updateChildren: function (prevChildren,
									  nextNestedChildNodes,
									  transaction,
									  context) {
				// We currently don't have a way to track moves here but if we use iterators
				// instead of for..in we can zip the iterators and check if an item has
				// moved.
				// TODO: If nothing has changed, return the prevChildren object so that we
				// can quickly bailout if nothing has changed.
				var nextChildren = flattenChildren(nextNestedChildNodes);
				if (!nextChildren && !prevChildren) {
					return null;
				}
				var name;
				for (name in nextChildren) {
					if (!nextChildren.hasOwnProperty(name)) {
						continue;
					}
					var prevChild = prevChildren && prevChildren[name];
					var prevElement = prevChild && prevChild._currentElement;
					var nextElement = nextChildren[name];
					if (shouldUpdateReactComponent(prevElement, nextElement)) {
						ReactReconciler.receiveComponent(
							prevChild, nextElement, transaction, context
						);
						nextChildren[name] = prevChild;
					} else {
						if (prevChild) {
							ReactReconciler.unmountComponent(prevChild, name);
						}
						// The child must be instantiated before it's mounted.
						var nextChildInstance = instantiateReactComponent(
							nextElement,
							null
						);
						nextChildren[name] = nextChildInstance;
					}
				}
				// Unmount children that are no longer present.
				for (name in prevChildren) {
					if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
						ReactReconciler.unmountComponent(prevChildren[name]);
					}
				}
				return nextChildren;
			},

			/**
			 * Unmounts all rendered children. This should be used to clean up children
			 * when this component is unmounted.
			 *
			 * @param {?object} renderedChildren Previously initialized set of children.
			 * @internal
			 */
			unmountChildren: function (renderedChildren) {
				for (var name in renderedChildren) {
					var renderedChild = renderedChildren[name];
					ReactReconciler.unmountComponent(renderedChild);
				}
			}

		};

		module.exports = ReactChildReconciler;


		/***/
	},
	/* 338 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule flattenChildren
			 */

			'use strict';

			var traverseAllChildren = __webpack_require__(278);
			var warning = __webpack_require__(263);

			/**
			 * @param {function} traverseContext Context passed through traversal.
			 * @param {?ReactComponent} child React child component.
			 * @param {!string} name String name of key path to child.
			 */
			function flattenSingleChildIntoContext(traverseContext, child, name) {
				// We found a component instance.
				var result = traverseContext;
				var keyUnique = !result.hasOwnProperty(name);
				if ("production" !== process.env.NODE_ENV) {
					("production" !== process.env.NODE_ENV ? warning(
						keyUnique,
						'flattenChildren(...): Encountered two children with the same key, ' +
						'`%s`. Child keys must be unique; when two children share a key, only ' +
						'the first child will be used.',
						name
					) : null);
				}
				if (keyUnique && child != null) {
					result[name] = child;
				}
			}

			/**
			 * Flattens children that are typically specified as `props.children`. Any null
			 * children will not be included in the resulting object.
			 * @return {!object} flattened children keyed by name.
			 */
			function flattenChildren(children) {
				if (children == null) {
					return children;
				}
				var result = {};
				traverseAllChildren(children, flattenSingleChildIntoContext, result);
				return result;
			}

			module.exports = flattenChildren;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 339 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactDefaultInjection
			 */

			'use strict';

			var BeforeInputEventPlugin = __webpack_require__(340);
			var ChangeEventPlugin = __webpack_require__(348);
			var ClientReactRootIndex = __webpack_require__(350);
			var DefaultEventPluginOrder = __webpack_require__(351);
			var EnterLeaveEventPlugin = __webpack_require__(352);
			var ExecutionEnvironment = __webpack_require__(299);
			var HTMLDOMPropertyConfig = __webpack_require__(356);
			var MobileSafariClickEventPlugin = __webpack_require__(357);
			var ReactBrowserComponentMixin = __webpack_require__(358);
			var ReactClass = __webpack_require__(285);
			var ReactComponentBrowserEnvironment =
				__webpack_require__(295);
			var ReactDefaultBatchingStrategy = __webpack_require__(360);
			var ReactDOMComponent = __webpack_require__(335);
			var ReactDOMButton = __webpack_require__(361);
			var ReactDOMForm = __webpack_require__(364);
			var ReactDOMImg = __webpack_require__(366);
			var ReactDOMIDOperations = __webpack_require__(296);
			var ReactDOMIframe = __webpack_require__(367);
			var ReactDOMInput = __webpack_require__(368);
			var ReactDOMOption = __webpack_require__(371);
			var ReactDOMSelect = __webpack_require__(372);
			var ReactDOMTextarea = __webpack_require__(373);
			var ReactDOMTextComponent = __webpack_require__(290);
			var ReactElement = __webpack_require__(260);
			var ReactEventListener = __webpack_require__(374);
			var ReactInjection = __webpack_require__(377);
			var ReactInstanceHandles = __webpack_require__(279);
			var ReactMount = __webpack_require__(315);
			var ReactReconcileTransaction = __webpack_require__(378);
			var SelectEventPlugin = __webpack_require__(384);
			var ServerReactRootIndex = __webpack_require__(386);
			var SimpleEventPlugin = __webpack_require__(387);
			var SVGDOMPropertyConfig = __webpack_require__(396);

			var createFullPageComponent = __webpack_require__(397);

			function autoGenerateWrapperClass(type) {
				return ReactClass.createClass({
					tagName: type.toUpperCase(),
					render: function () {
						return new ReactElement(
							type,
							null,
							null,
							null,
							null,
							this.props
						);
					}
				});
			}

			function inject() {
				ReactInjection.EventEmitter.injectReactEventListener(
					ReactEventListener
				);

				/**
				 * Inject modules for resolving DOM hierarchy and plugin ordering.
				 */
				ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
				ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
				ReactInjection.EventPluginHub.injectMount(ReactMount);

				/**
				 * Some important event plugins included by default (without having to require
				 * them).
				 */
				ReactInjection.EventPluginHub.injectEventPluginsByName({
					SimpleEventPlugin: SimpleEventPlugin,
					EnterLeaveEventPlugin: EnterLeaveEventPlugin,
					ChangeEventPlugin: ChangeEventPlugin,
					MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
					SelectEventPlugin: SelectEventPlugin,
					BeforeInputEventPlugin: BeforeInputEventPlugin
				});

				ReactInjection.NativeComponent.injectGenericComponentClass(
					ReactDOMComponent
				);

				ReactInjection.NativeComponent.injectTextComponentClass(
					ReactDOMTextComponent
				);

				ReactInjection.NativeComponent.injectAutoWrapper(
					autoGenerateWrapperClass
				);

				// This needs to happen before createFullPageComponent() otherwise the mixin
				// won't be included.
				ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

				ReactInjection.NativeComponent.injectComponentClasses({
					'button': ReactDOMButton,
					'form': ReactDOMForm,
					'iframe': ReactDOMIframe,
					'img': ReactDOMImg,
					'input': ReactDOMInput,
					'option': ReactDOMOption,
					'select': ReactDOMSelect,
					'textarea': ReactDOMTextarea,

					'html': createFullPageComponent('html'),
					'head': createFullPageComponent('head'),
					'body': createFullPageComponent('body')
				});

				ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
				ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

				ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

				ReactInjection.Updates.injectReconcileTransaction(
					ReactReconcileTransaction
				);
				ReactInjection.Updates.injectBatchingStrategy(
					ReactDefaultBatchingStrategy
				);

				ReactInjection.RootIndex.injectCreateReactRootIndex(
					ExecutionEnvironment.canUseDOM ?
						ClientReactRootIndex.createReactRootIndex :
						ServerReactRootIndex.createReactRootIndex
				);

				ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
				ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

				if ("production" !== process.env.NODE_ENV) {
					var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
					if ((/[?&]react_perf\b/).test(url)) {
						var ReactDefaultPerf = __webpack_require__(398);
						ReactDefaultPerf.start();
					}
				}
			}

			module.exports = {
				inject: inject
			};

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 340 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015 Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule BeforeInputEventPlugin
		 * @typechecks static-only
		 */

		'use strict';

		var EventConstants = __webpack_require__(276);
		var EventPropagators = __webpack_require__(341);
		var ExecutionEnvironment = __webpack_require__(299);
		var FallbackCompositionState = __webpack_require__(342);
		var SyntheticCompositionEvent = __webpack_require__(344);
		var SyntheticInputEvent = __webpack_require__(347);

		var keyOf = __webpack_require__(287);

		var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
		var START_KEYCODE = 229;

		var canUseCompositionEvent = (
			ExecutionEnvironment.canUseDOM &&
			'CompositionEvent' in window
		);

		var documentMode = null;
		if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
			documentMode = document.documentMode;
		}

		// Webkit offers a very useful `textInput` event that can be used to
		// directly represent `beforeInput`. The IE `textinput` event is not as
		// useful, so we don't use it.
		var canUseTextInputEvent = (
			ExecutionEnvironment.canUseDOM &&
			'TextEvent' in window && !documentMode && !isPresto()
		);

		// In IE9+, we have access to composition events, but the data supplied
		// by the native compositionend event may be incorrect. Japanese ideographic
		// spaces, for instance (\u3000) are not recorded correctly.
		var useFallbackCompositionData = (
			ExecutionEnvironment.canUseDOM &&
			(
				(!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
			)
		);

		/**
		 * Opera <= 12 includes TextEvent in window, but does not fire
		 * text input events. Rely on keypress instead.
		 */
		function isPresto() {
			var opera = window.opera;
			return (
				typeof opera === 'object' &&
				typeof opera.version === 'function' &&
				parseInt(opera.version(), 10) <= 12
			);
		}

		var SPACEBAR_CODE = 32;
		var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

		var topLevelTypes = EventConstants.topLevelTypes;

		// Events and their corresponding property names.
		var eventTypes = {
			beforeInput: {
				phasedRegistrationNames: {
					bubbled: keyOf({onBeforeInput: null}),
					captured: keyOf({onBeforeInputCapture: null})
				},
				dependencies: [
					topLevelTypes.topCompositionEnd,
					topLevelTypes.topKeyPress,
					topLevelTypes.topTextInput,
					topLevelTypes.topPaste
				]
			},
			compositionEnd: {
				phasedRegistrationNames: {
					bubbled: keyOf({onCompositionEnd: null}),
					captured: keyOf({onCompositionEndCapture: null})
				},
				dependencies: [
					topLevelTypes.topBlur,
					topLevelTypes.topCompositionEnd,
					topLevelTypes.topKeyDown,
					topLevelTypes.topKeyPress,
					topLevelTypes.topKeyUp,
					topLevelTypes.topMouseDown
				]
			},
			compositionStart: {
				phasedRegistrationNames: {
					bubbled: keyOf({onCompositionStart: null}),
					captured: keyOf({onCompositionStartCapture: null})
				},
				dependencies: [
					topLevelTypes.topBlur,
					topLevelTypes.topCompositionStart,
					topLevelTypes.topKeyDown,
					topLevelTypes.topKeyPress,
					topLevelTypes.topKeyUp,
					topLevelTypes.topMouseDown
				]
			},
			compositionUpdate: {
				phasedRegistrationNames: {
					bubbled: keyOf({onCompositionUpdate: null}),
					captured: keyOf({onCompositionUpdateCapture: null})
				},
				dependencies: [
					topLevelTypes.topBlur,
					topLevelTypes.topCompositionUpdate,
					topLevelTypes.topKeyDown,
					topLevelTypes.topKeyPress,
					topLevelTypes.topKeyUp,
					topLevelTypes.topMouseDown
				]
			}
		};

		// Track whether we've ever handled a keypress on the space key.
		var hasSpaceKeypress = false;

		/**
		 * Return whether a native keypress event is assumed to be a command.
		 * This is required because Firefox fires `keypress` events for key commands
		 * (cut, copy, select-all, etc.) even though no character is inserted.
		 */
		function isKeypressCommand(nativeEvent) {
			return (
				(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
					// ctrlKey && altKey is equivalent to AltGr, and is not a command.
				!(nativeEvent.ctrlKey && nativeEvent.altKey)
			);
		}


		/**
		 * Translate native top level events into event types.
		 *
		 * @param {string} topLevelType
		 * @return {object}
		 */
		function getCompositionEventType(topLevelType) {
			switch (topLevelType) {
				case topLevelTypes.topCompositionStart:
					return eventTypes.compositionStart;
				case topLevelTypes.topCompositionEnd:
					return eventTypes.compositionEnd;
				case topLevelTypes.topCompositionUpdate:
					return eventTypes.compositionUpdate;
			}
		}

		/**
		 * Does our fallback best-guess model think this event signifies that
		 * composition has begun?
		 *
		 * @param {string} topLevelType
		 * @param {object} nativeEvent
		 * @return {boolean}
		 */
		function isFallbackCompositionStart(topLevelType, nativeEvent) {
			return (
				topLevelType === topLevelTypes.topKeyDown &&
				nativeEvent.keyCode === START_KEYCODE
			);
		}

		/**
		 * Does our fallback mode think that this event is the end of composition?
		 *
		 * @param {string} topLevelType
		 * @param {object} nativeEvent
		 * @return {boolean}
		 */
		function isFallbackCompositionEnd(topLevelType, nativeEvent) {
			switch (topLevelType) {
				case topLevelTypes.topKeyUp:
					// Command keys insert or clear IME input.
					return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
				case topLevelTypes.topKeyDown:
					// Expect IME keyCode on each keydown. If we get any other
					// code we must have exited earlier.
					return (nativeEvent.keyCode !== START_KEYCODE);
				case topLevelTypes.topKeyPress:
				case topLevelTypes.topMouseDown:
				case topLevelTypes.topBlur:
					// Events are not possible without cancelling IME.
					return true;
				default:
					return false;
			}
		}

		/**
		 * Google Input Tools provides composition data via a CustomEvent,
		 * with the `data` property populated in the `detail` object. If this
		 * is available on the event object, use it. If not, this is a plain
		 * composition event and we have nothing special to extract.
		 *
		 * @param {object} nativeEvent
		 * @return {?string}
		 */
		function getDataFromCustomEvent(nativeEvent) {
			var detail = nativeEvent.detail;
			if (typeof detail === 'object' && 'data' in detail) {
				return detail.data;
			}
			return null;
		}

		// Track the current IME composition fallback object, if any.
		var currentComposition = null;

		/**
		 * @param {string} topLevelType Record from `EventConstants`.
		 * @param {DOMEventTarget} topLevelTarget The listening component root node.
		 * @param {string} topLevelTargetID ID of `topLevelTarget`.
		 * @param {object} nativeEvent Native browser event.
		 * @return {?object} A SyntheticCompositionEvent.
		 */
		function extractCompositionEvent(topLevelType,
										 topLevelTarget,
										 topLevelTargetID,
										 nativeEvent) {
			var eventType;
			var fallbackData;

			if (canUseCompositionEvent) {
				eventType = getCompositionEventType(topLevelType);
			} else if (!currentComposition) {
				if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
					eventType = eventTypes.compositionStart;
				}
			} else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
				eventType = eventTypes.compositionEnd;
			}

			if (!eventType) {
				return null;
			}

			if (useFallbackCompositionData) {
				// The current composition is stored statically and must not be
				// overwritten while composition continues.
				if (!currentComposition && eventType === eventTypes.compositionStart) {
					currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
				} else if (eventType === eventTypes.compositionEnd) {
					if (currentComposition) {
						fallbackData = currentComposition.getData();
					}
				}
			}

			var event = SyntheticCompositionEvent.getPooled(
				eventType,
				topLevelTargetID,
				nativeEvent
			);

			if (fallbackData) {
				// Inject data generated from fallback path into the synthetic event.
				// This matches the property of native CompositionEventInterface.
				event.data = fallbackData;
			} else {
				var customData = getDataFromCustomEvent(nativeEvent);
				if (customData !== null) {
					event.data = customData;
				}
			}

			EventPropagators.accumulateTwoPhaseDispatches(event);
			return event;
		}

		/**
		 * @param {string} topLevelType Record from `EventConstants`.
		 * @param {object} nativeEvent Native browser event.
		 * @return {?string} The string corresponding to this `beforeInput` event.
		 */
		function getNativeBeforeInputChars(topLevelType, nativeEvent) {
			switch (topLevelType) {
				case topLevelTypes.topCompositionEnd:
					return getDataFromCustomEvent(nativeEvent);
				case topLevelTypes.topKeyPress:
					/**
					 * If native `textInput` events are available, our goal is to make
					 * use of them. However, there is a special case: the spacebar key.
					 * In Webkit, preventing default on a spacebar `textInput` event
					 * cancels character insertion, but it *also* causes the browser
					 * to fall back to its default spacebar behavior of scrolling the
					 * page.
					 *
					 * Tracking at:
					 * https://code.google.com/p/chromium/issues/detail?id=355103
					 *
					 * To avoid this issue, use the keypress event as if no `textInput`
					 * event is available.
					 */
					var which = nativeEvent.which;
					if (which !== SPACEBAR_CODE) {
						return null;
					}

					hasSpaceKeypress = true;
					return SPACEBAR_CHAR;

				case topLevelTypes.topTextInput:
					// Record the characters to be added to the DOM.
					var chars = nativeEvent.data;

					// If it's a spacebar character, assume that we have already handled
					// it at the keypress level and bail immediately. Android Chrome
					// doesn't give us keycodes, so we need to blacklist it.
					if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
						return null;
					}

					return chars;

				default:
					// For other native event types, do nothing.
					return null;
			}
		}

		/**
		 * For browsers that do not provide the `textInput` event, extract the
		 * appropriate string to use for SyntheticInputEvent.
		 *
		 * @param {string} topLevelType Record from `EventConstants`.
		 * @param {object} nativeEvent Native browser event.
		 * @return {?string} The fallback string for this `beforeInput` event.
		 */
		function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
			// If we are currently composing (IME) and using a fallback to do so,
			// try to extract the composed characters from the fallback object.
			if (currentComposition) {
				if (
					topLevelType === topLevelTypes.topCompositionEnd ||
					isFallbackCompositionEnd(topLevelType, nativeEvent)
				) {
					var chars = currentComposition.getData();
					FallbackCompositionState.release(currentComposition);
					currentComposition = null;
					return chars;
				}
				return null;
			}

			switch (topLevelType) {
				case topLevelTypes.topPaste:
					// If a paste event occurs after a keypress, throw out the input
					// chars. Paste events should not lead to BeforeInput events.
					return null;
				case topLevelTypes.topKeyPress:
					/**
					 * As of v27, Firefox may fire keypress events even when no character
					 * will be inserted. A few possibilities:
					 *
					 * - `which` is `0`. Arrow keys, Esc key, etc.
					 *
					 * - `which` is the pressed key code, but no char is available.
					 *   Ex: 'AltGr + d` in Polish. There is no modified character for
					 *   this key combination and no character is inserted into the
					 *   document, but FF fires the keypress for char code `100` anyway.
					 *   No `input` event will occur.
					 *
					 * - `which` is the pressed key code, but a command combination is
					 *   being used. Ex: `Cmd+C`. No character is inserted, and no
					 *   `input` event will occur.
					 */
					if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
						return String.fromCharCode(nativeEvent.which);
					}
					return null;
				case topLevelTypes.topCompositionEnd:
					return useFallbackCompositionData ? null : nativeEvent.data;
				default:
					return null;
			}
		}

		/**
		 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
		 * `textInput` or fallback behavior.
		 *
		 * @param {string} topLevelType Record from `EventConstants`.
		 * @param {DOMEventTarget} topLevelTarget The listening component root node.
		 * @param {string} topLevelTargetID ID of `topLevelTarget`.
		 * @param {object} nativeEvent Native browser event.
		 * @return {?object} A SyntheticInputEvent.
		 */
		function extractBeforeInputEvent(topLevelType,
										 topLevelTarget,
										 topLevelTargetID,
										 nativeEvent) {
			var chars;

			if (canUseTextInputEvent) {
				chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
			} else {
				chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
			}

			// If no characters are being inserted, no BeforeInput event should
			// be fired.
			if (!chars) {
				return null;
			}

			var event = SyntheticInputEvent.getPooled(
				eventTypes.beforeInput,
				topLevelTargetID,
				nativeEvent
			);

			event.data = chars;
			EventPropagators.accumulateTwoPhaseDispatches(event);
			return event;
		}

		/**
		 * Create an `onBeforeInput` event to match
		 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
		 *
		 * This event plugin is based on the native `textInput` event
		 * available in Chrome, Safari, Opera, and IE. This event fires after
		 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
		 *
		 * `beforeInput` is spec'd but not implemented in any browsers, and
		 * the `input` event does not provide any useful information about what has
		 * actually been added, contrary to the spec. Thus, `textInput` is the best
		 * available event to identify the characters that have actually been inserted
		 * into the target node.
		 *
		 * This plugin is also responsible for emitting `composition` events, thus
		 * allowing us to share composition fallback code for both `beforeInput` and
		 * `composition` event types.
		 */
		var BeforeInputEventPlugin = {

			eventTypes: eventTypes,

			/**
			 * @param {string} topLevelType Record from `EventConstants`.
			 * @param {DOMEventTarget} topLevelTarget The listening component root node.
			 * @param {string} topLevelTargetID ID of `topLevelTarget`.
			 * @param {object} nativeEvent Native browser event.
			 * @return {*} An accumulation of synthetic events.
			 * @see {EventPluginHub.extractEvents}
			 */
			extractEvents: function (topLevelType,
									 topLevelTarget,
									 topLevelTargetID,
									 nativeEvent) {
				return [
					extractCompositionEvent(
						topLevelType,
						topLevelTarget,
						topLevelTargetID,
						nativeEvent
					),
					extractBeforeInputEvent(
						topLevelType,
						topLevelTarget,
						topLevelTargetID,
						nativeEvent
					)
				];
			}
		};

		module.exports = BeforeInputEventPlugin;


		/***/
	},
	/* 341 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule EventPropagators
			 */

			'use strict';

			var EventConstants = __webpack_require__(276);
			var EventPluginHub = __webpack_require__(317);

			var accumulateInto = __webpack_require__(319);
			var forEachAccumulated = __webpack_require__(320);

			var PropagationPhases = EventConstants.PropagationPhases;
			var getListener = EventPluginHub.getListener;

			/**
			 * Some event types have a notion of different registration names for different
			 * "phases" of propagation. This finds listeners by a given phase.
			 */
			function listenerAtPhase(id, event, propagationPhase) {
				var registrationName =
					event.dispatchConfig.phasedRegistrationNames[propagationPhase];
				return getListener(id, registrationName);
			}

			/**
			 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
			 * here, allows us to not have to bind or create functions for each event.
			 * Mutating the event's members allows us to not have to create a wrapping
			 * "dispatch" object that pairs the event with the listener.
			 */
			function accumulateDirectionalDispatches(domID, upwards, event) {
				if ("production" !== process.env.NODE_ENV) {
					if (!domID) {
						throw new Error('Dispatching id must not be null');
					}
				}
				var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
				var listener = listenerAtPhase(domID, event, phase);
				if (listener) {
					event._dispatchListeners =
						accumulateInto(event._dispatchListeners, listener);
					event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
				}
			}

			/**
			 * Collect dispatches (must be entirely collected before dispatching - see unit
			 * tests). Lazily allocate the array to conserve memory.  We must loop through
			 * each event and perform the traversal for each one. We can not perform a
			 * single traversal for the entire collection of events because each event may
			 * have a different target.
			 */
			function accumulateTwoPhaseDispatchesSingle(event) {
				if (event && event.dispatchConfig.phasedRegistrationNames) {
					EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
						event.dispatchMarker,
						accumulateDirectionalDispatches,
						event
					);
				}
			}


			/**
			 * Accumulates without regard to direction, does not look for phased
			 * registration names. Same as `accumulateDirectDispatchesSingle` but without
			 * requiring that the `dispatchMarker` be the same as the dispatched ID.
			 */
			function accumulateDispatches(id, ignoredDirection, event) {
				if (event && event.dispatchConfig.registrationName) {
					var registrationName = event.dispatchConfig.registrationName;
					var listener = getListener(id, registrationName);
					if (listener) {
						event._dispatchListeners =
							accumulateInto(event._dispatchListeners, listener);
						event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
					}
				}
			}

			/**
			 * Accumulates dispatches on an `SyntheticEvent`, but only for the
			 * `dispatchMarker`.
			 * @param {SyntheticEvent} event
			 */
			function accumulateDirectDispatchesSingle(event) {
				if (event && event.dispatchConfig.registrationName) {
					accumulateDispatches(event.dispatchMarker, null, event);
				}
			}

			function accumulateTwoPhaseDispatches(events) {
				forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
			}

			function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
				EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
					fromID,
					toID,
					accumulateDispatches,
					leave,
					enter
				);
			}


			function accumulateDirectDispatches(events) {
				forEachAccumulated(events, accumulateDirectDispatchesSingle);
			}


			/**
			 * A small set of propagation patterns, each of which will accept a small amount
			 * of information, and generate a set of "dispatch ready event objects" - which
			 * are sets of events that have already been annotated with a set of dispatched
			 * listener functions/ids. The API is designed this way to discourage these
			 * propagation strategies from actually executing the dispatches, since we
			 * always want to collect the entire set of dispatches before executing event a
			 * single one.
			 *
			 * @constructor EventPropagators
			 */
			var EventPropagators = {
				accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
				accumulateDirectDispatches: accumulateDirectDispatches,
				accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
			};

			module.exports = EventPropagators;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 342 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule FallbackCompositionState
		 * @typechecks static-only
		 */

		'use strict';

		var PooledClass = __webpack_require__(251);

		var assign = __webpack_require__(253);
		var getTextContentAccessor = __webpack_require__(343);

		/**
		 * This helper class stores information about text content of a target node,
		 * allowing comparison of content before and after a given event.
		 *
		 * Identify the node where selection currently begins, then observe
		 * both its text content and its current position in the DOM. Since the
		 * browser may natively replace the target node during composition, we can
		 * use its position to find its replacement.
		 *
		 * @param {DOMEventTarget} root
		 */
		function FallbackCompositionState(root) {
			this._root = root;
			this._startText = this.getText();
			this._fallbackText = null;
		}

		assign(FallbackCompositionState.prototype, {
			/**
			 * Get current text of input.
			 *
			 * @return {string}
			 */
			getText: function () {
				if ('value' in this._root) {
					return this._root.value;
				}
				return this._root[getTextContentAccessor()];
			},

			/**
			 * Determine the differing substring between the initially stored
			 * text content and the current content.
			 *
			 * @return {string}
			 */
			getData: function () {
				if (this._fallbackText) {
					return this._fallbackText;
				}

				var start;
				var startValue = this._startText;
				var startLength = startValue.length;
				var end;
				var endValue = this.getText();
				var endLength = endValue.length;

				for (start = 0; start < startLength; start++) {
					if (startValue[start] !== endValue[start]) {
						break;
					}
				}

				var minEnd = startLength - start;
				for (end = 1; end <= minEnd; end++) {
					if (startValue[startLength - end] !== endValue[endLength - end]) {
						break;
					}
				}

				var sliceTail = end > 1 ? 1 - end : undefined;
				this._fallbackText = endValue.slice(start, sliceTail);
				return this._fallbackText;
			}
		});

		PooledClass.addPoolingTo(FallbackCompositionState);

		module.exports = FallbackCompositionState;


		/***/
	},
	/* 343 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule getTextContentAccessor
		 */

		'use strict';

		var ExecutionEnvironment = __webpack_require__(299);

		var contentKey = null;

		/**
		 * Gets the key used to access text content on a DOM node.
		 *
		 * @return {?string} Key used to access text content.
		 * @internal
		 */
		function getTextContentAccessor() {
			if (!contentKey && ExecutionEnvironment.canUseDOM) {
				// Prefer textContent to innerText because many browsers support both but
				// SVG <text> elements don't support innerText even when <div> does.
				contentKey = 'textContent' in document.documentElement ?
					'textContent' :
					'innerText';
			}
			return contentKey;
		}

		module.exports = getTextContentAccessor;


		/***/
	},
	/* 344 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticCompositionEvent
		 * @typechecks static-only
		 */

		'use strict';

		var SyntheticEvent = __webpack_require__(345);

		/**
		 * @interface Event
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
		 */
		var CompositionEventInterface = {
			data: null
		};

		/**
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 * @extends {SyntheticUIEvent}
		 */
		function SyntheticCompositionEvent(dispatchConfig,
										   dispatchMarker,
										   nativeEvent) {
			SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
		}

		SyntheticEvent.augmentClass(
			SyntheticCompositionEvent,
			CompositionEventInterface
		);

		module.exports = SyntheticCompositionEvent;


		/***/
	},
	/* 345 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticEvent
		 * @typechecks static-only
		 */

		'use strict';

		var PooledClass = __webpack_require__(251);

		var assign = __webpack_require__(253);
		var emptyFunction = __webpack_require__(264);
		var getEventTarget = __webpack_require__(346);

		/**
		 * @interface Event
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */
		var EventInterface = {
			type: null,
			target: getEventTarget,
			// currentTarget is set when dispatching; no use in copying it here
			currentTarget: emptyFunction.thatReturnsNull,
			eventPhase: null,
			bubbles: null,
			cancelable: null,
			timeStamp: function (event) {
				return event.timeStamp || Date.now();
			},
			defaultPrevented: null,
			isTrusted: null
		};

		/**
		 * Synthetic events are dispatched by event plugins, typically in response to a
		 * top-level event delegation handler.
		 *
		 * These systems should generally use pooling to reduce the frequency of garbage
		 * collection. The system should check `isPersistent` to determine whether the
		 * event should be released into the pool after being dispatched. Users that
		 * need a persisted event should invoke `persist`.
		 *
		 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
		 * normalizing browser quirks. Subclasses do not necessarily have to implement a
		 * DOM interface; custom application-specific events can also subclass this.
		 *
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 */
		function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
			this.dispatchConfig = dispatchConfig;
			this.dispatchMarker = dispatchMarker;
			this.nativeEvent = nativeEvent;

			var Interface = this.constructor.Interface;
			for (var propName in Interface) {
				if (!Interface.hasOwnProperty(propName)) {
					continue;
				}
				var normalize = Interface[propName];
				if (normalize) {
					this[propName] = normalize(nativeEvent);
				} else {
					this[propName] = nativeEvent[propName];
				}
			}

			var defaultPrevented = nativeEvent.defaultPrevented != null ?
				nativeEvent.defaultPrevented :
			nativeEvent.returnValue === false;
			if (defaultPrevented) {
				this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
			} else {
				this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
			}
			this.isPropagationStopped = emptyFunction.thatReturnsFalse;
		}

		assign(SyntheticEvent.prototype, {

			preventDefault: function () {
				this.defaultPrevented = true;
				var event = this.nativeEvent;
				if (event.preventDefault) {
					event.preventDefault();
				} else {
					event.returnValue = false;
				}
				this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
			},

			stopPropagation: function () {
				var event = this.nativeEvent;
				if (event.stopPropagation) {
					event.stopPropagation();
				} else {
					event.cancelBubble = true;
				}
				this.isPropagationStopped = emptyFunction.thatReturnsTrue;
			},

			/**
			 * We release all dispatched `SyntheticEvent`s after each event loop, adding
			 * them back into the pool. This allows a way to hold onto a reference that
			 * won't be added back into the pool.
			 */
			persist: function () {
				this.isPersistent = emptyFunction.thatReturnsTrue;
			},

			/**
			 * Checks if this event should be released back into the pool.
			 *
			 * @return {boolean} True if this should not be released, false otherwise.
			 */
			isPersistent: emptyFunction.thatReturnsFalse,

			/**
			 * `PooledClass` looks for `destructor` on each instance it releases.
			 */
			destructor: function () {
				var Interface = this.constructor.Interface;
				for (var propName in Interface) {
					this[propName] = null;
				}
				this.dispatchConfig = null;
				this.dispatchMarker = null;
				this.nativeEvent = null;
			}

		});

		SyntheticEvent.Interface = EventInterface;

		/**
		 * Helper to reduce boilerplate when creating subclasses.
		 *
		 * @param {function} Class
		 * @param {?object} Interface
		 */
		SyntheticEvent.augmentClass = function (Class, Interface) {
			var Super = this;

			var prototype = Object.create(Super.prototype);
			assign(prototype, Class.prototype);
			Class.prototype = prototype;
			Class.prototype.constructor = Class;

			Class.Interface = assign({}, Super.Interface, Interface);
			Class.augmentClass = Super.augmentClass;

			PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
		};

		PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

		module.exports = SyntheticEvent;


		/***/
	},
	/* 346 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule getEventTarget
		 * @typechecks static-only
		 */

		'use strict';

		/**
		 * Gets the target node from a native browser event by accounting for
		 * inconsistencies in browser DOM APIs.
		 *
		 * @param {object} nativeEvent Native browser event.
		 * @return {DOMEventTarget} Target node.
		 */
		function getEventTarget(nativeEvent) {
			var target = nativeEvent.target || nativeEvent.srcElement || window;
			// Safari may fire events on text nodes (Node.TEXT_NODE is 3).
			// @see http://www.quirksmode.org/js/events_properties.html
			return target.nodeType === 3 ? target.parentNode : target;
		}

		module.exports = getEventTarget;


		/***/
	},
	/* 347 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticInputEvent
		 * @typechecks static-only
		 */

		'use strict';

		var SyntheticEvent = __webpack_require__(345);

		/**
		 * @interface Event
		 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
		 *      /#events-inputevents
		 */
		var InputEventInterface = {
			data: null
		};

		/**
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 * @extends {SyntheticUIEvent}
		 */
		function SyntheticInputEvent(dispatchConfig,
									 dispatchMarker,
									 nativeEvent) {
			SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
		}

		SyntheticEvent.augmentClass(
			SyntheticInputEvent,
			InputEventInterface
		);

		module.exports = SyntheticInputEvent;


		/***/
	},
	/* 348 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ChangeEventPlugin
		 */

		'use strict';

		var EventConstants = __webpack_require__(276);
		var EventPluginHub = __webpack_require__(317);
		var EventPropagators = __webpack_require__(341);
		var ExecutionEnvironment = __webpack_require__(299);
		var ReactUpdates = __webpack_require__(249);
		var SyntheticEvent = __webpack_require__(345);

		var isEventSupported = __webpack_require__(323);
		var isTextInputElement = __webpack_require__(349);
		var keyOf = __webpack_require__(287);

		var topLevelTypes = EventConstants.topLevelTypes;

		var eventTypes = {
			change: {
				phasedRegistrationNames: {
					bubbled: keyOf({onChange: null}),
					captured: keyOf({onChangeCapture: null})
				},
				dependencies: [
					topLevelTypes.topBlur,
					topLevelTypes.topChange,
					topLevelTypes.topClick,
					topLevelTypes.topFocus,
					topLevelTypes.topInput,
					topLevelTypes.topKeyDown,
					topLevelTypes.topKeyUp,
					topLevelTypes.topSelectionChange
				]
			}
		};

		/**
		 * For IE shims
		 */
		var activeElement = null;
		var activeElementID = null;
		var activeElementValue = null;
		var activeElementValueProp = null;

		/**
		 * SECTION: handle `change` event
		 */
		function shouldUseChangeEvent(elem) {
			return (
				elem.nodeName === 'SELECT' ||
				(elem.nodeName === 'INPUT' && elem.type === 'file')
			);
		}

		var doesChangeEventBubble = false;
		if (ExecutionEnvironment.canUseDOM) {
			// See `handleChange` comment below
			doesChangeEventBubble = isEventSupported('change') && (
					(!('documentMode' in document) || document.documentMode > 8)
				);
		}

		function manualDispatchChangeEvent(nativeEvent) {
			var event = SyntheticEvent.getPooled(
				eventTypes.change,
				activeElementID,
				nativeEvent
			);
			EventPropagators.accumulateTwoPhaseDispatches(event);

			// If change and propertychange bubbled, we'd just bind to it like all the
			// other events and have it go through ReactBrowserEventEmitter. Since it
			// doesn't, we manually listen for the events and so we have to enqueue and
			// process the abstract event manually.
			//
			// Batching is necessary here in order to ensure that all event handlers run
			// before the next rerender (including event handlers attached to ancestor
			// elements instead of directly on the input). Without this, controlled
			// components don't work properly in conjunction with event bubbling because
			// the component is rerendered and the value reverted before all the event
			// handlers can run. See https://github.com/facebook/react/issues/708.
			ReactUpdates.batchedUpdates(runEventInBatch, event);
		}

		function runEventInBatch(event) {
			EventPluginHub.enqueueEvents(event);
			EventPluginHub.processEventQueue();
		}

		function startWatchingForChangeEventIE8(target, targetID) {
			activeElement = target;
			activeElementID = targetID;
			activeElement.attachEvent('onchange', manualDispatchChangeEvent);
		}

		function stopWatchingForChangeEventIE8() {
			if (!activeElement) {
				return;
			}
			activeElement.detachEvent('onchange', manualDispatchChangeEvent);
			activeElement = null;
			activeElementID = null;
		}

		function getTargetIDForChangeEvent(topLevelType,
										   topLevelTarget,
										   topLevelTargetID) {
			if (topLevelType === topLevelTypes.topChange) {
				return topLevelTargetID;
			}
		}

		function handleEventsForChangeEventIE8(topLevelType,
											   topLevelTarget,
											   topLevelTargetID) {
			if (topLevelType === topLevelTypes.topFocus) {
				// stopWatching() should be a noop here but we call it just in case we
				// missed a blur event somehow.
				stopWatchingForChangeEventIE8();
				startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
			} else if (topLevelType === topLevelTypes.topBlur) {
				stopWatchingForChangeEventIE8();
			}
		}


		/**
		 * SECTION: handle `input` event
		 */
		var isInputEventSupported = false;
		if (ExecutionEnvironment.canUseDOM) {
			// IE9 claims to support the input event but fails to trigger it when
			// deleting text, so we ignore its input events
			isInputEventSupported = isEventSupported('input') && (
					(!('documentMode' in document) || document.documentMode > 9)
				);
		}

		/**
		 * (For old IE.) Replacement getter/setter for the `value` property that gets
		 * set on the active element.
		 */
		var newValueProp = {
			get: function () {
				return activeElementValueProp.get.call(this);
			},
			set: function (val) {
				// Cast to a string so we can do equality checks.
				activeElementValue = '' + val;
				activeElementValueProp.set.call(this, val);
			}
		};

		/**
		 * (For old IE.) Starts tracking propertychange events on the passed-in element
		 * and override the value property so that we can distinguish user events from
		 * value changes in JS.
		 */
		function startWatchingForValueChange(target, targetID) {
			activeElement = target;
			activeElementID = targetID;
			activeElementValue = target.value;
			activeElementValueProp = Object.getOwnPropertyDescriptor(
				target.constructor.prototype,
				'value'
			);

			Object.defineProperty(activeElement, 'value', newValueProp);
			activeElement.attachEvent('onpropertychange', handlePropertyChange);
		}

		/**
		 * (For old IE.) Removes the event listeners from the currently-tracked element,
		 * if any exists.
		 */
		function stopWatchingForValueChange() {
			if (!activeElement) {
				return;
			}

			// delete restores the original property definition
			delete activeElement.value;
			activeElement.detachEvent('onpropertychange', handlePropertyChange);

			activeElement = null;
			activeElementID = null;
			activeElementValue = null;
			activeElementValueProp = null;
		}

		/**
		 * (For old IE.) Handles a propertychange event, sending a `change` event if
		 * the value of the active element has changed.
		 */
		function handlePropertyChange(nativeEvent) {
			if (nativeEvent.propertyName !== 'value') {
				return;
			}
			var value = nativeEvent.srcElement.value;
			if (value === activeElementValue) {
				return;
			}
			activeElementValue = value;

			manualDispatchChangeEvent(nativeEvent);
		}

		/**
		 * If a `change` event should be fired, returns the target's ID.
		 */
		function getTargetIDForInputEvent(topLevelType,
										  topLevelTarget,
										  topLevelTargetID) {
			if (topLevelType === topLevelTypes.topInput) {
				// In modern browsers (i.e., not IE8 or IE9), the input event is exactly
				// what we want so fall through here and trigger an abstract event
				return topLevelTargetID;
			}
		}

		// For IE8 and IE9.
		function handleEventsForInputEventIE(topLevelType,
											 topLevelTarget,
											 topLevelTargetID) {
			if (topLevelType === topLevelTypes.topFocus) {
				// In IE8, we can capture almost all .value changes by adding a
				// propertychange handler and looking for events with propertyName
				// equal to 'value'
				// In IE9, propertychange fires for most input events but is buggy and
				// doesn't fire when text is deleted, but conveniently, selectionchange
				// appears to fire in all of the remaining cases so we catch those and
				// forward the event if the value has changed
				// In either case, we don't want to call the event handler if the value
				// is changed from JS so we redefine a setter for `.value` that updates
				// our activeElementValue variable, allowing us to ignore those changes
				//
				// stopWatching() should be a noop here but we call it just in case we
				// missed a blur event somehow.
				stopWatchingForValueChange();
				startWatchingForValueChange(topLevelTarget, topLevelTargetID);
			} else if (topLevelType === topLevelTypes.topBlur) {
				stopWatchingForValueChange();
			}
		}

		// For IE8 and IE9.
		function getTargetIDForInputEventIE(topLevelType,
											topLevelTarget,
											topLevelTargetID) {
			if (topLevelType === topLevelTypes.topSelectionChange ||
				topLevelType === topLevelTypes.topKeyUp ||
				topLevelType === topLevelTypes.topKeyDown) {
				// On the selectionchange event, the target is just document which isn't
				// helpful for us so just check activeElement instead.
				//
				// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
				// propertychange on the first input event after setting `value` from a
				// script and fires only keydown, keypress, keyup. Catching keyup usually
				// gets it and catching keydown lets us fire an event for the first
				// keystroke if user does a key repeat (it'll be a little delayed: right
				// before the second keystroke). Other input methods (e.g., paste) seem to
				// fire selectionchange normally.
				if (activeElement && activeElement.value !== activeElementValue) {
					activeElementValue = activeElement.value;
					return activeElementID;
				}
			}
		}


		/**
		 * SECTION: handle `click` event
		 */
		function shouldUseClickEvent(elem) {
			// Use the `click` event to detect changes to checkbox and radio inputs.
			// This approach works across all browsers, whereas `change` does not fire
			// until `blur` in IE8.
			return (
				elem.nodeName === 'INPUT' &&
				(elem.type === 'checkbox' || elem.type === 'radio')
			);
		}

		function getTargetIDForClickEvent(topLevelType,
										  topLevelTarget,
										  topLevelTargetID) {
			if (topLevelType === topLevelTypes.topClick) {
				return topLevelTargetID;
			}
		}

		/**
		 * This plugin creates an `onChange` event that normalizes change events
		 * across form elements. This event fires at a time when it's possible to
		 * change the element's value without seeing a flicker.
		 *
		 * Supported elements are:
		 * - input (see `isTextInputElement`)
		 * - textarea
		 * - select
		 */
		var ChangeEventPlugin = {

			eventTypes: eventTypes,

			/**
			 * @param {string} topLevelType Record from `EventConstants`.
			 * @param {DOMEventTarget} topLevelTarget The listening component root node.
			 * @param {string} topLevelTargetID ID of `topLevelTarget`.
			 * @param {object} nativeEvent Native browser event.
			 * @return {*} An accumulation of synthetic events.
			 * @see {EventPluginHub.extractEvents}
			 */
			extractEvents: function (topLevelType,
									 topLevelTarget,
									 topLevelTargetID,
									 nativeEvent) {

				var getTargetIDFunc, handleEventFunc;
				if (shouldUseChangeEvent(topLevelTarget)) {
					if (doesChangeEventBubble) {
						getTargetIDFunc = getTargetIDForChangeEvent;
					} else {
						handleEventFunc = handleEventsForChangeEventIE8;
					}
				} else if (isTextInputElement(topLevelTarget)) {
					if (isInputEventSupported) {
						getTargetIDFunc = getTargetIDForInputEvent;
					} else {
						getTargetIDFunc = getTargetIDForInputEventIE;
						handleEventFunc = handleEventsForInputEventIE;
					}
				} else if (shouldUseClickEvent(topLevelTarget)) {
					getTargetIDFunc = getTargetIDForClickEvent;
				}

				if (getTargetIDFunc) {
					var targetID = getTargetIDFunc(
						topLevelType,
						topLevelTarget,
						topLevelTargetID
					);
					if (targetID) {
						var event = SyntheticEvent.getPooled(
							eventTypes.change,
							targetID,
							nativeEvent
						);
						EventPropagators.accumulateTwoPhaseDispatches(event);
						return event;
					}
				}

				if (handleEventFunc) {
					handleEventFunc(
						topLevelType,
						topLevelTarget,
						topLevelTargetID
					);
				}
			}

		};

		module.exports = ChangeEventPlugin;


		/***/
	},
	/* 349 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule isTextInputElement
		 */

		'use strict';

		/**
		 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
		 */
		var supportedInputTypes = {
			'color': true,
			'date': true,
			'datetime': true,
			'datetime-local': true,
			'email': true,
			'month': true,
			'number': true,
			'password': true,
			'range': true,
			'search': true,
			'tel': true,
			'text': true,
			'time': true,
			'url': true,
			'week': true
		};

		function isTextInputElement(elem) {
			return elem && (
					(elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
				);
		}

		module.exports = isTextInputElement;


		/***/
	},
	/* 350 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ClientReactRootIndex
		 * @typechecks
		 */

		'use strict';

		var nextReactRootIndex = 0;

		var ClientReactRootIndex = {
			createReactRootIndex: function () {
				return nextReactRootIndex++;
			}
		};

		module.exports = ClientReactRootIndex;


		/***/
	},
	/* 351 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule DefaultEventPluginOrder
		 */

		'use strict';

		var keyOf = __webpack_require__(287);

		/**
		 * Module that is injectable into `EventPluginHub`, that specifies a
		 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
		 * plugins, without having to package every one of them. This is better than
		 * having plugins be ordered in the same order that they are injected because
		 * that ordering would be influenced by the packaging order.
		 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
		 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
		 */
		var DefaultEventPluginOrder = [
			keyOf({ResponderEventPlugin: null}),
			keyOf({SimpleEventPlugin: null}),
			keyOf({TapEventPlugin: null}),
			keyOf({EnterLeaveEventPlugin: null}),
			keyOf({ChangeEventPlugin: null}),
			keyOf({SelectEventPlugin: null}),
			keyOf({BeforeInputEventPlugin: null}),
			keyOf({AnalyticsEventPlugin: null}),
			keyOf({MobileSafariClickEventPlugin: null})
		];

		module.exports = DefaultEventPluginOrder;


		/***/
	},
	/* 352 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule EnterLeaveEventPlugin
		 * @typechecks static-only
		 */

		'use strict';

		var EventConstants = __webpack_require__(276);
		var EventPropagators = __webpack_require__(341);
		var SyntheticMouseEvent = __webpack_require__(353);

		var ReactMount = __webpack_require__(315);
		var keyOf = __webpack_require__(287);

		var topLevelTypes = EventConstants.topLevelTypes;
		var getFirstReactDOM = ReactMount.getFirstReactDOM;

		var eventTypes = {
			mouseEnter: {
				registrationName: keyOf({onMouseEnter: null}),
				dependencies: [
					topLevelTypes.topMouseOut,
					topLevelTypes.topMouseOver
				]
			},
			mouseLeave: {
				registrationName: keyOf({onMouseLeave: null}),
				dependencies: [
					topLevelTypes.topMouseOut,
					topLevelTypes.topMouseOver
				]
			}
		};

		var extractedEvents = [null, null];

		var EnterLeaveEventPlugin = {

			eventTypes: eventTypes,

			/**
			 * For almost every interaction we care about, there will be both a top-level
			 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
			 * we do not extract duplicate events. However, moving the mouse into the
			 * browser from outside will not fire a `mouseout` event. In this case, we use
			 * the `mouseover` top-level event.
			 *
			 * @param {string} topLevelType Record from `EventConstants`.
			 * @param {DOMEventTarget} topLevelTarget The listening component root node.
			 * @param {string} topLevelTargetID ID of `topLevelTarget`.
			 * @param {object} nativeEvent Native browser event.
			 * @return {*} An accumulation of synthetic events.
			 * @see {EventPluginHub.extractEvents}
			 */
			extractEvents: function (topLevelType,
									 topLevelTarget,
									 topLevelTargetID,
									 nativeEvent) {
				if (topLevelType === topLevelTypes.topMouseOver &&
					(nativeEvent.relatedTarget || nativeEvent.fromElement)) {
					return null;
				}
				if (topLevelType !== topLevelTypes.topMouseOut &&
					topLevelType !== topLevelTypes.topMouseOver) {
					// Must not be a mouse in or mouse out - ignoring.
					return null;
				}

				var win;
				if (topLevelTarget.window === topLevelTarget) {
					// `topLevelTarget` is probably a window object.
					win = topLevelTarget;
				} else {
					// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
					var doc = topLevelTarget.ownerDocument;
					if (doc) {
						win = doc.defaultView || doc.parentWindow;
					} else {
						win = window;
					}
				}

				var from, to;
				if (topLevelType === topLevelTypes.topMouseOut) {
					from = topLevelTarget;
					to =
						getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
						win;
				} else {
					from = win;
					to = topLevelTarget;
				}

				if (from === to) {
					// Nothing pertains to our managed components.
					return null;
				}

				var fromID = from ? ReactMount.getID(from) : '';
				var toID = to ? ReactMount.getID(to) : '';

				var leave = SyntheticMouseEvent.getPooled(
					eventTypes.mouseLeave,
					fromID,
					nativeEvent
				);
				leave.type = 'mouseleave';
				leave.target = from;
				leave.relatedTarget = to;

				var enter = SyntheticMouseEvent.getPooled(
					eventTypes.mouseEnter,
					toID,
					nativeEvent
				);
				enter.type = 'mouseenter';
				enter.target = to;
				enter.relatedTarget = from;

				EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

				extractedEvents[0] = leave;
				extractedEvents[1] = enter;

				return extractedEvents;
			}

		};

		module.exports = EnterLeaveEventPlugin;


		/***/
	},
	/* 353 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticMouseEvent
		 * @typechecks static-only
		 */

		'use strict';

		var SyntheticUIEvent = __webpack_require__(354);
		var ViewportMetrics = __webpack_require__(322);

		var getEventModifierState = __webpack_require__(355);

		/**
		 * @interface MouseEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */
		var MouseEventInterface = {
			screenX: null,
			screenY: null,
			clientX: null,
			clientY: null,
			ctrlKey: null,
			shiftKey: null,
			altKey: null,
			metaKey: null,
			getModifierState: getEventModifierState,
			button: function (event) {
				// Webkit, Firefox, IE9+
				// which:  1 2 3
				// button: 0 1 2 (standard)
				var button = event.button;
				if ('which' in event) {
					return button;
				}
				// IE<9
				// which:  undefined
				// button: 0 0 0
				// button: 1 4 2 (onmouseup)
				return button === 2 ? 2 : button === 4 ? 1 : 0;
			},
			buttons: null,
			relatedTarget: function (event) {
				return event.relatedTarget || (
						((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
					);
			},
			// "Proprietary" Interface.
			pageX: function (event) {
				return 'pageX' in event ?
					event.pageX :
				event.clientX + ViewportMetrics.currentScrollLeft;
			},
			pageY: function (event) {
				return 'pageY' in event ?
					event.pageY :
				event.clientY + ViewportMetrics.currentScrollTop;
			}
		};

		/**
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 * @extends {SyntheticUIEvent}
		 */
		function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
			SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
		}

		SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

		module.exports = SyntheticMouseEvent;


		/***/
	},
	/* 354 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticUIEvent
		 * @typechecks static-only
		 */

		'use strict';

		var SyntheticEvent = __webpack_require__(345);

		var getEventTarget = __webpack_require__(346);

		/**
		 * @interface UIEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */
		var UIEventInterface = {
			view: function (event) {
				if (event.view) {
					return event.view;
				}

				var target = getEventTarget(event);
				if (target != null && target.window === target) {
					// target is a window object
					return target;
				}

				var doc = target.ownerDocument;
				// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
				if (doc) {
					return doc.defaultView || doc.parentWindow;
				} else {
					return window;
				}
			},
			detail: function (event) {
				return event.detail || 0;
			}
		};

		/**
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 * @extends {SyntheticEvent}
		 */
		function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
			SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
		}

		SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

		module.exports = SyntheticUIEvent;


		/***/
	},
	/* 355 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule getEventModifierState
		 * @typechecks static-only
		 */

		'use strict';

		/**
		 * Translation from modifier key to the associated property in the event.
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
		 */

		var modifierKeyToProp = {
			'Alt': 'altKey',
			'Control': 'ctrlKey',
			'Meta': 'metaKey',
			'Shift': 'shiftKey'
		};

		// IE8 does not implement getModifierState so we simply map it to the only
		// modifier keys exposed by the event itself, does not support Lock-keys.
		// Currently, all major browsers except Chrome seems to support Lock-keys.
		function modifierStateGetter(keyArg) {
			/*jshint validthis:true */
			var syntheticEvent = this;
			var nativeEvent = syntheticEvent.nativeEvent;
			if (nativeEvent.getModifierState) {
				return nativeEvent.getModifierState(keyArg);
			}
			var keyProp = modifierKeyToProp[keyArg];
			return keyProp ? !!nativeEvent[keyProp] : false;
		}

		function getEventModifierState(nativeEvent) {
			return modifierStateGetter;
		}

		module.exports = getEventModifierState;


		/***/
	},
	/* 356 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule HTMLDOMPropertyConfig
		 */

		/*jslint bitwise: true*/

		'use strict';

		var DOMProperty = __webpack_require__(292);
		var ExecutionEnvironment = __webpack_require__(299);

		var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
		var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
		var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
		var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
		var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
		var HAS_POSITIVE_NUMERIC_VALUE =
			DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
		var HAS_OVERLOADED_BOOLEAN_VALUE =
			DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

		var hasSVG;
		if (ExecutionEnvironment.canUseDOM) {
			var implementation = document.implementation;
			hasSVG = (
				implementation &&
				implementation.hasFeature &&
				implementation.hasFeature(
					'http://www.w3.org/TR/SVG11/feature#BasicStructure',
					'1.1'
				)
			);
		}


		var HTMLDOMPropertyConfig = {
			isCustomAttribute: RegExp.prototype.test.bind(
				/^(data|aria)-[a-z_][a-z\d_.\-]*$/
			),
			Properties: {
				/**
				 * Standard Properties
				 */
				accept: null,
				acceptCharset: null,
				accessKey: null,
				action: null,
				allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
				allowTransparency: MUST_USE_ATTRIBUTE,
				alt: null,
				async: HAS_BOOLEAN_VALUE,
				autoComplete: null,
				// autoFocus is polyfilled/normalized by AutoFocusMixin
				// autoFocus: HAS_BOOLEAN_VALUE,
				autoPlay: HAS_BOOLEAN_VALUE,
				cellPadding: null,
				cellSpacing: null,
				charSet: MUST_USE_ATTRIBUTE,
				checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
				classID: MUST_USE_ATTRIBUTE,
				// To set className on SVG elements, it's necessary to use .setAttribute;
				// this works on HTML elements too in all browsers except IE8. Conveniently,
				// IE8 doesn't support SVG and so we can simply use the attribute in
				// browsers that support SVG and the property in browsers that don't,
				// regardless of whether the element is HTML or SVG.
				className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
				cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
				colSpan: null,
				content: null,
				contentEditable: null,
				contextMenu: MUST_USE_ATTRIBUTE,
				controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
				coords: null,
				crossOrigin: null,
				data: null, // For `<object />` acts as `src`.
				dateTime: MUST_USE_ATTRIBUTE,
				defer: HAS_BOOLEAN_VALUE,
				dir: null,
				disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
				download: HAS_OVERLOADED_BOOLEAN_VALUE,
				draggable: null,
				encType: null,
				form: MUST_USE_ATTRIBUTE,
				formAction: MUST_USE_ATTRIBUTE,
				formEncType: MUST_USE_ATTRIBUTE,
				formMethod: MUST_USE_ATTRIBUTE,
				formNoValidate: HAS_BOOLEAN_VALUE,
				formTarget: MUST_USE_ATTRIBUTE,
				frameBorder: MUST_USE_ATTRIBUTE,
				headers: null,
				height: MUST_USE_ATTRIBUTE,
				hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
				high: null,
				href: null,
				hrefLang: null,
				htmlFor: null,
				httpEquiv: null,
				icon: null,
				id: MUST_USE_PROPERTY,
				label: null,
				lang: null,
				list: MUST_USE_ATTRIBUTE,
				loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
				low: null,
				manifest: MUST_USE_ATTRIBUTE,
				marginHeight: null,
				marginWidth: null,
				max: null,
				maxLength: MUST_USE_ATTRIBUTE,
				media: MUST_USE_ATTRIBUTE,
				mediaGroup: null,
				method: null,
				min: null,
				multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
				muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
				name: null,
				noValidate: HAS_BOOLEAN_VALUE,
				open: HAS_BOOLEAN_VALUE,
				optimum: null,
				pattern: null,
				placeholder: null,
				poster: null,
				preload: null,
				radioGroup: null,
				readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
				rel: null,
				required: HAS_BOOLEAN_VALUE,
				role: MUST_USE_ATTRIBUTE,
				rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
				rowSpan: null,
				sandbox: null,
				scope: null,
				scoped: HAS_BOOLEAN_VALUE,
				scrolling: null,
				seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
				selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
				shape: null,
				size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
				sizes: MUST_USE_ATTRIBUTE,
				span: HAS_POSITIVE_NUMERIC_VALUE,
				spellCheck: null,
				src: null,
				srcDoc: MUST_USE_PROPERTY,
				srcSet: MUST_USE_ATTRIBUTE,
				start: HAS_NUMERIC_VALUE,
				step: null,
				style: null,
				tabIndex: null,
				target: null,
				title: null,
				type: null,
				useMap: null,
				value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
				width: MUST_USE_ATTRIBUTE,
				wmode: MUST_USE_ATTRIBUTE,

				/**
				 * Non-standard Properties
				 */
				// autoCapitalize and autoCorrect are supported in Mobile Safari for
				// keyboard hints.
				autoCapitalize: null,
				autoCorrect: null,
				// itemProp, itemScope, itemType are for
				// Microdata support. See http://schema.org/docs/gs.html
				itemProp: MUST_USE_ATTRIBUTE,
				itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
				itemType: MUST_USE_ATTRIBUTE,
				// itemID and itemRef are for Microdata support as well but
				// only specified in the the WHATWG spec document. See
				// https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
				itemID: MUST_USE_ATTRIBUTE,
				itemRef: MUST_USE_ATTRIBUTE,
				// property is supported for OpenGraph in meta tags.
				property: null,
				// IE-only attribute that controls focus behavior
				unselectable: MUST_USE_ATTRIBUTE
			},
			DOMAttributeNames: {
				acceptCharset: 'accept-charset',
				className: 'class',
				htmlFor: 'for',
				httpEquiv: 'http-equiv'
			},
			DOMPropertyNames: {
				autoCapitalize: 'autocapitalize',
				autoComplete: 'autocomplete',
				autoCorrect: 'autocorrect',
				autoFocus: 'autofocus',
				autoPlay: 'autoplay',
				// `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
				// http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
				encType: 'encoding',
				hrefLang: 'hreflang',
				radioGroup: 'radiogroup',
				spellCheck: 'spellcheck',
				srcDoc: 'srcdoc',
				srcSet: 'srcset'
			}
		};

		module.exports = HTMLDOMPropertyConfig;


		/***/
	},
	/* 357 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule MobileSafariClickEventPlugin
		 * @typechecks static-only
		 */

		'use strict';

		var EventConstants = __webpack_require__(276);

		var emptyFunction = __webpack_require__(264);

		var topLevelTypes = EventConstants.topLevelTypes;

		/**
		 * Mobile Safari does not fire properly bubble click events on non-interactive
		 * elements, which means delegated click listeners do not fire. The workaround
		 * for this bug involves attaching an empty click listener on the target node.
		 *
		 * This particular plugin works around the bug by attaching an empty click
		 * listener on `touchstart` (which does fire on every element).
		 */
		var MobileSafariClickEventPlugin = {

			eventTypes: null,

			/**
			 * @param {string} topLevelType Record from `EventConstants`.
			 * @param {DOMEventTarget} topLevelTarget The listening component root node.
			 * @param {string} topLevelTargetID ID of `topLevelTarget`.
			 * @param {object} nativeEvent Native browser event.
			 * @return {*} An accumulation of synthetic events.
			 * @see {EventPluginHub.extractEvents}
			 */
			extractEvents: function (topLevelType,
									 topLevelTarget,
									 topLevelTargetID,
									 nativeEvent) {
				if (topLevelType === topLevelTypes.topTouchStart) {
					var target = nativeEvent.target;
					if (target && !target.onclick) {
						target.onclick = emptyFunction;
					}
				}
			}

		};

		module.exports = MobileSafariClickEventPlugin;


		/***/
	},
	/* 358 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactBrowserComponentMixin
		 */

		'use strict';

		var findDOMNode = __webpack_require__(359);

		var ReactBrowserComponentMixin = {
			/**
			 * Returns the DOM node rendered by this component.
			 *
			 * @return {DOMElement} The root node of this component.
			 * @final
			 * @protected
			 */
			getDOMNode: function () {
				return findDOMNode(this);
			}
		};

		module.exports = ReactBrowserComponentMixin;


		/***/
	},
	/* 359 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule findDOMNode
			 * @typechecks static-only
			 */

			'use strict';

			var ReactCurrentOwner = __webpack_require__(254);
			var ReactInstanceMap = __webpack_require__(284);
			var ReactMount = __webpack_require__(315);

			var invariant = __webpack_require__(252);
			var isNode = __webpack_require__(329);
			var warning = __webpack_require__(263);

			/**
			 * Returns the DOM node rendered by this element.
			 *
			 * @param {ReactComponent|DOMElement} componentOrElement
			 * @return {DOMElement} The root node of this element.
			 */
			function findDOMNode(componentOrElement) {
				if ("production" !== process.env.NODE_ENV) {
					var owner = ReactCurrentOwner.current;
					if (owner !== null) {
						("production" !== process.env.NODE_ENV ? warning(
							owner._warnedAboutRefsInRender,
							'%s is accessing getDOMNode or findDOMNode inside its render(). ' +
							'render() should be a pure function of props and state. It should ' +
							'never access something that requires stale data from the previous ' +
							'render, such as refs. Move this logic to componentDidMount and ' +
							'componentDidUpdate instead.',
							owner.getName() || 'A component'
						) : null);
						owner._warnedAboutRefsInRender = true;
					}
				}
				if (componentOrElement == null) {
					return null;
				}
				if (isNode(componentOrElement)) {
					return componentOrElement;
				}
				if (ReactInstanceMap.has(componentOrElement)) {
					return ReactMount.getNodeFromInstance(componentOrElement);
				}
				("production" !== process.env.NODE_ENV ? invariant(
					componentOrElement.render == null ||
					typeof componentOrElement.render !== 'function',
					'Component (with keys: %s) contains `render` method ' +
					'but is not mounted in the DOM',
					Object.keys(componentOrElement)
				) : invariant(componentOrElement.render == null ||
					typeof componentOrElement.render !== 'function'));
				("production" !== process.env.NODE_ENV ? invariant(
					false,
					'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
					Object.keys(componentOrElement)
				) : invariant(false));
			}

			module.exports = findDOMNode;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 360 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDefaultBatchingStrategy
		 */

		'use strict';

		var ReactUpdates = __webpack_require__(249);
		var Transaction = __webpack_require__(271);

		var assign = __webpack_require__(253);
		var emptyFunction = __webpack_require__(264);

		var RESET_BATCHED_UPDATES = {
			initialize: emptyFunction,
			close: function () {
				ReactDefaultBatchingStrategy.isBatchingUpdates = false;
			}
		};

		var FLUSH_BATCHED_UPDATES = {
			initialize: emptyFunction,
			close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
		};

		var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

		function ReactDefaultBatchingStrategyTransaction() {
			this.reinitializeTransaction();
		}

		assign(
			ReactDefaultBatchingStrategyTransaction.prototype,
			Transaction.Mixin,
			{
				getTransactionWrappers: function () {
					return TRANSACTION_WRAPPERS;
				}
			}
		);

		var transaction = new ReactDefaultBatchingStrategyTransaction();

		var ReactDefaultBatchingStrategy = {
			isBatchingUpdates: false,

			/**
			 * Call the provided function in a context within which calls to `setState`
			 * and friends are batched such that components aren't updated unnecessarily.
			 */
			batchedUpdates: function (callback, a, b, c, d) {
				var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

				ReactDefaultBatchingStrategy.isBatchingUpdates = true;

				// The code is written this way to avoid extra allocations
				if (alreadyBatchingUpdates) {
					callback(a, b, c, d);
				} else {
					transaction.perform(callback, null, a, b, c, d);
				}
			}
		};

		module.exports = ReactDefaultBatchingStrategy;


		/***/
	},
	/* 361 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDOMButton
		 */

		'use strict';

		var AutoFocusMixin = __webpack_require__(362);
		var ReactBrowserComponentMixin = __webpack_require__(358);
		var ReactClass = __webpack_require__(285);
		var ReactElement = __webpack_require__(260);

		var keyMirror = __webpack_require__(267);

		var button = ReactElement.createFactory('button');

		var mouseListenerNames = keyMirror({
			onClick: true,
			onDoubleClick: true,
			onMouseDown: true,
			onMouseMove: true,
			onMouseUp: true,
			onClickCapture: true,
			onDoubleClickCapture: true,
			onMouseDownCapture: true,
			onMouseMoveCapture: true,
			onMouseUpCapture: true
		});

		/**
		 * Implements a <button> native component that does not receive mouse events
		 * when `disabled` is set.
		 */
		var ReactDOMButton = ReactClass.createClass({
			displayName: 'ReactDOMButton',
			tagName: 'BUTTON',

			mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

			render: function () {
				var props = {};

				// Copy the props; except the mouse listeners if we're disabled
				for (var key in this.props) {
					if (this.props.hasOwnProperty(key) &&
						(!this.props.disabled || !mouseListenerNames[key])) {
						props[key] = this.props[key];
					}
				}

				return button(props, this.props.children);
			}

		});

		module.exports = ReactDOMButton;


		/***/
	},
	/* 362 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule AutoFocusMixin
		 * @typechecks static-only
		 */

		'use strict';

		var focusNode = __webpack_require__(363);

		var AutoFocusMixin = {
			componentDidMount: function () {
				if (this.props.autoFocus) {
					focusNode(this.getDOMNode());
				}
			}
		};

		module.exports = AutoFocusMixin;


		/***/
	},
	/* 363 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule focusNode
		 */

		"use strict";

		/**
		 * @param {DOMElement} node input/textarea to focus
		 */
		function focusNode(node) {
			// IE8 can throw "Can't move focus to the control because it is invisible,
			// not enabled, or of a type that does not accept the focus." for all kinds of
			// reasons that are too expensive and fragile to test.
			try {
				node.focus();
			} catch (e) {
			}
		}

		module.exports = focusNode;


		/***/
	},
	/* 364 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDOMForm
		 */

		'use strict';

		var EventConstants = __webpack_require__(276);
		var LocalEventTrapMixin = __webpack_require__(365);
		var ReactBrowserComponentMixin = __webpack_require__(358);
		var ReactClass = __webpack_require__(285);
		var ReactElement = __webpack_require__(260);

		var form = ReactElement.createFactory('form');

		/**
		 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
		 * to capture it on the <form> element itself. There are lots of hacks we could
		 * do to accomplish this, but the most reliable is to make <form> a
		 * composite component and use `componentDidMount` to attach the event handlers.
		 */
		var ReactDOMForm = ReactClass.createClass({
			displayName: 'ReactDOMForm',
			tagName: 'FORM',

			mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

			render: function () {
				// TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
				// `jshint` fails to parse JSX so in order for linting to work in the open
				// source repo, we need to just use `ReactDOM.form`.
				return form(this.props);
			},

			componentDidMount: function () {
				this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
				this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
			}
		});

		module.exports = ReactDOMForm;


		/***/
	},
	/* 365 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2014-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule LocalEventTrapMixin
			 */

			'use strict';

			var ReactBrowserEventEmitter = __webpack_require__(316);

			var accumulateInto = __webpack_require__(319);
			var forEachAccumulated = __webpack_require__(320);
			var invariant = __webpack_require__(252);

			function remove(event) {
				event.remove();
			}

			var LocalEventTrapMixin = {
				trapBubbledEvent: function (topLevelType, handlerBaseName) {
					("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
					// If a component renders to null or if another component fatals and causes
					// the state of the tree to be corrupted, `node` here can be null.
					var node = this.getDOMNode();
					("production" !== process.env.NODE_ENV ? invariant(
						node,
						'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
					) : invariant(node));
					var listener = ReactBrowserEventEmitter.trapBubbledEvent(
						topLevelType,
						handlerBaseName,
						node
					);
					this._localEventListeners =
						accumulateInto(this._localEventListeners, listener);
				},

				// trapCapturedEvent would look nearly identical. We don't implement that
				// method because it isn't currently needed.

				componentWillUnmount: function () {
					if (this._localEventListeners) {
						forEachAccumulated(this._localEventListeners, remove);
					}
				}
			};

			module.exports = LocalEventTrapMixin;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 366 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDOMImg
		 */

		'use strict';

		var EventConstants = __webpack_require__(276);
		var LocalEventTrapMixin = __webpack_require__(365);
		var ReactBrowserComponentMixin = __webpack_require__(358);
		var ReactClass = __webpack_require__(285);
		var ReactElement = __webpack_require__(260);

		var img = ReactElement.createFactory('img');

		/**
		 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
		 * capture it on the <img> element itself. There are lots of hacks we could do
		 * to accomplish this, but the most reliable is to make <img> a composite
		 * component and use `componentDidMount` to attach the event handlers.
		 */
		var ReactDOMImg = ReactClass.createClass({
			displayName: 'ReactDOMImg',
			tagName: 'IMG',

			mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

			render: function () {
				return img(this.props);
			},

			componentDidMount: function () {
				this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
				this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
			}
		});

		module.exports = ReactDOMImg;


		/***/
	},
	/* 367 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDOMIframe
		 */

		'use strict';

		var EventConstants = __webpack_require__(276);
		var LocalEventTrapMixin = __webpack_require__(365);
		var ReactBrowserComponentMixin = __webpack_require__(358);
		var ReactClass = __webpack_require__(285);
		var ReactElement = __webpack_require__(260);

		var iframe = ReactElement.createFactory('iframe');

		/**
		 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
		 * capture it on the <iframe> element itself. There are lots of hacks we could
		 * do to accomplish this, but the most reliable is to make <iframe> a composite
		 * component and use `componentDidMount` to attach the event handlers.
		 */
		var ReactDOMIframe = ReactClass.createClass({
			displayName: 'ReactDOMIframe',
			tagName: 'IFRAME',

			mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

			render: function () {
				return iframe(this.props);
			},

			componentDidMount: function () {
				this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
			}
		});

		module.exports = ReactDOMIframe;


		/***/
	},
	/* 368 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactDOMInput
			 */

			'use strict';

			var AutoFocusMixin = __webpack_require__(362);
			var DOMPropertyOperations = __webpack_require__(291);
			var LinkedValueUtils = __webpack_require__(369);
			var ReactBrowserComponentMixin = __webpack_require__(358);
			var ReactClass = __webpack_require__(285);
			var ReactElement = __webpack_require__(260);
			var ReactMount = __webpack_require__(315);
			var ReactUpdates = __webpack_require__(249);

			var assign = __webpack_require__(253);
			var invariant = __webpack_require__(252);

			var input = ReactElement.createFactory('input');

			var instancesByReactID = {};

			function forceUpdateIfMounted() {
				/*jshint validthis:true */
				if (this.isMounted()) {
					this.forceUpdate();
				}
			}

			/**
			 * Implements an <input> native component that allows setting these optional
			 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
			 *
			 * If `checked` or `value` are not supplied (or null/undefined), user actions
			 * that affect the checked state or value will trigger updates to the element.
			 *
			 * If they are supplied (and not null/undefined), the rendered element will not
			 * trigger updates to the element. Instead, the props must change in order for
			 * the rendered element to be updated.
			 *
			 * The rendered element will be initialized as unchecked (or `defaultChecked`)
			 * with an empty value (or `defaultValue`).
			 *
			 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
			 */
			var ReactDOMInput = ReactClass.createClass({
				displayName: 'ReactDOMInput',
				tagName: 'INPUT',

				mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

				getInitialState: function () {
					var defaultValue = this.props.defaultValue;
					return {
						initialChecked: this.props.defaultChecked || false,
						initialValue: defaultValue != null ? defaultValue : null
					};
				},

				render: function () {
					// Clone `this.props` so we don't mutate the input.
					var props = assign({}, this.props);

					props.defaultChecked = null;
					props.defaultValue = null;

					var value = LinkedValueUtils.getValue(this);
					props.value = value != null ? value : this.state.initialValue;

					var checked = LinkedValueUtils.getChecked(this);
					props.checked = checked != null ? checked : this.state.initialChecked;

					props.onChange = this._handleChange;

					return input(props, this.props.children);
				},

				componentDidMount: function () {
					var id = ReactMount.getID(this.getDOMNode());
					instancesByReactID[id] = this;
				},

				componentWillUnmount: function () {
					var rootNode = this.getDOMNode();
					var id = ReactMount.getID(rootNode);
					delete instancesByReactID[id];
				},

				componentDidUpdate: function (prevProps, prevState, prevContext) {
					var rootNode = this.getDOMNode();
					if (this.props.checked != null) {
						DOMPropertyOperations.setValueForProperty(
							rootNode,
							'checked',
							this.props.checked || false
						);
					}

					var value = LinkedValueUtils.getValue(this);
					if (value != null) {
						// Cast `value` to a string to ensure the value is set correctly. While
						// browsers typically do this as necessary, jsdom doesn't.
						DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
					}
				},

				_handleChange: function (event) {
					var returnValue;
					var onChange = LinkedValueUtils.getOnChange(this);
					if (onChange) {
						returnValue = onChange.call(this, event);
					}
					// Here we use asap to wait until all updates have propagated, which
					// is important when using controlled components within layers:
					// https://github.com/facebook/react/issues/1698
					ReactUpdates.asap(forceUpdateIfMounted, this);

					var name = this.props.name;
					if (this.props.type === 'radio' && name != null) {
						var rootNode = this.getDOMNode();
						var queryRoot = rootNode;

						while (queryRoot.parentNode) {
							queryRoot = queryRoot.parentNode;
						}

						// If `rootNode.form` was non-null, then we could try `form.elements`,
						// but that sometimes behaves strangely in IE8. We could also try using
						// `form.getElementsByName`, but that will only return direct children
						// and won't include inputs that use the HTML5 `form=` attribute. Since
						// the input might not even be in a form, let's just use the global
						// `querySelectorAll` to ensure we don't miss anything.
						var group = queryRoot.querySelectorAll(
							'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

						for (var i = 0, groupLen = group.length; i < groupLen; i++) {
							var otherNode = group[i];
							if (otherNode === rootNode ||
								otherNode.form !== rootNode.form) {
								continue;
							}
							var otherID = ReactMount.getID(otherNode);
							("production" !== process.env.NODE_ENV ? invariant(
								otherID,
								'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
								'same `name` is not supported.'
							) : invariant(otherID));
							var otherInstance = instancesByReactID[otherID];
							("production" !== process.env.NODE_ENV ? invariant(
								otherInstance,
								'ReactDOMInput: Unknown radio button ID %s.',
								otherID
							) : invariant(otherInstance));
							// If this is a controlled radio button group, forcing the input that
							// was previously checked to update will cause it to be come re-checked
							// as appropriate.
							ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
						}
					}

					return returnValue;
				}

			});

			module.exports = ReactDOMInput;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 369 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule LinkedValueUtils
			 * @typechecks static-only
			 */

			'use strict';

			var ReactPropTypes = __webpack_require__(370);

			var invariant = __webpack_require__(252);

			var hasReadOnlyValue = {
				'button': true,
				'checkbox': true,
				'image': true,
				'hidden': true,
				'radio': true,
				'reset': true,
				'submit': true
			};

			function _assertSingleLink(input) {
				("production" !== process.env.NODE_ENV ? invariant(
					input.props.checkedLink == null || input.props.valueLink == null,
					'Cannot provide a checkedLink and a valueLink. If you want to use ' +
					'checkedLink, you probably don\'t want to use valueLink and vice versa.'
				) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
			}

			function _assertValueLink(input) {
				_assertSingleLink(input);
				("production" !== process.env.NODE_ENV ? invariant(
					input.props.value == null && input.props.onChange == null,
					'Cannot provide a valueLink and a value or onChange event. If you want ' +
					'to use value or onChange, you probably don\'t want to use valueLink.'
				) : invariant(input.props.value == null && input.props.onChange == null));
			}

			function _assertCheckedLink(input) {
				_assertSingleLink(input);
				("production" !== process.env.NODE_ENV ? invariant(
					input.props.checked == null && input.props.onChange == null,
					'Cannot provide a checkedLink and a checked property or onChange event. ' +
					'If you want to use checked or onChange, you probably don\'t want to ' +
					'use checkedLink'
				) : invariant(input.props.checked == null && input.props.onChange == null));
			}

			/**
			 * @param {SyntheticEvent} e change event to handle
			 */
			function _handleLinkedValueChange(e) {
				/*jshint validthis:true */
				this.props.valueLink.requestChange(e.target.value);
			}

			/**
			 * @param {SyntheticEvent} e change event to handle
			 */
			function _handleLinkedCheckChange(e) {
				/*jshint validthis:true */
				this.props.checkedLink.requestChange(e.target.checked);
			}

			/**
			 * Provide a linked `value` attribute for controlled forms. You should not use
			 * this outside of the ReactDOM controlled form components.
			 */
			var LinkedValueUtils = {
				Mixin: {
					propTypes: {
						value: function (props, propName, componentName) {
							if (!props[propName] ||
								hasReadOnlyValue[props.type] ||
								props.onChange ||
								props.readOnly ||
								props.disabled) {
								return null;
							}
							return new Error(
								'You provided a `value` prop to a form field without an ' +
								'`onChange` handler. This will render a read-only field. If ' +
								'the field should be mutable use `defaultValue`. Otherwise, ' +
								'set either `onChange` or `readOnly`.'
							);
						},
						checked: function (props, propName, componentName) {
							if (!props[propName] ||
								props.onChange ||
								props.readOnly ||
								props.disabled) {
								return null;
							}
							return new Error(
								'You provided a `checked` prop to a form field without an ' +
								'`onChange` handler. This will render a read-only field. If ' +
								'the field should be mutable use `defaultChecked`. Otherwise, ' +
								'set either `onChange` or `readOnly`.'
							);
						},
						onChange: ReactPropTypes.func
					}
				},

				/**
				 * @param {ReactComponent} input Form component
				 * @return {*} current value of the input either from value prop or link.
				 */
				getValue: function (input) {
					if (input.props.valueLink) {
						_assertValueLink(input);
						return input.props.valueLink.value;
					}
					return input.props.value;
				},

				/**
				 * @param {ReactComponent} input Form component
				 * @return {*} current checked status of the input either from checked prop
				 *             or link.
				 */
				getChecked: function (input) {
					if (input.props.checkedLink) {
						_assertCheckedLink(input);
						return input.props.checkedLink.value;
					}
					return input.props.checked;
				},

				/**
				 * @param {ReactComponent} input Form component
				 * @return {function} change callback either from onChange prop or link.
				 */
				getOnChange: function (input) {
					if (input.props.valueLink) {
						_assertValueLink(input);
						return _handleLinkedValueChange;
					} else if (input.props.checkedLink) {
						_assertCheckedLink(input);
						return _handleLinkedCheckChange;
					}
					return input.props.onChange;
				}
			};

			module.exports = LinkedValueUtils;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 370 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactPropTypes
		 */

		'use strict';

		var ReactElement = __webpack_require__(260);
		var ReactFragment = __webpack_require__(265);
		var ReactPropTypeLocationNames = __webpack_require__(268);

		var emptyFunction = __webpack_require__(264);

		/**
		 * Collection of methods that allow declaration and validation of props that are
		 * supplied to React components. Example usage:
		 *
		 *   var Props = require('ReactPropTypes');
		 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
		 *
		 * A more formal specification of how these methods are used:
		 *
		 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
		 *   decl := ReactPropTypes.{type}(.isRequired)?
		 *
		 * Each and every declaration produces a function with the same signature. This
		 * allows the creation of custom validation functions. For example:
		 *
		 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
		 *
		 * @internal
		 */

		var ANONYMOUS = '<<anonymous>>';

		var elementTypeChecker = createElementTypeChecker();
		var nodeTypeChecker = createNodeChecker();

		var ReactPropTypes = {
			array: createPrimitiveTypeChecker('array'),
			bool: createPrimitiveTypeChecker('boolean'),
			func: createPrimitiveTypeChecker('function'),
			number: createPrimitiveTypeChecker('number'),
			object: createPrimitiveTypeChecker('object'),
			string: createPrimitiveTypeChecker('string'),

			any: createAnyTypeChecker(),
			arrayOf: createArrayOfTypeChecker,
			element: elementTypeChecker,
			instanceOf: createInstanceTypeChecker,
			node: nodeTypeChecker,
			objectOf: createObjectOfTypeChecker,
			oneOf: createEnumTypeChecker,
			oneOfType: createUnionTypeChecker,
			shape: createShapeTypeChecker
		};

		function createChainableTypeChecker(validate) {
			function checkType(isRequired, props, propName, componentName, location) {
				componentName = componentName || ANONYMOUS;
				if (props[propName] == null) {
					var locationName = ReactPropTypeLocationNames[location];
					if (isRequired) {
						return new Error(
							("Required " + locationName + " `" + propName + "` was not specified in ") +
							("`" + componentName + "`.")
						);
					}
					return null;
				} else {
					return validate(props, propName, componentName, location);
				}
			}

			var chainedCheckType = checkType.bind(null, false);
			chainedCheckType.isRequired = checkType.bind(null, true);

			return chainedCheckType;
		}

		function createPrimitiveTypeChecker(expectedType) {
			function validate(props, propName, componentName, location) {
				var propValue = props[propName];
				var propType = getPropType(propValue);
				if (propType !== expectedType) {
					var locationName = ReactPropTypeLocationNames[location];
					// `propValue` being instance of, say, date/regexp, pass the 'object'
					// check, but we can offer a more precise error message here rather than
					// 'of type `object`'.
					var preciseType = getPreciseType(propValue);

					return new Error(
						("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
						("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
					);
				}
				return null;
			}

			return createChainableTypeChecker(validate);
		}

		function createAnyTypeChecker() {
			return createChainableTypeChecker(emptyFunction.thatReturns(null));
		}

		function createArrayOfTypeChecker(typeChecker) {
			function validate(props, propName, componentName, location) {
				var propValue = props[propName];
				if (!Array.isArray(propValue)) {
					var locationName = ReactPropTypeLocationNames[location];
					var propType = getPropType(propValue);
					return new Error(
						("Invalid " + locationName + " `" + propName + "` of type ") +
						("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
					);
				}
				for (var i = 0; i < propValue.length; i++) {
					var error = typeChecker(propValue, i, componentName, location);
					if (error instanceof Error) {
						return error;
					}
				}
				return null;
			}

			return createChainableTypeChecker(validate);
		}

		function createElementTypeChecker() {
			function validate(props, propName, componentName, location) {
				if (!ReactElement.isValidElement(props[propName])) {
					var locationName = ReactPropTypeLocationNames[location];
					return new Error(
						("Invalid " + locationName + " `" + propName + "` supplied to ") +
						("`" + componentName + "`, expected a ReactElement.")
					);
				}
				return null;
			}

			return createChainableTypeChecker(validate);
		}

		function createInstanceTypeChecker(expectedClass) {
			function validate(props, propName, componentName, location) {
				if (!(props[propName] instanceof expectedClass)) {
					var locationName = ReactPropTypeLocationNames[location];
					var expectedClassName = expectedClass.name || ANONYMOUS;
					return new Error(
						("Invalid " + locationName + " `" + propName + "` supplied to ") +
						("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
					);
				}
				return null;
			}

			return createChainableTypeChecker(validate);
		}

		function createEnumTypeChecker(expectedValues) {
			function validate(props, propName, componentName, location) {
				var propValue = props[propName];
				for (var i = 0; i < expectedValues.length; i++) {
					if (propValue === expectedValues[i]) {
						return null;
					}
				}

				var locationName = ReactPropTypeLocationNames[location];
				var valuesString = JSON.stringify(expectedValues);
				return new Error(
					("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
					("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
				);
			}

			return createChainableTypeChecker(validate);
		}

		function createObjectOfTypeChecker(typeChecker) {
			function validate(props, propName, componentName, location) {
				var propValue = props[propName];
				var propType = getPropType(propValue);
				if (propType !== 'object') {
					var locationName = ReactPropTypeLocationNames[location];
					return new Error(
						("Invalid " + locationName + " `" + propName + "` of type ") +
						("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
					);
				}
				for (var key in propValue) {
					if (propValue.hasOwnProperty(key)) {
						var error = typeChecker(propValue, key, componentName, location);
						if (error instanceof Error) {
							return error;
						}
					}
				}
				return null;
			}

			return createChainableTypeChecker(validate);
		}

		function createUnionTypeChecker(arrayOfTypeCheckers) {
			function validate(props, propName, componentName, location) {
				for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
					var checker = arrayOfTypeCheckers[i];
					if (checker(props, propName, componentName, location) == null) {
						return null;
					}
				}

				var locationName = ReactPropTypeLocationNames[location];
				return new Error(
					("Invalid " + locationName + " `" + propName + "` supplied to ") +
					("`" + componentName + "`.")
				);
			}

			return createChainableTypeChecker(validate);
		}

		function createNodeChecker() {
			function validate(props, propName, componentName, location) {
				if (!isNode(props[propName])) {
					var locationName = ReactPropTypeLocationNames[location];
					return new Error(
						("Invalid " + locationName + " `" + propName + "` supplied to ") +
						("`" + componentName + "`, expected a ReactNode.")
					);
				}
				return null;
			}

			return createChainableTypeChecker(validate);
		}

		function createShapeTypeChecker(shapeTypes) {
			function validate(props, propName, componentName, location) {
				var propValue = props[propName];
				var propType = getPropType(propValue);
				if (propType !== 'object') {
					var locationName = ReactPropTypeLocationNames[location];
					return new Error(
						("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
						("supplied to `" + componentName + "`, expected `object`.")
					);
				}
				for (var key in shapeTypes) {
					var checker = shapeTypes[key];
					if (!checker) {
						continue;
					}
					var error = checker(propValue, key, componentName, location);
					if (error) {
						return error;
					}
				}
				return null;
			}

			return createChainableTypeChecker(validate);
		}

		function isNode(propValue) {
			switch (typeof propValue) {
				case 'number':
				case 'string':
				case 'undefined':
					return true;
				case 'boolean':
					return !propValue;
				case 'object':
					if (Array.isArray(propValue)) {
						return propValue.every(isNode);
					}
					if (propValue === null || ReactElement.isValidElement(propValue)) {
						return true;
					}
					propValue = ReactFragment.extractIfFragment(propValue);
					for (var k in propValue) {
						if (!isNode(propValue[k])) {
							return false;
						}
					}
					return true;
				default:
					return false;
			}
		}

		// Equivalent of `typeof` but with special handling for array and regexp.
		function getPropType(propValue) {
			var propType = typeof propValue;
			if (Array.isArray(propValue)) {
				return 'array';
			}
			if (propValue instanceof RegExp) {
				// Old webkits (at least until Android 4.0) return 'function' rather than
				// 'object' for typeof a RegExp. We'll normalize this here so that /bla/
				// passes PropTypes.object.
				return 'object';
			}
			return propType;
		}

		// This handles more types than `getPropType`. Only used for error messages.
		// See `createPrimitiveTypeChecker`.
		function getPreciseType(propValue) {
			var propType = getPropType(propValue);
			if (propType === 'object') {
				if (propValue instanceof Date) {
					return 'date';
				} else if (propValue instanceof RegExp) {
					return 'regexp';
				}
			}
			return propType;
		}

		module.exports = ReactPropTypes;


		/***/
	},
	/* 371 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactDOMOption
			 */

			'use strict';

			var ReactBrowserComponentMixin = __webpack_require__(358);
			var ReactClass = __webpack_require__(285);
			var ReactElement = __webpack_require__(260);

			var warning = __webpack_require__(263);

			var option = ReactElement.createFactory('option');

			/**
			 * Implements an <option> native component that warns when `selected` is set.
			 */
			var ReactDOMOption = ReactClass.createClass({
				displayName: 'ReactDOMOption',
				tagName: 'OPTION',

				mixins: [ReactBrowserComponentMixin],

				componentWillMount: function () {
					// TODO (yungsters): Remove support for `selected` in <option>.
					if ("production" !== process.env.NODE_ENV) {
						("production" !== process.env.NODE_ENV ? warning(
							this.props.selected == null,
							'Use the `defaultValue` or `value` props on <select> instead of ' +
							'setting `selected` on <option>.'
						) : null);
					}
				},

				render: function () {
					return option(this.props, this.props.children);
				}

			});

			module.exports = ReactDOMOption;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 372 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDOMSelect
		 */

		'use strict';

		var AutoFocusMixin = __webpack_require__(362);
		var LinkedValueUtils = __webpack_require__(369);
		var ReactBrowserComponentMixin = __webpack_require__(358);
		var ReactClass = __webpack_require__(285);
		var ReactElement = __webpack_require__(260);
		var ReactUpdates = __webpack_require__(249);

		var assign = __webpack_require__(253);

		var select = ReactElement.createFactory('select');

		function updateOptionsIfPendingUpdateAndMounted() {
			/*jshint validthis:true */
			if (this._pendingUpdate) {
				this._pendingUpdate = false;
				var value = LinkedValueUtils.getValue(this);
				if (value != null && this.isMounted()) {
					updateOptions(this, value);
				}
			}
		}

		/**
		 * Validation function for `value` and `defaultValue`.
		 * @private
		 */
		function selectValueType(props, propName, componentName) {
			if (props[propName] == null) {
				return null;
			}
			if (props.multiple) {
				if (!Array.isArray(props[propName])) {
					return new Error(
						("The `" + propName + "` prop supplied to <select> must be an array if ") +
						("`multiple` is true.")
					);
				}
			} else {
				if (Array.isArray(props[propName])) {
					return new Error(
						("The `" + propName + "` prop supplied to <select> must be a scalar ") +
						("value if `multiple` is false.")
					);
				}
			}
		}

		/**
		 * @param {ReactComponent} component Instance of ReactDOMSelect
		 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
		 * @private
		 */
		function updateOptions(component, propValue) {
			var selectedValue, i, l;
			var options = component.getDOMNode().options;

			if (component.props.multiple) {
				selectedValue = {};
				for (i = 0, l = propValue.length; i < l; i++) {
					selectedValue['' + propValue[i]] = true;
				}
				for (i = 0, l = options.length; i < l; i++) {
					var selected = selectedValue.hasOwnProperty(options[i].value);
					if (options[i].selected !== selected) {
						options[i].selected = selected;
					}
				}
			} else {
				// Do not set `select.value` as exact behavior isn't consistent across all
				// browsers for all cases.
				selectedValue = '' + propValue;
				for (i = 0, l = options.length; i < l; i++) {
					if (options[i].value === selectedValue) {
						options[i].selected = true;
						return;
					}
				}
				if (options.length) {
					options[0].selected = true;
				}
			}
		}

		/**
		 * Implements a <select> native component that allows optionally setting the
		 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
		 * stringable. If `multiple` is true, the prop must be an array of stringables.
		 *
		 * If `value` is not supplied (or null/undefined), user actions that change the
		 * selected option will trigger updates to the rendered options.
		 *
		 * If it is supplied (and not null/undefined), the rendered options will not
		 * update in response to user actions. Instead, the `value` prop must change in
		 * order for the rendered options to update.
		 *
		 * If `defaultValue` is provided, any options with the supplied values will be
		 * selected.
		 */
		var ReactDOMSelect = ReactClass.createClass({
			displayName: 'ReactDOMSelect',
			tagName: 'SELECT',

			mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

			propTypes: {
				defaultValue: selectValueType,
				value: selectValueType
			},

			render: function () {
				// Clone `this.props` so we don't mutate the input.
				var props = assign({}, this.props);

				props.onChange = this._handleChange;
				props.value = null;

				return select(props, this.props.children);
			},

			componentWillMount: function () {
				this._pendingUpdate = false;
			},

			componentDidMount: function () {
				var value = LinkedValueUtils.getValue(this);
				if (value != null) {
					updateOptions(this, value);
				} else if (this.props.defaultValue != null) {
					updateOptions(this, this.props.defaultValue);
				}
			},

			componentDidUpdate: function (prevProps) {
				var value = LinkedValueUtils.getValue(this);
				if (value != null) {
					this._pendingUpdate = false;
					updateOptions(this, value);
				} else if (!prevProps.multiple !== !this.props.multiple) {
					// For simplicity, reapply `defaultValue` if `multiple` is toggled.
					if (this.props.defaultValue != null) {
						updateOptions(this, this.props.defaultValue);
					} else {
						// Revert the select back to its default unselected state.
						updateOptions(this, this.props.multiple ? [] : '');
					}
				}
			},

			_handleChange: function (event) {
				var returnValue;
				var onChange = LinkedValueUtils.getOnChange(this);
				if (onChange) {
					returnValue = onChange.call(this, event);
				}

				this._pendingUpdate = true;
				ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
				return returnValue;
			}

		});

		module.exports = ReactDOMSelect;


		/***/
	},
	/* 373 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule ReactDOMTextarea
			 */

			'use strict';

			var AutoFocusMixin = __webpack_require__(362);
			var DOMPropertyOperations = __webpack_require__(291);
			var LinkedValueUtils = __webpack_require__(369);
			var ReactBrowserComponentMixin = __webpack_require__(358);
			var ReactClass = __webpack_require__(285);
			var ReactElement = __webpack_require__(260);
			var ReactUpdates = __webpack_require__(249);

			var assign = __webpack_require__(253);
			var invariant = __webpack_require__(252);

			var warning = __webpack_require__(263);

			var textarea = ReactElement.createFactory('textarea');

			function forceUpdateIfMounted() {
				/*jshint validthis:true */
				if (this.isMounted()) {
					this.forceUpdate();
				}
			}

			/**
			 * Implements a <textarea> native component that allows setting `value`, and
			 * `defaultValue`. This differs from the traditional DOM API because value is
			 * usually set as PCDATA children.
			 *
			 * If `value` is not supplied (or null/undefined), user actions that affect the
			 * value will trigger updates to the element.
			 *
			 * If `value` is supplied (and not null/undefined), the rendered element will
			 * not trigger updates to the element. Instead, the `value` prop must change in
			 * order for the rendered element to be updated.
			 *
			 * The rendered element will be initialized with an empty value, the prop
			 * `defaultValue` if specified, or the children content (deprecated).
			 */
			var ReactDOMTextarea = ReactClass.createClass({
				displayName: 'ReactDOMTextarea',
				tagName: 'TEXTAREA',

				mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

				getInitialState: function () {
					var defaultValue = this.props.defaultValue;
					// TODO (yungsters): Remove support for children content in <textarea>.
					var children = this.props.children;
					if (children != null) {
						if ("production" !== process.env.NODE_ENV) {
							("production" !== process.env.NODE_ENV ? warning(
								false,
								'Use the `defaultValue` or `value` props instead of setting ' +
								'children on <textarea>.'
							) : null);
						}
						("production" !== process.env.NODE_ENV ? invariant(
							defaultValue == null,
							'If you supply `defaultValue` on a <textarea>, do not pass children.'
						) : invariant(defaultValue == null));
						if (Array.isArray(children)) {
							("production" !== process.env.NODE_ENV ? invariant(
								children.length <= 1,
								'<textarea> can only have at most one child.'
							) : invariant(children.length <= 1));
							children = children[0];
						}

						defaultValue = '' + children;
					}
					if (defaultValue == null) {
						defaultValue = '';
					}
					var value = LinkedValueUtils.getValue(this);
					return {
						// We save the initial value so that `ReactDOMComponent` doesn't update
						// `textContent` (unnecessary since we update value).
						// The initial value can be a boolean or object so that's why it's
						// forced to be a string.
						initialValue: '' + (value != null ? value : defaultValue)
					};
				},

				render: function () {
					// Clone `this.props` so we don't mutate the input.
					var props = assign({}, this.props);

					("production" !== process.env.NODE_ENV ? invariant(
						props.dangerouslySetInnerHTML == null,
						'`dangerouslySetInnerHTML` does not make sense on <textarea>.'
					) : invariant(props.dangerouslySetInnerHTML == null));

					props.defaultValue = null;
					props.value = null;
					props.onChange = this._handleChange;

					// Always set children to the same thing. In IE9, the selection range will
					// get reset if `textContent` is mutated.
					return textarea(props, this.state.initialValue);
				},

				componentDidUpdate: function (prevProps, prevState, prevContext) {
					var value = LinkedValueUtils.getValue(this);
					if (value != null) {
						var rootNode = this.getDOMNode();
						// Cast `value` to a string to ensure the value is set correctly. While
						// browsers typically do this as necessary, jsdom doesn't.
						DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
					}
				},

				_handleChange: function (event) {
					var returnValue;
					var onChange = LinkedValueUtils.getOnChange(this);
					if (onChange) {
						returnValue = onChange.call(this, event);
					}
					ReactUpdates.asap(forceUpdateIfMounted, this);
					return returnValue;
				}

			});

			module.exports = ReactDOMTextarea;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 374 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactEventListener
		 * @typechecks static-only
		 */

		'use strict';

		var EventListener = __webpack_require__(375);
		var ExecutionEnvironment = __webpack_require__(299);
		var PooledClass = __webpack_require__(251);
		var ReactInstanceHandles = __webpack_require__(279);
		var ReactMount = __webpack_require__(315);
		var ReactUpdates = __webpack_require__(249);

		var assign = __webpack_require__(253);
		var getEventTarget = __webpack_require__(346);
		var getUnboundedScrollPosition = __webpack_require__(376);

		/**
		 * Finds the parent React component of `node`.
		 *
		 * @param {*} node
		 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
		 *                           is not nested.
		 */
		function findParent(node) {
			// TODO: It may be a good idea to cache this to prevent unnecessary DOM
			// traversal, but caching is difficult to do correctly without using a
			// mutation observer to listen for all DOM changes.
			var nodeID = ReactMount.getID(node);
			var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
			var container = ReactMount.findReactContainerForID(rootID);
			var parent = ReactMount.getFirstReactDOM(container);
			return parent;
		}

		// Used to store ancestor hierarchy in top level callback
		function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
			this.topLevelType = topLevelType;
			this.nativeEvent = nativeEvent;
			this.ancestors = [];
		}

		assign(TopLevelCallbackBookKeeping.prototype, {
			destructor: function () {
				this.topLevelType = null;
				this.nativeEvent = null;
				this.ancestors.length = 0;
			}
		});
		PooledClass.addPoolingTo(
			TopLevelCallbackBookKeeping,
			PooledClass.twoArgumentPooler
		);

		function handleTopLevelImpl(bookKeeping) {
			var topLevelTarget = ReactMount.getFirstReactDOM(
					getEventTarget(bookKeeping.nativeEvent)
				) || window;

			// Loop through the hierarchy, in case there's any nested components.
			// It's important that we build the array of ancestors before calling any
			// event handlers, because event handlers can modify the DOM, leading to
			// inconsistencies with ReactMount's node cache. See #1105.
			var ancestor = topLevelTarget;
			while (ancestor) {
				bookKeeping.ancestors.push(ancestor);
				ancestor = findParent(ancestor);
			}

			for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
				topLevelTarget = bookKeeping.ancestors[i];
				var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
				ReactEventListener._handleTopLevel(
					bookKeeping.topLevelType,
					topLevelTarget,
					topLevelTargetID,
					bookKeeping.nativeEvent
				);
			}
		}

		function scrollValueMonitor(cb) {
			var scrollPosition = getUnboundedScrollPosition(window);
			cb(scrollPosition);
		}

		var ReactEventListener = {
			_enabled: true,
			_handleTopLevel: null,

			WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

			setHandleTopLevel: function (handleTopLevel) {
				ReactEventListener._handleTopLevel = handleTopLevel;
			},

			setEnabled: function (enabled) {
				ReactEventListener._enabled = !!enabled;
			},

			isEnabled: function () {
				return ReactEventListener._enabled;
			},


			/**
			 * Traps top-level events by using event bubbling.
			 *
			 * @param {string} topLevelType Record from `EventConstants`.
			 * @param {string} handlerBaseName Event name (e.g. "click").
			 * @param {object} handle Element on which to attach listener.
			 * @return {object} An object with a remove function which will forcefully
			 *                  remove the listener.
			 * @internal
			 */
			trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
				var element = handle;
				if (!element) {
					return null;
				}
				return EventListener.listen(
					element,
					handlerBaseName,
					ReactEventListener.dispatchEvent.bind(null, topLevelType)
				);
			},

			/**
			 * Traps a top-level event by using event capturing.
			 *
			 * @param {string} topLevelType Record from `EventConstants`.
			 * @param {string} handlerBaseName Event name (e.g. "click").
			 * @param {object} handle Element on which to attach listener.
			 * @return {object} An object with a remove function which will forcefully
			 *                  remove the listener.
			 * @internal
			 */
			trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
				var element = handle;
				if (!element) {
					return null;
				}
				return EventListener.capture(
					element,
					handlerBaseName,
					ReactEventListener.dispatchEvent.bind(null, topLevelType)
				);
			},

			monitorScrollValue: function (refresh) {
				var callback = scrollValueMonitor.bind(null, refresh);
				EventListener.listen(window, 'scroll', callback);
			},

			dispatchEvent: function (topLevelType, nativeEvent) {
				if (!ReactEventListener._enabled) {
					return;
				}

				var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
					topLevelType,
					nativeEvent
				);
				try {
					// Event queue being processed in the same cycle allows
					// `preventDefault`.
					ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
				} finally {
					TopLevelCallbackBookKeeping.release(bookKeeping);
				}
			}
		};

		module.exports = ReactEventListener;


		/***/
	},
	/* 375 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 *
			 * Licensed under the Apache License, Version 2.0 (the "License");
			 * you may not use this file except in compliance with the License.
			 * You may obtain a copy of the License at
			 *
			 * http://www.apache.org/licenses/LICENSE-2.0
			 *
			 * Unless required by applicable law or agreed to in writing, software
			 * distributed under the License is distributed on an "AS IS" BASIS,
			 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
			 * See the License for the specific language governing permissions and
			 * limitations under the License.
			 *
			 * @providesModule EventListener
			 * @typechecks
			 */

			var emptyFunction = __webpack_require__(264);

			/**
			 * Upstream version of event listener. Does not take into account specific
			 * nature of platform.
			 */
			var EventListener = {
				/**
				 * Listen to DOM events during the bubble phase.
				 *
				 * @param {DOMEventTarget} target DOM element to register listener on.
				 * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
				 * @param {function} callback Callback function.
				 * @return {object} Object with a `remove` method.
				 */
				listen: function (target, eventType, callback) {
					if (target.addEventListener) {
						target.addEventListener(eventType, callback, false);
						return {
							remove: function () {
								target.removeEventListener(eventType, callback, false);
							}
						};
					} else if (target.attachEvent) {
						target.attachEvent('on' + eventType, callback);
						return {
							remove: function () {
								target.detachEvent('on' + eventType, callback);
							}
						};
					}
				},

				/**
				 * Listen to DOM events during the capture phase.
				 *
				 * @param {DOMEventTarget} target DOM element to register listener on.
				 * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
				 * @param {function} callback Callback function.
				 * @return {object} Object with a `remove` method.
				 */
				capture: function (target, eventType, callback) {
					if (!target.addEventListener) {
						if ("production" !== process.env.NODE_ENV) {
							console.error(
								'Attempted to listen to events during the capture phase on a ' +
								'browser that does not support the capture phase. Your application ' +
								'will not receive some events.'
							);
						}
						return {
							remove: emptyFunction
						};
					} else {
						target.addEventListener(eventType, callback, true);
						return {
							remove: function () {
								target.removeEventListener(eventType, callback, true);
							}
						};
					}
				},

				registerDefault: function () {
				}
			};

			module.exports = EventListener;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 376 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule getUnboundedScrollPosition
		 * @typechecks
		 */

		"use strict";

		/**
		 * Gets the scroll position of the supplied element or window.
		 *
		 * The return values are unbounded, unlike `getScrollPosition`. This means they
		 * may be negative or exceed the element boundaries (which is possible using
		 * inertial scrolling).
		 *
		 * @param {DOMWindow|DOMElement} scrollable
		 * @return {object} Map with `x` and `y` keys.
		 */
		function getUnboundedScrollPosition(scrollable) {
			if (scrollable === window) {
				return {
					x: window.pageXOffset || document.documentElement.scrollLeft,
					y: window.pageYOffset || document.documentElement.scrollTop
				};
			}
			return {
				x: scrollable.scrollLeft,
				y: scrollable.scrollTop
			};
		}

		module.exports = getUnboundedScrollPosition;


		/***/
	},
	/* 377 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactInjection
		 */

		'use strict';

		var DOMProperty = __webpack_require__(292);
		var EventPluginHub = __webpack_require__(317);
		var ReactComponentEnvironment = __webpack_require__(333);
		var ReactClass = __webpack_require__(285);
		var ReactEmptyComponent = __webpack_require__(324);
		var ReactBrowserEventEmitter = __webpack_require__(316);
		var ReactNativeComponent = __webpack_require__(269);
		var ReactDOMComponent = __webpack_require__(335);
		var ReactPerf = __webpack_require__(255);
		var ReactRootIndex = __webpack_require__(280);
		var ReactUpdates = __webpack_require__(249);

		var ReactInjection = {
			Component: ReactComponentEnvironment.injection,
			Class: ReactClass.injection,
			DOMComponent: ReactDOMComponent.injection,
			DOMProperty: DOMProperty.injection,
			EmptyComponent: ReactEmptyComponent.injection,
			EventPluginHub: EventPluginHub.injection,
			EventEmitter: ReactBrowserEventEmitter.injection,
			NativeComponent: ReactNativeComponent.injection,
			Perf: ReactPerf.injection,
			RootIndex: ReactRootIndex.injection,
			Updates: ReactUpdates.injection
		};

		module.exports = ReactInjection;


		/***/
	},
	/* 378 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactReconcileTransaction
		 * @typechecks static-only
		 */

		'use strict';

		var CallbackQueue = __webpack_require__(250);
		var PooledClass = __webpack_require__(251);
		var ReactBrowserEventEmitter = __webpack_require__(316);
		var ReactInputSelection = __webpack_require__(379);
		var ReactPutListenerQueue = __webpack_require__(383);
		var Transaction = __webpack_require__(271);

		var assign = __webpack_require__(253);

		/**
		 * Ensures that, when possible, the selection range (currently selected text
		 * input) is not disturbed by performing the transaction.
		 */
		var SELECTION_RESTORATION = {
			/**
			 * @return {Selection} Selection information.
			 */
			initialize: ReactInputSelection.getSelectionInformation,
			/**
			 * @param {Selection} sel Selection information returned from `initialize`.
			 */
			close: ReactInputSelection.restoreSelection
		};

		/**
		 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
		 * high level DOM manipulations (like temporarily removing a text input from the
		 * DOM).
		 */
		var EVENT_SUPPRESSION = {
			/**
			 * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
			 * the reconciliation.
			 */
			initialize: function () {
				var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
				ReactBrowserEventEmitter.setEnabled(false);
				return currentlyEnabled;
			},

			/**
			 * @param {boolean} previouslyEnabled Enabled status of
			 *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
			 *   restores the previous value.
			 */
			close: function (previouslyEnabled) {
				ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
			}
		};

		/**
		 * Provides a queue for collecting `componentDidMount` and
		 * `componentDidUpdate` callbacks during the the transaction.
		 */
		var ON_DOM_READY_QUEUEING = {
			/**
			 * Initializes the internal `onDOMReady` queue.
			 */
			initialize: function () {
				this.reactMountReady.reset();
			},

			/**
			 * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
			 */
			close: function () {
				this.reactMountReady.notifyAll();
			}
		};

		var PUT_LISTENER_QUEUEING = {
			initialize: function () {
				this.putListenerQueue.reset();
			},

			close: function () {
				this.putListenerQueue.putListeners();
			}
		};

		/**
		 * Executed within the scope of the `Transaction` instance. Consider these as
		 * being member methods, but with an implied ordering while being isolated from
		 * each other.
		 */
		var TRANSACTION_WRAPPERS = [
			PUT_LISTENER_QUEUEING,
			SELECTION_RESTORATION,
			EVENT_SUPPRESSION,
			ON_DOM_READY_QUEUEING
		];

		/**
		 * Currently:
		 * - The order that these are listed in the transaction is critical:
		 * - Suppresses events.
		 * - Restores selection range.
		 *
		 * Future:
		 * - Restore document/overflow scroll positions that were unintentionally
		 *   modified via DOM insertions above the top viewport boundary.
		 * - Implement/integrate with customized constraint based layout system and keep
		 *   track of which dimensions must be remeasured.
		 *
		 * @class ReactReconcileTransaction
		 */
		function ReactReconcileTransaction() {
			this.reinitializeTransaction();
			// Only server-side rendering really needs this option (see
			// `ReactServerRendering`), but server-side uses
			// `ReactServerRenderingTransaction` instead. This option is here so that it's
			// accessible and defaults to false when `ReactDOMComponent` and
			// `ReactTextComponent` checks it in `mountComponent`.`
			this.renderToStaticMarkup = false;
			this.reactMountReady = CallbackQueue.getPooled(null);
			this.putListenerQueue = ReactPutListenerQueue.getPooled();
		}

		var Mixin = {
			/**
			 * @see Transaction
			 * @abstract
			 * @final
			 * @return {array<object>} List of operation wrap proceedures.
			 *   TODO: convert to array<TransactionWrapper>
			 */
			getTransactionWrappers: function () {
				return TRANSACTION_WRAPPERS;
			},

			/**
			 * @return {object} The queue to collect `onDOMReady` callbacks with.
			 */
			getReactMountReady: function () {
				return this.reactMountReady;
			},

			getPutListenerQueue: function () {
				return this.putListenerQueue;
			},

			/**
			 * `PooledClass` looks for this, and will invoke this before allowing this
			 * instance to be resused.
			 */
			destructor: function () {
				CallbackQueue.release(this.reactMountReady);
				this.reactMountReady = null;

				ReactPutListenerQueue.release(this.putListenerQueue);
				this.putListenerQueue = null;
			}
		};


		assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

		PooledClass.addPoolingTo(ReactReconcileTransaction);

		module.exports = ReactReconcileTransaction;


		/***/
	},
	/* 379 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactInputSelection
		 */

		'use strict';

		var ReactDOMSelection = __webpack_require__(380);

		var containsNode = __webpack_require__(327);
		var focusNode = __webpack_require__(363);
		var getActiveElement = __webpack_require__(382);

		function isInDocument(node) {
			return containsNode(document.documentElement, node);
		}

		/**
		 * @ReactInputSelection: React input selection module. Based on Selection.js,
		 * but modified to be suitable for react and has a couple of bug fixes (doesn't
		 * assume buttons have range selections allowed).
		 * Input selection module for React.
		 */
		var ReactInputSelection = {

			hasSelectionCapabilities: function (elem) {
				return elem && (
						((elem.nodeName === 'INPUT' && elem.type === 'text') ||
						elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
					);
			},

			getSelectionInformation: function () {
				var focusedElem = getActiveElement();
				return {
					focusedElem: focusedElem,
					selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
						ReactInputSelection.getSelection(focusedElem) :
						null
				};
			},

			/**
			 * @restoreSelection: If any selection information was potentially lost,
			 * restore it. This is useful when performing operations that could remove dom
			 * nodes and place them back in, resulting in focus being lost.
			 */
			restoreSelection: function (priorSelectionInformation) {
				var curFocusedElem = getActiveElement();
				var priorFocusedElem = priorSelectionInformation.focusedElem;
				var priorSelectionRange = priorSelectionInformation.selectionRange;
				if (curFocusedElem !== priorFocusedElem &&
					isInDocument(priorFocusedElem)) {
					if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
						ReactInputSelection.setSelection(
							priorFocusedElem,
							priorSelectionRange
						);
					}
					focusNode(priorFocusedElem);
				}
			},

			/**
			 * @getSelection: Gets the selection bounds of a focused textarea, input or
			 * contentEditable node.
			 * -@input: Look up selection bounds of this input
			 * -@return {start: selectionStart, end: selectionEnd}
			 */
			getSelection: function (input) {
				var selection;

				if ('selectionStart' in input) {
					// Modern browser with input or textarea.
					selection = {
						start: input.selectionStart,
						end: input.selectionEnd
					};
				} else if (document.selection && input.nodeName === 'INPUT') {
					// IE8 input.
					var range = document.selection.createRange();
					// There can only be one selection per document in IE, so it must
					// be in our element.
					if (range.parentElement() === input) {
						selection = {
							start: -range.moveStart('character', -input.value.length),
							end: -range.moveEnd('character', -input.value.length)
						};
					}
				} else {
					// Content editable or old IE textarea.
					selection = ReactDOMSelection.getOffsets(input);
				}

				return selection || {start: 0, end: 0};
			},

			/**
			 * @setSelection: Sets the selection bounds of a textarea or input and focuses
			 * the input.
			 * -@input     Set selection bounds of this input or textarea
			 * -@offsets   Object of same form that is returned from get*
			 */
			setSelection: function (input, offsets) {
				var start = offsets.start;
				var end = offsets.end;
				if (typeof end === 'undefined') {
					end = start;
				}

				if ('selectionStart' in input) {
					input.selectionStart = start;
					input.selectionEnd = Math.min(end, input.value.length);
				} else if (document.selection && input.nodeName === 'INPUT') {
					var range = input.createTextRange();
					range.collapse(true);
					range.moveStart('character', start);
					range.moveEnd('character', end - start);
					range.select();
				} else {
					ReactDOMSelection.setOffsets(input, offsets);
				}
			}
		};

		module.exports = ReactInputSelection;


		/***/
	},
	/* 380 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDOMSelection
		 */

		'use strict';

		var ExecutionEnvironment = __webpack_require__(299);

		var getNodeForCharacterOffset = __webpack_require__(381);
		var getTextContentAccessor = __webpack_require__(343);

		/**
		 * While `isCollapsed` is available on the Selection object and `collapsed`
		 * is available on the Range object, IE11 sometimes gets them wrong.
		 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
		 */
		function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
			return anchorNode === focusNode && anchorOffset === focusOffset;
		}

		/**
		 * Get the appropriate anchor and focus node/offset pairs for IE.
		 *
		 * The catch here is that IE's selection API doesn't provide information
		 * about whether the selection is forward or backward, so we have to
		 * behave as though it's always forward.
		 *
		 * IE text differs from modern selection in that it behaves as though
		 * block elements end with a new line. This means character offsets will
		 * differ between the two APIs.
		 *
		 * @param {DOMElement} node
		 * @return {object}
		 */
		function getIEOffsets(node) {
			var selection = document.selection;
			var selectedRange = selection.createRange();
			var selectedLength = selectedRange.text.length;

			// Duplicate selection so we can move range without breaking user selection.
			var fromStart = selectedRange.duplicate();
			fromStart.moveToElementText(node);
			fromStart.setEndPoint('EndToStart', selectedRange);

			var startOffset = fromStart.text.length;
			var endOffset = startOffset + selectedLength;

			return {
				start: startOffset,
				end: endOffset
			};
		}

		/**
		 * @param {DOMElement} node
		 * @return {?object}
		 */
		function getModernOffsets(node) {
			var selection = window.getSelection && window.getSelection();

			if (!selection || selection.rangeCount === 0) {
				return null;
			}

			var anchorNode = selection.anchorNode;
			var anchorOffset = selection.anchorOffset;
			var focusNode = selection.focusNode;
			var focusOffset = selection.focusOffset;

			var currentRange = selection.getRangeAt(0);

			// If the node and offset values are the same, the selection is collapsed.
			// `Selection.isCollapsed` is available natively, but IE sometimes gets
			// this value wrong.
			var isSelectionCollapsed = isCollapsed(
				selection.anchorNode,
				selection.anchorOffset,
				selection.focusNode,
				selection.focusOffset
			);

			var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

			var tempRange = currentRange.cloneRange();
			tempRange.selectNodeContents(node);
			tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

			var isTempRangeCollapsed = isCollapsed(
				tempRange.startContainer,
				tempRange.startOffset,
				tempRange.endContainer,
				tempRange.endOffset
			);

			var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
			var end = start + rangeLength;

			// Detect whether the selection is backward.
			var detectionRange = document.createRange();
			detectionRange.setStart(anchorNode, anchorOffset);
			detectionRange.setEnd(focusNode, focusOffset);
			var isBackward = detectionRange.collapsed;

			return {
				start: isBackward ? end : start,
				end: isBackward ? start : end
			};
		}

		/**
		 * @param {DOMElement|DOMTextNode} node
		 * @param {object} offsets
		 */
		function setIEOffsets(node, offsets) {
			var range = document.selection.createRange().duplicate();
			var start, end;

			if (typeof offsets.end === 'undefined') {
				start = offsets.start;
				end = start;
			} else if (offsets.start > offsets.end) {
				start = offsets.end;
				end = offsets.start;
			} else {
				start = offsets.start;
				end = offsets.end;
			}

			range.moveToElementText(node);
			range.moveStart('character', start);
			range.setEndPoint('EndToStart', range);
			range.moveEnd('character', end - start);
			range.select();
		}

		/**
		 * In modern non-IE browsers, we can support both forward and backward
		 * selections.
		 *
		 * Note: IE10+ supports the Selection object, but it does not support
		 * the `extend` method, which means that even in modern IE, it's not possible
		 * to programatically create a backward selection. Thus, for all IE
		 * versions, we use the old IE API to create our selections.
		 *
		 * @param {DOMElement|DOMTextNode} node
		 * @param {object} offsets
		 */
		function setModernOffsets(node, offsets) {
			if (!window.getSelection) {
				return;
			}

			var selection = window.getSelection();
			var length = node[getTextContentAccessor()].length;
			var start = Math.min(offsets.start, length);
			var end = typeof offsets.end === 'undefined' ?
				start : Math.min(offsets.end, length);

			// IE 11 uses modern selection, but doesn't support the extend method.
			// Flip backward selections, so we can set with a single range.
			if (!selection.extend && start > end) {
				var temp = end;
				end = start;
				start = temp;
			}

			var startMarker = getNodeForCharacterOffset(node, start);
			var endMarker = getNodeForCharacterOffset(node, end);

			if (startMarker && endMarker) {
				var range = document.createRange();
				range.setStart(startMarker.node, startMarker.offset);
				selection.removeAllRanges();

				if (start > end) {
					selection.addRange(range);
					selection.extend(endMarker.node, endMarker.offset);
				} else {
					range.setEnd(endMarker.node, endMarker.offset);
					selection.addRange(range);
				}
			}
		}

		var useIEOffsets = (
			ExecutionEnvironment.canUseDOM &&
			'selection' in document && !('getSelection' in window)
		);

		var ReactDOMSelection = {
			/**
			 * @param {DOMElement} node
			 */
			getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

			/**
			 * @param {DOMElement|DOMTextNode} node
			 * @param {object} offsets
			 */
			setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
		};

		module.exports = ReactDOMSelection;


		/***/
	},
	/* 381 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule getNodeForCharacterOffset
		 */

		'use strict';

		/**
		 * Given any node return the first leaf node without children.
		 *
		 * @param {DOMElement|DOMTextNode} node
		 * @return {DOMElement|DOMTextNode}
		 */
		function getLeafNode(node) {
			while (node && node.firstChild) {
				node = node.firstChild;
			}
			return node;
		}

		/**
		 * Get the next sibling within a container. This will walk up the
		 * DOM if a node's siblings have been exhausted.
		 *
		 * @param {DOMElement|DOMTextNode} node
		 * @return {?DOMElement|DOMTextNode}
		 */
		function getSiblingNode(node) {
			while (node) {
				if (node.nextSibling) {
					return node.nextSibling;
				}
				node = node.parentNode;
			}
		}

		/**
		 * Get object describing the nodes which contain characters at offset.
		 *
		 * @param {DOMElement|DOMTextNode} root
		 * @param {number} offset
		 * @return {?object}
		 */
		function getNodeForCharacterOffset(root, offset) {
			var node = getLeafNode(root);
			var nodeStart = 0;
			var nodeEnd = 0;

			while (node) {
				if (node.nodeType === 3) {
					nodeEnd = nodeStart + node.textContent.length;

					if (nodeStart <= offset && nodeEnd >= offset) {
						return {
							node: node,
							offset: offset - nodeStart
						};
					}

					nodeStart = nodeEnd;
				}

				node = getLeafNode(getSiblingNode(node));
			}
		}

		module.exports = getNodeForCharacterOffset;


		/***/
	},
	/* 382 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule getActiveElement
		 * @typechecks
		 */

		/**
		 * Same as document.activeElement but wraps in a try-catch block. In IE it is
		 * not safe to call document.activeElement if there is nothing focused.
		 *
		 * The activeElement will be null only if the document body is not yet defined.
		 */
		function getActiveElement() /*?DOMElement*/ {
			try {
				return document.activeElement || document.body;
			} catch (e) {
				return document.body;
			}
		}

		module.exports = getActiveElement;


		/***/
	},
	/* 383 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactPutListenerQueue
		 */

		'use strict';

		var PooledClass = __webpack_require__(251);
		var ReactBrowserEventEmitter = __webpack_require__(316);

		var assign = __webpack_require__(253);

		function ReactPutListenerQueue() {
			this.listenersToPut = [];
		}

		assign(ReactPutListenerQueue.prototype, {
			enqueuePutListener: function (rootNodeID, propKey, propValue) {
				this.listenersToPut.push({
					rootNodeID: rootNodeID,
					propKey: propKey,
					propValue: propValue
				});
			},

			putListeners: function () {
				for (var i = 0; i < this.listenersToPut.length; i++) {
					var listenerToPut = this.listenersToPut[i];
					ReactBrowserEventEmitter.putListener(
						listenerToPut.rootNodeID,
						listenerToPut.propKey,
						listenerToPut.propValue
					);
				}
			},

			reset: function () {
				this.listenersToPut.length = 0;
			},

			destructor: function () {
				this.reset();
			}
		});

		PooledClass.addPoolingTo(ReactPutListenerQueue);

		module.exports = ReactPutListenerQueue;


		/***/
	},
	/* 384 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SelectEventPlugin
		 */

		'use strict';

		var EventConstants = __webpack_require__(276);
		var EventPropagators = __webpack_require__(341);
		var ReactInputSelection = __webpack_require__(379);
		var SyntheticEvent = __webpack_require__(345);

		var getActiveElement = __webpack_require__(382);
		var isTextInputElement = __webpack_require__(349);
		var keyOf = __webpack_require__(287);
		var shallowEqual = __webpack_require__(385);

		var topLevelTypes = EventConstants.topLevelTypes;

		var eventTypes = {
			select: {
				phasedRegistrationNames: {
					bubbled: keyOf({onSelect: null}),
					captured: keyOf({onSelectCapture: null})
				},
				dependencies: [
					topLevelTypes.topBlur,
					topLevelTypes.topContextMenu,
					topLevelTypes.topFocus,
					topLevelTypes.topKeyDown,
					topLevelTypes.topMouseDown,
					topLevelTypes.topMouseUp,
					topLevelTypes.topSelectionChange
				]
			}
		};

		var activeElement = null;
		var activeElementID = null;
		var lastSelection = null;
		var mouseDown = false;

		/**
		 * Get an object which is a unique representation of the current selection.
		 *
		 * The return value will not be consistent across nodes or browsers, but
		 * two identical selections on the same node will return identical objects.
		 *
		 * @param {DOMElement} node
		 * @param {object}
		 */
		function getSelection(node) {
			if ('selectionStart' in node &&
				ReactInputSelection.hasSelectionCapabilities(node)) {
				return {
					start: node.selectionStart,
					end: node.selectionEnd
				};
			} else if (window.getSelection) {
				var selection = window.getSelection();
				return {
					anchorNode: selection.anchorNode,
					anchorOffset: selection.anchorOffset,
					focusNode: selection.focusNode,
					focusOffset: selection.focusOffset
				};
			} else if (document.selection) {
				var range = document.selection.createRange();
				return {
					parentElement: range.parentElement(),
					text: range.text,
					top: range.boundingTop,
					left: range.boundingLeft
				};
			}
		}

		/**
		 * Poll selection to see whether it's changed.
		 *
		 * @param {object} nativeEvent
		 * @return {?SyntheticEvent}
		 */
		function constructSelectEvent(nativeEvent) {
			// Ensure we have the right element, and that the user is not dragging a
			// selection (this matches native `select` event behavior). In HTML5, select
			// fires only on input and textarea thus if there's no focused element we
			// won't dispatch.
			if (mouseDown ||
				activeElement == null ||
				activeElement !== getActiveElement()) {
				return null;
			}

			// Only fire when selection has actually changed.
			var currentSelection = getSelection(activeElement);
			if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
				lastSelection = currentSelection;

				var syntheticEvent = SyntheticEvent.getPooled(
					eventTypes.select,
					activeElementID,
					nativeEvent
				);

				syntheticEvent.type = 'select';
				syntheticEvent.target = activeElement;

				EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

				return syntheticEvent;
			}
		}

		/**
		 * This plugin creates an `onSelect` event that normalizes select events
		 * across form elements.
		 *
		 * Supported elements are:
		 * - input (see `isTextInputElement`)
		 * - textarea
		 * - contentEditable
		 *
		 * This differs from native browser implementations in the following ways:
		 * - Fires on contentEditable fields as well as inputs.
		 * - Fires for collapsed selection.
		 * - Fires after user input.
		 */
		var SelectEventPlugin = {

			eventTypes: eventTypes,

			/**
			 * @param {string} topLevelType Record from `EventConstants`.
			 * @param {DOMEventTarget} topLevelTarget The listening component root node.
			 * @param {string} topLevelTargetID ID of `topLevelTarget`.
			 * @param {object} nativeEvent Native browser event.
			 * @return {*} An accumulation of synthetic events.
			 * @see {EventPluginHub.extractEvents}
			 */
			extractEvents: function (topLevelType,
									 topLevelTarget,
									 topLevelTargetID,
									 nativeEvent) {

				switch (topLevelType) {
					// Track the input node that has focus.
					case topLevelTypes.topFocus:
						if (isTextInputElement(topLevelTarget) ||
							topLevelTarget.contentEditable === 'true') {
							activeElement = topLevelTarget;
							activeElementID = topLevelTargetID;
							lastSelection = null;
						}
						break;
					case topLevelTypes.topBlur:
						activeElement = null;
						activeElementID = null;
						lastSelection = null;
						break;

					// Don't fire the event while the user is dragging. This matches the
					// semantics of the native select event.
					case topLevelTypes.topMouseDown:
						mouseDown = true;
						break;
					case topLevelTypes.topContextMenu:
					case topLevelTypes.topMouseUp:
						mouseDown = false;
						return constructSelectEvent(nativeEvent);

					// Chrome and IE fire non-standard event when selection is changed (and
					// sometimes when it hasn't).
					// Firefox doesn't support selectionchange, so check selection status
					// after each key entry. The selection changes after keydown and before
					// keyup, but we check on keydown as well in the case of holding down a
					// key, when multiple keydown events are fired but only one keyup is.
					case topLevelTypes.topSelectionChange:
					case topLevelTypes.topKeyDown:
					case topLevelTypes.topKeyUp:
						return constructSelectEvent(nativeEvent);
				}
			}
		};

		module.exports = SelectEventPlugin;


		/***/
	},
	/* 385 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule shallowEqual
		 */

		'use strict';

		/**
		 * Performs equality by iterating through keys on an object and returning
		 * false when any key has values which are not strictly equal between
		 * objA and objB. Returns true when the values of all keys are strictly equal.
		 *
		 * @return {boolean}
		 */
		function shallowEqual(objA, objB) {
			if (objA === objB) {
				return true;
			}
			var key;
			// Test for A's keys different from B.
			for (key in objA) {
				if (objA.hasOwnProperty(key) &&
					(!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
					return false;
				}
			}
			// Test for B's keys missing from A.
			for (key in objB) {
				if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
					return false;
				}
			}
			return true;
		}

		module.exports = shallowEqual;


		/***/
	},
	/* 386 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ServerReactRootIndex
		 * @typechecks
		 */

		'use strict';

		/**
		 * Size of the reactRoot ID space. We generate random numbers for React root
		 * IDs and if there's a collision the events and DOM update system will
		 * get confused. In the future we need a way to generate GUIDs but for
		 * now this will work on a smaller scale.
		 */
		var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

		var ServerReactRootIndex = {
			createReactRootIndex: function () {
				return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
			}
		};

		module.exports = ServerReactRootIndex;


		/***/
	},
	/* 387 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule SimpleEventPlugin
			 */

			'use strict';

			var EventConstants = __webpack_require__(276);
			var EventPluginUtils = __webpack_require__(275);
			var EventPropagators = __webpack_require__(341);
			var SyntheticClipboardEvent = __webpack_require__(389);
			var SyntheticEvent = __webpack_require__(345);
			var SyntheticFocusEvent = __webpack_require__(390);
			var SyntheticKeyboardEvent = __webpack_require__(391);
			var SyntheticMouseEvent = __webpack_require__(353);
			var SyntheticDragEvent = __webpack_require__(388);
			var SyntheticTouchEvent = __webpack_require__(394);
			var SyntheticUIEvent = __webpack_require__(354);
			var SyntheticWheelEvent = __webpack_require__(395);

			var getEventCharCode = __webpack_require__(392);

			var invariant = __webpack_require__(252);
			var keyOf = __webpack_require__(287);
			var warning = __webpack_require__(263);

			var topLevelTypes = EventConstants.topLevelTypes;

			var eventTypes = {
				blur: {
					phasedRegistrationNames: {
						bubbled: keyOf({onBlur: true}),
						captured: keyOf({onBlurCapture: true})
					}
				},
				click: {
					phasedRegistrationNames: {
						bubbled: keyOf({onClick: true}),
						captured: keyOf({onClickCapture: true})
					}
				},
				contextMenu: {
					phasedRegistrationNames: {
						bubbled: keyOf({onContextMenu: true}),
						captured: keyOf({onContextMenuCapture: true})
					}
				},
				copy: {
					phasedRegistrationNames: {
						bubbled: keyOf({onCopy: true}),
						captured: keyOf({onCopyCapture: true})
					}
				},
				cut: {
					phasedRegistrationNames: {
						bubbled: keyOf({onCut: true}),
						captured: keyOf({onCutCapture: true})
					}
				},
				doubleClick: {
					phasedRegistrationNames: {
						bubbled: keyOf({onDoubleClick: true}),
						captured: keyOf({onDoubleClickCapture: true})
					}
				},
				drag: {
					phasedRegistrationNames: {
						bubbled: keyOf({onDrag: true}),
						captured: keyOf({onDragCapture: true})
					}
				},
				dragEnd: {
					phasedRegistrationNames: {
						bubbled: keyOf({onDragEnd: true}),
						captured: keyOf({onDragEndCapture: true})
					}
				},
				dragEnter: {
					phasedRegistrationNames: {
						bubbled: keyOf({onDragEnter: true}),
						captured: keyOf({onDragEnterCapture: true})
					}
				},
				dragExit: {
					phasedRegistrationNames: {
						bubbled: keyOf({onDragExit: true}),
						captured: keyOf({onDragExitCapture: true})
					}
				},
				dragLeave: {
					phasedRegistrationNames: {
						bubbled: keyOf({onDragLeave: true}),
						captured: keyOf({onDragLeaveCapture: true})
					}
				},
				dragOver: {
					phasedRegistrationNames: {
						bubbled: keyOf({onDragOver: true}),
						captured: keyOf({onDragOverCapture: true})
					}
				},
				dragStart: {
					phasedRegistrationNames: {
						bubbled: keyOf({onDragStart: true}),
						captured: keyOf({onDragStartCapture: true})
					}
				},
				drop: {
					phasedRegistrationNames: {
						bubbled: keyOf({onDrop: true}),
						captured: keyOf({onDropCapture: true})
					}
				},
				focus: {
					phasedRegistrationNames: {
						bubbled: keyOf({onFocus: true}),
						captured: keyOf({onFocusCapture: true})
					}
				},
				input: {
					phasedRegistrationNames: {
						bubbled: keyOf({onInput: true}),
						captured: keyOf({onInputCapture: true})
					}
				},
				keyDown: {
					phasedRegistrationNames: {
						bubbled: keyOf({onKeyDown: true}),
						captured: keyOf({onKeyDownCapture: true})
					}
				},
				keyPress: {
					phasedRegistrationNames: {
						bubbled: keyOf({onKeyPress: true}),
						captured: keyOf({onKeyPressCapture: true})
					}
				},
				keyUp: {
					phasedRegistrationNames: {
						bubbled: keyOf({onKeyUp: true}),
						captured: keyOf({onKeyUpCapture: true})
					}
				},
				load: {
					phasedRegistrationNames: {
						bubbled: keyOf({onLoad: true}),
						captured: keyOf({onLoadCapture: true})
					}
				},
				error: {
					phasedRegistrationNames: {
						bubbled: keyOf({onError: true}),
						captured: keyOf({onErrorCapture: true})
					}
				},
				// Note: We do not allow listening to mouseOver events. Instead, use the
				// onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
				mouseDown: {
					phasedRegistrationNames: {
						bubbled: keyOf({onMouseDown: true}),
						captured: keyOf({onMouseDownCapture: true})
					}
				},
				mouseMove: {
					phasedRegistrationNames: {
						bubbled: keyOf({onMouseMove: true}),
						captured: keyOf({onMouseMoveCapture: true})
					}
				},
				mouseOut: {
					phasedRegistrationNames: {
						bubbled: keyOf({onMouseOut: true}),
						captured: keyOf({onMouseOutCapture: true})
					}
				},
				mouseOver: {
					phasedRegistrationNames: {
						bubbled: keyOf({onMouseOver: true}),
						captured: keyOf({onMouseOverCapture: true})
					}
				},
				mouseUp: {
					phasedRegistrationNames: {
						bubbled: keyOf({onMouseUp: true}),
						captured: keyOf({onMouseUpCapture: true})
					}
				},
				paste: {
					phasedRegistrationNames: {
						bubbled: keyOf({onPaste: true}),
						captured: keyOf({onPasteCapture: true})
					}
				},
				reset: {
					phasedRegistrationNames: {
						bubbled: keyOf({onReset: true}),
						captured: keyOf({onResetCapture: true})
					}
				},
				scroll: {
					phasedRegistrationNames: {
						bubbled: keyOf({onScroll: true}),
						captured: keyOf({onScrollCapture: true})
					}
				},
				submit: {
					phasedRegistrationNames: {
						bubbled: keyOf({onSubmit: true}),
						captured: keyOf({onSubmitCapture: true})
					}
				},
				touchCancel: {
					phasedRegistrationNames: {
						bubbled: keyOf({onTouchCancel: true}),
						captured: keyOf({onTouchCancelCapture: true})
					}
				},
				touchEnd: {
					phasedRegistrationNames: {
						bubbled: keyOf({onTouchEnd: true}),
						captured: keyOf({onTouchEndCapture: true})
					}
				},
				touchMove: {
					phasedRegistrationNames: {
						bubbled: keyOf({onTouchMove: true}),
						captured: keyOf({onTouchMoveCapture: true})
					}
				},
				touchStart: {
					phasedRegistrationNames: {
						bubbled: keyOf({onTouchStart: true}),
						captured: keyOf({onTouchStartCapture: true})
					}
				},
				wheel: {
					phasedRegistrationNames: {
						bubbled: keyOf({onWheel: true}),
						captured: keyOf({onWheelCapture: true})
					}
				}
			};

			var topLevelEventsToDispatchConfig = {
				topBlur: eventTypes.blur,
				topClick: eventTypes.click,
				topContextMenu: eventTypes.contextMenu,
				topCopy: eventTypes.copy,
				topCut: eventTypes.cut,
				topDoubleClick: eventTypes.doubleClick,
				topDrag: eventTypes.drag,
				topDragEnd: eventTypes.dragEnd,
				topDragEnter: eventTypes.dragEnter,
				topDragExit: eventTypes.dragExit,
				topDragLeave: eventTypes.dragLeave,
				topDragOver: eventTypes.dragOver,
				topDragStart: eventTypes.dragStart,
				topDrop: eventTypes.drop,
				topError: eventTypes.error,
				topFocus: eventTypes.focus,
				topInput: eventTypes.input,
				topKeyDown: eventTypes.keyDown,
				topKeyPress: eventTypes.keyPress,
				topKeyUp: eventTypes.keyUp,
				topLoad: eventTypes.load,
				topMouseDown: eventTypes.mouseDown,
				topMouseMove: eventTypes.mouseMove,
				topMouseOut: eventTypes.mouseOut,
				topMouseOver: eventTypes.mouseOver,
				topMouseUp: eventTypes.mouseUp,
				topPaste: eventTypes.paste,
				topReset: eventTypes.reset,
				topScroll: eventTypes.scroll,
				topSubmit: eventTypes.submit,
				topTouchCancel: eventTypes.touchCancel,
				topTouchEnd: eventTypes.touchEnd,
				topTouchMove: eventTypes.touchMove,
				topTouchStart: eventTypes.touchStart,
				topWheel: eventTypes.wheel
			};

			for (var type in topLevelEventsToDispatchConfig) {
				topLevelEventsToDispatchConfig[type].dependencies = [type];
			}

			var SimpleEventPlugin = {

				eventTypes: eventTypes,

				/**
				 * Same as the default implementation, except cancels the event when return
				 * value is false. This behavior will be disabled in a future release.
				 *
				 * @param {object} Event to be dispatched.
				 * @param {function} Application-level callback.
				 * @param {string} domID DOM ID to pass to the callback.
				 */
				executeDispatch: function (event, listener, domID) {
					var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

					("production" !== process.env.NODE_ENV ? warning(
						typeof returnValue !== 'boolean',
						'Returning `false` from an event handler is deprecated and will be ' +
						'ignored in a future release. Instead, manually call ' +
						'e.stopPropagation() or e.preventDefault(), as appropriate.'
					) : null);

					if (returnValue === false) {
						event.stopPropagation();
						event.preventDefault();
					}
				},

				/**
				 * @param {string} topLevelType Record from `EventConstants`.
				 * @param {DOMEventTarget} topLevelTarget The listening component root node.
				 * @param {string} topLevelTargetID ID of `topLevelTarget`.
				 * @param {object} nativeEvent Native browser event.
				 * @return {*} An accumulation of synthetic events.
				 * @see {EventPluginHub.extractEvents}
				 */
				extractEvents: function (topLevelType,
										 topLevelTarget,
										 topLevelTargetID,
										 nativeEvent) {
					var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
					if (!dispatchConfig) {
						return null;
					}
					var EventConstructor;
					switch (topLevelType) {
						case topLevelTypes.topInput:
						case topLevelTypes.topLoad:
						case topLevelTypes.topError:
						case topLevelTypes.topReset:
						case topLevelTypes.topSubmit:
							// HTML Events
							// @see http://www.w3.org/TR/html5/index.html#events-0
							EventConstructor = SyntheticEvent;
							break;
						case topLevelTypes.topKeyPress:
							// FireFox creates a keypress event for function keys too. This removes
							// the unwanted keypress events. Enter is however both printable and
							// non-printable. One would expect Tab to be as well (but it isn't).
							if (getEventCharCode(nativeEvent) === 0) {
								return null;
							}
						/* falls through */
						case topLevelTypes.topKeyDown:
						case topLevelTypes.topKeyUp:
							EventConstructor = SyntheticKeyboardEvent;
							break;
						case topLevelTypes.topBlur:
						case topLevelTypes.topFocus:
							EventConstructor = SyntheticFocusEvent;
							break;
						case topLevelTypes.topClick:
							// Firefox creates a click event on right mouse clicks. This removes the
							// unwanted click events.
							if (nativeEvent.button === 2) {
								return null;
							}
						/* falls through */
						case topLevelTypes.topContextMenu:
						case topLevelTypes.topDoubleClick:
						case topLevelTypes.topMouseDown:
						case topLevelTypes.topMouseMove:
						case topLevelTypes.topMouseOut:
						case topLevelTypes.topMouseOver:
						case topLevelTypes.topMouseUp:
							EventConstructor = SyntheticMouseEvent;
							break;
						case topLevelTypes.topDrag:
						case topLevelTypes.topDragEnd:
						case topLevelTypes.topDragEnter:
						case topLevelTypes.topDragExit:
						case topLevelTypes.topDragLeave:
						case topLevelTypes.topDragOver:
						case topLevelTypes.topDragStart:
						case topLevelTypes.topDrop:
							EventConstructor = SyntheticDragEvent;
							break;
						case topLevelTypes.topTouchCancel:
						case topLevelTypes.topTouchEnd:
						case topLevelTypes.topTouchMove:
						case topLevelTypes.topTouchStart:
							EventConstructor = SyntheticTouchEvent;
							break;
						case topLevelTypes.topScroll:
							EventConstructor = SyntheticUIEvent;
							break;
						case topLevelTypes.topWheel:
							EventConstructor = SyntheticWheelEvent;
							break;
						case topLevelTypes.topCopy:
						case topLevelTypes.topCut:
						case topLevelTypes.topPaste:
							EventConstructor = SyntheticClipboardEvent;
							break;
					}
					("production" !== process.env.NODE_ENV ? invariant(
						EventConstructor,
						'SimpleEventPlugin: Unhandled event type, `%s`.',
						topLevelType
					) : invariant(EventConstructor));
					var event = EventConstructor.getPooled(
						dispatchConfig,
						topLevelTargetID,
						nativeEvent
					);
					EventPropagators.accumulateTwoPhaseDispatches(event);
					return event;
				}

			};

			module.exports = SimpleEventPlugin;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 388 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticDragEvent
		 * @typechecks static-only
		 */

		'use strict';

		var SyntheticMouseEvent = __webpack_require__(353);

		/**
		 * @interface DragEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */
		var DragEventInterface = {
			dataTransfer: null
		};

		/**
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 * @extends {SyntheticUIEvent}
		 */
		function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
			SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
		}

		SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

		module.exports = SyntheticDragEvent;


		/***/
	},
	/* 389 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticClipboardEvent
		 * @typechecks static-only
		 */

		'use strict';

		var SyntheticEvent = __webpack_require__(345);

		/**
		 * @interface Event
		 * @see http://www.w3.org/TR/clipboard-apis/
		 */
		var ClipboardEventInterface = {
			clipboardData: function (event) {
				return (
					'clipboardData' in event ?
						event.clipboardData :
						window.clipboardData
				);
			}
		};

		/**
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 * @extends {SyntheticUIEvent}
		 */
		function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
			SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
		}

		SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

		module.exports = SyntheticClipboardEvent;


		/***/
	},
	/* 390 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticFocusEvent
		 * @typechecks static-only
		 */

		'use strict';

		var SyntheticUIEvent = __webpack_require__(354);

		/**
		 * @interface FocusEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */
		var FocusEventInterface = {
			relatedTarget: null
		};

		/**
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 * @extends {SyntheticUIEvent}
		 */
		function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
			SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
		}

		SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

		module.exports = SyntheticFocusEvent;


		/***/
	},
	/* 391 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticKeyboardEvent
		 * @typechecks static-only
		 */

		'use strict';

		var SyntheticUIEvent = __webpack_require__(354);

		var getEventCharCode = __webpack_require__(392);
		var getEventKey = __webpack_require__(393);
		var getEventModifierState = __webpack_require__(355);

		/**
		 * @interface KeyboardEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */
		var KeyboardEventInterface = {
			key: getEventKey,
			location: null,
			ctrlKey: null,
			shiftKey: null,
			altKey: null,
			metaKey: null,
			repeat: null,
			locale: null,
			getModifierState: getEventModifierState,
			// Legacy Interface
			charCode: function (event) {
				// `charCode` is the result of a KeyPress event and represents the value of
				// the actual printable character.

				// KeyPress is deprecated, but its replacement is not yet final and not
				// implemented in any major browser. Only KeyPress has charCode.
				if (event.type === 'keypress') {
					return getEventCharCode(event);
				}
				return 0;
			},
			keyCode: function (event) {
				// `keyCode` is the result of a KeyDown/Up event and represents the value of
				// physical keyboard key.

				// The actual meaning of the value depends on the users' keyboard layout
				// which cannot be detected. Assuming that it is a US keyboard layout
				// provides a surprisingly accurate mapping for US and European users.
				// Due to this, it is left to the user to implement at this time.
				if (event.type === 'keydown' || event.type === 'keyup') {
					return event.keyCode;
				}
				return 0;
			},
			which: function (event) {
				// `which` is an alias for either `keyCode` or `charCode` depending on the
				// type of the event.
				if (event.type === 'keypress') {
					return getEventCharCode(event);
				}
				if (event.type === 'keydown' || event.type === 'keyup') {
					return event.keyCode;
				}
				return 0;
			}
		};

		/**
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 * @extends {SyntheticUIEvent}
		 */
		function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
			SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
		}

		SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

		module.exports = SyntheticKeyboardEvent;


		/***/
	},
	/* 392 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule getEventCharCode
		 * @typechecks static-only
		 */

		'use strict';

		/**
		 * `charCode` represents the actual "character code" and is safe to use with
		 * `String.fromCharCode`. As such, only keys that correspond to printable
		 * characters produce a valid `charCode`, the only exception to this is Enter.
		 * The Tab-key is considered non-printable and does not have a `charCode`,
		 * presumably because it does not produce a tab-character in browsers.
		 *
		 * @param {object} nativeEvent Native browser event.
		 * @return {string} Normalized `charCode` property.
		 */
		function getEventCharCode(nativeEvent) {
			var charCode;
			var keyCode = nativeEvent.keyCode;

			if ('charCode' in nativeEvent) {
				charCode = nativeEvent.charCode;

				// FF does not set `charCode` for the Enter-key, check against `keyCode`.
				if (charCode === 0 && keyCode === 13) {
					charCode = 13;
				}
			} else {
				// IE8 does not implement `charCode`, but `keyCode` has the correct value.
				charCode = keyCode;
			}

			// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
			// Must not discard the (non-)printable Enter-key.
			if (charCode >= 32 || charCode === 13) {
				return charCode;
			}

			return 0;
		}

		module.exports = getEventCharCode;


		/***/
	},
	/* 393 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule getEventKey
		 * @typechecks static-only
		 */

		'use strict';

		var getEventCharCode = __webpack_require__(392);

		/**
		 * Normalization of deprecated HTML5 `key` values
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
		 */
		var normalizeKey = {
			'Esc': 'Escape',
			'Spacebar': ' ',
			'Left': 'ArrowLeft',
			'Up': 'ArrowUp',
			'Right': 'ArrowRight',
			'Down': 'ArrowDown',
			'Del': 'Delete',
			'Win': 'OS',
			'Menu': 'ContextMenu',
			'Apps': 'ContextMenu',
			'Scroll': 'ScrollLock',
			'MozPrintableKey': 'Unidentified'
		};

		/**
		 * Translation from legacy `keyCode` to HTML5 `key`
		 * Only special keys supported, all others depend on keyboard layout or browser
		 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
		 */
		var translateToKey = {
			8: 'Backspace',
			9: 'Tab',
			12: 'Clear',
			13: 'Enter',
			16: 'Shift',
			17: 'Control',
			18: 'Alt',
			19: 'Pause',
			20: 'CapsLock',
			27: 'Escape',
			32: ' ',
			33: 'PageUp',
			34: 'PageDown',
			35: 'End',
			36: 'Home',
			37: 'ArrowLeft',
			38: 'ArrowUp',
			39: 'ArrowRight',
			40: 'ArrowDown',
			45: 'Insert',
			46: 'Delete',
			112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
			118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
			144: 'NumLock',
			145: 'ScrollLock',
			224: 'Meta'
		};

		/**
		 * @param {object} nativeEvent Native browser event.
		 * @return {string} Normalized `key` property.
		 */
		function getEventKey(nativeEvent) {
			if (nativeEvent.key) {
				// Normalize inconsistent values reported by browsers due to
				// implementations of a working draft specification.

				// FireFox implements `key` but returns `MozPrintableKey` for all
				// printable characters (normalized to `Unidentified`), ignore it.
				var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
				if (key !== 'Unidentified') {
					return key;
				}
			}

			// Browser does not implement `key`, polyfill as much of it as we can.
			if (nativeEvent.type === 'keypress') {
				var charCode = getEventCharCode(nativeEvent);

				// The enter-key is technically both printable and non-printable and can
				// thus be captured by `keypress`, no other non-printable key should.
				return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
			}
			if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
				// While user keyboard layout determines the actual meaning of each
				// `keyCode` value, almost all function keys have a universal value.
				return translateToKey[nativeEvent.keyCode] || 'Unidentified';
			}
			return '';
		}

		module.exports = getEventKey;


		/***/
	},
	/* 394 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticTouchEvent
		 * @typechecks static-only
		 */

		'use strict';

		var SyntheticUIEvent = __webpack_require__(354);

		var getEventModifierState = __webpack_require__(355);

		/**
		 * @interface TouchEvent
		 * @see http://www.w3.org/TR/touch-events/
		 */
		var TouchEventInterface = {
			touches: null,
			targetTouches: null,
			changedTouches: null,
			altKey: null,
			metaKey: null,
			ctrlKey: null,
			shiftKey: null,
			getModifierState: getEventModifierState
		};

		/**
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 * @extends {SyntheticUIEvent}
		 */
		function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
			SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
		}

		SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

		module.exports = SyntheticTouchEvent;


		/***/
	},
	/* 395 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SyntheticWheelEvent
		 * @typechecks static-only
		 */

		'use strict';

		var SyntheticMouseEvent = __webpack_require__(353);

		/**
		 * @interface WheelEvent
		 * @see http://www.w3.org/TR/DOM-Level-3-Events/
		 */
		var WheelEventInterface = {
			deltaX: function (event) {
				return (
					'deltaX' in event ? event.deltaX :
						// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
						'wheelDeltaX' in event ? -event.wheelDeltaX : 0
				);
			},
			deltaY: function (event) {
				return (
					'deltaY' in event ? event.deltaY :
						// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
						'wheelDeltaY' in event ? -event.wheelDeltaY :
							// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
							'wheelDelta' in event ? -event.wheelDelta : 0
				);
			},
			deltaZ: null,

			// Browsers without "deltaMode" is reporting in raw wheel delta where one
			// notch on the scroll is always +/- 120, roughly equivalent to pixels.
			// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
			// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
			deltaMode: null
		};

		/**
		 * @param {object} dispatchConfig Configuration used to dispatch this event.
		 * @param {string} dispatchMarker Marker identifying the event target.
		 * @param {object} nativeEvent Native browser event.
		 * @extends {SyntheticMouseEvent}
		 */
		function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
			SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
		}

		SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

		module.exports = SyntheticWheelEvent;


		/***/
	},
	/* 396 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule SVGDOMPropertyConfig
		 */

		/*jslint bitwise: true*/

		'use strict';

		var DOMProperty = __webpack_require__(292);

		var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

		var SVGDOMPropertyConfig = {
			Properties: {
				clipPath: MUST_USE_ATTRIBUTE,
				cx: MUST_USE_ATTRIBUTE,
				cy: MUST_USE_ATTRIBUTE,
				d: MUST_USE_ATTRIBUTE,
				dx: MUST_USE_ATTRIBUTE,
				dy: MUST_USE_ATTRIBUTE,
				fill: MUST_USE_ATTRIBUTE,
				fillOpacity: MUST_USE_ATTRIBUTE,
				fontFamily: MUST_USE_ATTRIBUTE,
				fontSize: MUST_USE_ATTRIBUTE,
				fx: MUST_USE_ATTRIBUTE,
				fy: MUST_USE_ATTRIBUTE,
				gradientTransform: MUST_USE_ATTRIBUTE,
				gradientUnits: MUST_USE_ATTRIBUTE,
				markerEnd: MUST_USE_ATTRIBUTE,
				markerMid: MUST_USE_ATTRIBUTE,
				markerStart: MUST_USE_ATTRIBUTE,
				offset: MUST_USE_ATTRIBUTE,
				opacity: MUST_USE_ATTRIBUTE,
				patternContentUnits: MUST_USE_ATTRIBUTE,
				patternUnits: MUST_USE_ATTRIBUTE,
				points: MUST_USE_ATTRIBUTE,
				preserveAspectRatio: MUST_USE_ATTRIBUTE,
				r: MUST_USE_ATTRIBUTE,
				rx: MUST_USE_ATTRIBUTE,
				ry: MUST_USE_ATTRIBUTE,
				spreadMethod: MUST_USE_ATTRIBUTE,
				stopColor: MUST_USE_ATTRIBUTE,
				stopOpacity: MUST_USE_ATTRIBUTE,
				stroke: MUST_USE_ATTRIBUTE,
				strokeDasharray: MUST_USE_ATTRIBUTE,
				strokeLinecap: MUST_USE_ATTRIBUTE,
				strokeOpacity: MUST_USE_ATTRIBUTE,
				strokeWidth: MUST_USE_ATTRIBUTE,
				textAnchor: MUST_USE_ATTRIBUTE,
				transform: MUST_USE_ATTRIBUTE,
				version: MUST_USE_ATTRIBUTE,
				viewBox: MUST_USE_ATTRIBUTE,
				x1: MUST_USE_ATTRIBUTE,
				x2: MUST_USE_ATTRIBUTE,
				x: MUST_USE_ATTRIBUTE,
				y1: MUST_USE_ATTRIBUTE,
				y2: MUST_USE_ATTRIBUTE,
				y: MUST_USE_ATTRIBUTE
			},
			DOMAttributeNames: {
				clipPath: 'clip-path',
				fillOpacity: 'fill-opacity',
				fontFamily: 'font-family',
				fontSize: 'font-size',
				gradientTransform: 'gradientTransform',
				gradientUnits: 'gradientUnits',
				markerEnd: 'marker-end',
				markerMid: 'marker-mid',
				markerStart: 'marker-start',
				patternContentUnits: 'patternContentUnits',
				patternUnits: 'patternUnits',
				preserveAspectRatio: 'preserveAspectRatio',
				spreadMethod: 'spreadMethod',
				stopColor: 'stop-color',
				stopOpacity: 'stop-opacity',
				strokeDasharray: 'stroke-dasharray',
				strokeLinecap: 'stroke-linecap',
				strokeOpacity: 'stroke-opacity',
				strokeWidth: 'stroke-width',
				textAnchor: 'text-anchor',
				viewBox: 'viewBox'
			}
		};

		module.exports = SVGDOMPropertyConfig;


		/***/
	},
	/* 397 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule createFullPageComponent
			 * @typechecks
			 */

			'use strict';

			// Defeat circular references by requiring this directly.
			var ReactClass = __webpack_require__(285);
			var ReactElement = __webpack_require__(260);

			var invariant = __webpack_require__(252);

			/**
			 * Create a component that will throw an exception when unmounted.
			 *
			 * Components like <html> <head> and <body> can't be removed or added
			 * easily in a cross-browser way, however it's valuable to be able to
			 * take advantage of React's reconciliation for styling and <title>
			 * management. So we just document it and throw in dangerous cases.
			 *
			 * @param {string} tag The tag to wrap
			 * @return {function} convenience constructor of new component
			 */
			function createFullPageComponent(tag) {
				var elementFactory = ReactElement.createFactory(tag);

				var FullPageComponent = ReactClass.createClass({
					tagName: tag.toUpperCase(),
					displayName: 'ReactFullPageComponent' + tag,

					componentWillUnmount: function () {
						("production" !== process.env.NODE_ENV ? invariant(
							false,
							'%s tried to unmount. Because of cross-browser quirks it is ' +
							'impossible to unmount some top-level components (eg <html>, <head>, ' +
							'and <body>) reliably and efficiently. To fix this, have a single ' +
							'top-level component that never unmounts render these elements.',
							this.constructor.displayName
						) : invariant(false));
					},

					render: function () {
						return elementFactory(this.props);
					}
				});

				return FullPageComponent;
			}

			module.exports = createFullPageComponent;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 398 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDefaultPerf
		 * @typechecks static-only
		 */

		'use strict';

		var DOMProperty = __webpack_require__(292);
		var ReactDefaultPerfAnalysis = __webpack_require__(399);
		var ReactMount = __webpack_require__(315);
		var ReactPerf = __webpack_require__(255);

		var performanceNow = __webpack_require__(400);

		function roundFloat(val) {
			return Math.floor(val * 100) / 100;
		}

		function addValue(obj, key, val) {
			obj[key] = (obj[key] || 0) + val;
		}

		var ReactDefaultPerf = {
			_allMeasurements: [], // last item in the list is the current one
			_mountStack: [0],
			_injected: false,

			start: function () {
				if (!ReactDefaultPerf._injected) {
					ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
				}

				ReactDefaultPerf._allMeasurements.length = 0;
				ReactPerf.enableMeasure = true;
			},

			stop: function () {
				ReactPerf.enableMeasure = false;
			},

			getLastMeasurements: function () {
				return ReactDefaultPerf._allMeasurements;
			},

			printExclusive: function (measurements) {
				measurements = measurements || ReactDefaultPerf._allMeasurements;
				var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
				console.table(summary.map(function (item) {
					return {
						'Component class name': item.componentName,
						'Total inclusive time (ms)': roundFloat(item.inclusive),
						'Exclusive mount time (ms)': roundFloat(item.exclusive),
						'Exclusive render time (ms)': roundFloat(item.render),
						'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
						'Render time per instance (ms)': roundFloat(item.render / item.count),
						'Instances': item.count
					};
				}));
				// TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
				// number.
			},

			printInclusive: function (measurements) {
				measurements = measurements || ReactDefaultPerf._allMeasurements;
				var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
				console.table(summary.map(function (item) {
					return {
						'Owner > component': item.componentName,
						'Inclusive time (ms)': roundFloat(item.time),
						'Instances': item.count
					};
				}));
				console.log(
					'Total time:',
					ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
				);
			},

			getMeasurementsSummaryMap: function (measurements) {
				var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
					measurements,
					true
				);
				return summary.map(function (item) {
					return {
						'Owner > component': item.componentName,
						'Wasted time (ms)': item.time,
						'Instances': item.count
					};
				});
			},

			printWasted: function (measurements) {
				measurements = measurements || ReactDefaultPerf._allMeasurements;
				console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
				console.log(
					'Total time:',
					ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
				);
			},

			printDOM: function (measurements) {
				measurements = measurements || ReactDefaultPerf._allMeasurements;
				var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
				console.table(summary.map(function (item) {
					var result = {};
					result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
					result['type'] = item.type;
					result['args'] = JSON.stringify(item.args);
					return result;
				}));
				console.log(
					'Total time:',
					ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
				);
			},

			_recordWrite: function (id, fnName, totalTime, args) {
				// TODO: totalTime isn't that useful since it doesn't count paints/reflows
				var writes =
					ReactDefaultPerf
						._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
						.writes;
				writes[id] = writes[id] || [];
				writes[id].push({
					type: fnName,
					time: totalTime,
					args: args
				});
			},

			measure: function (moduleName, fnName, func) {
				return function () {
					for (var args = [], $__0 = 0, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);
					var totalTime;
					var rv;
					var start;

					if (fnName === '_renderNewRootComponent' ||
						fnName === 'flushBatchedUpdates') {
						// A "measurement" is a set of metrics recorded for each flush. We want
						// to group the metrics for a given flush together so we can look at the
						// components that rendered and the DOM operations that actually
						// happened to determine the amount of "wasted work" performed.
						ReactDefaultPerf._allMeasurements.push({
							exclusive: {},
							inclusive: {},
							render: {},
							counts: {},
							writes: {},
							displayNames: {},
							totalTime: 0
						});
						start = performanceNow();
						rv = func.apply(this, args);
						ReactDefaultPerf._allMeasurements[
						ReactDefaultPerf._allMeasurements.length - 1
							].totalTime = performanceNow() - start;
						return rv;
					} else if (fnName === '_mountImageIntoNode' ||
						moduleName === 'ReactDOMIDOperations') {
						start = performanceNow();
						rv = func.apply(this, args);
						totalTime = performanceNow() - start;

						if (fnName === '_mountImageIntoNode') {
							var mountID = ReactMount.getID(args[1]);
							ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
						} else if (fnName === 'dangerouslyProcessChildrenUpdates') {
							// special format
							args[0].forEach(function (update) {
								var writeArgs = {};
								if (update.fromIndex !== null) {
									writeArgs.fromIndex = update.fromIndex;
								}
								if (update.toIndex !== null) {
									writeArgs.toIndex = update.toIndex;
								}
								if (update.textContent !== null) {
									writeArgs.textContent = update.textContent;
								}
								if (update.markupIndex !== null) {
									writeArgs.markup = args[1][update.markupIndex];
								}
								ReactDefaultPerf._recordWrite(
									update.parentID,
									update.type,
									totalTime,
									writeArgs
								);
							});
						} else {
							// basic format
							ReactDefaultPerf._recordWrite(
								args[0],
								fnName,
								totalTime,
								Array.prototype.slice.call(args, 1)
							);
						}
						return rv;
					} else if (moduleName === 'ReactCompositeComponent' && (
							(// TODO: receiveComponent()?
								(fnName === 'mountComponent' ||
								fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

						if (typeof this._currentElement.type === 'string') {
							return func.apply(this, args);
						}

						var rootNodeID = fnName === 'mountComponent' ?
							args[0] :
							this._rootNodeID;
						var isRender = fnName === '_renderValidatedComponent';
						var isMount = fnName === 'mountComponent';

						var mountStack = ReactDefaultPerf._mountStack;
						var entry = ReactDefaultPerf._allMeasurements[
						ReactDefaultPerf._allMeasurements.length - 1
							];

						if (isRender) {
							addValue(entry.counts, rootNodeID, 1);
						} else if (isMount) {
							mountStack.push(0);
						}

						start = performanceNow();
						rv = func.apply(this, args);
						totalTime = performanceNow() - start;

						if (isRender) {
							addValue(entry.render, rootNodeID, totalTime);
						} else if (isMount) {
							var subMountTime = mountStack.pop();
							mountStack[mountStack.length - 1] += totalTime;
							addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
							addValue(entry.inclusive, rootNodeID, totalTime);
						} else {
							addValue(entry.inclusive, rootNodeID, totalTime);
						}

						entry.displayNames[rootNodeID] = {
							current: this.getName(),
							owner: this._currentElement._owner ?
								this._currentElement._owner.getName() :
								'<root>'
						};

						return rv;
					} else {
						return func.apply(this, args);
					}
				};
			}
		};

		module.exports = ReactDefaultPerf;


		/***/
	},
	/* 399 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactDefaultPerfAnalysis
		 */

		var assign = __webpack_require__(253);

		// Don't try to save users less than 1.2ms (a number I made up)
		var DONT_CARE_THRESHOLD = 1.2;
		var DOM_OPERATION_TYPES = {
			'_mountImageIntoNode': 'set innerHTML',
			INSERT_MARKUP: 'set innerHTML',
			MOVE_EXISTING: 'move',
			REMOVE_NODE: 'remove',
			TEXT_CONTENT: 'set textContent',
			'updatePropertyByID': 'update attribute',
			'deletePropertyByID': 'delete attribute',
			'updateStylesByID': 'update styles',
			'updateInnerHTMLByID': 'set innerHTML',
			'dangerouslyReplaceNodeWithMarkupByID': 'replace'
		};

		function getTotalTime(measurements) {
			// TODO: return number of DOM ops? could be misleading.
			// TODO: measure dropped frames after reconcile?
			// TODO: log total time of each reconcile and the top-level component
			// class that triggered it.
			var totalTime = 0;
			for (var i = 0; i < measurements.length; i++) {
				var measurement = measurements[i];
				totalTime += measurement.totalTime;
			}
			return totalTime;
		}

		function getDOMSummary(measurements) {
			var items = [];
			for (var i = 0; i < measurements.length; i++) {
				var measurement = measurements[i];
				var id;

				for (id in measurement.writes) {
					measurement.writes[id].forEach(function (write) {
						items.push({
							id: id,
							type: DOM_OPERATION_TYPES[write.type] || write.type,
							args: write.args
						});
					});
				}
			}
			return items;
		}

		function getExclusiveSummary(measurements) {
			var candidates = {};
			var displayName;

			for (var i = 0; i < measurements.length; i++) {
				var measurement = measurements[i];
				var allIDs = assign(
					{},
					measurement.exclusive,
					measurement.inclusive
				);

				for (var id in allIDs) {
					displayName = measurement.displayNames[id].current;

					candidates[displayName] = candidates[displayName] || {
							componentName: displayName,
							inclusive: 0,
							exclusive: 0,
							render: 0,
							count: 0
						};
					if (measurement.render[id]) {
						candidates[displayName].render += measurement.render[id];
					}
					if (measurement.exclusive[id]) {
						candidates[displayName].exclusive += measurement.exclusive[id];
					}
					if (measurement.inclusive[id]) {
						candidates[displayName].inclusive += measurement.inclusive[id];
					}
					if (measurement.counts[id]) {
						candidates[displayName].count += measurement.counts[id];
					}
				}
			}

			// Now make a sorted array with the results.
			var arr = [];
			for (displayName in candidates) {
				if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
					arr.push(candidates[displayName]);
				}
			}

			arr.sort(function (a, b) {
				return b.exclusive - a.exclusive;
			});

			return arr;
		}

		function getInclusiveSummary(measurements, onlyClean) {
			var candidates = {};
			var inclusiveKey;

			for (var i = 0; i < measurements.length; i++) {
				var measurement = measurements[i];
				var allIDs = assign(
					{},
					measurement.exclusive,
					measurement.inclusive
				);
				var cleanComponents;

				if (onlyClean) {
					cleanComponents = getUnchangedComponents(measurement);
				}

				for (var id in allIDs) {
					if (onlyClean && !cleanComponents[id]) {
						continue;
					}

					var displayName = measurement.displayNames[id];

					// Inclusive time is not useful for many components without knowing where
					// they are instantiated. So we aggregate inclusive time with both the
					// owner and current displayName as the key.
					inclusiveKey = displayName.owner + ' > ' + displayName.current;

					candidates[inclusiveKey] = candidates[inclusiveKey] || {
							componentName: inclusiveKey,
							time: 0,
							count: 0
						};

					if (measurement.inclusive[id]) {
						candidates[inclusiveKey].time += measurement.inclusive[id];
					}
					if (measurement.counts[id]) {
						candidates[inclusiveKey].count += measurement.counts[id];
					}
				}
			}

			// Now make a sorted array with the results.
			var arr = [];
			for (inclusiveKey in candidates) {
				if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
					arr.push(candidates[inclusiveKey]);
				}
			}

			arr.sort(function (a, b) {
				return b.time - a.time;
			});

			return arr;
		}

		function getUnchangedComponents(measurement) {
			// For a given reconcile, look at which components did not actually
			// render anything to the DOM and return a mapping of their ID to
			// the amount of time it took to render the entire subtree.
			var cleanComponents = {};
			var dirtyLeafIDs = Object.keys(measurement.writes);
			var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

			for (var id in allIDs) {
				var isDirty = false;
				// For each component that rendered, see if a component that triggered
				// a DOM op is in its subtree.
				for (var i = 0; i < dirtyLeafIDs.length; i++) {
					if (dirtyLeafIDs[i].indexOf(id) === 0) {
						isDirty = true;
						break;
					}
				}
				if (!isDirty && measurement.counts[id] > 0) {
					cleanComponents[id] = true;
				}
			}
			return cleanComponents;
		}

		var ReactDefaultPerfAnalysis = {
			getExclusiveSummary: getExclusiveSummary,
			getInclusiveSummary: getInclusiveSummary,
			getDOMSummary: getDOMSummary,
			getTotalTime: getTotalTime
		};

		module.exports = ReactDefaultPerfAnalysis;


		/***/
	},
	/* 400 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule performanceNow
		 * @typechecks
		 */

		var performance = __webpack_require__(401);

		/**
		 * Detect if we can use `window.performance.now()` and gracefully fallback to
		 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
		 * because of Facebook's testing infrastructure.
		 */
		if (!performance || !performance.now) {
			performance = Date;
		}

		var performanceNow = performance.now.bind(performance);

		module.exports = performanceNow;


		/***/
	},
	/* 401 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule performance
		 * @typechecks
		 */

		"use strict";

		var ExecutionEnvironment = __webpack_require__(299);

		var performance;

		if (ExecutionEnvironment.canUseDOM) {
			performance =
				window.performance ||
				window.msPerformance ||
				window.webkitPerformance;
		}

		module.exports = performance || {};


		/***/
	},
	/* 402 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @typechecks static-only
			 * @providesModule ReactServerRendering
			 */
			'use strict';

			var ReactElement = __webpack_require__(260);
			var ReactInstanceHandles = __webpack_require__(279);
			var ReactMarkupChecksum = __webpack_require__(325);
			var ReactServerRenderingTransaction =
				__webpack_require__(403);

			var emptyObject = __webpack_require__(262);
			var instantiateReactComponent = __webpack_require__(331);
			var invariant = __webpack_require__(252);

			/**
			 * @param {ReactElement} element
			 * @return {string} the HTML markup
			 */
			function renderToString(element) {
				("production" !== process.env.NODE_ENV ? invariant(
					ReactElement.isValidElement(element),
					'renderToString(): You must pass a valid ReactElement.'
				) : invariant(ReactElement.isValidElement(element)));

				var transaction;
				try {
					var id = ReactInstanceHandles.createReactRootID();
					transaction = ReactServerRenderingTransaction.getPooled(false);

					return transaction.perform(function () {
						var componentInstance = instantiateReactComponent(element, null);
						var markup =
							componentInstance.mountComponent(id, transaction, emptyObject);
						return ReactMarkupChecksum.addChecksumToMarkup(markup);
					}, null);
				} finally {
					ReactServerRenderingTransaction.release(transaction);
				}
			}

			/**
			 * @param {ReactElement} element
			 * @return {string} the HTML markup, without the extra React ID and checksum
			 * (for generating static pages)
			 */
			function renderToStaticMarkup(element) {
				("production" !== process.env.NODE_ENV ? invariant(
					ReactElement.isValidElement(element),
					'renderToStaticMarkup(): You must pass a valid ReactElement.'
				) : invariant(ReactElement.isValidElement(element)));

				var transaction;
				try {
					var id = ReactInstanceHandles.createReactRootID();
					transaction = ReactServerRenderingTransaction.getPooled(true);

					return transaction.perform(function () {
						var componentInstance = instantiateReactComponent(element, null);
						return componentInstance.mountComponent(id, transaction, emptyObject);
					}, null);
				} finally {
					ReactServerRenderingTransaction.release(transaction);
				}
			}

			module.exports = {
				renderToString: renderToString,
				renderToStaticMarkup: renderToStaticMarkup
			};

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 403 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactServerRenderingTransaction
		 * @typechecks
		 */

		'use strict';

		var PooledClass = __webpack_require__(251);
		var CallbackQueue = __webpack_require__(250);
		var ReactPutListenerQueue = __webpack_require__(383);
		var Transaction = __webpack_require__(271);

		var assign = __webpack_require__(253);
		var emptyFunction = __webpack_require__(264);

		/**
		 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
		 * during the performing of the transaction.
		 */
		var ON_DOM_READY_QUEUEING = {
			/**
			 * Initializes the internal `onDOMReady` queue.
			 */
			initialize: function () {
				this.reactMountReady.reset();
			},

			close: emptyFunction
		};

		var PUT_LISTENER_QUEUEING = {
			initialize: function () {
				this.putListenerQueue.reset();
			},

			close: emptyFunction
		};

		/**
		 * Executed within the scope of the `Transaction` instance. Consider these as
		 * being member methods, but with an implied ordering while being isolated from
		 * each other.
		 */
		var TRANSACTION_WRAPPERS = [
			PUT_LISTENER_QUEUEING,
			ON_DOM_READY_QUEUEING
		];

		/**
		 * @class ReactServerRenderingTransaction
		 * @param {boolean} renderToStaticMarkup
		 */
		function ReactServerRenderingTransaction(renderToStaticMarkup) {
			this.reinitializeTransaction();
			this.renderToStaticMarkup = renderToStaticMarkup;
			this.reactMountReady = CallbackQueue.getPooled(null);
			this.putListenerQueue = ReactPutListenerQueue.getPooled();
		}

		var Mixin = {
			/**
			 * @see Transaction
			 * @abstract
			 * @final
			 * @return {array} Empty list of operation wrap proceedures.
			 */
			getTransactionWrappers: function () {
				return TRANSACTION_WRAPPERS;
			},

			/**
			 * @return {object} The queue to collect `onDOMReady` callbacks with.
			 */
			getReactMountReady: function () {
				return this.reactMountReady;
			},

			getPutListenerQueue: function () {
				return this.putListenerQueue;
			},

			/**
			 * `PooledClass` looks for this, and will invoke this before allowing this
			 * instance to be resused.
			 */
			destructor: function () {
				CallbackQueue.release(this.reactMountReady);
				this.reactMountReady = null;

				ReactPutListenerQueue.release(this.putListenerQueue);
				this.putListenerQueue = null;
			}
		};


		assign(
			ReactServerRenderingTransaction.prototype,
			Transaction.Mixin,
			Mixin
		);

		PooledClass.addPoolingTo(ReactServerRenderingTransaction);

		module.exports = ReactServerRenderingTransaction;


		/***/
	},
	/* 404 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule onlyChild
			 */
			'use strict';

			var ReactElement = __webpack_require__(260);

			var invariant = __webpack_require__(252);

			/**
			 * Returns the first child in a collection of children and verifies that there
			 * is only one child in the collection. The current implementation of this
			 * function assumes that a single child gets passed without a wrapper, but the
			 * purpose of this helper function is to abstract away the particular structure
			 * of children.
			 *
			 * @param {?object} children Child collection structure.
			 * @return {ReactComponent} The first and only `ReactComponent` contained in the
			 * structure.
			 */
			function onlyChild(children) {
				("production" !== process.env.NODE_ENV ? invariant(
					ReactElement.isValidElement(children),
					'onlyChild must be passed a children with exactly one child.'
				) : invariant(ReactElement.isValidElement(children)));
				return children;
			}

			module.exports = onlyChild;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 405 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactStateSetters
		 */

		'use strict';

		var ReactStateSetters = {
			/**
			 * Returns a function that calls the provided function, and uses the result
			 * of that to set the component's state.
			 *
			 * @param {ReactCompositeComponent} component
			 * @param {function} funcReturningState Returned callback uses this to
			 *                                      determine how to update state.
			 * @return {function} callback that when invoked uses funcReturningState to
			 *                    determined the object literal to setState.
			 */
			createStateSetter: function (component, funcReturningState) {
				return function (a, b, c, d, e, f) {
					var partialState = funcReturningState.call(component, a, b, c, d, e, f);
					if (partialState) {
						component.setState(partialState);
					}
				};
			},

			/**
			 * Returns a single-argument callback that can be used to update a single
			 * key in the component's state.
			 *
			 * Note: this is memoized function, which makes it inexpensive to call.
			 *
			 * @param {ReactCompositeComponent} component
			 * @param {string} key The key in the state that you should update.
			 * @return {function} callback of 1 argument which calls setState() with
			 *                    the provided keyName and callback argument.
			 */
			createStateKeySetter: function (component, key) {
				// Memoize the setters.
				var cache = component.__keySetters || (component.__keySetters = {});
				return cache[key] || (cache[key] = createStateKeySetter(component, key));
			}
		};

		function createStateKeySetter(component, key) {
			// Partial state is allocated outside of the function closure so it can be
			// reused with every call, avoiding memory allocation when this function
			// is called.
			var partialState = {};
			return function stateKeySetter(value) {
				partialState[key] = value;
				component.setState(partialState);
			};
		}

		ReactStateSetters.Mixin = {
			/**
			 * Returns a function that calls the provided function, and uses the result
			 * of that to set the component's state.
			 *
			 * For example, these statements are equivalent:
			 *
			 *   this.setState({x: 1});
			 *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
			 *
			 * @param {function} funcReturningState Returned callback uses this to
			 *                                      determine how to update state.
			 * @return {function} callback that when invoked uses funcReturningState to
			 *                    determined the object literal to setState.
			 */
			createStateSetter: function (funcReturningState) {
				return ReactStateSetters.createStateSetter(this, funcReturningState);
			},

			/**
			 * Returns a single-argument callback that can be used to update a single
			 * key in the component's state.
			 *
			 * For example, these statements are equivalent:
			 *
			 *   this.setState({x: 1});
			 *   this.createStateKeySetter('x')(1);
			 *
			 * Note: this is memoized function, which makes it inexpensive to call.
			 *
			 * @param {string} key The key in the state that you should update.
			 * @return {function} callback of 1 argument which calls setState() with
			 *                    the provided keyName and callback argument.
			 */
			createStateKeySetter: function (key) {
				return ReactStateSetters.createStateKeySetter(this, key);
			}
		};

		module.exports = ReactStateSetters;


		/***/
	},
	/* 406 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactComponentWithPureRenderMixin
		 */

		'use strict';

		var shallowEqual = __webpack_require__(385);

		/**
		 * If your React component's render function is "pure", e.g. it will render the
		 * same result given the same props and state, provide this Mixin for a
		 * considerable performance boost.
		 *
		 * Most React components have pure render functions.
		 *
		 * Example:
		 *
		 *   var ReactComponentWithPureRenderMixin =
		 *     require('ReactComponentWithPureRenderMixin');
		 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
		 *
		 * Note: This only checks shallow equality for props and state. If these contain
		 * complex data structures this mixin may have false-negatives for deeper
		 * differences. Only mixin to components which have simple props and state, or
		 * use `forceUpdate()` when you know deep data structures have changed.
		 */
		var ReactComponentWithPureRenderMixin = {
			shouldComponentUpdate: function (nextProps, nextState) {
				return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);
			}
		};

		module.exports = ReactComponentWithPureRenderMixin;


		/***/
	},
	/* 407 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @typechecks
		 * @providesModule ReactCSSTransitionGroup
		 */

		'use strict';

		var React = __webpack_require__(274);

		var assign = __webpack_require__(253);

		var ReactTransitionGroup = React.createFactory(
			__webpack_require__(408)
		);
		var ReactCSSTransitionGroupChild = React.createFactory(
			__webpack_require__(413)
		);

		var ReactCSSTransitionGroup = React.createClass({
			displayName: 'ReactCSSTransitionGroup',

			propTypes: {
				transitionName: React.PropTypes.string.isRequired,
				transitionAppear: React.PropTypes.bool,
				transitionEnter: React.PropTypes.bool,
				transitionLeave: React.PropTypes.bool
			},

			getDefaultProps: function () {
				return {
					transitionAppear: false,
					transitionEnter: true,
					transitionLeave: true
				};
			},

			_wrapChild: function (child) {
				// We need to provide this childFactory so that
				// ReactCSSTransitionGroupChild can receive updates to name, enter, and
				// leave while it is leaving.
				return ReactCSSTransitionGroupChild(
					{
						name: this.props.transitionName,
						appear: this.props.transitionAppear,
						enter: this.props.transitionEnter,
						leave: this.props.transitionLeave
					},
					child
				);
			},

			render: function () {
				return (
					ReactTransitionGroup(
						assign({}, this.props, {childFactory: this._wrapChild})
					)
				);
			}
		});

		module.exports = ReactCSSTransitionGroup;


		/***/
	},
	/* 408 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactTransitionGroup
		 */

		'use strict';

		var React = __webpack_require__(274);
		var ReactTransitionChildMapping = __webpack_require__(409);

		var assign = __webpack_require__(253);
		var cloneWithProps = __webpack_require__(410);
		var emptyFunction = __webpack_require__(264);

		var ReactTransitionGroup = React.createClass({
			displayName: 'ReactTransitionGroup',

			propTypes: {
				component: React.PropTypes.any,
				childFactory: React.PropTypes.func
			},

			getDefaultProps: function () {
				return {
					component: 'span',
					childFactory: emptyFunction.thatReturnsArgument
				};
			},

			getInitialState: function () {
				return {
					children: ReactTransitionChildMapping.getChildMapping(this.props.children)
				};
			},

			componentWillMount: function () {
				this.currentlyTransitioningKeys = {};
				this.keysToEnter = [];
				this.keysToLeave = [];
			},

			componentDidMount: function () {
				var initialChildMapping = this.state.children;
				for (var key in initialChildMapping) {
					if (initialChildMapping[key]) {
						this.performAppear(key);
					}
				}
			},

			componentWillReceiveProps: function (nextProps) {
				var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
					nextProps.children
				);
				var prevChildMapping = this.state.children;

				this.setState({
					children: ReactTransitionChildMapping.mergeChildMappings(
						prevChildMapping,
						nextChildMapping
					)
				});

				var key;

				for (key in nextChildMapping) {
					var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
					if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
						this.keysToEnter.push(key);
					}
				}

				for (key in prevChildMapping) {
					var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
					if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
						this.keysToLeave.push(key);
					}
				}

				// If we want to someday check for reordering, we could do it here.
			},

			componentDidUpdate: function () {
				var keysToEnter = this.keysToEnter;
				this.keysToEnter = [];
				keysToEnter.forEach(this.performEnter);

				var keysToLeave = this.keysToLeave;
				this.keysToLeave = [];
				keysToLeave.forEach(this.performLeave);
			},

			performAppear: function (key) {
				this.currentlyTransitioningKeys[key] = true;

				var component = this.refs[key];

				if (component.componentWillAppear) {
					component.componentWillAppear(
						this._handleDoneAppearing.bind(this, key)
					);
				} else {
					this._handleDoneAppearing(key);
				}
			},

			_handleDoneAppearing: function (key) {
				var component = this.refs[key];
				if (component.componentDidAppear) {
					component.componentDidAppear();
				}

				delete this.currentlyTransitioningKeys[key];

				var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
					this.props.children
				);

				if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
					// This was removed before it had fully appeared. Remove it.
					this.performLeave(key);
				}
			},

			performEnter: function (key) {
				this.currentlyTransitioningKeys[key] = true;

				var component = this.refs[key];

				if (component.componentWillEnter) {
					component.componentWillEnter(
						this._handleDoneEntering.bind(this, key)
					);
				} else {
					this._handleDoneEntering(key);
				}
			},

			_handleDoneEntering: function (key) {
				var component = this.refs[key];
				if (component.componentDidEnter) {
					component.componentDidEnter();
				}

				delete this.currentlyTransitioningKeys[key];

				var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
					this.props.children
				);

				if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
					// This was removed before it had fully entered. Remove it.
					this.performLeave(key);
				}
			},

			performLeave: function (key) {
				this.currentlyTransitioningKeys[key] = true;

				var component = this.refs[key];
				if (component.componentWillLeave) {
					component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
				} else {
					// Note that this is somewhat dangerous b/c it calls setState()
					// again, effectively mutating the component before all the work
					// is done.
					this._handleDoneLeaving(key);
				}
			},

			_handleDoneLeaving: function (key) {
				var component = this.refs[key];

				if (component.componentDidLeave) {
					component.componentDidLeave();
				}

				delete this.currentlyTransitioningKeys[key];

				var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
					this.props.children
				);

				if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
					// This entered again before it fully left. Add it again.
					this.performEnter(key);
				} else {
					var newChildren = assign({}, this.state.children);
					delete newChildren[key];
					this.setState({children: newChildren});
				}
			},

			render: function () {
				// TODO: we could get rid of the need for the wrapper node
				// by cloning a single child
				var childrenToRender = [];
				for (var key in this.state.children) {
					var child = this.state.children[key];
					if (child) {
						// You may need to apply reactive updates to a child as it is leaving.
						// The normal React way to do it won't work since the child will have
						// already been removed. In case you need this behavior you can provide
						// a childFactory function to wrap every child, even the ones that are
						// leaving.
						childrenToRender.push(cloneWithProps(
							this.props.childFactory(child),
							{ref: key, key: key}
						));
					}
				}
				return React.createElement(
					this.props.component,
					this.props,
					childrenToRender
				);
			}
		});

		module.exports = ReactTransitionGroup;


		/***/
	},
	/* 409 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @typechecks static-only
		 * @providesModule ReactTransitionChildMapping
		 */

		'use strict';

		var ReactChildren = __webpack_require__(277);
		var ReactFragment = __webpack_require__(265);

		var ReactTransitionChildMapping = {
			/**
			 * Given `this.props.children`, return an object mapping key to child. Just
			 * simple syntactic sugar around ReactChildren.map().
			 *
			 * @param {*} children `this.props.children`
			 * @return {object} Mapping of key to child
			 */
			getChildMapping: function (children) {
				if (!children) {
					return children;
				}
				return ReactFragment.extract(ReactChildren.map(children, function (child) {
					return child;
				}));
			},

			/**
			 * When you're adding or removing children some may be added or removed in the
			 * same render pass. We want to show *both* since we want to simultaneously
			 * animate elements in and out. This function takes a previous set of keys
			 * and a new set of keys and merges them with its best guess of the correct
			 * ordering. In the future we may expose some of the utilities in
			 * ReactMultiChild to make this easy, but for now React itself does not
			 * directly have this concept of the union of prevChildren and nextChildren
			 * so we implement it here.
			 *
			 * @param {object} prev prev children as returned from
			 * `ReactTransitionChildMapping.getChildMapping()`.
			 * @param {object} next next children as returned from
			 * `ReactTransitionChildMapping.getChildMapping()`.
			 * @return {object} a key set that contains all keys in `prev` and all keys
			 * in `next` in a reasonable order.
			 */
			mergeChildMappings: function (prev, next) {
				prev = prev || {};
				next = next || {};

				function getValueForKey(key) {
					if (next.hasOwnProperty(key)) {
						return next[key];
					} else {
						return prev[key];
					}
				}

				// For each key of `next`, the list of keys to insert before that key in
				// the combined list
				var nextKeysPending = {};

				var pendingKeys = [];
				for (var prevKey in prev) {
					if (next.hasOwnProperty(prevKey)) {
						if (pendingKeys.length) {
							nextKeysPending[prevKey] = pendingKeys;
							pendingKeys = [];
						}
					} else {
						pendingKeys.push(prevKey);
					}
				}

				var i;
				var childMapping = {};
				for (var nextKey in next) {
					if (nextKeysPending.hasOwnProperty(nextKey)) {
						for (i = 0; i < nextKeysPending[nextKey].length; i++) {
							var pendingNextKey = nextKeysPending[nextKey][i];
							childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
								pendingNextKey
							);
						}
					}
					childMapping[nextKey] = getValueForKey(nextKey);
				}

				// Finally, add the keys which didn't appear before any key in `next`
				for (i = 0; i < pendingKeys.length; i++) {
					childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
				}

				return childMapping;
			}
		};

		module.exports = ReactTransitionChildMapping;


		/***/
	},
	/* 410 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @typechecks static-only
			 * @providesModule cloneWithProps
			 */

			'use strict';

			var ReactElement = __webpack_require__(260);
			var ReactPropTransferer = __webpack_require__(411);

			var keyOf = __webpack_require__(287);
			var warning = __webpack_require__(263);

			var CHILDREN_PROP = keyOf({children: null});

			/**
			 * Sometimes you want to change the props of a child passed to you. Usually
			 * this is to add a CSS class.
			 *
			 * @param {ReactElement} child child element you'd like to clone
			 * @param {object} props props you'd like to modify. className and style will be
			 * merged automatically.
			 * @return {ReactElement} a clone of child with props merged in.
			 */
			function cloneWithProps(child, props) {
				if ("production" !== process.env.NODE_ENV) {
					("production" !== process.env.NODE_ENV ? warning(
						!child.ref,
						'You are calling cloneWithProps() on a child with a ref. This is ' +
						'dangerous because you\'re creating a new child which will not be ' +
						'added as a ref to its parent.'
					) : null);
				}

				var newProps = ReactPropTransferer.mergeProps(props, child.props);

				// Use `child.props.children` if it is provided.
				if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
					child.props.hasOwnProperty(CHILDREN_PROP)) {
					newProps.children = child.props.children;
				}

				// The current API doesn't retain _owner and _context, which is why this
				// doesn't use ReactElement.cloneAndReplaceProps.
				return ReactElement.createElement(child.type, newProps);
			}

			module.exports = cloneWithProps;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 411 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactPropTransferer
		 */

		'use strict';

		var assign = __webpack_require__(253);
		var emptyFunction = __webpack_require__(264);
		var joinClasses = __webpack_require__(412);

		/**
		 * Creates a transfer strategy that will merge prop values using the supplied
		 * `mergeStrategy`. If a prop was previously unset, this just sets it.
		 *
		 * @param {function} mergeStrategy
		 * @return {function}
		 */
		function createTransferStrategy(mergeStrategy) {
			return function (props, key, value) {
				if (!props.hasOwnProperty(key)) {
					props[key] = value;
				} else {
					props[key] = mergeStrategy(props[key], value);
				}
			};
		}

		var transferStrategyMerge = createTransferStrategy(function (a, b) {
			// `merge` overrides the first object's (`props[key]` above) keys using the
			// second object's (`value`) keys. An object's style's existing `propA` would
			// get overridden. Flip the order here.
			return assign({}, b, a);
		});

		/**
		 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
		 * NOTE: if you add any more exceptions to this list you should be sure to
		 * update `cloneWithProps()` accordingly.
		 */
		var TransferStrategies = {
			/**
			 * Never transfer `children`.
			 */
			children: emptyFunction,
			/**
			 * Transfer the `className` prop by merging them.
			 */
			className: createTransferStrategy(joinClasses),
			/**
			 * Transfer the `style` prop (which is an object) by merging them.
			 */
			style: transferStrategyMerge
		};

		/**
		 * Mutates the first argument by transferring the properties from the second
		 * argument.
		 *
		 * @param {object} props
		 * @param {object} newProps
		 * @return {object}
		 */
		function transferInto(props, newProps) {
			for (var thisKey in newProps) {
				if (!newProps.hasOwnProperty(thisKey)) {
					continue;
				}

				var transferStrategy = TransferStrategies[thisKey];

				if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
					transferStrategy(props, thisKey, newProps[thisKey]);
				} else if (!props.hasOwnProperty(thisKey)) {
					props[thisKey] = newProps[thisKey];
				}
			}
			return props;
		}

		/**
		 * ReactPropTransferer are capable of transferring props to another component
		 * using a `transferPropsTo` method.
		 *
		 * @class ReactPropTransferer
		 */
		var ReactPropTransferer = {

			/**
			 * Merge two props objects using TransferStrategies.
			 *
			 * @param {object} oldProps original props (they take precedence)
			 * @param {object} newProps new props to merge in
			 * @return {object} a new object containing both sets of props merged.
			 */
			mergeProps: function (oldProps, newProps) {
				return transferInto(assign({}, oldProps), newProps);
			}

		};

		module.exports = ReactPropTransferer;


		/***/
	},
	/* 412 */
	/***/ function (module, exports) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule joinClasses
		 * @typechecks static-only
		 */

		'use strict';

		/**
		 * Combines multiple className strings into one.
		 * http://jsperf.com/joinclasses-args-vs-array
		 *
		 * @param {...?string} classes
		 * @return {string}
		 */
		function joinClasses(className/*, ... */) {
			if (!className) {
				className = '';
			}
			var nextClass;
			var argLength = arguments.length;
			if (argLength > 1) {
				for (var ii = 1; ii < argLength; ii++) {
					nextClass = arguments[ii];
					if (nextClass) {
						className = (className ? className + ' ' : '') + nextClass;
					}
				}
			}
			return className;
		}

		module.exports = joinClasses;


		/***/
	},
	/* 413 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @typechecks
			 * @providesModule ReactCSSTransitionGroupChild
			 */

			'use strict';

			var React = __webpack_require__(274);

			var CSSCore = __webpack_require__(414);
			var ReactTransitionEvents = __webpack_require__(415);

			var onlyChild = __webpack_require__(404);
			var warning = __webpack_require__(263);

			// We don't remove the element from the DOM until we receive an animationend or
			// transitionend event. If the user screws up and forgets to add an animation
			// their node will be stuck in the DOM forever, so we detect if an animation
			// does not start and if it doesn't, we just call the end listener immediately.
			var TICK = 17;
			var NO_EVENT_TIMEOUT = 5000;

			var noEventListener = null;


			if ("production" !== process.env.NODE_ENV) {
				noEventListener = function () {
					("production" !== process.env.NODE_ENV ? warning(
						false,
						'transition(): tried to perform an animation without ' +
						'an animationend or transitionend event after timeout (' +
						'%sms). You should either disable this ' +
						'transition in JS or add a CSS animation/transition.',
						NO_EVENT_TIMEOUT
					) : null);
				};
			}

			var ReactCSSTransitionGroupChild = React.createClass({
				displayName: 'ReactCSSTransitionGroupChild',

				transition: function (animationType, finishCallback) {
					var node = this.getDOMNode();
					var className = this.props.name + '-' + animationType;
					var activeClassName = className + '-active';
					var noEventTimeout = null;

					var endListener = function (e) {
						if (e && e.target !== node) {
							return;
						}
						if ("production" !== process.env.NODE_ENV) {
							clearTimeout(noEventTimeout);
						}

						CSSCore.removeClass(node, className);
						CSSCore.removeClass(node, activeClassName);

						ReactTransitionEvents.removeEndEventListener(node, endListener);

						// Usually this optional callback is used for informing an owner of
						// a leave animation and telling it to remove the child.
						if (finishCallback) {
							finishCallback();
						}
					};

					ReactTransitionEvents.addEndEventListener(node, endListener);

					CSSCore.addClass(node, className);

					// Need to do this to actually trigger a transition.
					this.queueClass(activeClassName);

					if ("production" !== process.env.NODE_ENV) {
						noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
					}
				},

				queueClass: function (className) {
					this.classNameQueue.push(className);

					if (!this.timeout) {
						this.timeout = setTimeout(this.flushClassNameQueue, TICK);
					}
				},

				flushClassNameQueue: function () {
					if (this.isMounted()) {
						this.classNameQueue.forEach(
							CSSCore.addClass.bind(CSSCore, this.getDOMNode())
						);
					}
					this.classNameQueue.length = 0;
					this.timeout = null;
				},

				componentWillMount: function () {
					this.classNameQueue = [];
				},

				componentWillUnmount: function () {
					if (this.timeout) {
						clearTimeout(this.timeout);
					}
				},

				componentWillAppear: function (done) {
					if (this.props.appear) {
						this.transition('appear', done);
					} else {
						done();
					}
				},

				componentWillEnter: function (done) {
					if (this.props.enter) {
						this.transition('enter', done);
					} else {
						done();
					}
				},

				componentWillLeave: function (done) {
					if (this.props.leave) {
						this.transition('leave', done);
					} else {
						done();
					}
				},

				render: function () {
					return onlyChild(this.props.children);
				}
			});

			module.exports = ReactCSSTransitionGroupChild;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 414 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {
			/**
			 * Copyright 2013-2015, Facebook, Inc.
			 * All rights reserved.
			 *
			 * This source code is licensed under the BSD-style license found in the
			 * LICENSE file in the root directory of this source tree. An additional grant
			 * of patent rights can be found in the PATENTS file in the same directory.
			 *
			 * @providesModule CSSCore
			 * @typechecks
			 */

			var invariant = __webpack_require__(252);

			/**
			 * The CSSCore module specifies the API (and implements most of the methods)
			 * that should be used when dealing with the display of elements (via their
			 * CSS classes and visibility on screen. It is an API focused on mutating the
			 * display and not reading it as no logical state should be encoded in the
			 * display of elements.
			 */

			var CSSCore = {

				/**
				 * Adds the class passed in to the element if it doesn't already have it.
				 *
				 * @param {DOMElement} element the element to set the class on
				 * @param {string} className the CSS className
				 * @return {DOMElement} the element passed in
				 */
				addClass: function (element, className) {
					("production" !== process.env.NODE_ENV ? invariant(
						!/\s/.test(className),
						'CSSCore.addClass takes only a single class name. "%s" contains ' +
						'multiple classes.', className
					) : invariant(!/\s/.test(className)));

					if (className) {
						if (element.classList) {
							element.classList.add(className);
						} else if (!CSSCore.hasClass(element, className)) {
							element.className = element.className + ' ' + className;
						}
					}
					return element;
				},

				/**
				 * Removes the class passed in from the element
				 *
				 * @param {DOMElement} element the element to set the class on
				 * @param {string} className the CSS className
				 * @return {DOMElement} the element passed in
				 */
				removeClass: function (element, className) {
					("production" !== process.env.NODE_ENV ? invariant(
						!/\s/.test(className),
						'CSSCore.removeClass takes only a single class name. "%s" contains ' +
						'multiple classes.', className
					) : invariant(!/\s/.test(className)));

					if (className) {
						if (element.classList) {
							element.classList.remove(className);
						} else if (CSSCore.hasClass(element, className)) {
							element.className = element.className
								.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
								.replace(/\s+/g, ' ') // multiple spaces to one
								.replace(/^\s*|\s*$/g, ''); // trim the ends
						}
					}
					return element;
				},

				/**
				 * Helper to add or remove a class from an element based on a condition.
				 *
				 * @param {DOMElement} element the element to set the class on
				 * @param {string} className the CSS className
				 * @param {*} bool condition to whether to add or remove the class
				 * @return {DOMElement} the element passed in
				 */
				conditionClass: function (element, className, bool) {
					return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
				},

				/**
				 * Tests whether the element has the class specified.
				 *
				 * @param {DOMNode|DOMWindow} element the element to set the class on
				 * @param {string} className the CSS className
				 * @return {boolean} true if the element has the class, false if not
				 */
				hasClass: function (element, className) {
					("production" !== process.env.NODE_ENV ? invariant(
						!/\s/.test(className),
						'CSS.hasClass takes only a single class name.'
					) : invariant(!/\s/.test(className)));
					if (element.classList) {
						return !!className && element.classList.contains(className);
					}
					return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
				}

			};

			module.exports = CSSCore;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 415 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactTransitionEvents
		 */

		'use strict';

		var ExecutionEnvironment = __webpack_require__(299);

		/**
		 * EVENT_NAME_MAP is used to determine which event fired when a
		 * transition/animation ends, based on the style property used to
		 * define that event.
		 */
		var EVENT_NAME_MAP = {
			transitionend: {
				'transition': 'transitionend',
				'WebkitTransition': 'webkitTransitionEnd',
				'MozTransition': 'mozTransitionEnd',
				'OTransition': 'oTransitionEnd',
				'msTransition': 'MSTransitionEnd'
			},

			animationend: {
				'animation': 'animationend',
				'WebkitAnimation': 'webkitAnimationEnd',
				'MozAnimation': 'mozAnimationEnd',
				'OAnimation': 'oAnimationEnd',
				'msAnimation': 'MSAnimationEnd'
			}
		};

		var endEvents = [];

		function detectEvents() {
			var testEl = document.createElement('div');
			var style = testEl.style;

			// On some platforms, in particular some releases of Android 4.x,
			// the un-prefixed "animation" and "transition" properties are defined on the
			// style object but the events that fire will still be prefixed, so we need
			// to check if the un-prefixed events are useable, and if not remove them
			// from the map
			if (!('AnimationEvent' in window)) {
				delete EVENT_NAME_MAP.animationend.animation;
			}

			if (!('TransitionEvent' in window)) {
				delete EVENT_NAME_MAP.transitionend.transition;
			}

			for (var baseEventName in EVENT_NAME_MAP) {
				var baseEvents = EVENT_NAME_MAP[baseEventName];
				for (var styleName in baseEvents) {
					if (styleName in style) {
						endEvents.push(baseEvents[styleName]);
						break;
					}
				}
			}
		}

		if (ExecutionEnvironment.canUseDOM) {
			detectEvents();
		}

		// We use the raw {add|remove}EventListener() call because EventListener
		// does not know how to remove event listeners and we really should
		// clean up. Also, these events are not triggered in older browsers
		// so we should be A-OK here.

		function addEventListener(node, eventName, eventListener) {
			node.addEventListener(eventName, eventListener, false);
		}

		function removeEventListener(node, eventName, eventListener) {
			node.removeEventListener(eventName, eventListener, false);
		}

		var ReactTransitionEvents = {
			addEndEventListener: function (node, eventListener) {
				if (endEvents.length === 0) {
					// If CSS transitions are not supported, trigger an "end animation"
					// event immediately.
					window.setTimeout(eventListener, 0);
					return;
				}
				endEvents.forEach(function (endEvent) {
					addEventListener(node, endEvent, eventListener);
				});
			},

			removeEndEventListener: function (node, eventListener) {
				if (endEvents.length === 0) {
					return;
				}
				endEvents.forEach(function (endEvent) {
					removeEventListener(node, endEvent, eventListener);
				});
			}
		};

		module.exports = ReactTransitionEvents;


		/***/
	},
	/* 416 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule cx
		 */

			/**
			 * This function is used to mark string literals representing CSS class names
			 * so that they can be transformed statically. This allows for modularization
			 * and minification of CSS class names.
			 *
			 * In static_upstream, this function is actually implemented, but it should
			 * eventually be replaced with something more descriptive, and the transform
			 * that is used in the main stack should be ported for use elsewhere.
			 *
			 * @param string|object className to modularize, or an object of key/values.
			 *                      In the object case, the values are conditions that
			 *                      determine if the className keys should be included.
			 * @param [string ...]  Variable list of classNames in the string case.
			 * @return string       Renderable space-separated CSS className.
			 */

			'use strict';
			var warning = __webpack_require__(263);

			var warned = false;

			function cx(classNames) {
				if ("production" !== process.env.NODE_ENV) {
					("production" !== process.env.NODE_ENV ? warning(
						warned,
						'React.addons.classSet will be deprecated in a future version. See ' +
						'http://fb.me/react-addons-classset'
					) : null);
					warned = true;
				}

				if (typeof classNames == 'object') {
					return Object.keys(classNames).filter(function (className) {
						return classNames[className];
					}).join(' ');
				} else {
					return Array.prototype.join.call(arguments, ' ');
				}
			}

			module.exports = cx;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 417 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule update
		 */

			/* global hasOwnProperty:true */

			'use strict';

			var assign = __webpack_require__(253);
			var keyOf = __webpack_require__(287);
			var invariant = __webpack_require__(252);
			var hasOwnProperty = {}.hasOwnProperty;

			function shallowCopy(x) {
				if (Array.isArray(x)) {
					return x.concat();
				} else if (x && typeof x === 'object') {
					return assign(new x.constructor(), x);
				} else {
					return x;
				}
			}

			var COMMAND_PUSH = keyOf({$push: null});
			var COMMAND_UNSHIFT = keyOf({$unshift: null});
			var COMMAND_SPLICE = keyOf({$splice: null});
			var COMMAND_SET = keyOf({$set: null});
			var COMMAND_MERGE = keyOf({$merge: null});
			var COMMAND_APPLY = keyOf({$apply: null});

			var ALL_COMMANDS_LIST = [
				COMMAND_PUSH,
				COMMAND_UNSHIFT,
				COMMAND_SPLICE,
				COMMAND_SET,
				COMMAND_MERGE,
				COMMAND_APPLY
			];

			var ALL_COMMANDS_SET = {};

			ALL_COMMANDS_LIST.forEach(function (command) {
				ALL_COMMANDS_SET[command] = true;
			});

			function invariantArrayCase(value, spec, command) {
				("production" !== process.env.NODE_ENV ? invariant(
					Array.isArray(value),
					'update(): expected target of %s to be an array; got %s.',
					command,
					value
				) : invariant(Array.isArray(value)));
				var specValue = spec[command];
				("production" !== process.env.NODE_ENV ? invariant(
					Array.isArray(specValue),
					'update(): expected spec of %s to be an array; got %s. ' +
					'Did you forget to wrap your parameter in an array?',
					command,
					specValue
				) : invariant(Array.isArray(specValue)));
			}

			function update(value, spec) {
				("production" !== process.env.NODE_ENV ? invariant(
					typeof spec === 'object',
					'update(): You provided a key path to update() that did not contain one ' +
					'of %s. Did you forget to include {%s: ...}?',
					ALL_COMMANDS_LIST.join(', '),
					COMMAND_SET
				) : invariant(typeof spec === 'object'));

				if (hasOwnProperty.call(spec, COMMAND_SET)) {
					("production" !== process.env.NODE_ENV ? invariant(
						Object.keys(spec).length === 1,
						'Cannot have more than one key in an object with %s',
						COMMAND_SET
					) : invariant(Object.keys(spec).length === 1));

					return spec[COMMAND_SET];
				}

				var nextValue = shallowCopy(value);

				if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
					var mergeObj = spec[COMMAND_MERGE];
					("production" !== process.env.NODE_ENV ? invariant(
						mergeObj && typeof mergeObj === 'object',
						'update(): %s expects a spec of type \'object\'; got %s',
						COMMAND_MERGE,
						mergeObj
					) : invariant(mergeObj && typeof mergeObj === 'object'));
					("production" !== process.env.NODE_ENV ? invariant(
						nextValue && typeof nextValue === 'object',
						'update(): %s expects a target of type \'object\'; got %s',
						COMMAND_MERGE,
						nextValue
					) : invariant(nextValue && typeof nextValue === 'object'));
					assign(nextValue, spec[COMMAND_MERGE]);
				}

				if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
					invariantArrayCase(value, spec, COMMAND_PUSH);
					spec[COMMAND_PUSH].forEach(function (item) {
						nextValue.push(item);
					});
				}

				if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
					invariantArrayCase(value, spec, COMMAND_UNSHIFT);
					spec[COMMAND_UNSHIFT].forEach(function (item) {
						nextValue.unshift(item);
					});
				}

				if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
					("production" !== process.env.NODE_ENV ? invariant(
						Array.isArray(value),
						'Expected %s target to be an array; got %s',
						COMMAND_SPLICE,
						value
					) : invariant(Array.isArray(value)));
					("production" !== process.env.NODE_ENV ? invariant(
						Array.isArray(spec[COMMAND_SPLICE]),
						'update(): expected spec of %s to be an array of arrays; got %s. ' +
						'Did you forget to wrap your parameters in an array?',
						COMMAND_SPLICE,
						spec[COMMAND_SPLICE]
					) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
					spec[COMMAND_SPLICE].forEach(function (args) {
						("production" !== process.env.NODE_ENV ? invariant(
							Array.isArray(args),
							'update(): expected spec of %s to be an array of arrays; got %s. ' +
							'Did you forget to wrap your parameters in an array?',
							COMMAND_SPLICE,
							spec[COMMAND_SPLICE]
						) : invariant(Array.isArray(args)));
						nextValue.splice.apply(nextValue, args);
					});
				}

				if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
					("production" !== process.env.NODE_ENV ? invariant(
						typeof spec[COMMAND_APPLY] === 'function',
						'update(): expected spec of %s to be a function; got %s.',
						COMMAND_APPLY,
						spec[COMMAND_APPLY]
					) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
					nextValue = spec[COMMAND_APPLY](nextValue);
				}

				for (var k in spec) {
					if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
						nextValue[k] = update(value[k], spec[k]);
					}
				}

				return nextValue;
			}

			module.exports = update;

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(238)))

		/***/
	},
	/* 418 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule ReactTestUtils
		 */

		'use strict';

		var EventConstants = __webpack_require__(276);
		var EventPluginHub = __webpack_require__(317);
		var EventPropagators = __webpack_require__(341);
		var React = __webpack_require__(274);
		var ReactElement = __webpack_require__(260);
		var ReactEmptyComponent = __webpack_require__(324);
		var ReactBrowserEventEmitter = __webpack_require__(316);
		var ReactCompositeComponent = __webpack_require__(332);
		var ReactInstanceHandles = __webpack_require__(279);
		var ReactInstanceMap = __webpack_require__(284);
		var ReactMount = __webpack_require__(315);
		var ReactUpdates = __webpack_require__(249);
		var SyntheticEvent = __webpack_require__(345);

		var assign = __webpack_require__(253);
		var emptyObject = __webpack_require__(262);

		var topLevelTypes = EventConstants.topLevelTypes;

		function Event(suffix) {
		}

		/**
		 * @class ReactTestUtils
		 */

		/**
		 * Todo: Support the entire DOM.scry query syntax. For now, these simple
		 * utilities will suffice for testing purposes.
		 * @lends ReactTestUtils
		 */
		var ReactTestUtils = {
			renderIntoDocument: function (instance) {
				var div = document.createElement('div');
				// None of our tests actually require attaching the container to the
				// DOM, and doing so creates a mess that we rely on test isolation to
				// clean up, so we're going to stop honoring the name of this method
				// (and probably rename it eventually) if no problems arise.
				// document.documentElement.appendChild(div);
				return React.render(instance, div);
			},

			isElement: function (element) {
				return ReactElement.isValidElement(element);
			},

			isElementOfType: function (inst, convenienceConstructor) {
				return (
					ReactElement.isValidElement(inst) &&
					inst.type === convenienceConstructor
				);
			},

			isDOMComponent: function (inst) {
				// TODO: Fix this heuristic. It's just here because composites can currently
				// pretend to be DOM components.
				return !!(inst && inst.tagName && inst.getDOMNode);
			},

			isDOMComponentElement: function (inst) {
				return !!(inst &&
				ReactElement.isValidElement(inst) && !!inst.tagName);
			},

			isCompositeComponent: function (inst) {
				return typeof inst.render === 'function' &&
					typeof inst.setState === 'function';
			},

			isCompositeComponentWithType: function (inst, type) {
				return !!(ReactTestUtils.isCompositeComponent(inst) &&
				(inst.constructor === type));
			},

			isCompositeComponentElement: function (inst) {
				if (!ReactElement.isValidElement(inst)) {
					return false;
				}
				// We check the prototype of the type that will get mounted, not the
				// instance itself. This is a future proof way of duck typing.
				var prototype = inst.type.prototype;
				return (
					typeof prototype.render === 'function' &&
					typeof prototype.setState === 'function'
				);
			},

			isCompositeComponentElementWithType: function (inst, type) {
				return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
				(inst.constructor === type));
			},

			getRenderedChildOfCompositeComponent: function (inst) {
				if (!ReactTestUtils.isCompositeComponent(inst)) {
					return null;
				}
				var internalInstance = ReactInstanceMap.get(inst);
				return internalInstance._renderedComponent.getPublicInstance();
			},

			findAllInRenderedTree: function (inst, test) {
				if (!inst) {
					return [];
				}
				var ret = test(inst) ? [inst] : [];
				if (ReactTestUtils.isDOMComponent(inst)) {
					var internalInstance = ReactInstanceMap.get(inst);
					var renderedChildren = internalInstance
						._renderedComponent
						._renderedChildren;
					var key;
					for (key in renderedChildren) {
						if (!renderedChildren.hasOwnProperty(key)) {
							continue;
						}
						if (!renderedChildren[key].getPublicInstance) {
							continue;
						}
						ret = ret.concat(
							ReactTestUtils.findAllInRenderedTree(
								renderedChildren[key].getPublicInstance(),
								test
							)
						);
					}
				} else if (ReactTestUtils.isCompositeComponent(inst)) {
					ret = ret.concat(
						ReactTestUtils.findAllInRenderedTree(
							ReactTestUtils.getRenderedChildOfCompositeComponent(inst),
							test
						)
					);
				}
				return ret;
			},

			/**
			 * Finds all instance of components in the rendered tree that are DOM
			 * components with the class name matching `className`.
			 * @return an array of all the matches.
			 */
			scryRenderedDOMComponentsWithClass: function (root, className) {
				return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
					var instClassName = inst.props.className;
					return ReactTestUtils.isDOMComponent(inst) && (
							(instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)
						);
				});
			},

			/**
			 * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
			 * and returns that one result, or throws exception if there is any other
			 * number of matches besides one.
			 * @return {!ReactDOMComponent} The one match.
			 */
			findRenderedDOMComponentWithClass: function (root, className) {
				var all =
					ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
				if (all.length !== 1) {
					throw new Error('Did not find exactly one match ' +
						'(found: ' + all.length + ') for class:' + className
					);
				}
				return all[0];
			},


			/**
			 * Finds all instance of components in the rendered tree that are DOM
			 * components with the tag name matching `tagName`.
			 * @return an array of all the matches.
			 */
			scryRenderedDOMComponentsWithTag: function (root, tagName) {
				return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
					return ReactTestUtils.isDOMComponent(inst) &&
						inst.tagName === tagName.toUpperCase();
				});
			},

			/**
			 * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
			 * and returns that one result, or throws exception if there is any other
			 * number of matches besides one.
			 * @return {!ReactDOMComponent} The one match.
			 */
			findRenderedDOMComponentWithTag: function (root, tagName) {
				var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
				if (all.length !== 1) {
					throw new Error('Did not find exactly one match for tag:' + tagName);
				}
				return all[0];
			},


			/**
			 * Finds all instances of components with type equal to `componentType`.
			 * @return an array of all the matches.
			 */
			scryRenderedComponentsWithType: function (root, componentType) {
				return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
					return ReactTestUtils.isCompositeComponentWithType(
						inst,
						componentType
					);
				});
			},

			/**
			 * Same as `scryRenderedComponentsWithType` but expects there to be one result
			 * and returns that one result, or throws exception if there is any other
			 * number of matches besides one.
			 * @return {!ReactComponent} The one match.
			 */
			findRenderedComponentWithType: function (root, componentType) {
				var all = ReactTestUtils.scryRenderedComponentsWithType(
					root,
					componentType
				);
				if (all.length !== 1) {
					throw new Error(
						'Did not find exactly one match for componentType:' + componentType
					);
				}
				return all[0];
			},

			/**
			 * Pass a mocked component module to this method to augment it with
			 * useful methods that allow it to be used as a dummy React component.
			 * Instead of rendering as usual, the component will become a simple
			 * <div> containing any provided children.
			 *
			 * @param {object} module the mock function object exported from a
			 *                        module that defines the component to be mocked
			 * @param {?string} mockTagName optional dummy root tag name to return
			 *                              from render method (overrides
			 *                              module.mockTagName if provided)
			 * @return {object} the ReactTestUtils object (for chaining)
			 */
			mockComponent: function (module, mockTagName) {
				mockTagName = mockTagName || module.mockTagName || "div";

				module.prototype.render.mockImplementation(function () {
					return React.createElement(
						mockTagName,
						null,
						this.props.children
					);
				});

				return this;
			},

			/**
			 * Simulates a top level event being dispatched from a raw event that occured
			 * on an `Element` node.
			 * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
			 * @param {!Element} node The dom to simulate an event occurring on.
			 * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
			 */
			simulateNativeEventOnNode: function (topLevelType, node, fakeNativeEvent) {
				fakeNativeEvent.target = node;
				ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
					topLevelType,
					fakeNativeEvent
				);
			},

			/**
			 * Simulates a top level event being dispatched from a raw event that occured
			 * on the `ReactDOMComponent` `comp`.
			 * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
			 * @param comp {!ReactDOMComponent}
			 * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
			 */
			simulateNativeEventOnDOMComponent: function (topLevelType,
														 comp,
														 fakeNativeEvent) {
				ReactTestUtils.simulateNativeEventOnNode(
					topLevelType,
					comp.getDOMNode(),
					fakeNativeEvent
				);
			},

			nativeTouchData: function (x, y) {
				return {
					touches: [
						{pageX: x, pageY: y}
					]
				};
			},

			createRenderer: function () {
				return new ReactShallowRenderer();
			},

			Simulate: null,
			SimulateNative: {}
		};

		/**
		 * @class ReactShallowRenderer
		 */
		var ReactShallowRenderer = function () {
			this._instance = null;
		};

		ReactShallowRenderer.prototype.getRenderOutput = function () {
			return (
				(this._instance && this._instance._renderedComponent &&
				this._instance._renderedComponent._renderedOutput)
				|| null
			);
		};

		var NoopInternalComponent = function (element) {
			this._renderedOutput = element;
			this._currentElement = element === null || element === false ?
				ReactEmptyComponent.emptyElement :
				element;
		};

		NoopInternalComponent.prototype = {

			mountComponent: function () {
			},

			receiveComponent: function (element) {
				this._renderedOutput = element;
				this._currentElement = element === null || element === false ?
					ReactEmptyComponent.emptyElement :
					element;
			},

			unmountComponent: function () {
			}

		};

		var ShallowComponentWrapper = function () {
		};
		assign(
			ShallowComponentWrapper.prototype,
			ReactCompositeComponent.Mixin, {
				_instantiateReactComponent: function (element) {
					return new NoopInternalComponent(element);
				},
				_replaceNodeWithMarkupByID: function () {
				},
				_renderValidatedComponent: ReactCompositeComponent.Mixin.
					_renderValidatedComponentWithoutOwnerOrContext
			}
		);

		ReactShallowRenderer.prototype.render = function (element, context) {
			if (!context) {
				context = emptyObject;
			}
			var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
			this._render(element, transaction, context);
			ReactUpdates.ReactReconcileTransaction.release(transaction);
		};

		ReactShallowRenderer.prototype.unmount = function () {
			if (this._instance) {
				this._instance.unmountComponent();
			}
		};

		ReactShallowRenderer.prototype._render = function (element, transaction, context) {
			if (!this._instance) {
				var rootID = ReactInstanceHandles.createReactRootID();
				var instance = new ShallowComponentWrapper(element.type);
				instance.construct(element);

				instance.mountComponent(rootID, transaction, context);

				this._instance = instance;
			} else {
				this._instance.receiveComponent(element, transaction, context);
			}
		};

		/**
		 * Exports:
		 *
		 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
		 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
		 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
		 * - ... (All keys from event plugin `eventTypes` objects)
		 */
		function makeSimulator(eventType) {
			return function (domComponentOrNode, eventData) {
				var node;
				if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
					node = domComponentOrNode.getDOMNode();
				} else if (domComponentOrNode.tagName) {
					node = domComponentOrNode;
				}

				var fakeNativeEvent = new Event();
				fakeNativeEvent.target = node;
				// We don't use SyntheticEvent.getPooled in order to not have to worry about
				// properly destroying any properties assigned from `eventData` upon release
				var event = new SyntheticEvent(
					ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
					ReactMount.getID(node),
					fakeNativeEvent
				);
				assign(event, eventData);
				EventPropagators.accumulateTwoPhaseDispatches(event);

				ReactUpdates.batchedUpdates(function () {
					EventPluginHub.enqueueEvents(event);
					EventPluginHub.processEventQueue();
				});
			};
		}

		function buildSimulators() {
			ReactTestUtils.Simulate = {};

			var eventType;
			for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
				/**
				 * @param {!Element || ReactDOMComponent} domComponentOrNode
				 * @param {?object} eventData Fake event data to use in SyntheticEvent.
				 */
				ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
			}
		}

		// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
		var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
		EventPluginHub.injection.injectEventPluginOrder = function () {
			oldInjectEventPluginOrder.apply(this, arguments);
			buildSimulators();
		};
		var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
		EventPluginHub.injection.injectEventPluginsByName = function () {
			oldInjectEventPlugins.apply(this, arguments);
			buildSimulators();
		};

		buildSimulators();

		/**
		 * Exports:
		 *
		 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
		 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
		 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
		 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
		 * - ... (All keys from `EventConstants.topLevelTypes`)
		 *
		 * Note: Top level event types are a subset of the entire set of handler types
		 * (which include a broader set of "synthetic" events). For example, onDragDone
		 * is a synthetic event. Except when testing an event plugin or React's event
		 * handling code specifically, you probably want to use ReactTestUtils.Simulate
		 * to dispatch synthetic events.
		 */

		function makeNativeSimulator(eventType) {
			return function (domComponentOrNode, nativeEventData) {
				var fakeNativeEvent = new Event(eventType);
				assign(fakeNativeEvent, nativeEventData);
				if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
					ReactTestUtils.simulateNativeEventOnDOMComponent(
						eventType,
						domComponentOrNode,
						fakeNativeEvent
					);
				} else if (!!domComponentOrNode.tagName) {
					// Will allow on actual dom nodes.
					ReactTestUtils.simulateNativeEventOnNode(
						eventType,
						domComponentOrNode,
						fakeNativeEvent
					);
				}
			};
		}

		var eventType;
		for (eventType in topLevelTypes) {
			// Event type is stored as 'topClick' - we transform that to 'click'
			var convenienceName = eventType.indexOf('top') === 0 ?
			eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
			/**
			 * @param {!Element || ReactDOMComponent} domComponentOrNode
			 * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
			 */
			ReactTestUtils.SimulateNative[convenienceName] =
				makeNativeSimulator(eventType);
		}

		module.exports = ReactTestUtils;


		/***/
	},
	/* 419 */
	/***/ function (module, exports, __webpack_require__) {

		__webpack_require__(420);
		module.exports = 'ngAnimate';


		/***/
	},
	/* 420 */
	/***/ function (module, exports) {

		/**
		 * @license AngularJS v1.4.3
		 * (c) 2010-2015 Google, Inc. http://angularjs.org
		 * License: MIT
		 */
		(function (window, angular, undefined) {
			'use strict';

			/* jshint ignore:start */
			var noop = angular.noop;
			var extend = angular.extend;
			var jqLite = angular.element;
			var forEach = angular.forEach;
			var isArray = angular.isArray;
			var isString = angular.isString;
			var isObject = angular.isObject;
			var isUndefined = angular.isUndefined;
			var isDefined = angular.isDefined;
			var isFunction = angular.isFunction;
			var isElement = angular.isElement;

			var ELEMENT_NODE = 1;
			var COMMENT_NODE = 8;

			var NG_ANIMATE_CLASSNAME = 'ng-animate';
			var NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';

			var isPromiseLike = function (p) {
				return p && p.then ? true : false;
			}

			function assertArg(arg, name, reason) {
				if (!arg) {
					throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
				}
				return arg;
			}

			function mergeClasses(a, b) {
				if (!a && !b) return '';
				if (!a) return b;
				if (!b) return a;
				if (isArray(a)) a = a.join(' ');
				if (isArray(b)) b = b.join(' ');
				return a + ' ' + b;
			}

			function packageStyles(options) {
				var styles = {};
				if (options && (options.to || options.from)) {
					styles.to = options.to;
					styles.from = options.from;
				}
				return styles;
			}

			function pendClasses(classes, fix, isPrefix) {
				var className = '';
				classes = isArray(classes)
					? classes
					: classes && isString(classes) && classes.length
					? classes.split(/\s+/)
					: [];
				forEach(classes, function (klass, i) {
					if (klass && klass.length > 0) {
						className += (i > 0) ? ' ' : '';
						className += isPrefix ? fix + klass
							: klass + fix;
					}
				});
				return className;
			}

			function removeFromArray(arr, val) {
				var index = arr.indexOf(val);
				if (val >= 0) {
					arr.splice(index, 1);
				}
			}

			function stripCommentsFromElement(element) {
				if (element instanceof jqLite) {
					switch (element.length) {
						case 0:
							return [];
							break;

						case 1:
							// there is no point of stripping anything if the element
							// is the only element within the jqLite wrapper.
							// (it's important that we retain the element instance.)
							if (element[0].nodeType === ELEMENT_NODE) {
								return element;
							}
							break;

						default:
							return jqLite(extractElementNode(element));
							break;
					}
				}

				if (element.nodeType === ELEMENT_NODE) {
					return jqLite(element);
				}
			}

			function extractElementNode(element) {
				if (!element[0]) return element;
				for (var i = 0; i < element.length; i++) {
					var elm = element[i];
					if (elm.nodeType == ELEMENT_NODE) {
						return elm;
					}
				}
			}

			function $$addClass($$jqLite, element, className) {
				forEach(element, function (elm) {
					$$jqLite.addClass(elm, className);
				});
			}

			function $$removeClass($$jqLite, element, className) {
				forEach(element, function (elm) {
					$$jqLite.removeClass(elm, className);
				});
			}

			function applyAnimationClassesFactory($$jqLite) {
				return function (element, options) {
					if (options.addClass) {
						$$addClass($$jqLite, element, options.addClass);
						options.addClass = null;
					}
					if (options.removeClass) {
						$$removeClass($$jqLite, element, options.removeClass);
						options.removeClass = null;
					}
				}
			}

			function prepareAnimationOptions(options) {
				options = options || {};
				if (!options.$$prepared) {
					var domOperation = options.domOperation || noop;
					options.domOperation = function () {
						options.$$domOperationFired = true;
						domOperation();
						domOperation = noop;
					};
					options.$$prepared = true;
				}
				return options;
			}

			function applyAnimationStyles(element, options) {
				applyAnimationFromStyles(element, options);
				applyAnimationToStyles(element, options);
			}

			function applyAnimationFromStyles(element, options) {
				if (options.from) {
					element.css(options.from);
					options.from = null;
				}
			}

			function applyAnimationToStyles(element, options) {
				if (options.to) {
					element.css(options.to);
					options.to = null;
				}
			}

			function mergeAnimationOptions(element, target, newOptions) {
				var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');
				var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');
				var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);

				extend(target, newOptions);

				if (classes.addClass) {
					target.addClass = classes.addClass;
				} else {
					target.addClass = null;
				}

				if (classes.removeClass) {
					target.removeClass = classes.removeClass;
				} else {
					target.removeClass = null;
				}

				return target;
			}

			function resolveElementClasses(existing, toAdd, toRemove) {
				var ADD_CLASS = 1;
				var REMOVE_CLASS = -1;

				var flags = {};
				existing = splitClassesToLookup(existing);

				toAdd = splitClassesToLookup(toAdd);
				forEach(toAdd, function (value, key) {
					flags[key] = ADD_CLASS;
				});

				toRemove = splitClassesToLookup(toRemove);
				forEach(toRemove, function (value, key) {
					flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
				});

				var classes = {
					addClass: '',
					removeClass: ''
				};

				forEach(flags, function (val, klass) {
					var prop, allow;
					if (val === ADD_CLASS) {
						prop = 'addClass';
						allow = !existing[klass];
					} else if (val === REMOVE_CLASS) {
						prop = 'removeClass';
						allow = existing[klass];
					}
					if (allow) {
						if (classes[prop].length) {
							classes[prop] += ' ';
						}
						classes[prop] += klass;
					}
				});

				function splitClassesToLookup(classes) {
					if (isString(classes)) {
						classes = classes.split(' ');
					}

					var obj = {};
					forEach(classes, function (klass) {
						// sometimes the split leaves empty string values
						// incase extra spaces were applied to the options
						if (klass.length) {
							obj[klass] = true;
						}
					});
					return obj;
				}

				return classes;
			}

			function getDomNode(element) {
				return (element instanceof angular.element) ? element[0] : element;
			}

			var $$rAFSchedulerFactory = ['$$rAF', function ($$rAF) {
				var tickQueue = [];
				var cancelFn;

				function scheduler(tasks) {
					// we make a copy since RAFScheduler mutates the state
					// of the passed in array variable and this would be difficult
					// to track down on the outside code
					tickQueue.push([].concat(tasks));
					nextTick();
				}

				/* waitUntilQuiet does two things:
				 * 1. It will run the FINAL `fn` value only when an uncancelled RAF has passed through
				 * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.
				 *
				 * The motivation here is that animation code can request more time from the scheduler
				 * before the next wave runs. This allows for certain DOM properties such as classes to
				 * be resolved in time for the next animation to run.
				 */
				scheduler.waitUntilQuiet = function (fn) {
					if (cancelFn) cancelFn();

					cancelFn = $$rAF(function () {
						cancelFn = null;
						fn();
						nextTick();
					});
				};

				return scheduler;

				function nextTick() {
					if (!tickQueue.length) return;

					var updatedQueue = [];
					for (var i = 0; i < tickQueue.length; i++) {
						var innerQueue = tickQueue[i];
						runNextTask(innerQueue);
						if (innerQueue.length) {
							updatedQueue.push(innerQueue);
						}
					}
					tickQueue = updatedQueue;

					if (!cancelFn) {
						$$rAF(function () {
							if (!cancelFn) nextTick();
						});
					}
				}

				function runNextTask(tasks) {
					var nextTask = tasks.shift();
					nextTask();
				}
			}];

			var $$AnimateChildrenDirective = [function () {
				return function (scope, element, attrs) {
					var val = attrs.ngAnimateChildren;
					if (angular.isString(val) && val.length === 0) { //empty attribute
						element.data(NG_ANIMATE_CHILDREN_DATA, true);
					} else {
						attrs.$observe('ngAnimateChildren', function (value) {
							value = value === 'on' || value === 'true';
							element.data(NG_ANIMATE_CHILDREN_DATA, value);
						});
					}
				};
			}];

			/**
			 * @ngdoc service
			 * @name $animateCss
			 * @kind object
			 *
			 * @description
			 * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes
			 * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT
			 * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or
			 * directives to create more complex animations that can be purely driven using CSS code.
			 *
			 * Note that only browsers that support CSS transitions and/or keyframe animations are capable of
			 * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).
			 *
			 * ## Usage
			 * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that
			 * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,
			 * any automatic control over cancelling animations and/or preventing animations from being run on
			 * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to
			 * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger
			 * the CSS animation.
			 *
			 * The example below shows how we can create a folding animation on an element using `ng-if`:
			 *
			 * ```html
			 * <!-- notice the `fold-animation` CSS class -->
			 * <div ng-if="onOff" class="fold-animation">
			 *   This element will go BOOM
			 * </div>
			 * <button ng-click="onOff=true">Fold In</button>
			 * ```
			 *
			 * Now we create the **JavaScript animation** that will trigger the CSS transition:
			 *
			 * ```js
			 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element, doneFn) {
	 *       var height = element[0].offsetHeight;
	 *       return $animateCss(element, {
	 *         from: { height:'0px' },
	 *         to: { height:height + 'px' },
	 *         duration: 1 // one second
	 *       });
	 *     }
	 *   }
	 * }]);
			 * ```
			 *
			 * ## More Advanced Uses
			 *
			 * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks
			 * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.
			 *
			 * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,
			 * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with
			 * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order
			 * to provide a working animation that will run in CSS.
			 *
			 * The example below showcases a more advanced version of the `.fold-animation` from the example above:
			 *
			 * ```js
			 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element, doneFn) {
	 *       var height = element[0].offsetHeight;
	 *       return $animateCss(element, {
	 *         addClass: 'red large-text pulse-twice',
	 *         easing: 'ease-out',
	 *         from: { height:'0px' },
	 *         to: { height:height + 'px' },
	 *         duration: 1 // one second
	 *       });
	 *     }
	 *   }
	 * }]);
			 * ```
			 *
			 * Since we're adding/removing CSS classes then the CSS transition will also pick those up:
			 *
			 * ```css
			 * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,
			 * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/
			 * .red { background:red; }
			 * .large-text { font-size:20px; }
			 *
			 * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/
			 * .pulse-twice {
	 *   animation: 0.5s pulse linear 2;
	 *   -webkit-animation: 0.5s pulse linear 2;
	 * }
			 *
			 * @keyframes pulse {
	 *   from { transform: scale(0.5); }
	 *   to { transform: scale(1.5); }
	 * }
			 *
			 * @-webkit-keyframes pulse {
	 *   from { -webkit-transform: scale(0.5); }
	 *   to { -webkit-transform: scale(1.5); }
	 * }
			 * ```
			 *
			 * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.
			 *
			 * ## How the Options are handled
			 *
			 * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation
			 * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline
			 * styles using the `from` and `to` properties.
			 *
			 * ```js
			 * var animator = $animateCss(element, {
	 *   from: { background:'red' },
	 *   to: { background:'blue' }
	 * });
			 * animator.start();
			 * ```
			 *
			 * ```css
			 * .rotating-animation {
	 *   animation:0.5s rotate linear;
	 *   -webkit-animation:0.5s rotate linear;
	 * }
			 *
			 * @keyframes rotate {
	 *   from { transform: rotate(0deg); }
	 *   to { transform: rotate(360deg); }
	 * }
			 *
			 * @-webkit-keyframes rotate {
	 *   from { -webkit-transform: rotate(0deg); }
	 *   to { -webkit-transform: rotate(360deg); }
	 * }
			 * ```
			 *
			 * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is
			 * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition
			 * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition
			 * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied
			 * and spread across the transition and keyframe animation.
			 *
			 * ## What is returned
			 *
			 * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually
			 * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are
			 * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:
			 *
			 * ```js
			 * var animator = $animateCss(element, { ... });
			 * ```
			 *
			 * Now what do the contents of our `animator` variable look like:
			 *
			 * ```js
			 * {
	 *   // starts the animation
	 *   start: Function,
	 *
	 *   // ends (aborts) the animation
	 *   end: Function
	 * }
			 * ```
			 *
			 * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.
			 * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and stlyes may have been
			 * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties
			 * and that changing them will not reconfigure the parameters of the animation.
			 *
			 * ### runner.done() vs runner.then()
			 * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the
			 * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.
			 * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`
			 * unless you really need a digest to kick off afterwards.
			 *
			 * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss
			 * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).
			 * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.
			 *
			 * @param {DOMElement} element the element that will be animated
			 * @param {object} options the animation-related options that will be applied during the animation
			 *
			 * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied
			 * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)
			 * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).
			 * * `transition` - The raw CSS transition style that will be used (e.g. `1s linear all`).
			 * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).
			 * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.
			 * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.
			 * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.
			 * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.
			 * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`
			 * is provided then the animation will be skipped entirely.
			 * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is
			 * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value
			 * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same
			 * CSS delay value.
			 * * `stagger` - A numeric time value representing the delay between successively animated elements
			 * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})
			 * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a
			 * `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)
			 * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occuring on the classes being added and removed.)
			 *
			 * @return {object} an object with start and end methods and details about the animation.
			 *
			 * * `start` - The method to start the animation. This will return a `Promise` when called.
			 * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.
			 */

			// Detect proper transitionend/animationend event names.
			var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

			// If unprefixed events are not supported but webkit-prefixed are, use the latter.
			// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
			// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
			// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
			// Register both events in case `window.onanimationend` is not supported because of that,
			// do the same for `transitionend` as Safari is likely to exhibit similar behavior.
			// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
			// therefore there is no reason to test anymore for other vendor prefixes:
			// http://caniuse.com/#search=transition
			if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
				CSS_PREFIX = '-webkit-';
				TRANSITION_PROP = 'WebkitTransition';
				TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
			} else {
				TRANSITION_PROP = 'transition';
				TRANSITIONEND_EVENT = 'transitionend';
			}

			if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
				CSS_PREFIX = '-webkit-';
				ANIMATION_PROP = 'WebkitAnimation';
				ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
			} else {
				ANIMATION_PROP = 'animation';
				ANIMATIONEND_EVENT = 'animationend';
			}

			var DURATION_KEY = 'Duration';
			var PROPERTY_KEY = 'Property';
			var DELAY_KEY = 'Delay';
			var TIMING_KEY = 'TimingFunction';
			var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
			var ANIMATION_PLAYSTATE_KEY = 'PlayState';
			var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
			var CLOSING_TIME_BUFFER = 1.5;
			var ONE_SECOND = 1000;
			var BASE_TEN = 10;

			var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;

			var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
			var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;

			var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
			var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;

			var DETECT_CSS_PROPERTIES = {
				transitionDuration: TRANSITION_DURATION_PROP,
				transitionDelay: TRANSITION_DELAY_PROP,
				transitionProperty: TRANSITION_PROP + PROPERTY_KEY,
				animationDuration: ANIMATION_DURATION_PROP,
				animationDelay: ANIMATION_DELAY_PROP,
				animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
			};

			var DETECT_STAGGER_CSS_PROPERTIES = {
				transitionDuration: TRANSITION_DURATION_PROP,
				transitionDelay: TRANSITION_DELAY_PROP,
				animationDuration: ANIMATION_DURATION_PROP,
				animationDelay: ANIMATION_DELAY_PROP
			};

			function computeCssStyles($window, element, properties) {
				var styles = Object.create(null);
				var detectedStyles = $window.getComputedStyle(element) || {};
				forEach(properties, function (formalStyleName, actualStyleName) {
					var val = detectedStyles[formalStyleName];
					if (val) {
						var c = val.charAt(0);

						// only numerical-based values have a negative sign or digit as the first value
						if (c === '-' || c === '+' || c >= 0) {
							val = parseMaxTime(val);
						}

						// by setting this to null in the event that the delay is not set or is set directly as 0
						// then we can still allow for zegative values to be used later on and not mistake this
						// value for being greater than any other negative value.
						if (val === 0) {
							val = null;
						}
						styles[actualStyleName] = val;
					}
				});

				return styles;
			}

			function parseMaxTime(str) {
				var maxValue = 0;
				var values = str.split(/\s*,\s*/);
				forEach(values, function (value) {
					// it's always safe to consider only second values and omit `ms` values since
					// getComputedStyle will always handle the conversion for us
					if (value.charAt(value.length - 1) == 's') {
						value = value.substring(0, value.length - 1);
					}
					value = parseFloat(value) || 0;
					maxValue = maxValue ? Math.max(value, maxValue) : value;
				});
				return maxValue;
			}

			function truthyTimingValue(val) {
				return val === 0 || val != null;
			}

			function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
				var style = TRANSITION_PROP;
				var value = duration + 's';
				if (applyOnlyDuration) {
					style += DURATION_KEY;
				} else {
					value += ' linear all';
				}
				return [style, value];
			}

			function getCssKeyframeDurationStyle(duration) {
				return [ANIMATION_DURATION_PROP, duration + 's'];
			}

			function getCssDelayStyle(delay, isKeyframeAnimation) {
				var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
				return [prop, delay + 's'];
			}

			function blockTransitions(node, duration) {
				// we use a negative delay value since it performs blocking
				// yet it doesn't kill any existing transitions running on the
				// same element which makes this safe for class-based animations
				var value = duration ? '-' + duration + 's' : '';
				applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);
				return [TRANSITION_DELAY_PROP, value];
			}

			function blockKeyframeAnimations(node, applyBlock) {
				var value = applyBlock ? 'paused' : '';
				var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
				applyInlineStyle(node, [key, value]);
				return [key, value];
			}

			function applyInlineStyle(node, styleTuple) {
				var prop = styleTuple[0];
				var value = styleTuple[1];
				node.style[prop] = value;
			}

			function createLocalCacheLookup() {
				var cache = Object.create(null);
				return {
					flush: function () {
						cache = Object.create(null);
					},

					count: function (key) {
						var entry = cache[key];
						return entry ? entry.total : 0;
					},

					get: function (key) {
						var entry = cache[key];
						return entry && entry.value;
					},

					put: function (key, value) {
						if (!cache[key]) {
							cache[key] = {total: 1, value: value};
						} else {
							cache[key].total++;
						}
					}
				};
			}

			var $AnimateCssProvider = ['$animateProvider', function ($animateProvider) {
				var gcsLookup = createLocalCacheLookup();
				var gcsStaggerLookup = createLocalCacheLookup();

				this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',
					'$document', '$sniffer', '$$rAFScheduler',
					function ($window, $$jqLite, $$AnimateRunner, $timeout,
							  $document, $sniffer, $$rAFScheduler) {

						var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

						var parentCounter = 0;

						function gcsHashFn(node, extraClasses) {
							var KEY = "$$ngAnimateParentKey";
							var parentNode = node.parentNode;
							var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
							return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;
						}

						function computeCachedCssStyles(node, className, cacheKey, properties) {
							var timings = gcsLookup.get(cacheKey);

							if (!timings) {
								timings = computeCssStyles($window, node, properties);
								if (timings.animationIterationCount === 'infinite') {
									timings.animationIterationCount = 1;
								}
							}

							// we keep putting this in multiple times even though the value and the cacheKey are the same
							// because we're keeping an interal tally of how many duplicate animations are detected.
							gcsLookup.put(cacheKey, timings);
							return timings;
						}

						function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
							var stagger;

							// if we have one or more existing matches of matching elements
							// containing the same parent + CSS styles (which is how cacheKey works)
							// then staggering is possible
							if (gcsLookup.count(cacheKey) > 0) {
								stagger = gcsStaggerLookup.get(cacheKey);

								if (!stagger) {
									var staggerClassName = pendClasses(className, '-stagger');

									$$jqLite.addClass(node, staggerClassName);

									stagger = computeCssStyles($window, node, properties);

									// force the conversion of a null value to zero incase not set
									stagger.animationDuration = Math.max(stagger.animationDuration, 0);
									stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);

									$$jqLite.removeClass(node, staggerClassName);

									gcsStaggerLookup.put(cacheKey, stagger);
								}
							}

							return stagger || {};
						}

						var bod = getDomNode($document).body;
						var rafWaitQueue = [];

						function waitUntilQuiet(callback) {
							rafWaitQueue.push(callback);
							$$rAFScheduler.waitUntilQuiet(function () {
								gcsLookup.flush();
								gcsStaggerLookup.flush();

								//the line below will force the browser to perform a repaint so
								//that all the animated elements within the animation frame will
								//be properly updated and drawn on screen. This is required to
								//ensure that the preparation animation is properly flushed so that
								//the active state picks up from there. DO NOT REMOVE THIS LINE.
								//DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
								//WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
								//WILL TAKE YEARS AWAY FROM YOUR LIFE.
								var width = bod.offsetWidth + 1;

								// we use a for loop to ensure that if the queue is changed
								// during this looping then it will consider new requests
								for (var i = 0; i < rafWaitQueue.length; i++) {
									rafWaitQueue[i](width);
								}
								rafWaitQueue.length = 0;
							});
						}

						return init;

						function computeTimings(node, className, cacheKey) {
							var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
							var aD = timings.animationDelay;
							var tD = timings.transitionDelay;
							timings.maxDelay = aD && tD
								? Math.max(aD, tD)
								: (aD || tD);
							timings.maxDuration = Math.max(
								timings.animationDuration * timings.animationIterationCount,
								timings.transitionDuration);

							return timings;
						}

						function init(element, options) {
							var node = getDomNode(element);
							if (!node || !node.parentNode) {
								return closeAndReturnNoopAnimator();
							}

							options = prepareAnimationOptions(options);

							var temporaryStyles = [];
							var classes = element.attr('class');
							var styles = packageStyles(options);
							var animationClosed;
							var animationPaused;
							var animationCompleted;
							var runner;
							var runnerHost;
							var maxDelay;
							var maxDelayTime;
							var maxDuration;
							var maxDurationTime;

							if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {
								return closeAndReturnNoopAnimator();
							}

							var method = options.event && isArray(options.event)
								? options.event.join(' ')
								: options.event;

							var isStructural = method && options.structural;
							var structuralClassName = '';
							var addRemoveClassName = '';

							if (isStructural) {
								structuralClassName = pendClasses(method, 'ng-', true);
							} else if (method) {
								structuralClassName = method;
							}

							if (options.addClass) {
								addRemoveClassName += pendClasses(options.addClass, '-add');
							}

							if (options.removeClass) {
								if (addRemoveClassName.length) {
									addRemoveClassName += ' ';
								}
								addRemoveClassName += pendClasses(options.removeClass, '-remove');
							}

							// there may be a situation where a structural animation is combined together
							// with CSS classes that need to resolve before the animation is computed.
							// However this means that there is no explicit CSS code to block the animation
							// from happening (by setting 0s none in the class name). If this is the case
							// we need to apply the classes before the first rAF so we know to continue if
							// there actually is a detected transition or keyframe animation
							if (options.applyClassesEarly && addRemoveClassName.length) {
								applyAnimationClasses(element, options);
								addRemoveClassName = '';
							}

							var setupClasses = [structuralClassName, addRemoveClassName].join(' ').trim();
							var fullClassName = classes + ' ' + setupClasses;
							var activeClasses = pendClasses(setupClasses, '-active');
							var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
							var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;

							// there is no way we can trigger an animation if no styles and
							// no classes are being applied which would then trigger a transition,
							// unless there a is raw keyframe value that is applied to the element.
							if (!containsKeyframeAnimation
								&& !hasToStyles
								&& !setupClasses) {
								return closeAndReturnNoopAnimator();
							}

							var cacheKey, stagger;
							if (options.stagger > 0) {
								var staggerVal = parseFloat(options.stagger);
								stagger = {
									transitionDelay: staggerVal,
									animationDelay: staggerVal,
									transitionDuration: 0,
									animationDuration: 0
								};
							} else {
								cacheKey = gcsHashFn(node, fullClassName);
								stagger = computeCachedCssStaggerStyles(node, setupClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
							}

							$$jqLite.addClass(element, setupClasses);

							var applyOnlyDuration;

							if (options.transitionStyle) {
								var transitionStyle = [TRANSITION_PROP, options.transitionStyle];
								applyInlineStyle(node, transitionStyle);
								temporaryStyles.push(transitionStyle);
							}

							if (options.duration >= 0) {
								applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
								var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);

								// we set the duration so that it will be picked up by getComputedStyle later
								applyInlineStyle(node, durationStyle);
								temporaryStyles.push(durationStyle);
							}

							if (options.keyframeStyle) {
								var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];
								applyInlineStyle(node, keyframeStyle);
								temporaryStyles.push(keyframeStyle);
							}

							var itemIndex = stagger
								? options.staggerIndex >= 0
								? options.staggerIndex
								: gcsLookup.count(cacheKey)
								: 0;

							var isFirst = itemIndex === 0;

							// this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY
							// without causing any combination of transitions to kick in. By adding a negative delay value
							// it forces the setup class' transition to end immediately. We later then remove the negative
							// transition delay to allow for the transition to naturally do it's thing. The beauty here is
							// that if there is no transition defined then nothing will happen and this will also allow
							// other transitions to be stacked on top of each other without any chopping them out.
							if (isFirst) {
								blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
							}

							var timings = computeTimings(node, fullClassName, cacheKey);
							var relativeDelay = timings.maxDelay;
							maxDelay = Math.max(relativeDelay, 0);
							maxDuration = timings.maxDuration;

							var flags = {};
							flags.hasTransitions = timings.transitionDuration > 0;
							flags.hasAnimations = timings.animationDuration > 0;
							flags.hasTransitionAll = flags.hasTransitions && timings.transitionProperty == 'all';
							flags.applyTransitionDuration = hasToStyles && (
								(flags.hasTransitions && !flags.hasTransitionAll)
								|| (flags.hasAnimations && !flags.hasTransitions));
							flags.applyAnimationDuration = options.duration && flags.hasAnimations;
							flags.applyTransitionDelay = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
							flags.applyAnimationDelay = truthyTimingValue(options.delay) && flags.hasAnimations;
							flags.recalculateTimingStyles = addRemoveClassName.length > 0;

							if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
								maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;

								if (flags.applyTransitionDuration) {
									flags.hasTransitions = true;
									timings.transitionDuration = maxDuration;
									applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
									temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
								}

								if (flags.applyAnimationDuration) {
									flags.hasAnimations = true;
									timings.animationDuration = maxDuration;
									temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
								}
							}

							if (maxDuration === 0 && !flags.recalculateTimingStyles) {
								return closeAndReturnNoopAnimator();
							}

							// we need to recalculate the delay value since we used a pre-emptive negative
							// delay value and the delay value is required for the final event checking. This
							// property will ensure that this will happen after the RAF phase has passed.
							if (options.duration == null && timings.transitionDuration > 0) {
								flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
							}

							maxDelayTime = maxDelay * ONE_SECOND;
							maxDurationTime = maxDuration * ONE_SECOND;
							if (!options.skipBlocking) {
								flags.blockTransition = timings.transitionDuration > 0;
								flags.blockKeyframeAnimation = timings.animationDuration > 0 &&
									stagger.animationDelay > 0 &&
									stagger.animationDuration === 0;
							}

							applyAnimationFromStyles(element, options);
							if (!flags.blockTransition) {
								blockTransitions(node, false);
							}

							applyBlocking(maxDuration);

							// TODO(matsko): for 1.5 change this code to have an animator object for better debugging
							return {
								$$willAnimate: true,
								end: endFn,
								start: function () {
									if (animationClosed) return;

									runnerHost = {
										end: endFn,
										cancel: cancelFn,
										resume: null, //this will be set during the start() phase
										pause: null
									};

									runner = new $$AnimateRunner(runnerHost);

									waitUntilQuiet(start);

									// we don't have access to pause/resume the animation
									// since it hasn't run yet. AnimateRunner will therefore
									// set noop functions for resume and pause and they will
									// later be overridden once the animation is triggered
									return runner;
								}
							};

							function endFn() {
								close();
							}

							function cancelFn() {
								close(true);
							}

							function close(rejected) { // jshint ignore:line
								// if the promise has been called already then we shouldn't close
								// the animation again
								if (animationClosed || (animationCompleted && animationPaused)) return;
								animationClosed = true;
								animationPaused = false;

								$$jqLite.removeClass(element, setupClasses);
								$$jqLite.removeClass(element, activeClasses);

								blockKeyframeAnimations(node, false);
								blockTransitions(node, false);

								forEach(temporaryStyles, function (entry) {
									// There is only one way to remove inline style properties entirely from elements.
									// By using `removeProperty` this works, but we need to convert camel-cased CSS
									// styles down to hyphenated values.
									node.style[entry[0]] = '';
								});

								applyAnimationClasses(element, options);
								applyAnimationStyles(element, options);

								// the reason why we have this option is to allow a synchronous closing callback
								// that is fired as SOON as the animation ends (when the CSS is removed) or if
								// the animation never takes off at all. A good example is a leave animation since
								// the element must be removed just after the animation is over or else the element
								// will appear on screen for one animation frame causing an overbearing flicker.
								if (options.onDone) {
									options.onDone();
								}

								// if the preparation function fails then the promise is not setup
								if (runner) {
									runner.complete(!rejected);
								}
							}

							function applyBlocking(duration) {
								if (flags.blockTransition) {
									blockTransitions(node, duration);
								}

								if (flags.blockKeyframeAnimation) {
									blockKeyframeAnimations(node, !!duration);
								}
							}

							function closeAndReturnNoopAnimator() {
								runner = new $$AnimateRunner({
									end: endFn,
									cancel: cancelFn
								});

								close();

								return {
									$$willAnimate: false,
									start: function () {
										return runner;
									},
									end: endFn
								};
							}

							function start() {
								if (animationClosed) return;
								if (!node.parentNode) {
									close();
									return;
								}

								var startTime, events = [];

								// even though we only pause keyframe animations here the pause flag
								// will still happen when transitions are used. Only the transition will
								// not be paused since that is not possible. If the animation ends when
								// paused then it will not complete until unpaused or cancelled.
								var playPause = function (playAnimation) {
									if (!animationCompleted) {
										animationPaused = !playAnimation;
										if (timings.animationDuration) {
											var value = blockKeyframeAnimations(node, animationPaused);
											animationPaused
												? temporaryStyles.push(value)
												: removeFromArray(temporaryStyles, value);
										}
									} else if (animationPaused && playAnimation) {
										animationPaused = false;
										close();
									}
								};

								// checking the stagger duration prevents an accidently cascade of the CSS delay style
								// being inherited from the parent. If the transition duration is zero then we can safely
								// rely that the delay value is an intential stagger delay style.
								var maxStagger = itemIndex > 0
									&& ((timings.transitionDuration && stagger.transitionDuration === 0) ||
									(timings.animationDuration && stagger.animationDuration === 0))
									&& Math.max(stagger.animationDelay, stagger.transitionDelay);
								if (maxStagger) {
									$timeout(triggerAnimationStart,
										Math.floor(maxStagger * itemIndex * ONE_SECOND),
										false);
								} else {
									triggerAnimationStart();
								}

								// this will decorate the existing promise runner with pause/resume methods
								runnerHost.resume = function () {
									playPause(true);
								};

								runnerHost.pause = function () {
									playPause(false);
								};

								function triggerAnimationStart() {
									// just incase a stagger animation kicks in when the animation
									// itself was cancelled entirely
									if (animationClosed) return;

									applyBlocking(false);

									forEach(temporaryStyles, function (entry) {
										var key = entry[0];
										var value = entry[1];
										node.style[key] = value;
									});

									applyAnimationClasses(element, options);
									$$jqLite.addClass(element, activeClasses);

									if (flags.recalculateTimingStyles) {
										fullClassName = node.className + ' ' + setupClasses;
										cacheKey = gcsHashFn(node, fullClassName);

										timings = computeTimings(node, fullClassName, cacheKey);
										relativeDelay = timings.maxDelay;
										maxDelay = Math.max(relativeDelay, 0);
										maxDuration = timings.maxDuration;

										if (maxDuration === 0) {
											close();
											return;
										}

										flags.hasTransitions = timings.transitionDuration > 0;
										flags.hasAnimations = timings.animationDuration > 0;
									}

									if (flags.applyTransitionDelay || flags.applyAnimationDelay) {
										relativeDelay = typeof options.delay !== "boolean" && truthyTimingValue(options.delay)
											? parseFloat(options.delay)
											: relativeDelay;

										maxDelay = Math.max(relativeDelay, 0);

										var delayStyle;
										if (flags.applyTransitionDelay) {
											timings.transitionDelay = relativeDelay;
											delayStyle = getCssDelayStyle(relativeDelay);
											temporaryStyles.push(delayStyle);
											node.style[delayStyle[0]] = delayStyle[1];
										}

										if (flags.applyAnimationDelay) {
											timings.animationDelay = relativeDelay;
											delayStyle = getCssDelayStyle(relativeDelay, true);
											temporaryStyles.push(delayStyle);
											node.style[delayStyle[0]] = delayStyle[1];
										}
									}

									maxDelayTime = maxDelay * ONE_SECOND;
									maxDurationTime = maxDuration * ONE_SECOND;

									if (options.easing) {
										var easeProp, easeVal = options.easing;
										if (flags.hasTransitions) {
											easeProp = TRANSITION_PROP + TIMING_KEY;
											temporaryStyles.push([easeProp, easeVal]);
											node.style[easeProp] = easeVal;
										}
										if (flags.hasAnimations) {
											easeProp = ANIMATION_PROP + TIMING_KEY;
											temporaryStyles.push([easeProp, easeVal]);
											node.style[easeProp] = easeVal;
										}
									}

									if (timings.transitionDuration) {
										events.push(TRANSITIONEND_EVENT);
									}

									if (timings.animationDuration) {
										events.push(ANIMATIONEND_EVENT);
									}

									startTime = Date.now();
									element.on(events.join(' '), onAnimationProgress);
									$timeout(onAnimationExpired, maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime);

									applyAnimationToStyles(element, options);
								}

								function onAnimationExpired() {
									// although an expired animation is a failed animation, getting to
									// this outcome is very easy if the CSS code screws up. Therefore we
									// should still continue normally as if the animation completed correctly.
									close();
								}

								function onAnimationProgress(event) {
									event.stopPropagation();
									var ev = event.originalEvent || event;
									var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();

									/* Firefox (or possibly just Gecko) likes to not round values up
									 * when a ms measurement is used for the animation */
									var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

									/* $manualTimeStamp is a mocked timeStamp value which is set
									 * within browserTrigger(). This is only here so that tests can
									 * mock animations properly. Real events fallback to event.timeStamp,
									 * or, if they don't, then a timeStamp is automatically created for them.
									 * We're checking to see if the timeStamp surpasses the expected delay,
									 * but we're using elapsedTime instead of the timeStamp on the 2nd
									 * pre-condition since animations sometimes close off early */
									if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
										// we set this flag to ensure that if the transition is paused then, when resumed,
										// the animation will automatically close itself since transitions cannot be paused.
										animationCompleted = true;
										close();
									}
								}
							}
						}
					}];
			}];

			var $$AnimateCssDriverProvider = ['$$animationProvider', function ($$animationProvider) {
				$$animationProvider.drivers.push('$$animateCssDriver');

				var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';
				var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';

				var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';
				var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';

				this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$document', '$sniffer',
					function ($animateCss, $rootScope, $$AnimateRunner, $rootElement, $document, $sniffer) {

						// only browsers that support these properties can render animations
						if (!$sniffer.animations && !$sniffer.transitions) return noop;

						var bodyNode = getDomNode($document).body;
						var rootNode = getDomNode($rootElement);

						var rootBodyElement = jqLite(bodyNode.parentNode === rootNode ? bodyNode : rootNode);

						return function initDriverFn(animationDetails) {
							return animationDetails.from && animationDetails.to
								? prepareFromToAnchorAnimation(animationDetails.from,
								animationDetails.to,
								animationDetails.classes,
								animationDetails.anchors)
								: prepareRegularAnimation(animationDetails);
						};

						function filterCssClasses(classes) {
							//remove all the `ng-` stuff
							return classes.replace(/\bng-\S+\b/g, '');
						}

						function getUniqueValues(a, b) {
							if (isString(a)) a = a.split(' ');
							if (isString(b)) b = b.split(' ');
							return a.filter(function (val) {
								return b.indexOf(val) === -1;
							}).join(' ');
						}

						function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
							var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
							var startingClasses = filterCssClasses(getClassVal(clone));

							outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
							inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);

							clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);

							rootBodyElement.append(clone);

							var animatorIn, animatorOut = prepareOutAnimation();

							// the user may not end up using the `out` animation and
							// only making use of the `in` animation or vice-versa.
							// In either case we should allow this and not assume the
							// animation is over unless both animations are not used.
							if (!animatorOut) {
								animatorIn = prepareInAnimation();
								if (!animatorIn) {
									return end();
								}
							}

							var startingAnimator = animatorOut || animatorIn;

							return {
								start: function () {
									var runner;

									var currentAnimation = startingAnimator.start();
									currentAnimation.done(function () {
										currentAnimation = null;
										if (!animatorIn) {
											animatorIn = prepareInAnimation();
											if (animatorIn) {
												currentAnimation = animatorIn.start();
												currentAnimation.done(function () {
													currentAnimation = null;
													end();
													runner.complete();
												});
												return currentAnimation;
											}
										}
										// in the event that there is no `in` animation
										end();
										runner.complete();
									});

									runner = new $$AnimateRunner({
										end: endFn,
										cancel: endFn
									});

									return runner;

									function endFn() {
										if (currentAnimation) {
											currentAnimation.end();
										}
									}
								}
							};

							function calculateAnchorStyles(anchor) {
								var styles = {};

								var coords = getDomNode(anchor).getBoundingClientRect();

								// we iterate directly since safari messes up and doesn't return
								// all the keys for the coods object when iterated
								forEach(['width', 'height', 'top', 'left'], function (key) {
									var value = coords[key];
									switch (key) {
										case 'top':
											value += bodyNode.scrollTop;
											break;
										case 'left':
											value += bodyNode.scrollLeft;
											break;
									}
									styles[key] = Math.floor(value) + 'px';
								});
								return styles;
							}

							function prepareOutAnimation() {
								var animator = $animateCss(clone, {
									addClass: NG_OUT_ANCHOR_CLASS_NAME,
									delay: true,
									from: calculateAnchorStyles(outAnchor)
								});

								// read the comment within `prepareRegularAnimation` to understand
								// why this check is necessary
								return animator.$$willAnimate ? animator : null;
							}

							function getClassVal(element) {
								return element.attr('class') || '';
							}

							function prepareInAnimation() {
								var endingClasses = filterCssClasses(getClassVal(inAnchor));
								var toAdd = getUniqueValues(endingClasses, startingClasses);
								var toRemove = getUniqueValues(startingClasses, endingClasses);

								var animator = $animateCss(clone, {
									to: calculateAnchorStyles(inAnchor),
									addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,
									removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,
									delay: true
								});

								// read the comment within `prepareRegularAnimation` to understand
								// why this check is necessary
								return animator.$$willAnimate ? animator : null;
							}

							function end() {
								clone.remove();
								outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
								inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
							}
						}

						function prepareFromToAnchorAnimation(from, to, classes, anchors) {
							var fromAnimation = prepareRegularAnimation(from);
							var toAnimation = prepareRegularAnimation(to);

							var anchorAnimations = [];
							forEach(anchors, function (anchor) {
								var outElement = anchor['out'];
								var inElement = anchor['in'];
								var animator = prepareAnchoredAnimation(classes, outElement, inElement);
								if (animator) {
									anchorAnimations.push(animator);
								}
							});

							// no point in doing anything when there are no elements to animate
							if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;

							return {
								start: function () {
									var animationRunners = [];

									if (fromAnimation) {
										animationRunners.push(fromAnimation.start());
									}

									if (toAnimation) {
										animationRunners.push(toAnimation.start());
									}

									forEach(anchorAnimations, function (animation) {
										animationRunners.push(animation.start());
									});

									var runner = new $$AnimateRunner({
										end: endFn,
										cancel: endFn // CSS-driven animations cannot be cancelled, only ended
									});

									$$AnimateRunner.all(animationRunners, function (status) {
										runner.complete(status);
									});

									return runner;

									function endFn() {
										forEach(animationRunners, function (runner) {
											runner.end();
										});
									}
								}
							};
						}

						function prepareRegularAnimation(animationDetails) {
							var element = animationDetails.element;
							var options = animationDetails.options || {};

							if (animationDetails.structural) {
								// structural animations ensure that the CSS classes are always applied
								// before the detection starts.
								options.structural = options.applyClassesEarly = true;

								// we special case the leave animation since we want to ensure that
								// the element is removed as soon as the animation is over. Otherwise
								// a flicker might appear or the element may not be removed at all
								options.event = animationDetails.event;
								if (options.event === 'leave') {
									options.onDone = options.domOperation;
								}
							} else {
								options.event = null;
							}

							var animator = $animateCss(element, options);

							// the driver lookup code inside of $$animation attempts to spawn a
							// driver one by one until a driver returns a.$$willAnimate animator object.
							// $animateCss will always return an object, however, it will pass in
							// a flag as a hint as to whether an animation was detected or not
							return animator.$$willAnimate ? animator : null;
						}
					}];
			}];

			// TODO(matsko): use caching here to speed things up for detection
			// TODO(matsko): add documentation
			//  by the time...

			var $$AnimateJsProvider = ['$animateProvider', function ($animateProvider) {
				this.$get = ['$injector', '$$AnimateRunner', '$$rAFMutex', '$$jqLite',
					function ($injector, $$AnimateRunner, $$rAFMutex, $$jqLite) {

						var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
						// $animateJs(element, 'enter');
						return function (element, event, classes, options) {
							// the `classes` argument is optional and if it is not used
							// then the classes will be resolved from the element's className
							// property as well as options.addClass/options.removeClass.
							if (arguments.length === 3 && isObject(classes)) {
								options = classes;
								classes = null;
							}

							options = prepareAnimationOptions(options);
							if (!classes) {
								classes = element.attr('class') || '';
								if (options.addClass) {
									classes += ' ' + options.addClass;
								}
								if (options.removeClass) {
									classes += ' ' + options.removeClass;
								}
							}

							var classesToAdd = options.addClass;
							var classesToRemove = options.removeClass;

							// the lookupAnimations function returns a series of animation objects that are
							// matched up with one or more of the CSS classes. These animation objects are
							// defined via the module.animation factory function. If nothing is detected then
							// we don't return anything which then makes $animation query the next driver.
							var animations = lookupAnimations(classes);
							var before, after;
							if (animations.length) {
								var afterFn, beforeFn;
								if (event == 'leave') {
									beforeFn = 'leave';
									afterFn = 'afterLeave'; // TODO(matsko): get rid of this
								} else {
									beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);
									afterFn = event;
								}

								if (event !== 'enter' && event !== 'move') {
									before = packageAnimations(element, event, options, animations, beforeFn);
								}
								after = packageAnimations(element, event, options, animations, afterFn);
							}

							// no matching animations
							if (!before && !after) return;

							function applyOptions() {
								options.domOperation();
								applyAnimationClasses(element, options);
							}

							return {
								start: function () {
									var closeActiveAnimations;
									var chain = [];

									if (before) {
										chain.push(function (fn) {
											closeActiveAnimations = before(fn);
										});
									}

									if (chain.length) {
										chain.push(function (fn) {
											applyOptions();
											fn(true);
										});
									} else {
										applyOptions();
									}

									if (after) {
										chain.push(function (fn) {
											closeActiveAnimations = after(fn);
										});
									}

									var animationClosed = false;
									var runner = new $$AnimateRunner({
										end: function () {
											endAnimations();
										},
										cancel: function () {
											endAnimations(true);
										}
									});

									$$AnimateRunner.chain(chain, onComplete);
									return runner;

									function onComplete(success) {
										animationClosed = true;
										applyOptions();
										applyAnimationStyles(element, options);
										runner.complete(success);
									}

									function endAnimations(cancelled) {
										if (!animationClosed) {
											(closeActiveAnimations || noop)(cancelled);
											onComplete(cancelled);
										}
									}
								}
							};

							function executeAnimationFn(fn, element, event, options, onDone) {
								var args;
								switch (event) {
									case 'animate':
										args = [element, options.from, options.to, onDone];
										break;

									case 'setClass':
										args = [element, classesToAdd, classesToRemove, onDone];
										break;

									case 'addClass':
										args = [element, classesToAdd, onDone];
										break;

									case 'removeClass':
										args = [element, classesToRemove, onDone];
										break;

									default:
										args = [element, onDone];
										break;
								}

								args.push(options);

								var value = fn.apply(fn, args);
								if (value) {
									if (isFunction(value.start)) {
										value = value.start();
									}

									if (value instanceof $$AnimateRunner) {
										value.done(onDone);
									} else if (isFunction(value)) {
										// optional onEnd / onCancel callback
										return value;
									}
								}

								return noop;
							}

							function groupEventedAnimations(element, event, options, animations, fnName) {
								var operations = [];
								forEach(animations, function (ani) {
									var animation = ani[fnName];
									if (!animation) return;

									// note that all of these animations will run in parallel
									operations.push(function () {
										var runner;
										var endProgressCb;

										var resolved = false;
										var onAnimationComplete = function (rejected) {
											if (!resolved) {
												resolved = true;
												(endProgressCb || noop)(rejected);
												runner.complete(!rejected);
											}
										};

										runner = new $$AnimateRunner({
											end: function () {
												onAnimationComplete();
											},
											cancel: function () {
												onAnimationComplete(true);
											}
										});

										endProgressCb = executeAnimationFn(animation, element, event, options, function (result) {
											var cancelled = result === false;
											onAnimationComplete(cancelled);
										});

										return runner;
									});
								});

								return operations;
							}

							function packageAnimations(element, event, options, animations, fnName) {
								var operations = groupEventedAnimations(element, event, options, animations, fnName);
								if (operations.length === 0) {
									var a, b;
									if (fnName === 'beforeSetClass') {
										a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');
										b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');
									} else if (fnName === 'setClass') {
										a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');
										b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');
									}

									if (a) {
										operations = operations.concat(a);
									}
									if (b) {
										operations = operations.concat(b);
									}
								}

								if (operations.length === 0) return;

								// TODO(matsko): add documentation
								return function startAnimation(callback) {
									var runners = [];
									if (operations.length) {
										forEach(operations, function (animateFn) {
											runners.push(animateFn());
										});
									}

									runners.length ? $$AnimateRunner.all(runners, callback) : callback();

									return function endFn(reject) {
										forEach(runners, function (runner) {
											reject ? runner.cancel() : runner.end();
										});
									};
								};
							}
						};

						function lookupAnimations(classes) {
							classes = isArray(classes) ? classes : classes.split(' ');
							var matches = [], flagMap = {};
							for (var i = 0; i < classes.length; i++) {
								var klass = classes[i],
									animationFactory = $animateProvider.$$registeredAnimations[klass];
								if (animationFactory && !flagMap[klass]) {
									matches.push($injector.get(animationFactory));
									flagMap[klass] = true;
								}
							}
							return matches;
						}
					}];
			}];

			var $$AnimateJsDriverProvider = ['$$animationProvider', function ($$animationProvider) {
				$$animationProvider.drivers.push('$$animateJsDriver');
				this.$get = ['$$animateJs', '$$AnimateRunner', function ($$animateJs, $$AnimateRunner) {
					return function initDriverFn(animationDetails) {
						if (animationDetails.from && animationDetails.to) {
							var fromAnimation = prepareAnimation(animationDetails.from);
							var toAnimation = prepareAnimation(animationDetails.to);
							if (!fromAnimation && !toAnimation) return;

							return {
								start: function () {
									var animationRunners = [];

									if (fromAnimation) {
										animationRunners.push(fromAnimation.start());
									}

									if (toAnimation) {
										animationRunners.push(toAnimation.start());
									}

									$$AnimateRunner.all(animationRunners, done);

									var runner = new $$AnimateRunner({
										end: endFnFactory(),
										cancel: endFnFactory()
									});

									return runner;

									function endFnFactory() {
										return function () {
											forEach(animationRunners, function (runner) {
												// at this point we cannot cancel animations for groups just yet. 1.5+
												runner.end();
											});
										};
									}

									function done(status) {
										runner.complete(status);
									}
								}
							};
						} else {
							return prepareAnimation(animationDetails);
						}
					};

					function prepareAnimation(animationDetails) {
						// TODO(matsko): make sure to check for grouped animations and delegate down to normal animations
						var element = animationDetails.element;
						var event = animationDetails.event;
						var options = animationDetails.options;
						var classes = animationDetails.classes;
						return $$animateJs(element, event, classes, options);
					}
				}];
			}];

			var NG_ANIMATE_ATTR_NAME = 'data-ng-animate';
			var NG_ANIMATE_PIN_DATA = '$ngAnimatePin';
			var $$AnimateQueueProvider = ['$animateProvider', function ($animateProvider) {
				var PRE_DIGEST_STATE = 1;
				var RUNNING_STATE = 2;

				var rules = this.rules = {
					skip: [],
					cancel: [],
					join: []
				};

				function isAllowed(ruleType, element, currentAnimation, previousAnimation) {
					return rules[ruleType].some(function (fn) {
						return fn(element, currentAnimation, previousAnimation);
					});
				}

				function hasAnimationClasses(options, and) {
					options = options || {};
					var a = (options.addClass || '').length > 0;
					var b = (options.removeClass || '').length > 0;
					return and ? a && b : a || b;
				}

				rules.join.push(function (element, newAnimation, currentAnimation) {
					// if the new animation is class-based then we can just tack that on
					return !newAnimation.structural && hasAnimationClasses(newAnimation.options);
				});

				rules.skip.push(function (element, newAnimation, currentAnimation) {
					// there is no need to animate anything if no classes are being added and
					// there is no structural animation that will be triggered
					return !newAnimation.structural && !hasAnimationClasses(newAnimation.options);
				});

				rules.skip.push(function (element, newAnimation, currentAnimation) {
					// why should we trigger a new structural animation if the element will
					// be removed from the DOM anyway?
					return currentAnimation.event == 'leave' && newAnimation.structural;
				});

				rules.skip.push(function (element, newAnimation, currentAnimation) {
					// if there is a current animation then skip the class-based animation
					return currentAnimation.structural && !newAnimation.structural;
				});

				rules.cancel.push(function (element, newAnimation, currentAnimation) {
					// there can never be two structural animations running at the same time
					return currentAnimation.structural && newAnimation.structural;
				});

				rules.cancel.push(function (element, newAnimation, currentAnimation) {
					// if the previous animation is already running, but the new animation will
					// be triggered, but the new animation is structural
					return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
				});

				rules.cancel.push(function (element, newAnimation, currentAnimation) {
					var nO = newAnimation.options;
					var cO = currentAnimation.options;

					// if the exact same CSS class is added/removed then it's safe to cancel it
					return (nO.addClass && nO.addClass === cO.removeClass) || (nO.removeClass && nO.removeClass === cO.addClass);
				});

				this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',
					'$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite',
					function ($$rAF, $rootScope, $rootElement, $document, $$HashMap,
							  $$animation, $$AnimateRunner, $templateRequest, $$jqLite) {

						var activeAnimationsLookup = new $$HashMap();
						var disabledElementsLookup = new $$HashMap();

						var animationsEnabled = null;

						// Wait until all directive and route-related templates are downloaded and
						// compiled. The $templateRequest.totalPendingRequests variable keeps track of
						// all of the remote templates being currently downloaded. If there are no
						// templates currently downloading then the watcher will still fire anyway.
						var deregisterWatch = $rootScope.$watch(
							function () {
								return $templateRequest.totalPendingRequests === 0;
							},
							function (isEmpty) {
								if (!isEmpty) return;
								deregisterWatch();

								// Now that all templates have been downloaded, $animate will wait until
								// the post digest queue is empty before enabling animations. By having two
								// calls to $postDigest calls we can ensure that the flag is enabled at the
								// very end of the post digest queue. Since all of the animations in $animate
								// use $postDigest, it's important that the code below executes at the end.
								// This basically means that the page is fully downloaded and compiled before
								// any animations are triggered.
								$rootScope.$$postDigest(function () {
									$rootScope.$$postDigest(function () {
										// we check for null directly in the event that the application already called
										// .enabled() with whatever arguments that it provided it with
										if (animationsEnabled === null) {
											animationsEnabled = true;
										}
									});
								});
							}
						);

						var bodyElement = jqLite($document[0].body);

						var callbackRegistry = {};

						// remember that the classNameFilter is set during the provider/config
						// stage therefore we can optimize here and setup a helper function
						var classNameFilter = $animateProvider.classNameFilter();
						var isAnimatableClassName = !classNameFilter
							? function () {
							return true;
						}
							: function (className) {
							return classNameFilter.test(className);
						};

						var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

						function normalizeAnimationOptions(element, options) {
							return mergeAnimationOptions(element, options, {});
						}

						function findCallbacks(element, event) {
							var targetNode = getDomNode(element);

							var matches = [];
							var entries = callbackRegistry[event];
							if (entries) {
								forEach(entries, function (entry) {
									if (entry.node.contains(targetNode)) {
										matches.push(entry.callback);
									}
								});
							}

							return matches;
						}

						function triggerCallback(event, element, phase, data) {
							$$rAF(function () {
								forEach(findCallbacks(element, event), function (callback) {
									callback(element, phase, data);
								});
							});
						}

						return {
							on: function (event, container, callback) {
								var node = extractElementNode(container);
								callbackRegistry[event] = callbackRegistry[event] || [];
								callbackRegistry[event].push({
									node: node,
									callback: callback
								});
							},

							off: function (event, container, callback) {
								var entries = callbackRegistry[event];
								if (!entries) return;

								callbackRegistry[event] = arguments.length === 1
									? null
									: filterFromRegistry(entries, container, callback);

								function filterFromRegistry(list, matchContainer, matchCallback) {
									var containerNode = extractElementNode(matchContainer);
									return list.filter(function (entry) {
										var isMatch = entry.node === containerNode &&
											(!matchCallback || entry.callback === matchCallback);
										return !isMatch;
									});
								}
							},

							pin: function (element, parentElement) {
								assertArg(isElement(element), 'element', 'not an element');
								assertArg(isElement(parentElement), 'parentElement', 'not an element');
								element.data(NG_ANIMATE_PIN_DATA, parentElement);
							},

							push: function (element, event, options, domOperation) {
								options = options || {};
								options.domOperation = domOperation;
								return queueAnimation(element, event, options);
							},

							// this method has four signatures:
							//  () - global getter
							//  (bool) - global setter
							//  (element) - element getter
							//  (element, bool) - element setter<F37>
							enabled: function (element, bool) {
								var argCount = arguments.length;

								if (argCount === 0) {
									// () - Global getter
									bool = !!animationsEnabled;
								} else {
									var hasElement = isElement(element);

									if (!hasElement) {
										// (bool) - Global setter
										bool = animationsEnabled = !!element;
									} else {
										var node = getDomNode(element);
										var recordExists = disabledElementsLookup.get(node);

										if (argCount === 1) {
											// (element) - Element getter
											bool = !recordExists;
										} else {
											// (element, bool) - Element setter
											bool = !!bool;
											if (!bool) {
												disabledElementsLookup.put(node, true);
											} else if (recordExists) {
												disabledElementsLookup.remove(node);
											}
										}
									}
								}

								return bool;
							}
						};

						function queueAnimation(element, event, options) {
							var node, parent;
							element = stripCommentsFromElement(element);
							if (element) {
								node = getDomNode(element);
								parent = element.parent();
							}

							options = prepareAnimationOptions(options);

							// we create a fake runner with a working promise.
							// These methods will become available after the digest has passed
							var runner = new $$AnimateRunner();

							// there are situations where a directive issues an animation for
							// a jqLite wrapper that contains only comment nodes... If this
							// happens then there is no way we can perform an animation
							if (!node) {
								close();
								return runner;
							}

							if (isArray(options.addClass)) {
								options.addClass = options.addClass.join(' ');
							}

							if (isArray(options.removeClass)) {
								options.removeClass = options.removeClass.join(' ');
							}

							if (options.from && !isObject(options.from)) {
								options.from = null;
							}

							if (options.to && !isObject(options.to)) {
								options.to = null;
							}

							var className = [node.className, options.addClass, options.removeClass].join(' ');
							if (!isAnimatableClassName(className)) {
								close();
								return runner;
							}

							var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

							// this is a hard disable of all animations for the application or on
							// the element itself, therefore  there is no need to continue further
							// past this point if not enabled
							var skipAnimations = !animationsEnabled || disabledElementsLookup.get(node);
							var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};
							var hasExistingAnimation = !!existingAnimation.state;

							// there is no point in traversing the same collection of parent ancestors if a followup
							// animation will be run on the same element that already did all that checking work
							if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {
								skipAnimations = !areAnimationsAllowed(element, parent, event);
							}

							if (skipAnimations) {
								close();
								return runner;
							}

							if (isStructural) {
								closeChildAnimations(element);
							}

							var newAnimation = {
								structural: isStructural,
								element: element,
								event: event,
								close: close,
								options: options,
								runner: runner
							};

							if (hasExistingAnimation) {
								var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);
								if (skipAnimationFlag) {
									if (existingAnimation.state === RUNNING_STATE) {
										close();
										return runner;
									} else {
										mergeAnimationOptions(element, existingAnimation.options, options);
										return existingAnimation.runner;
									}
								}

								var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);
								if (cancelAnimationFlag) {
									if (existingAnimation.state === RUNNING_STATE) {
										// this will end the animation right away and it is safe
										// to do so since the animation is already running and the
										// runner callback code will run in async
										existingAnimation.runner.end();
									} else if (existingAnimation.structural) {
										// this means that the animation is queued into a digest, but
										// hasn't started yet. Therefore it is safe to run the close
										// method which will call the runner methods in async.
										existingAnimation.close();
									} else {
										// this will merge the existing animation options into this new follow-up animation
										mergeAnimationOptions(element, newAnimation.options, existingAnimation.options);
									}
								} else {
									// a joined animation means that this animation will take over the existing one
									// so an example would involve a leave animation taking over an enter. Then when
									// the postDigest kicks in the enter will be ignored.
									var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);
									if (joinAnimationFlag) {
										if (existingAnimation.state === RUNNING_STATE) {
											normalizeAnimationOptions(element, options);
										} else {
											event = newAnimation.event = existingAnimation.event;
											options = mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);
											return runner;
										}
									}
								}
							} else {
								// normalization in this case means that it removes redundant CSS classes that
								// already exist (addClass) or do not exist (removeClass) on the element
								normalizeAnimationOptions(element, options);
							}

							// when the options are merged and cleaned up we may end up not having to do
							// an animation at all, therefore we should check this before issuing a post
							// digest callback. Structural animations will always run no matter what.
							var isValidAnimation = newAnimation.structural;
							if (!isValidAnimation) {
								// animate (from/to) can be quickly checked first, otherwise we check if any classes are present
								isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)
									|| hasAnimationClasses(newAnimation.options);
							}

							if (!isValidAnimation) {
								close();
								clearElementAnimationState(element);
								return runner;
							}

							if (isStructural) {
								closeParentClassBasedAnimations(parent);
							}

							// the counter keeps track of cancelled animations
							var counter = (existingAnimation.counter || 0) + 1;
							newAnimation.counter = counter;

							markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);

							$rootScope.$$postDigest(function () {
								var animationDetails = activeAnimationsLookup.get(node);
								var animationCancelled = !animationDetails;
								animationDetails = animationDetails || {};

								// if addClass/removeClass is called before something like enter then the
								// registered parent element may not be present. The code below will ensure
								// that a final value for parent element is obtained
								var parentElement = element.parent() || [];

								// animate/structural/class-based animations all have requirements. Otherwise there
								// is no point in performing an animation. The parent node must also be set.
								var isValidAnimation = parentElement.length > 0
									&& (animationDetails.event === 'animate'
									|| animationDetails.structural
									|| hasAnimationClasses(animationDetails.options));

								// this means that the previous animation was cancelled
								// even if the follow-up animation is the same event
								if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
									// if another animation did not take over then we need
									// to make sure that the domOperation and options are
									// handled accordingly
									if (animationCancelled) {
										applyAnimationClasses(element, options);
										applyAnimationStyles(element, options);
									}

									// if the event changed from something like enter to leave then we do
									// it, otherwise if it's the same then the end result will be the same too
									if (animationCancelled || (isStructural && animationDetails.event !== event)) {
										options.domOperation();
										runner.end();
									}

									// in the event that the element animation was not cancelled or a follow-up animation
									// isn't allowed to animate from here then we need to clear the state of the element
									// so that any future animations won't read the expired animation data.
									if (!isValidAnimation) {
										clearElementAnimationState(element);
									}

									return;
								}

								// this combined multiple class to addClass / removeClass into a setClass event
								// so long as a structural event did not take over the animation
								event = !animationDetails.structural && hasAnimationClasses(animationDetails.options, true)
									? 'setClass'
									: animationDetails.event;

								if (animationDetails.structural) {
									closeParentClassBasedAnimations(parentElement);
								}

								markElementAnimationState(element, RUNNING_STATE);
								var realRunner = $$animation(element, event, animationDetails.options);
								realRunner.done(function (status) {
									close(!status);
									var animationDetails = activeAnimationsLookup.get(node);
									if (animationDetails && animationDetails.counter === counter) {
										clearElementAnimationState(getDomNode(element));
									}
									notifyProgress(runner, event, 'close', {});
								});

								// this will update the runner's flow-control events based on
								// the `realRunner` object.
								runner.setHost(realRunner);
								notifyProgress(runner, event, 'start', {});
							});

							return runner;

							function notifyProgress(runner, event, phase, data) {
								triggerCallback(event, element, phase, data);
								runner.progress(event, phase, data);
							}

							function close(reject) { // jshint ignore:line
								applyAnimationClasses(element, options);
								applyAnimationStyles(element, options);
								options.domOperation();
								runner.complete(!reject);
							}
						}

						function closeChildAnimations(element) {
							var node = getDomNode(element);
							var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');
							forEach(children, function (child) {
								var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));
								var animationDetails = activeAnimationsLookup.get(child);
								switch (state) {
									case RUNNING_STATE:
										animationDetails.runner.end();
									/* falls through */
									case PRE_DIGEST_STATE:
										if (animationDetails) {
											activeAnimationsLookup.remove(child);
										}
										break;
								}
							});
						}

						function clearElementAnimationState(element) {
							var node = getDomNode(element);
							node.removeAttribute(NG_ANIMATE_ATTR_NAME);
							activeAnimationsLookup.remove(node);
						}

						function isMatchingElement(nodeOrElmA, nodeOrElmB) {
							return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);
						}

						function closeParentClassBasedAnimations(startingElement) {
							var parentNode = getDomNode(startingElement);
							do {
								if (!parentNode || parentNode.nodeType !== ELEMENT_NODE) break;

								var animationDetails = activeAnimationsLookup.get(parentNode);
								if (animationDetails) {
									examineParentAnimation(parentNode, animationDetails);
								}

								parentNode = parentNode.parentNode;
							} while (true);

							// since animations are detected from CSS classes, we need to flush all parent
							// class-based animations so that the parent classes are all present for child
							// animations to properly function (otherwise any CSS selectors may not work)
							function examineParentAnimation(node, animationDetails) {
								// enter/leave/move always have priority
								if (animationDetails.structural || !hasAnimationClasses(animationDetails.options)) return;

								if (animationDetails.state === RUNNING_STATE) {
									animationDetails.runner.end();
								}
								clearElementAnimationState(node);
							}
						}

						function areAnimationsAllowed(element, parentElement, event) {
							var bodyElementDetected = false;
							var rootElementDetected = false;
							var parentAnimationDetected = false;
							var animateChildren;

							var parentHost = element.data(NG_ANIMATE_PIN_DATA);
							if (parentHost) {
								parentElement = parentHost;
							}

							while (parentElement && parentElement.length) {
								if (!rootElementDetected) {
									// angular doesn't want to attempt to animate elements outside of the application
									// therefore we need to ensure that the rootElement is an ancestor of the current element
									rootElementDetected = isMatchingElement(parentElement, $rootElement);
								}

								var parentNode = parentElement[0];
								if (parentNode.nodeType !== ELEMENT_NODE) {
									// no point in inspecting the #document element
									break;
								}

								var details = activeAnimationsLookup.get(parentNode) || {};
								// either an enter, leave or move animation will commence
								// therefore we can't allow any animations to take place
								// but if a parent animation is class-based then that's ok
								if (!parentAnimationDetected) {
									parentAnimationDetected = details.structural || disabledElementsLookup.get(parentNode);
								}

								if (isUndefined(animateChildren) || animateChildren === true) {
									var value = parentElement.data(NG_ANIMATE_CHILDREN_DATA);
									if (isDefined(value)) {
										animateChildren = value;
									}
								}

								// there is no need to continue traversing at this point
								if (parentAnimationDetected && animateChildren === false) break;

								if (!rootElementDetected) {
									// angular doesn't want to attempt to animate elements outside of the application
									// therefore we need to ensure that the rootElement is an ancestor of the current element
									rootElementDetected = isMatchingElement(parentElement, $rootElement);
									if (!rootElementDetected) {
										parentHost = parentElement.data(NG_ANIMATE_PIN_DATA);
										if (parentHost) {
											parentElement = parentHost;
										}
									}
								}

								if (!bodyElementDetected) {
									// we also need to ensure that the element is or will be apart of the body element
									// otherwise it is pointless to even issue an animation to be rendered
									bodyElementDetected = isMatchingElement(parentElement, bodyElement);
								}

								parentElement = parentElement.parent();
							}

							var allowAnimation = !parentAnimationDetected || animateChildren;
							return allowAnimation && rootElementDetected && bodyElementDetected;
						}

						function markElementAnimationState(element, state, details) {
							details = details || {};
							details.state = state;

							var node = getDomNode(element);
							node.setAttribute(NG_ANIMATE_ATTR_NAME, state);

							var oldValue = activeAnimationsLookup.get(node);
							var newValue = oldValue
								? extend(oldValue, details)
								: details;
							activeAnimationsLookup.put(node, newValue);
						}
					}];
			}];

			var $$rAFMutexFactory = ['$$rAF', function ($$rAF) {
				return function () {
					var passed = false;
					$$rAF(function () {
						passed = true;
					});
					return function (fn) {
						passed ? fn() : $$rAF(fn);
					};
				};
			}];

			var $$AnimateRunnerFactory = ['$q', '$$rAFMutex', function ($q, $$rAFMutex) {
				var INITIAL_STATE = 0;
				var DONE_PENDING_STATE = 1;
				var DONE_COMPLETE_STATE = 2;

				AnimateRunner.chain = function (chain, callback) {
					var index = 0;

					next();
					function next() {
						if (index === chain.length) {
							callback(true);
							return;
						}

						chain[index](function (response) {
							if (response === false) {
								callback(false);
								return;
							}
							index++;
							next();
						});
					}
				};

				AnimateRunner.all = function (runners, callback) {
					var count = 0;
					var status = true;
					forEach(runners, function (runner) {
						runner.done(onProgress);
					});

					function onProgress(response) {
						status = status && response;
						if (++count === runners.length) {
							callback(status);
						}
					}
				};

				function AnimateRunner(host) {
					this.setHost(host);

					this._doneCallbacks = [];
					this._runInAnimationFrame = $$rAFMutex();
					this._state = 0;
				}

				AnimateRunner.prototype = {
					setHost: function (host) {
						this.host = host || {};
					},

					done: function (fn) {
						if (this._state === DONE_COMPLETE_STATE) {
							fn();
						} else {
							this._doneCallbacks.push(fn);
						}
					},

					progress: noop,

					getPromise: function () {
						if (!this.promise) {
							var self = this;
							this.promise = $q(function (resolve, reject) {
								self.done(function (status) {
									status === false ? reject() : resolve();
								});
							});
						}
						return this.promise;
					},

					then: function (resolveHandler, rejectHandler) {
						return this.getPromise().then(resolveHandler, rejectHandler);
					},

					'catch': function (handler) {
						return this.getPromise()['catch'](handler);
					},

					'finally': function (handler) {
						return this.getPromise()['finally'](handler);
					},

					pause: function () {
						if (this.host.pause) {
							this.host.pause();
						}
					},

					resume: function () {
						if (this.host.resume) {
							this.host.resume();
						}
					},

					end: function () {
						if (this.host.end) {
							this.host.end();
						}
						this._resolve(true);
					},

					cancel: function () {
						if (this.host.cancel) {
							this.host.cancel();
						}
						this._resolve(false);
					},

					complete: function (response) {
						var self = this;
						if (self._state === INITIAL_STATE) {
							self._state = DONE_PENDING_STATE;
							self._runInAnimationFrame(function () {
								self._resolve(response);
							});
						}
					},

					_resolve: function (response) {
						if (this._state !== DONE_COMPLETE_STATE) {
							forEach(this._doneCallbacks, function (fn) {
								fn(response);
							});
							this._doneCallbacks.length = 0;
							this._state = DONE_COMPLETE_STATE;
						}
					}
				};

				return AnimateRunner;
			}];

			var $$AnimationProvider = ['$animateProvider', function ($animateProvider) {
				var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';

				var drivers = this.drivers = [];

				var RUNNER_STORAGE_KEY = '$$animationRunner';

				function setRunner(element, runner) {
					element.data(RUNNER_STORAGE_KEY, runner);
				}

				function removeRunner(element) {
					element.removeData(RUNNER_STORAGE_KEY);
				}

				function getRunner(element) {
					return element.data(RUNNER_STORAGE_KEY);
				}

				this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$rAFScheduler',
					function ($$jqLite, $rootScope, $injector, $$AnimateRunner, $$rAFScheduler) {

						var animationQueue = [];
						var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

						var totalPendingClassBasedAnimations = 0;
						var totalActiveClassBasedAnimations = 0;
						var classBasedAnimationsQueue = [];

						// TODO(matsko): document the signature in a better way
						return function (element, event, options) {
							options = prepareAnimationOptions(options);
							var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

							// there is no animation at the current moment, however
							// these runner methods will get later updated with the
							// methods leading into the driver's end/cancel methods
							// for now they just stop the animation from starting
							var runner = new $$AnimateRunner({
								end: function () {
									close();
								},
								cancel: function () {
									close(true);
								}
							});

							if (!drivers.length) {
								close();
								return runner;
							}

							setRunner(element, runner);

							var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));
							var tempClasses = options.tempClasses;
							if (tempClasses) {
								classes += ' ' + tempClasses;
								options.tempClasses = null;
							}

							var classBasedIndex;
							if (!isStructural) {
								classBasedIndex = totalPendingClassBasedAnimations;
								totalPendingClassBasedAnimations += 1;
							}

							animationQueue.push({
								// this data is used by the postDigest code and passed into
								// the driver step function
								element: element,
								classes: classes,
								event: event,
								classBasedIndex: classBasedIndex,
								structural: isStructural,
								options: options,
								beforeStart: beforeStart,
								close: close
							});

							element.on('$destroy', handleDestroyedElement);

							// we only want there to be one function called within the post digest
							// block. This way we can group animations for all the animations that
							// were apart of the same postDigest flush call.
							if (animationQueue.length > 1) return runner;

							$rootScope.$$postDigest(function () {
								totalActiveClassBasedAnimations = totalPendingClassBasedAnimations;
								totalPendingClassBasedAnimations = 0;
								classBasedAnimationsQueue.length = 0;

								var animations = [];
								forEach(animationQueue, function (entry) {
									// the element was destroyed early on which removed the runner
									// form its storage. This means we can't animate this element
									// at all and it already has been closed due to destruction.
									if (getRunner(entry.element)) {
										animations.push(entry);
									}
								});

								// now any future animations will be in another postDigest
								animationQueue.length = 0;

								forEach(groupAnimations(animations), function (animationEntry) {
									if (animationEntry.structural) {
										triggerAnimationStart();
									} else {
										classBasedAnimationsQueue.push({
											node: getDomNode(animationEntry.element),
											fn: triggerAnimationStart
										});

										if (animationEntry.classBasedIndex === totalActiveClassBasedAnimations - 1) {
											// we need to sort each of the animations in order of parent to child
											// relationships. This ensures that the child classes are applied at the
											// right time.
											classBasedAnimationsQueue = classBasedAnimationsQueue.sort(function (a, b) {
												return b.node.contains(a.node);
											}).map(function (entry) {
												return entry.fn;
											});

											$$rAFScheduler(classBasedAnimationsQueue);
										}
									}

									function triggerAnimationStart() {
										// it's important that we apply the `ng-animate` CSS class and the
										// temporary classes before we do any driver invoking since these
										// CSS classes may be required for proper CSS detection.
										animationEntry.beforeStart();

										var startAnimationFn, closeFn = animationEntry.close;

										// in the event that the element was removed before the digest runs or
										// during the RAF sequencing then we should not trigger the animation.
										var targetElement = animationEntry.anchors
											? (animationEntry.from.element || animationEntry.to.element)
											: animationEntry.element;

										if (getRunner(targetElement) && getDomNode(targetElement).parentNode) {
											var operation = invokeFirstDriver(animationEntry);
											if (operation) {
												startAnimationFn = operation.start;
											}
										}

										if (!startAnimationFn) {
											closeFn();
										} else {
											var animationRunner = startAnimationFn();
											animationRunner.done(function (status) {
												closeFn(!status);
											});
											updateAnimationRunners(animationEntry, animationRunner);
										}
									}
								});
							});

							return runner;

							// TODO(matsko): change to reference nodes
							function getAnchorNodes(node) {
								var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';
								var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)
									? [node]
									: node.querySelectorAll(SELECTOR);
								var anchors = [];
								forEach(items, function (node) {
									var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
									if (attr && attr.length) {
										anchors.push(node);
									}
								});
								return anchors;
							}

							function groupAnimations(animations) {
								var preparedAnimations = [];
								var refLookup = {};
								forEach(animations, function (animation, index) {
									var element = animation.element;
									var node = getDomNode(element);
									var event = animation.event;
									var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;
									var anchorNodes = animation.structural ? getAnchorNodes(node) : [];

									if (anchorNodes.length) {
										var direction = enterOrMove ? 'to' : 'from';

										forEach(anchorNodes, function (anchor) {
											var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
											refLookup[key] = refLookup[key] || {};
											refLookup[key][direction] = {
												animationID: index,
												element: jqLite(anchor)
											};
										});
									} else {
										preparedAnimations.push(animation);
									}
								});

								var usedIndicesLookup = {};
								var anchorGroups = {};
								forEach(refLookup, function (operations, key) {
									var from = operations.from;
									var to = operations.to;

									if (!from || !to) {
										// only one of these is set therefore we can't have an
										// anchor animation since all three pieces are required
										var index = from ? from.animationID : to.animationID;
										var indexKey = index.toString();
										if (!usedIndicesLookup[indexKey]) {
											usedIndicesLookup[indexKey] = true;
											preparedAnimations.push(animations[index]);
										}
										return;
									}

									var fromAnimation = animations[from.animationID];
									var toAnimation = animations[to.animationID];
									var lookupKey = from.animationID.toString();
									if (!anchorGroups[lookupKey]) {
										var group = anchorGroups[lookupKey] = {
											structural: true,
											beforeStart: function () {
												fromAnimation.beforeStart();
												toAnimation.beforeStart();
											},
											close: function () {
												fromAnimation.close();
												toAnimation.close();
											},
											classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
											from: fromAnimation,
											to: toAnimation,
											anchors: [] // TODO(matsko): change to reference nodes
										};

										// the anchor animations require that the from and to elements both have at least
										// one shared CSS class which effictively marries the two elements together to use
										// the same animation driver and to properly sequence the anchor animation.
										if (group.classes.length) {
											preparedAnimations.push(group);
										} else {
											preparedAnimations.push(fromAnimation);
											preparedAnimations.push(toAnimation);
										}
									}

									anchorGroups[lookupKey].anchors.push({
										'out': from.element, 'in': to.element
									});
								});

								return preparedAnimations;
							}

							function cssClassesIntersection(a, b) {
								a = a.split(' ');
								b = b.split(' ');
								var matches = [];

								for (var i = 0; i < a.length; i++) {
									var aa = a[i];
									if (aa.substring(0, 3) === 'ng-') continue;

									for (var j = 0; j < b.length; j++) {
										if (aa === b[j]) {
											matches.push(aa);
											break;
										}
									}
								}

								return matches.join(' ');
							}

							function invokeFirstDriver(animationDetails) {
								// we loop in reverse order since the more general drivers (like CSS and JS)
								// may attempt more elements, but custom drivers are more particular
								for (var i = drivers.length - 1; i >= 0; i--) {
									var driverName = drivers[i];
									if (!$injector.has(driverName)) continue; // TODO(matsko): remove this check

									var factory = $injector.get(driverName);
									var driver = factory(animationDetails);
									if (driver) {
										return driver;
									}
								}
							}

							function beforeStart() {
								element.addClass(NG_ANIMATE_CLASSNAME);
								if (tempClasses) {
									$$jqLite.addClass(element, tempClasses);
								}
							}

							function updateAnimationRunners(animation, newRunner) {
								if (animation.from && animation.to) {
									update(animation.from.element);
									update(animation.to.element);
								} else {
									update(animation.element);
								}

								function update(element) {
									getRunner(element).setHost(newRunner);
								}
							}

							function handleDestroyedElement() {
								var runner = getRunner(element);
								if (runner && (event !== 'leave' || !options.$$domOperationFired)) {
									runner.end();
								}
							}

							function close(rejected) { // jshint ignore:line
								element.off('$destroy', handleDestroyedElement);
								removeRunner(element);

								applyAnimationClasses(element, options);
								applyAnimationStyles(element, options);
								options.domOperation();

								if (tempClasses) {
									$$jqLite.removeClass(element, tempClasses);
								}

								element.removeClass(NG_ANIMATE_CLASSNAME);
								runner.complete(!rejected);
							}
						};
					}];
			}];

			/* global angularAnimateModule: true,

			 $$rAFMutexFactory,
			 $$rAFSchedulerFactory,
			 $$AnimateChildrenDirective,
			 $$AnimateRunnerFactory,
			 $$AnimateQueueProvider,
			 $$AnimationProvider,
			 $AnimateCssProvider,
			 $$AnimateCssDriverProvider,
			 $$AnimateJsProvider,
			 $$AnimateJsDriverProvider,
			 */

			/**
			 * @ngdoc module
			 * @name ngAnimate
			 * @description
			 *
			 * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via
			 * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` then the animation hooks are enabled for an Angular app.
			 *
			 * <div doc-module-components="ngAnimate"></div>
			 *
			 * # Usage
			 * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based
			 * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For
			 * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within
			 * the HTML element that the animation will be triggered on.
			 *
			 * ## Directive Support
			 * The following directives are "animation aware":
			 *
			 * | Directive                                                                                                | Supported Animations                                                     |
			 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
			 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
			 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
			 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
			 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
			 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
			 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
			 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
			 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
			 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
			 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
			 *
			 * (More information can be found by visiting each the documentation associated with each directive.)
			 *
			 * ## CSS-based Animations
			 *
			 * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML
			 * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.
			 *
			 * The example below shows how an `enter` animation can be made possible on a element using `ng-if`:
			 *
			 * ```html
			 * <div ng-if="bool" class="fade">
			 *    Fade me in out
			 * </div>
			 * <button ng-click="bool=true">Fade In!</button>
			 * <button ng-click="bool=false">Fade Out!</button>
			 * ```
			 *
			 * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:
			 *
			 * ```css
			 * /&#42; The starting CSS styles for the enter animation &#42;/
			 * .fade.ng-enter {
	 *   transition:0.5s linear all;
	 *   opacity:0;
	 * }
			 *
			 * /&#42; The finishing CSS styles for the enter animation &#42;/
			 * .fade.ng-enter.ng-enter-active {
	 *   opacity:1;
	 * }
			 * ```
			 *
			 * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two
			 * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition
			 * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.
			 *
			 * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:
			 *
			 * ```css
			 * /&#42; now the element will fade out before it is removed from the DOM &#42;/
			 * .fade.ng-leave {
	 *   transition:0.5s linear all;
	 *   opacity:1;
	 * }
			 * .fade.ng-leave.ng-leave-active {
	 *   opacity:0;
	 * }
			 * ```
			 *
			 * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:
			 *
			 * ```css
			 * /&#42; there is no need to define anything inside of the destination
			 * CSS class since the keyframe will take charge of the animation &#42;/
			 * .fade.ng-leave {
	 *   animation: my_fade_animation 0.5s linear;
	 *   -webkit-animation: my_fade_animation 0.5s linear;
	 * }
			 *
			 * @keyframes my_fade_animation {
	 *   from { opacity:1; }
	 *   to { opacity:0; }
	 * }
			 *
			 * @-webkit-keyframes my_fade_animation {
	 *   from { opacity:1; }
	 *   to { opacity:0; }
	 * }
			 * ```
			 *
			 * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.
			 *
			 * ### CSS Class-based Animations
			 *
			 * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different
			 * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added
			 * and removed.
			 *
			 * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:
			 *
			 * ```html
			 * <div ng-show="bool" class="fade">
			 *   Show and hide me
			 * </div>
			 * <button ng-click="bool=true">Toggle</button>
			 *
			 * <style>
			 * .fade.ng-hide {
	 *   transition:0.5s linear all;
	 *   opacity:0;
	 * }
			 * </style>
			 * ```
			 *
			 * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since
			 * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.
			 *
			 * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation
			 * with CSS styles.
			 *
			 * ```html
			 * <div ng-class="{on:onOff}" class="highlight">
			 *   Highlight this box
			 * </div>
			 * <button ng-click="onOff=!onOff">Toggle</button>
			 *
			 * <style>
			 * .highlight {
	 *   transition:0.5s linear all;
	 * }
			 * .highlight.on-add {
	 *   background:white;
	 * }
			 * .highlight.on {
	 *   background:yellow;
	 * }
			 * .highlight.on-remove {
	 *   background:black;
	 * }
			 * </style>
			 * ```
			 *
			 * We can also make use of CSS keyframes by placing them within the CSS classes.
			 *
			 *
			 * ### CSS Staggering Animations
			 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
			 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
			 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
			 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
			 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
			 *
			 * ```css
			 * .my-animation.ng-enter {
	 *   /&#42; standard transition code &#42;/
	 *   transition: 1s linear all;
	 *   opacity:0;
	 * }
			 * .my-animation.ng-enter-stagger {
	 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
	 *   transition-delay: 0.1s;
	 *
	 *   /&#42; in case the stagger doesn't work then the duration value
	 *    must be set to 0 to avoid an accidental CSS inheritance &#42;/
	 *   transition-duration: 0s;
	 * }
			 * .my-animation.ng-enter.ng-enter-active {
	 *   /&#42; standard transition styles &#42;/
	 *   opacity:1;
	 * }
			 * ```
			 *
			 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
			 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
			 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
			 * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.
			 *
			 * The following code will issue the **ng-leave-stagger** event on the element provided:
			 *
			 * ```js
			 * var kids = parent.children();
			 *
			 * $animate.leave(kids[0]); //stagger index=0
			 * $animate.leave(kids[1]); //stagger index=1
			 * $animate.leave(kids[2]); //stagger index=2
			 * $animate.leave(kids[3]); //stagger index=3
			 * $animate.leave(kids[4]); //stagger index=4
			 *
			 * window.requestAnimationFrame(function() {
	 *   //stagger has reset itself
	 *   $animate.leave(kids[5]); //stagger index=0
	 *   $animate.leave(kids[6]); //stagger index=1
	 *
	 *   $scope.$digest();
	 * });
			 * ```
			 *
			 * Stagger animations are currently only supported within CSS-defined animations.
			 *
			 * ### The `ng-animate` CSS class
			 *
			 * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.
			 * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).
			 *
			 * Therefore, animations can be applied to an element using this temporary class directly via CSS.
			 *
			 * ```css
			 * .zipper.ng-animate {
	 *   transition:0.5s linear all;
	 * }
			 * .zipper.ng-enter {
	 *   opacity:0;
	 * }
			 * .zipper.ng-enter.ng-enter-active {
	 *   opacity:1;
	 * }
			 * .zipper.ng-leave {
	 *   opacity:1;
	 * }
			 * .zipper.ng-leave.ng-leave-active {
	 *   opacity:0;
	 * }
			 * ```
			 *
			 * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove
			 * the CSS class once an animation has completed.)
			 *
			 *
			 * ## JavaScript-based Animations
			 *
			 * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared
			 * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the
			 * `module.animation()` module function we can register the ainmation.
			 *
			 * Let's see an example of a enter/leave animation using `ngRepeat`:
			 *
			 * ```html
			 * <div ng-repeat="item in items" class="slide">
			 *   {{ item }}
			 * </div>
			 * ```
			 *
			 * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:
			 *
			 * ```js
			 * myModule.animation('.slide', [function() {
	 *   return {
	 *     // make note that other events (like addClass/removeClass)
	 *     // have different function input parameters
	 *     enter: function(element, doneFn) {
	 *       jQuery(element).fadeIn(1000, doneFn);
	 *
	 *       // remember to call doneFn so that angular
	 *       // knows that the animation has concluded
	 *     },
	 *
	 *     move: function(element, doneFn) {
	 *       jQuery(element).fadeIn(1000, doneFn);
	 *     },
	 *
	 *     leave: function(element, doneFn) {
	 *       jQuery(element).fadeOut(1000, doneFn);
	 *     }
	 *   }
	 * }]
			 * ```
			 *
			 * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as
			 * greensock.js and velocity.js.
			 *
			 * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define
			 * our animations inside of the same registered animation, however, the function input arguments are a bit different:
			 *
			 * ```html
			 * <div ng-class="color" class="colorful">
			 *   this box is moody
			 * </div>
			 * <button ng-click="color='red'">Change to red</button>
			 * <button ng-click="color='blue'">Change to blue</button>
			 * <button ng-click="color='green'">Change to green</button>
			 * ```
			 *
			 * ```js
			 * myModule.animation('.colorful', [function() {
	 *   return {
	 *     addClass: function(element, className, doneFn) {
	 *       // do some cool animation and call the doneFn
	 *     },
	 *     removeClass: function(element, className, doneFn) {
	 *       // do some cool animation and call the doneFn
	 *     },
	 *     setClass: function(element, addedClass, removedClass, doneFn) {
	 *       // do some cool animation and call the doneFn
	 *     }
	 *   }
	 * }]
			 * ```
			 *
			 * ## CSS + JS Animations Together
			 *
			 * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,
			 * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking
			 * charge of the animation**:
			 *
			 * ```html
			 * <div ng-if="bool" class="slide">
			 *   Slide in and out
			 * </div>
			 * ```
			 *
			 * ```js
			 * myModule.animation('.slide', [function() {
	 *   return {
	 *     enter: function(element, doneFn) {
	 *       jQuery(element).slideIn(1000, doneFn);
	 *     }
	 *   }
	 * }]
			 * ```
			 *
			 * ```css
			 * .slide.ng-enter {
	 *   transition:0.5s linear all;
	 *   transform:translateY(-100px);
	 * }
			 * .slide.ng-enter.ng-enter-active {
	 *   transform:translateY(0);
	 * }
			 * ```
			 *
			 * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the
			 * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from
			 * our own JS-based animation code:
			 *
			 * ```js
			 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element, doneFn) {
	*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.
	 *       var runner = $animateCss(element, {
	 *         event: 'enter',
	 *         structural: true
	 *       }).start();
	*        runner.done(doneFn);
	 *     }
	 *   }
	 * }]
			 * ```
			 *
			 * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.
			 *
			 * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or
			 * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that
			 * data into `$animateCss` directly:
			 *
			 * ```js
			 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element, doneFn) {
	 *       var runner = $animateCss(element, {
	 *         event: 'enter',
	 *         addClass: 'maroon-setting',
	 *         from: { height:0 },
	 *         to: { height: 200 }
	 *       }).start();
	 *
	 *       runner.done(doneFn);
	 *     }
	 *   }
	 * }]
			 * ```
			 *
			 * Now we can fill in the rest via our transition CSS code:
			 *
			 * ```css
			 * /&#42; the transition tells ngAnimate to make the animation happen &#42;/
			 * .slide.ng-enter { transition:0.5s linear all; }
			 *
			 * /&#42; this extra CSS class will be absorbed into the transition
			 * since the $animateCss code is adding the class &#42;/
			 * .maroon-setting { background:red; }
			 * ```
			 *
			 * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.
			 *
			 * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.
			 *
			 * ## Animation Anchoring (via `ng-animate-ref`)
			 *
			 * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between
			 * structural areas of an application (like views) by pairing up elements using an attribute
			 * called `ng-animate-ref`.
			 *
			 * Let's say for example we have two views that are managed by `ng-view` and we want to show
			 * that there is a relationship between two components situated in within these views. By using the
			 * `ng-animate-ref` attribute we can identify that the two components are paired together and we
			 * can then attach an animation, which is triggered when the view changes.
			 *
			 * Say for example we have the following template code:
			 *
			 * ```html
			 * <!-- index.html -->
			 * <div ng-view class="view-animation">
			 * </div>
			 *
			 * <!-- home.html -->
			 * <a href="#/banner-page">
			 *   <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
			 * </a>
			 *
			 * <!-- banner-page.html -->
			 * <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
			 * ```
			 *
			 * Now, when the view changes (once the link is clicked), ngAnimate will examine the
			 * HTML contents to see if there is a match reference between any components in the view
			 * that is leaving and the view that is entering. It will scan both the view which is being
			 * removed (leave) and inserted (enter) to see if there are any paired DOM elements that
			 * contain a matching ref value.
			 *
			 * The two images match since they share the same ref value. ngAnimate will now create a
			 * transport element (which is a clone of the first image element) and it will then attempt
			 * to animate to the position of the second image element in the next view. For the animation to
			 * work a special CSS class called `ng-anchor` will be added to the transported element.
			 *
			 * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then
			 * ngAnimate will handle the entire transition for us as well as the addition and removal of
			 * any changes of CSS classes between the elements:
			 *
			 * ```css
			 * .banner.ng-anchor {
	 *   /&#42; this animation will last for 1 second since there are
	 *          two phases to the animation (an `in` and an `out` phase) &#42;/
	 *   transition:0.5s linear all;
	 * }
			 * ```
			 *
			 * We also **must** include animations for the views that are being entered and removed
			 * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).
			 *
			 * ```css
			 * .view-animation.ng-enter, .view-animation.ng-leave {
	 *   transition:0.5s linear all;
	 *   position:fixed;
	 *   left:0;
	 *   top:0;
	 *   width:100%;
	 * }
			 * .view-animation.ng-enter {
	 *   transform:translateX(100%);
	 * }
			 * .view-animation.ng-leave,
			 * .view-animation.ng-enter.ng-enter-active {
	 *   transform:translateX(0%);
	 * }
			 * .view-animation.ng-leave.ng-leave-active {
	 *   transform:translateX(-100%);
	 * }
			 * ```
			 *
			 * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:
			 * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away
			 * from its origin. Once that animation is over then the `in` stage occurs which animates the
			 * element to its destination. The reason why there are two animations is to give enough time
			 * for the enter animation on the new element to be ready.
			 *
			 * The example above sets up a transition for both the in and out phases, but we can also target the out or
			 * in phases directly via `ng-anchor-out` and `ng-anchor-in`.
			 *
			 * ```css
			 * .banner.ng-anchor-out {
	 *   transition: 0.5s linear all;
	 *
	 *   /&#42; the scale will be applied during the out animation,
	 *          but will be animated away when the in animation runs &#42;/
	 *   transform: scale(1.2);
	 * }
			 *
			 * .banner.ng-anchor-in {
	 *   transition: 1s linear all;
	 * }
			 * ```
			 *
			 *
			 *
			 *
			 * ### Anchoring Demo
			 *
			 <example module="anchoringExample"
			 name="anchoringExample"
			 id="anchoringExample"
			 deps="angular-animate.js;angular-route.js"
			 animations="true">
			 <file name="index.html">
			 <a href="#/">Home</a>
			 <hr />
			 <div class="view-container">
			 <div ng-view class="view"></div>
			 </div>
			 </file>
			 <file name="script.js">
			 angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])
			 .config(['$routeProvider', function($routeProvider) {
	          $routeProvider.when('/', {
	            templateUrl: 'home.html',
	            controller: 'HomeController as home'
	          });
	          $routeProvider.when('/profile/:id', {
	            templateUrl: 'profile.html',
	            controller: 'ProfileController as profile'
	          });
	        }])
			 .run(['$rootScope', function($rootScope) {
	          $rootScope.records = [
	            { id:1, title: "Miss Beulah Roob" },
	            { id:2, title: "Trent Morissette" },
	            { id:3, title: "Miss Ava Pouros" },
	            { id:4, title: "Rod Pouros" },
	            { id:5, title: "Abdul Rice" },
	            { id:6, title: "Laurie Rutherford Sr." },
	            { id:7, title: "Nakia McLaughlin" },
	            { id:8, title: "Jordon Blanda DVM" },
	            { id:9, title: "Rhoda Hand" },
	            { id:10, title: "Alexandrea Sauer" }
	          ];
	        }])
			 .controller('HomeController', [function() {
	          //empty
	        }])
			 .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {
	          var index = parseInt($routeParams.id, 10);
	          var record = $rootScope.records[index - 1];
	
	          this.title = record.title;
	          this.id = record.id;
	        }]);
			 </file>
			 <file name="home.html">
			 <h2>Welcome to the home page</h1>
			 <p>Please click on an element</p>
			 <a class="record"
			 ng-href="#/profile/{{ record.id }}"
			 ng-animate-ref="{{ record.id }}"
			 ng-repeat="record in records">
			 {{ record.title }}
			 </a>
			 </file>
			 <file name="profile.html">
			 <div class="profile record" ng-animate-ref="{{ profile.id }}">
			 {{ profile.title }}
			 </div>
			 </file>
			 <file name="animations.css">
			 .record {
	        display:block;
	        font-size:20px;
	      }
			 .profile {
	        background:black;
	        color:white;
	        font-size:100px;
	      }
			 .view-container {
	        position:relative;
	      }
			 .view-container > .view.ng-animate {
	        position:absolute;
	        top:0;
	        left:0;
	        width:100%;
	        min-height:500px;
	      }
			 .view.ng-enter, .view.ng-leave,
			 .record.ng-anchor {
	        transition:0.5s linear all;
	      }
			 .view.ng-enter {
	        transform:translateX(100%);
	      }
			 .view.ng-enter.ng-enter-active, .view.ng-leave {
	        transform:translateX(0%);
	      }
			 .view.ng-leave.ng-leave-active {
	        transform:translateX(-100%);
	      }
			 .record.ng-anchor-out {
	        background:red;
	      }
			 </file>
			 </example>
			 *
			 * ### How is the element transported?
			 *
			 * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting
			 * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element
			 * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The
			 * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match
			 * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied
			 * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class
			 * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element
			 * will become visible since the shim class will be removed.
			 *
			 * ### How is the morphing handled?
			 *
			 * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out
			 * what CSS classes differ between the starting element and the destination element. These different CSS classes
			 * will be added/removed on the anchor element and a transition will be applied (the transition that is provided
			 * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will
			 * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that
			 * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since
			 * the cloned element is placed inside of root element which is likely close to the body element).
			 *
			 * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.
			 *
			 *
			 * ## Using $animate in your directive code
			 *
			 * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?
			 * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's
			 * imagine we have a greeting box that shows and hides itself when the data changes
			 *
			 * ```html
			 * <greeting-box active="onOrOff">Hi there</greeting-box>
			 * ```
			 *
			 * ```js
			 * ngModule.directive('greetingBox', ['$animate', function($animate) {
	 *   return function(scope, element, attrs) {
	 *     attrs.$observe('active', function(value) {
	 *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');
	 *     });
	 *   });
	 * }]);
			 * ```
			 *
			 * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element
			 * in our HTML code then we can trigger a CSS or JS animation to happen.
			 *
			 * ```css
			 * /&#42; normally we would create a CSS class to reference on the element &#42;/
			 * greeting-box.on { transition:0.5s linear all; background:green; color:white; }
			 * ```
			 *
			 * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's
			 * possible be sure to visit the {@link ng.$animate $animate service API page}.
			 *
			 *
			 * ### Preventing Collisions With Third Party Libraries
			 *
			 * Some third-party frameworks place animation duration defaults across many element or className
			 * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which
			 * is expecting actual animations on these elements and has to wait for their completion.
			 *
			 * You can prevent this unwanted behavior by using a prefix on all your animation classes:
			 *
			 * ```css
			 * /&#42; prefixed with animate- &#42;/
			 * .animate-fade-add.animate-fade-add-active {
	 *   transition:1s linear all;
	 *   opacity:0;
	 * }
			 * ```
			 *
			 * You then configure `$animate` to enforce this prefix:
			 *
			 * ```js
			 * $animateProvider.classNameFilter(/animate-/);
			 * ```
			 *
			 * This also may provide your application with a speed boost since only specific elements containing CSS class prefix
			 * will be evaluated for animation when any DOM changes occur in the application.
			 *
			 * ## Callbacks and Promises
			 *
			 * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger
			 * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has
			 * ended by chaining onto the returned promise that animation method returns.
			 *
			 * ```js
			 * // somewhere within the depths of the directive
			 * $animate.enter(element, parent).then(function() {
	 *   //the animation has completed
	 * });
			 * ```
			 *
			 * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case
			 * anymore.)
			 *
			 * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering
			 * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view
			 * routing controller to hook into that:
			 *
			 * ```js
			 * ngModule.controller('HomePageController', ['$animate', function($animate) {
	 *   $animate.on('enter', ngViewElement, function(element) {
	 *     // the animation for this route has completed
	 *   }]);
	 * }])
			 * ```
			 *
			 * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)
			 */

			/**
			 * @ngdoc service
			 * @name $animate
			 * @kind object
			 *
			 * @description
			 * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.
			 *
			 * Click here {@link ng.$animate $animate to learn more about animations with `$animate`}.
			 */
			angular.module('ngAnimate', [])
				.directive('ngAnimateChildren', $$AnimateChildrenDirective)

				.factory('$$rAFMutex', $$rAFMutexFactory)
				.factory('$$rAFScheduler', $$rAFSchedulerFactory)

				.factory('$$AnimateRunner', $$AnimateRunnerFactory)

				.provider('$$animateQueue', $$AnimateQueueProvider)
				.provider('$$animation', $$AnimationProvider)

				.provider('$animateCss', $AnimateCssProvider)
				.provider('$$animateCssDriver', $$AnimateCssDriverProvider)

				.provider('$$animateJs', $$AnimateJsProvider)
				.provider('$$animateJsDriver', $$AnimateJsDriverProvider);


		})(window, window.angular);


		/***/
	},
	/* 421 */
	/***/ function (module, exports, __webpack_require__) {

		__webpack_require__(422);
		module.exports = 'ngMessages';


		/***/
	},
	/* 422 */
	/***/ function (module, exports) {

		/**
		 * @license AngularJS v1.4.3
		 * (c) 2010-2015 Google, Inc. http://angularjs.org
		 * License: MIT
		 */
		(function (window, angular, undefined) {
			'use strict';

			/* jshint ignore:start */
			// this code is in the core, but not in angular-messages.js
			var isArray = angular.isArray;
			var forEach = angular.forEach;
			var isString = angular.isString;
			var jqLite = angular.element;
			/* jshint ignore:end */

			/**
			 * @ngdoc module
			 * @name ngMessages
			 * @description
			 *
			 * The `ngMessages` module provides enhanced support for displaying messages within templates
			 * (typically within forms or when rendering message objects that return key/value data).
			 * Instead of relying on JavaScript code and/or complex ng-if statements within your form template to
			 * show and hide error messages specific to the state of an input field, the `ngMessages` and
			 * `ngMessage` directives are designed to handle the complexity, inheritance and priority
			 * sequencing based on the order of how the messages are defined in the template.
			 *
			 * Currently, the ngMessages module only contains the code for the `ngMessages`, `ngMessagesInclude`
			 * `ngMessage` and `ngMessageExp` directives.
			 *
			 * # Usage
			 * The `ngMessages` directive listens on a key/value collection which is set on the ngMessages attribute.
			 * Since the {@link ngModel ngModel} directive exposes an `$error` object, this error object can be
			 * used with `ngMessages` to display control error messages in an easier way than with just regular angular
			 * template directives.
			 *
			 * ```html
			 * <form name="myForm">
			 *   <label>
			 *     Enter text:
			 *     <input type="text" ng-model="field" name="myField" required minlength="5" />
			 *   </label>
			 *   <div ng-messages="myForm.myField.$error" role="alert">
			 *     <div ng-message="required">You did not enter a field</div>
			 *     <div ng-message="minlength, maxlength">
			 *       Your email must be between 5 and 100 characters long
			 *     </div>
			 *   </div>
			 * </form>
			 * ```
			 *
			 * Now whatever key/value entries are present within the provided object (in this case `$error`) then
			 * the ngMessages directive will render the inner first ngMessage directive (depending if the key values
			 * match the attribute value present on each ngMessage directive). In other words, if your errors
			 * object contains the following data:
			 *
			 * ```javascript
			 * <!-- keep in mind that ngModel automatically sets these error flags -->
			 * myField.$error = { minlength : true, required : true };
			 * ```
			 *
			 * Then the `required` message will be displayed first. When required is false then the `minlength` message
			 * will be displayed right after (since these messages are ordered this way in the template HTML code).
			 * The prioritization of each message is determined by what order they're present in the DOM.
			 * Therefore, instead of having custom JavaScript code determine the priority of what errors are
			 * present before others, the presentation of the errors are handled within the template.
			 *
			 * By default, ngMessages will only display one error at a time. However, if you wish to display all
			 * messages then the `ng-messages-multiple` attribute flag can be used on the element containing the
			 * ngMessages directive to make this happen.
			 *
			 * ```html
			 * <!-- attribute-style usage -->
			 * <div ng-messages="myForm.myField.$error" ng-messages-multiple>...</div>
			 *
			 * <!-- element-style usage -->
			 * <ng-messages for="myForm.myField.$error" multiple>...</ng-messages>
			 * ```
			 *
			 * ## Reusing and Overriding Messages
			 * In addition to prioritization, ngMessages also allows for including messages from a remote or an inline
			 * template. This allows for generic collection of messages to be reused across multiple parts of an
			 * application.
			 *
			 * ```html
			 * <script type="text/ng-template" id="error-messages">
			 *   <div ng-message="required">This field is required</div>
			 *   <div ng-message="minlength">This field is too short</div>
			 * </script>
			 *
			 * <div ng-messages="myForm.myField.$error" role="alert">
			 *   <div ng-messages-include="error-messages"></div>
			 * </div>
			 * ```
			 *
			 * However, including generic messages may not be useful enough to match all input fields, therefore,
			 * `ngMessages` provides the ability to override messages defined in the remote template by redefining
			 * them within the directive container.
			 *
			 * ```html
			 * <!-- a generic template of error messages known as "my-custom-messages" -->
			 * <script type="text/ng-template" id="my-custom-messages">
			 *   <div ng-message="required">This field is required</div>
			 *   <div ng-message="minlength">This field is too short</div>
			 * </script>
			 *
			 * <form name="myForm">
			 *   <label>
			 *     Email address
			 *     <input type="email"
			 *            id="email"
			 *            name="myEmail"
			 *            ng-model="email"
			 *            minlength="5"
			 *            required />
			 *   </label>
			 *   <!-- any ng-message elements that appear BEFORE the ng-messages-include will
			 *        override the messages present in the ng-messages-include template -->
			 *   <div ng-messages="myForm.myEmail.$error" role="alert">
			 *     <!-- this required message has overridden the template message -->
			 *     <div ng-message="required">You did not enter your email address</div>
			 *
			 *     <!-- this is a brand new message and will appear last in the prioritization -->
			 *     <div ng-message="email">Your email address is invalid</div>
			 *
			 *     <!-- and here are the generic error messages -->
			 *     <div ng-messages-include="my-custom-messages"></div>
			 *   </div>
			 * </form>
			 * ```
			 *
			 * In the example HTML code above the message that is set on required will override the corresponding
			 * required message defined within the remote template. Therefore, with particular input fields (such
			 * email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied
			 * while more generic messages can be used to handle other, more general input errors.
			 *
			 * ## Dynamic Messaging
			 * ngMessages also supports using expressions to dynamically change key values. Using arrays and
			 * repeaters to list messages is also supported. This means that the code below will be able to
			 * fully adapt itself and display the appropriate message when any of the expression data changes:
			 *
			 * ```html
			 * <form name="myForm">
			 *   <label>
			 *     Email address
			 *     <input type="email"
			 *            name="myEmail"
			 *            ng-model="email"
			 *            minlength="5"
			 *            required />
			 *   </label>
			 *   <div ng-messages="myForm.myEmail.$error" role="alert">
			 *     <div ng-message="required">You did not enter your email address</div>
			 *     <div ng-repeat="errorMessage in errorMessages">
			 *       <!-- use ng-message-exp for a message whose key is given by an expression -->
			 *       <div ng-message-exp="errorMessage.type">{{ errorMessage.text }}</div>
			 *     </div>
			 *   </div>
			 * </form>
			 * ```
			 *
			 * The `errorMessage.type` expression can be a string value or it can be an array so
			 * that multiple errors can be associated with a single error message:
			 *
			 * ```html
			 *   <label>
			 *     Email address
			 *     <input type="email"
			 *            ng-model="data.email"
			 *            name="myEmail"
			 *            ng-minlength="5"
			 *            ng-maxlength="100"
			 *            required />
			 *   </label>
			 *   <div ng-messages="myForm.myEmail.$error" role="alert">
			 *     <div ng-message-exp="'required'">You did not enter your email address</div>
			 *     <div ng-message-exp="['minlength', 'maxlength']">
			 *       Your email must be between 5 and 100 characters long
			 *     </div>
			 *   </div>
			 * ```
			 *
			 * Feel free to use other structural directives such as ng-if and ng-switch to further control
			 * what messages are active and when. Be careful, if you place ng-message on the same element
			 * as these structural directives, Angular may not be able to determine if a message is active
			 * or not. Therefore it is best to place the ng-message on a child element of the structural
			 * directive.
			 *
			 * ```html
			 * <div ng-messages="myForm.myEmail.$error" role="alert">
			 *   <div ng-if="showRequiredError">
			 *     <div ng-message="required">Please enter something</div>
			 *   </div>
			 * </div>
			 * ```
			 *
			 * ## Animations
			 * If the `ngAnimate` module is active within the application then the `ngMessages`, `ngMessage` and
			 * `ngMessageExp` directives will trigger animations whenever any messages are added and removed from
			 * the DOM by the `ngMessages` directive.
			 *
			 * Whenever the `ngMessages` directive contains one or more visible messages then the `.ng-active` CSS
			 * class will be added to the element. The `.ng-inactive` CSS class will be applied when there are no
			 * messages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can
			 * hook into the animations whenever these classes are added/removed.
			 *
			 * Let's say that our HTML code for our messages container looks like so:
			 *
			 * ```html
			 * <div ng-messages="myMessages" class="my-messages" role="alert">
			 *   <div ng-message="alert" class="some-message">...</div>
			 *   <div ng-message="fail" class="some-message">...</div>
			 * </div>
			 * ```
			 *
			 * Then the CSS animation code for the message container looks like so:
			 *
			 * ```css
			 * .my-messages {
	 *   transition:1s linear all;
	 * }
			 * .my-messages.ng-active {
	 *   // messages are visible
	 * }
			 * .my-messages.ng-inactive {
	 *   // messages are hidden
	 * }
			 * ```
			 *
			 * Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter
			 * and leave animation is triggered for each particular element bound to the `ngMessage` directive.
			 *
			 * Therefore, the CSS code for the inner messages looks like so:
			 *
			 * ```css
			 * .some-message {
	 *   transition:1s linear all;
	 * }
			 *
			 * .some-message.ng-enter {}
			 * .some-message.ng-enter.ng-enter-active {}
			 *
			 * .some-message.ng-leave {}
			 * .some-message.ng-leave.ng-leave-active {}
			 * ```
			 *
			 * {@link ngAnimate Click here} to learn how to use JavaScript animations or to learn more about ngAnimate.
			 */
			angular.module('ngMessages', [])

			/**
			 * @ngdoc directive
			 * @module ngMessages
			 * @name ngMessages
			 * @restrict AE
			 *
			 * @description
			 * `ngMessages` is a directive that is designed to show and hide messages based on the state
			 * of a key/value object that it listens on. The directive itself complements error message
			 * reporting with the `ngModel` $error object (which stores a key/value state of validation errors).
			 *
			 * `ngMessages` manages the state of internal messages within its container element. The internal
			 * messages use the `ngMessage` directive and will be inserted/removed from the page depending
			 * on if they're present within the key/value object. By default, only one message will be displayed
			 * at a time and this depends on the prioritization of the messages within the template. (This can
			 * be changed by using the `ng-messages-multiple` or `multiple` attribute on the directive container.)
			 *
			 * A remote template can also be used to promote message reusability and messages can also be
			 * overridden.
			 *
			 * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
			 *
			 * @usage
			 * ```html
			 * <!-- using attribute directives -->
			 * <ANY ng-messages="expression" role="alert">
			 *   <ANY ng-message="stringValue">...</ANY>
			 *   <ANY ng-message="stringValue1, stringValue2, ...">...</ANY>
			 *   <ANY ng-message-exp="expressionValue">...</ANY>
			 * </ANY>
			 *
			 * <!-- or by using element directives -->
			 * <ng-messages for="expression" role="alert">
			 *   <ng-message when="stringValue">...</ng-message>
			 *   <ng-message when="stringValue1, stringValue2, ...">...</ng-message>
			 *   <ng-message when-exp="expressionValue">...</ng-message>
			 * </ng-messages>
			 * ```
			 *
			 * @param {string} ngMessages an angular expression evaluating to a key/value object
			 *                 (this is typically the $error object on an ngModel instance).
			 * @param {string=} ngMessagesMultiple|multiple when set, all messages will be displayed with true
			 *
			 * @example
			 * <example name="ngMessages-directive" module="ngMessagesExample"
			 *          deps="angular-messages.js"
			 *          animations="true" fixBase="true">
			 *   <file name="index.html">
			 *     <form name="myForm">
			 *       <label>
			 *         Enter your name:
			 *         <input type="text"
			 *                name="myName"
			 *                ng-model="name"
			 *                ng-minlength="5"
			 *                ng-maxlength="20"
			 *                required />
			 *       </label>
			 *       <pre>myForm.myName.$error = {{ myForm.myName.$error | json }}</pre>
			 *
			 *       <div ng-messages="myForm.myName.$error" style="color:maroon" role="alert">
			 *         <div ng-message="required">You did not enter a field</div>
			 *         <div ng-message="minlength">Your field is too short</div>
			 *         <div ng-message="maxlength">Your field is too long</div>
			 *       </div>
			 *     </form>
			 *   </file>
			 *   <file name="script.js">
			 *     angular.module('ngMessagesExample', ['ngMessages']);
			 *   </file>
			 * </example>
			 */
				.directive('ngMessages', ['$animate', function ($animate) {
					var ACTIVE_CLASS = 'ng-active';
					var INACTIVE_CLASS = 'ng-inactive';

					return {
						require: 'ngMessages',
						restrict: 'AE',
						controller: ['$element', '$scope', '$attrs', function ($element, $scope, $attrs) {
							var ctrl = this;
							var latestKey = 0;

							var messages = this.messages = {};
							var renderLater, cachedCollection;

							this.render = function (collection) {
								collection = collection || {};

								renderLater = false;
								cachedCollection = collection;

								// this is true if the attribute is empty or if the attribute value is truthy
								var multiple = isAttrTruthy($scope, $attrs.ngMessagesMultiple) ||
									isAttrTruthy($scope, $attrs.multiple);

								var unmatchedMessages = [];
								var matchedKeys = {};
								var messageItem = ctrl.head;
								var messageFound = false;
								var totalMessages = 0;

								// we use != instead of !== to allow for both undefined and null values
								while (messageItem != null) {
									totalMessages++;
									var messageCtrl = messageItem.message;

									var messageUsed = false;
									if (!messageFound) {
										forEach(collection, function (value, key) {
											if (!messageUsed && truthy(value) && messageCtrl.test(key)) {
												// this is to prevent the same error name from showing up twice
												if (matchedKeys[key]) return;
												matchedKeys[key] = true;

												messageUsed = true;
												messageCtrl.attach();
											}
										});
									}

									if (messageUsed) {
										// unless we want to display multiple messages then we should
										// set a flag here to avoid displaying the next message in the list
										messageFound = !multiple;
									} else {
										unmatchedMessages.push(messageCtrl);
									}

									messageItem = messageItem.next;
								}

								forEach(unmatchedMessages, function (messageCtrl) {
									messageCtrl.detach();
								});

								unmatchedMessages.length !== totalMessages
									? $animate.setClass($element, ACTIVE_CLASS, INACTIVE_CLASS)
									: $animate.setClass($element, INACTIVE_CLASS, ACTIVE_CLASS);
							};

							$scope.$watchCollection($attrs.ngMessages || $attrs['for'], ctrl.render);

							this.reRender = function () {
								if (!renderLater) {
									renderLater = true;
									$scope.$evalAsync(function () {
										if (renderLater) {
											cachedCollection && ctrl.render(cachedCollection);
										}
									});
								}
							};

							this.register = function (comment, messageCtrl) {
								var nextKey = latestKey.toString();
								messages[nextKey] = {
									message: messageCtrl
								};
								insertMessageNode($element[0], comment, nextKey);
								comment.$$ngMessageNode = nextKey;
								latestKey++;

								ctrl.reRender();
							};

							this.deregister = function (comment) {
								var key = comment.$$ngMessageNode;
								delete comment.$$ngMessageNode;
								removeMessageNode($element[0], comment, key);
								delete messages[key];
								ctrl.reRender();
							};

							function findPreviousMessage(parent, comment) {
								var prevNode = comment;
								var parentLookup = [];
								while (prevNode && prevNode !== parent) {
									var prevKey = prevNode.$$ngMessageNode;
									if (prevKey && prevKey.length) {
										return messages[prevKey];
									}

									// dive deeper into the DOM and examine its children for any ngMessage
									// comments that may be in an element that appears deeper in the list
									if (prevNode.childNodes.length && parentLookup.indexOf(prevNode) == -1) {
										parentLookup.push(prevNode);
										prevNode = prevNode.childNodes[prevNode.childNodes.length - 1];
									} else {
										prevNode = prevNode.previousSibling || prevNode.parentNode;
									}
								}
							}

							function insertMessageNode(parent, comment, key) {
								var messageNode = messages[key];
								if (!ctrl.head) {
									ctrl.head = messageNode;
								} else {
									var match = findPreviousMessage(parent, comment);
									if (match) {
										messageNode.next = match.next;
										match.next = messageNode;
									} else {
										messageNode.next = ctrl.head;
										ctrl.head = messageNode;
									}
								}
							}

							function removeMessageNode(parent, comment, key) {
								var messageNode = messages[key];

								var match = findPreviousMessage(parent, comment);
								if (match) {
									match.next = messageNode.next;
								} else {
									ctrl.head = messageNode.next;
								}
							}
						}]
					};

					function isAttrTruthy(scope, attr) {
						return (isString(attr) && attr.length === 0) || //empty attribute
							truthy(scope.$eval(attr));
					}

					function truthy(val) {
						return isString(val) ? val.length : !!val;
					}
				}])

			/**
			 * @ngdoc directive
			 * @name ngMessagesInclude
			 * @restrict AE
			 * @scope
			 *
			 * @description
			 * `ngMessagesInclude` is a directive with the purpose to import existing ngMessage template
			 * code from a remote template and place the downloaded template code into the exact spot
			 * that the ngMessagesInclude directive is placed within the ngMessages container. This allows
			 * for a series of pre-defined messages to be reused and also allows for the developer to
			 * determine what messages are overridden due to the placement of the ngMessagesInclude directive.
			 *
			 * @usage
			 * ```html
			 * <!-- using attribute directives -->
			 * <ANY ng-messages="expression" role="alert">
			 *   <ANY ng-messages-include="remoteTplString">...</ANY>
			 * </ANY>
			 *
			 * <!-- or by using element directives -->
			 * <ng-messages for="expression" role="alert">
			 *   <ng-messages-include src="expressionValue1">...</ng-messages-include>
			 * </ng-messages>
			 * ```
			 *
			 * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
			 *
			 * @param {string} ngMessagesInclude|src a string value corresponding to the remote template.
			 */
				.directive('ngMessagesInclude',
				['$templateRequest', '$document', '$compile', function ($templateRequest, $document, $compile) {

					return {
						restrict: 'AE',
						require: '^^ngMessages', // we only require this for validation sake
						link: function ($scope, element, attrs) {
							var src = attrs.ngMessagesInclude || attrs.src;
							$templateRequest(src).then(function (html) {
								$compile(html)($scope, function (contents) {
									element.after(contents);

									// the anchor is placed for debugging purposes
									var anchor = jqLite($document[0].createComment(' ngMessagesInclude: ' + src + ' '));
									element.after(anchor);

									// we don't want to pollute the DOM anymore by keeping an empty directive element
									element.remove();
								});
							});
						}
					};
				}])

			/**
			 * @ngdoc directive
			 * @name ngMessage
			 * @restrict AE
			 * @scope
			 *
			 * @description
			 * `ngMessage` is a directive with the purpose to show and hide a particular message.
			 * For `ngMessage` to operate, a parent `ngMessages` directive on a parent DOM element
			 * must be situated since it determines which messages are visible based on the state
			 * of the provided key/value map that `ngMessages` listens on.
			 *
			 * More information about using `ngMessage` can be found in the
			 * {@link module:ngMessages `ngMessages` module documentation}.
			 *
			 * @usage
			 * ```html
			 * <!-- using attribute directives -->
			 * <ANY ng-messages="expression" role="alert">
			 *   <ANY ng-message="stringValue">...</ANY>
			 *   <ANY ng-message="stringValue1, stringValue2, ...">...</ANY>
			 * </ANY>
			 *
			 * <!-- or by using element directives -->
			 * <ng-messages for="expression" role="alert">
			 *   <ng-message when="stringValue">...</ng-message>
			 *   <ng-message when="stringValue1, stringValue2, ...">...</ng-message>
			 * </ng-messages>
			 * ```
			 *
			 * @param {expression} ngMessage|when a string value corresponding to the message key.
			 */
				.directive('ngMessage', ngMessageDirectiveFactory('AE'))


			/**
			 * @ngdoc directive
			 * @name ngMessageExp
			 * @restrict AE
			 * @scope
			 *
			 * @description
			 * `ngMessageExp` is a directive with the purpose to show and hide a particular message.
			 * For `ngMessageExp` to operate, a parent `ngMessages` directive on a parent DOM element
			 * must be situated since it determines which messages are visible based on the state
			 * of the provided key/value map that `ngMessages` listens on.
			 *
			 * @usage
			 * ```html
			 * <!-- using attribute directives -->
			 * <ANY ng-messages="expression">
			 *   <ANY ng-message-exp="expressionValue">...</ANY>
			 * </ANY>
			 *
			 * <!-- or by using element directives -->
			 * <ng-messages for="expression">
			 *   <ng-message when-exp="expressionValue">...</ng-message>
			 * </ng-messages>
			 * ```
			 *
			 * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
			 *
			 * @param {expression} ngMessageExp|whenExp an expression value corresponding to the message key.
			 */
				.directive('ngMessageExp', ngMessageDirectiveFactory('A'));

			function ngMessageDirectiveFactory(restrict) {
				return ['$animate', function ($animate) {
					return {
						restrict: 'AE',
						transclude: 'element',
						terminal: true,
						require: '^^ngMessages',
						link: function (scope, element, attrs, ngMessagesCtrl, $transclude) {
							var commentNode = element[0];

							var records;
							var staticExp = attrs.ngMessage || attrs.when;
							var dynamicExp = attrs.ngMessageExp || attrs.whenExp;
							var assignRecords = function (items) {
								records = items
									? (isArray(items)
									? items
									: items.split(/[\s,]+/))
									: null;
								ngMessagesCtrl.reRender();
							};

							if (dynamicExp) {
								assignRecords(scope.$eval(dynamicExp));
								scope.$watchCollection(dynamicExp, assignRecords);
							} else {
								assignRecords(staticExp);
							}

							var currentElement, messageCtrl;
							ngMessagesCtrl.register(commentNode, messageCtrl = {
								test: function (name) {
									return contains(records, name);
								},
								attach: function () {
									if (!currentElement) {
										$transclude(scope, function (elm) {
											$animate.enter(elm, null, element);
											currentElement = elm;

											// in the event that the parent element is destroyed
											// by any other structural directive then it's time
											// to deregister the message from the controller
											currentElement.on('$destroy', function () {
												if (currentElement) {
													ngMessagesCtrl.deregister(commentNode);
													messageCtrl.detach();
												}
											});
										});
									}
								},
								detach: function () {
									if (currentElement) {
										var elm = currentElement;
										currentElement = null;
										$animate.leave(elm);
									}
								}
							});
						}
					};
				}];

				function contains(collection, key) {
					if (collection) {
						return isArray(collection)
							? collection.indexOf(key) >= 0
							: collection.hasOwnProperty(key);
					}
				}
			}


		})(window, window.angular);


		/***/
	},
	/* 423 */
	/***/ function (module, exports, __webpack_require__) {

		__webpack_require__(424);
		module.exports = 'ui.bootstrap';


		/***/
	},
	/* 424 */
	/***/ function (module, exports) {

		/*
		 * angular-ui-bootstrap
		 * http://angular-ui.github.io/bootstrap/

		 * Version: 0.13.2 - 2015-08-02
		 * License: MIT
		 */
		angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.collapse", "ui.bootstrap.accordion", "ui.bootstrap.alert", "ui.bootstrap.bindHtml", "ui.bootstrap.buttons", "ui.bootstrap.carousel", "ui.bootstrap.dateparser", "ui.bootstrap.position", "ui.bootstrap.datepicker", "ui.bootstrap.dropdown", "ui.bootstrap.modal", "ui.bootstrap.pagination", "ui.bootstrap.tooltip", "ui.bootstrap.popover", "ui.bootstrap.progressbar", "ui.bootstrap.rating", "ui.bootstrap.tabs", "ui.bootstrap.timepicker", "ui.bootstrap.transition", "ui.bootstrap.typeahead"]);
		angular.module("ui.bootstrap.tpls", ["template/accordion/accordion-group.html", "template/accordion/accordion.html", "template/alert/alert.html", "template/carousel/carousel.html", "template/carousel/slide.html", "template/datepicker/datepicker.html", "template/datepicker/day.html", "template/datepicker/month.html", "template/datepicker/popup.html", "template/datepicker/year.html", "template/modal/backdrop.html", "template/modal/window.html", "template/pagination/pager.html", "template/pagination/pagination.html", "template/tooltip/tooltip-html-popup.html", "template/tooltip/tooltip-html-unsafe-popup.html", "template/tooltip/tooltip-popup.html", "template/tooltip/tooltip-template-popup.html", "template/popover/popover-html.html", "template/popover/popover-template.html", "template/popover/popover.html", "template/progressbar/bar.html", "template/progressbar/progress.html", "template/progressbar/progressbar.html", "template/rating/rating.html", "template/tabs/tab.html", "template/tabs/tabset.html", "template/timepicker/timepicker.html", "template/typeahead/typeahead-match.html", "template/typeahead/typeahead-popup.html"]);
		angular.module('ui.bootstrap.collapse', [])

			.directive('collapse', ['$animate', function ($animate) {

				return {
					link: function (scope, element, attrs) {
						function expand() {
							element.removeClass('collapse')
								.addClass('collapsing')
								.attr('aria-expanded', true)
								.attr('aria-hidden', false);

							$animate.addClass(element, 'in', {
								to: {height: element[0].scrollHeight + 'px'}
							}).then(expandDone);
						}

						function expandDone() {
							element.removeClass('collapsing');
							element.css({height: 'auto'});
						}

						function collapse() {
							if (!element.hasClass('collapse') && !element.hasClass('in')) {
								return collapseDone();
							}

							element
								// IMPORTANT: The height must be set before adding "collapsing" class.
								// Otherwise, the browser attempts to animate from height 0 (in
								// collapsing class) to the given height here.
								.css({height: element[0].scrollHeight + 'px'})
								// initially all panel collapse have the collapse class, this removal
								// prevents the animation from jumping to collapsed state
								.removeClass('collapse')
								.addClass('collapsing')
								.attr('aria-expanded', false)
								.attr('aria-hidden', true);

							$animate.removeClass(element, 'in', {
								to: {height: '0'}
							}).then(collapseDone);
						}

						function collapseDone() {
							element.css({height: '0'}); // Required so that collapse works when animation is disabled
							element.removeClass('collapsing');
							element.addClass('collapse');
						}

						scope.$watch(attrs.collapse, function (shouldCollapse) {
							if (shouldCollapse) {
								collapse();
							} else {
								expand();
							}
						});
					}
				};
			}]);

		angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse'])

			.constant('accordionConfig', {
				closeOthers: true
			})

			.controller('AccordionController', ['$scope', '$attrs', 'accordionConfig', function ($scope, $attrs, accordionConfig) {

				// This array keeps track of the accordion groups
				this.groups = [];

				// Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
				this.closeOthers = function (openGroup) {
					var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
					if (closeOthers) {
						angular.forEach(this.groups, function (group) {
							if (group !== openGroup) {
								group.isOpen = false;
							}
						});
					}
				};

				// This is called from the accordion-group directive to add itself to the accordion
				this.addGroup = function (groupScope) {
					var that = this;
					this.groups.push(groupScope);

					groupScope.$on('$destroy', function (event) {
						that.removeGroup(groupScope);
					});
				};

				// This is called from the accordion-group directive when to remove itself
				this.removeGroup = function (group) {
					var index = this.groups.indexOf(group);
					if (index !== -1) {
						this.groups.splice(index, 1);
					}
				};

			}])

			// The accordion directive simply sets up the directive controller
			// and adds an accordion CSS class to itself element.
			.directive('accordion', function () {
				return {
					restrict: 'EA',
					controller: 'AccordionController',
					transclude: true,
					replace: false,
					templateUrl: 'template/accordion/accordion.html'
				};
			})

			// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
			.directive('accordionGroup', function () {
				return {
					require: '^accordion',         // We need this directive to be inside an accordion
					restrict: 'EA',
					transclude: true,              // It transcludes the contents of the directive into the template
					replace: true,                // The element containing the directive will be replaced with the template
					templateUrl: 'template/accordion/accordion-group.html',
					scope: {
						heading: '@',               // Interpolate the heading attribute onto this scope
						isOpen: '=?',
						isDisabled: '=?'
					},
					controller: function () {
						this.setHeading = function (element) {
							this.heading = element;
						};
					},
					link: function (scope, element, attrs, accordionCtrl) {
						accordionCtrl.addGroup(scope);

						scope.$watch('isOpen', function (value) {
							if (value) {
								accordionCtrl.closeOthers(scope);
							}
						});

						scope.toggleOpen = function () {
							if (!scope.isDisabled) {
								scope.isOpen = !scope.isOpen;
							}
						};
					}
				};
			})

			// Use accordion-heading below an accordion-group to provide a heading containing HTML
			// <accordion-group>
			//   <accordion-heading>Heading containing HTML - <img src="..."></accordion-heading>
			// </accordion-group>
			.directive('accordionHeading', function () {
				return {
					restrict: 'EA',
					transclude: true,   // Grab the contents to be used as the heading
					template: '',       // In effect remove this element!
					replace: true,
					require: '^accordionGroup',
					link: function (scope, element, attr, accordionGroupCtrl, transclude) {
						// Pass the heading to the accordion-group controller
						// so that it can be transcluded into the right place in the template
						// [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
						accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
					}
				};
			})

			// Use in the accordion-group template to indicate where you want the heading to be transcluded
			// You must provide the property on the accordion-group controller that will hold the transcluded element
			// <div class="accordion-group">
			//   <div class="accordion-heading" ><a ... accordion-transclude="heading">...</a></div>
			//   ...
			// </div>
			.directive('accordionTransclude', function () {
				return {
					require: '^accordionGroup',
					link: function (scope, element, attr, controller) {
						scope.$watch(function () {
							return controller[attr.accordionTransclude];
						}, function (heading) {
							if (heading) {
								element.find('span').html('');
								element.find('span').append(heading);
							}
						});
					}
				};
			})

		;

		angular.module('ui.bootstrap.alert', [])

			.controller('AlertController', ['$scope', '$attrs', function ($scope, $attrs) {
				$scope.closeable = !!$attrs.close;
				this.close = $scope.close;
			}])

			.directive('alert', function () {
				return {
					restrict: 'EA',
					controller: 'AlertController',
					templateUrl: 'template/alert/alert.html',
					transclude: true,
					replace: true,
					scope: {
						type: '@',
						close: '&'
					}
				};
			})

			.directive('dismissOnTimeout', ['$timeout', function ($timeout) {
				return {
					require: 'alert',
					link: function (scope, element, attrs, alertCtrl) {
						$timeout(function () {
							alertCtrl.close();
						}, parseInt(attrs.dismissOnTimeout, 10));
					}
				};
			}]);

		angular.module('ui.bootstrap.bindHtml', [])

			.value('$bindHtmlUnsafeSuppressDeprecated', false)

			.directive('bindHtmlUnsafe', ['$log', '$bindHtmlUnsafeSuppressDeprecated', function ($log, $bindHtmlUnsafeSuppressDeprecated) {
				return function (scope, element, attr) {
					if (!$bindHtmlUnsafeSuppressDeprecated) {
						$log.warn('bindHtmlUnsafe is now deprecated. Use ngBindHtml instead');
					}
					element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);
					scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {
						element.html(value || '');
					});
				};
			}]);
		angular.module('ui.bootstrap.buttons', [])

			.constant('buttonConfig', {
				activeClass: 'active',
				toggleEvent: 'click'
			})

			.controller('ButtonsController', ['buttonConfig', function (buttonConfig) {
				this.activeClass = buttonConfig.activeClass || 'active';
				this.toggleEvent = buttonConfig.toggleEvent || 'click';
			}])

			.directive('btnRadio', function () {
				return {
					require: ['btnRadio', 'ngModel'],
					controller: 'ButtonsController',
					link: function (scope, element, attrs, ctrls) {
						var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

						//model -> UI
						ngModelCtrl.$render = function () {
							element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));
						};

						//ui->model
						element.bind(buttonsCtrl.toggleEvent, function () {
							if ('disabled' in attrs) {
								return;
							}

							var isActive = element.hasClass(buttonsCtrl.activeClass);

							if (!isActive || angular.isDefined(attrs.uncheckable)) {
								scope.$apply(function () {
									ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.btnRadio));
									ngModelCtrl.$render();
								});
							}
						});
					}
				};
			})

			.directive('btnCheckbox', function () {
				return {
					require: ['btnCheckbox', 'ngModel'],
					controller: 'ButtonsController',
					link: function (scope, element, attrs, ctrls) {
						var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

						function getTrueValue() {
							return getCheckboxValue(attrs.btnCheckboxTrue, true);
						}

						function getFalseValue() {
							return getCheckboxValue(attrs.btnCheckboxFalse, false);
						}

						function getCheckboxValue(attributeValue, defaultValue) {
							var val = scope.$eval(attributeValue);
							return angular.isDefined(val) ? val : defaultValue;
						}

						//model -> UI
						ngModelCtrl.$render = function () {
							element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
						};

						//ui->model
						element.bind(buttonsCtrl.toggleEvent, function () {
							if ('disabled' in attrs) {
								return;
							}

							scope.$apply(function () {
								ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
								ngModelCtrl.$render();
							});
						});
					}
				};
			});

		/**
		 * @ngdoc overview
		 * @name ui.bootstrap.carousel
		 *
		 * @description
		 * AngularJS version of an image carousel.
		 *
		 */
		angular.module('ui.bootstrap.carousel', [])
			.constant('ANIMATE_CSS', angular.version.minor >= 4)
			.controller('CarouselController', ['$scope', '$element', '$interval', '$animate', 'ANIMATE_CSS', function ($scope, $element, $interval, $animate, ANIMATE_CSS) {
				var self = this,
					slides = self.slides = $scope.slides = [],
					NO_TRANSITION = 'uib-noTransition',
					SLIDE_DIRECTION = 'uib-slideDirection',
					currentIndex = -1,
					currentInterval, isPlaying;
				self.currentSlide = null;

				var destroyed = false;
				/* direction: "prev" or "next" */
				self.select = $scope.select = function (nextSlide, direction) {
					var nextIndex = self.indexOfSlide(nextSlide);
					//Decide direction if it's not given
					if (direction === undefined) {
						direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
					}
					//Prevent this user-triggered transition from occurring if there is already one in progress
					if (nextSlide && nextSlide !== self.currentSlide && !$scope.$currentTransition) {
						goNext(nextSlide, nextIndex, direction);
					}
				};

				function goNext(slide, index, direction) {
					// Scope has been destroyed, stop here.
					if (destroyed) {
						return;
					}

					angular.extend(slide, {direction: direction, active: true});
					angular.extend(self.currentSlide || {}, {direction: direction, active: false});
					if ($animate.enabled() && !$scope.noTransition && !$scope.$currentTransition &&
						slide.$element) {
						slide.$element.data(SLIDE_DIRECTION, slide.direction);
						$scope.$currentTransition = true;
						if (ANIMATE_CSS) {
							$animate.on('addClass', slide.$element, function (element, phase) {
								$scope.$currentTransition = null;
								if (!$scope.$currentTransition) {
									$animate.off('addClass', element);
								}
							});
						} else {
							slide.$element.one('$animate:close', function closeFn() {
								$scope.$currentTransition = null;
							});
						}
					}

					self.currentSlide = slide;
					currentIndex = index;

					//every time you change slides, reset the timer
					restartTimer();
				}

				$scope.$on('$destroy', function () {
					destroyed = true;
				});

				function getSlideByIndex(index) {
					if (angular.isUndefined(slides[index].index)) {
						return slides[index];
					}
					var i, len = slides.length;
					for (i = 0; i < slides.length; ++i) {
						if (slides[i].index == index) {
							return slides[i];
						}
					}
				}

				self.getCurrentIndex = function () {
					if (self.currentSlide && angular.isDefined(self.currentSlide.index)) {
						return +self.currentSlide.index;
					}
					return currentIndex;
				};

				/* Allow outside people to call indexOf on slides array */
				self.indexOfSlide = function (slide) {
					return angular.isDefined(slide.index) ? +slide.index : slides.indexOf(slide);
				};

				$scope.next = function () {
					var newIndex = (self.getCurrentIndex() + 1) % slides.length;

					if (newIndex === 0 && $scope.noWrap()) {
						$scope.pause();
						return;
					}

					return self.select(getSlideByIndex(newIndex), 'next');
				};

				$scope.prev = function () {
					var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;

					if ($scope.noWrap() && newIndex === slides.length - 1) {
						$scope.pause();
						return;
					}

					return self.select(getSlideByIndex(newIndex), 'prev');
				};

				$scope.isActive = function (slide) {
					return self.currentSlide === slide;
				};

				$scope.$watch('interval', restartTimer);
				$scope.$on('$destroy', resetTimer);

				function restartTimer() {
					resetTimer();
					var interval = +$scope.interval;
					if (!isNaN(interval) && interval > 0) {
						currentInterval = $interval(timerFn, interval);
					}
				}

				function resetTimer() {
					if (currentInterval) {
						$interval.cancel(currentInterval);
						currentInterval = null;
					}
				}

				function timerFn() {
					var interval = +$scope.interval;
					if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
						$scope.next();
					} else {
						$scope.pause();
					}
				}

				$scope.play = function () {
					if (!isPlaying) {
						isPlaying = true;
						restartTimer();
					}
				};
				$scope.pause = function () {
					if (!$scope.noPause) {
						isPlaying = false;
						resetTimer();
					}
				};

				self.addSlide = function (slide, element) {
					// add default direction for initial transition
					// necessary for angular 1.4+
					if (!slides.length && element) {
						element.data(SLIDE_DIRECTION, 'next');
					}

					slide.$element = element;
					slides.push(slide);
					//if this is the first slide or the slide is set to active, select it
					if (slides.length === 1 || slide.active) {
						self.select(slides[slides.length - 1]);
						if (slides.length == 1) {
							$scope.play();
						}
					} else {
						slide.active = false;
					}
				};

				self.removeSlide = function (slide) {
					if (angular.isDefined(slide.index)) {
						slides.sort(function (a, b) {
							return +a.index > +b.index;
						});
					}
					//get the index of the slide inside the carousel
					var index = slides.indexOf(slide);
					slides.splice(index, 1);
					if (slides.length > 0 && slide.active) {
						if (index >= slides.length) {
							self.select(slides[index - 1]);
						} else {
							self.select(slides[index]);
						}
					} else if (currentIndex > index) {
						currentIndex--;
					}

					//clean the currentSlide when no more slide
					if (slides.length === 0) {
						self.currentSlide = null;
					}
				};

				$scope.$watch('noTransition', function (noTransition) {
					$element.data(NO_TRANSITION, noTransition);
				});

			}])

		/**
		 * @ngdoc directive
		 * @name ui.bootstrap.carousel.directive:carousel
		 * @restrict EA
	 *
		 * @description
		 * Carousel is the outer container for a set of image 'slides' to showcase.
	 *
		 * @param {number=} interval The time, in milliseconds, that it will take the carousel to go to the next slide.
		 * @param {boolean=} noTransition Whether to disable transitions on the carousel.
		 * @param {boolean=} noPause Whether to disable pausing on the carousel (by default, the carousel interval pauses on hover).
	 *
		 * @example
		 <example module="ui.bootstrap">
		 <file name="index.html">
		 <carousel>
		 <slide>
		 <img src="http://placekitten.com/150/150" style="margin:auto;">
		 <div class="carousel-caption">
		 <p>Beautiful!</p>
		 </div>
		 </slide>
		 <slide>
		 <img src="http://placekitten.com/100/150" style="margin:auto;">
		 <div class="carousel-caption">
		 <p>D'aww!</p>
		 </div>
		 </slide>
		 </carousel>
		 </file>
		 <file name="demo.css">
		 .carousel-indicators {
	      top: auto;
	      bottom: 15px;
	    }
		 </file>
		 </example>
		 */
			.directive('carousel', [function () {
				return {
					restrict: 'EA',
					transclude: true,
					replace: true,
					controller: 'CarouselController',
					require: 'carousel',
					templateUrl: 'template/carousel/carousel.html',
					scope: {
						interval: '=',
						noTransition: '=',
						noPause: '=',
						noWrap: '&'
					}
				};
			}])

		/**
		 * @ngdoc directive
		 * @name ui.bootstrap.carousel.directive:slide
		 * @restrict EA
		 *
		 * @description
		 * Creates a slide inside a {@link ui.bootstrap.carousel.directive:carousel carousel}.  Must be placed as a child of a carousel element.
		 *
		 * @param {boolean=} active Model binding, whether or not this slide is currently active.
		 * @param {number=} index The index of the slide. The slides will be sorted by this parameter.
		 *
		 * @example
		 <example module="ui.bootstrap">
		 <file name="index.html">
		 <div ng-controller="CarouselDemoCtrl">
		 <carousel>
		 <slide ng-repeat="slide in slides" active="slide.active" index="$index">
		 <img ng-src="{{slide.image}}" style="margin:auto;">
		 <div class="carousel-caption">
		 <h4>Slide {{$index}}</h4>
		 <p>{{slide.text}}</p>
		 </div>
		 </slide>
		 </carousel>
		 Interval, in milliseconds: <input type="number" ng-model="myInterval">
		 <br />Enter a negative number to stop the interval.
		 </div>
		 </file>
		 <file name="script.js">
		 function CarouselDemoCtrl($scope) {
	  $scope.myInterval = 5000;
	}
		 </file>
		 <file name="demo.css">
		 .carousel-indicators {
	      top: auto;
	      bottom: 15px;
	    }
		 </file>
		 </example>
		 */

			.directive('slide', function () {
				return {
					require: '^carousel',
					restrict: 'EA',
					transclude: true,
					replace: true,
					templateUrl: 'template/carousel/slide.html',
					scope: {
						active: '=?',
						index: '=?'
					},
					link: function (scope, element, attrs, carouselCtrl) {
						carouselCtrl.addSlide(scope, element);
						//when the scope is destroyed then remove the slide from the current slides array
						scope.$on('$destroy', function () {
							carouselCtrl.removeSlide(scope);
						});

						scope.$watch('active', function (active) {
							if (active) {
								carouselCtrl.select(scope);
							}
						});
					}
				};
			})

			.animation('.item', [
				'$injector', '$animate', 'ANIMATE_CSS',
				function ($injector, $animate, ANIMATE_CSS) {
					var NO_TRANSITION = 'uib-noTransition',
						SLIDE_DIRECTION = 'uib-slideDirection',
						$animateCss = ANIMATE_CSS ? $injector.get('$animateCss') : null;

					function removeClass(element, className, callback) {
						element.removeClass(className);
						if (callback) {
							callback();
						}
					}

					return {
						beforeAddClass: function (element, className, done) {
							// Due to transclusion, noTransition property is on parent's scope
							if (className == 'active' && element.parent() && !element.parent().data(NO_TRANSITION)) {
								var stopped = false;
								var direction = element.data(SLIDE_DIRECTION);
								var directionClass = direction == 'next' ? 'left' : 'right';
								var removeClassFn = removeClass.bind(this, element,
									directionClass + ' ' + direction, done);
								element.addClass(direction);

								if ($animateCss) {
									$animateCss(element, {addClass: directionClass})
										.start()
										.done(removeClassFn);
								} else {
									$animate.addClass(element, directionClass).then(function () {
										if (!stopped) {
											removeClassFn();
										}
										done();
									});
								}

								return function () {
									stopped = true;
								};
							}
							done();
						},
						beforeRemoveClass: function (element, className, done) {
							// Due to transclusion, noTransition property is on parent's scope
							if (className === 'active' && element.parent() && !element.parent().data(NO_TRANSITION)) {
								var stopped = false;
								var direction = element.data(SLIDE_DIRECTION);
								var directionClass = direction == 'next' ? 'left' : 'right';
								var removeClassFn = removeClass.bind(this, element, directionClass, done);

								if ($animateCss) {
									$animateCss(element, {addClass: directionClass})
										.start()
										.done(removeClassFn);
								} else {
									$animate.addClass(element, directionClass).then(function () {
										if (!stopped) {
											removeClassFn();
										}
										done();
									});
								}
								return function () {
									stopped = true;
								};
							}
							done();
						}
					};

				}])


		;

		angular.module('ui.bootstrap.dateparser', [])

			.service('dateParser', ['$log', '$locale', 'orderByFilter', function ($log, $locale, orderByFilter) {
				// Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js
				var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

				this.parsers = {};

				var formatCodeToRegex = {
					'yyyy': {
						regex: '\\d{4}',
						apply: function (value) {
							this.year = +value;
						}
					},
					'yy': {
						regex: '\\d{2}',
						apply: function (value) {
							this.year = +value + 2000;
						}
					},
					'y': {
						regex: '\\d{1,4}',
						apply: function (value) {
							this.year = +value;
						}
					},
					'MMMM': {
						regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
						apply: function (value) {
							this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value);
						}
					},
					'MMM': {
						regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
						apply: function (value) {
							this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value);
						}
					},
					'MM': {
						regex: '0[1-9]|1[0-2]',
						apply: function (value) {
							this.month = value - 1;
						}
					},
					'M': {
						regex: '[1-9]|1[0-2]',
						apply: function (value) {
							this.month = value - 1;
						}
					},
					'dd': {
						regex: '[0-2][0-9]{1}|3[0-1]{1}',
						apply: function (value) {
							this.date = +value;
						}
					},
					'd': {
						regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
						apply: function (value) {
							this.date = +value;
						}
					},
					'EEEE': {
						regex: $locale.DATETIME_FORMATS.DAY.join('|')
					},
					'EEE': {
						regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|')
					},
					'HH': {
						regex: '(?:0|1)[0-9]|2[0-3]',
						apply: function (value) {
							this.hours = +value;
						}
					},
					'H': {
						regex: '1?[0-9]|2[0-3]',
						apply: function (value) {
							this.hours = +value;
						}
					},
					'mm': {
						regex: '[0-5][0-9]',
						apply: function (value) {
							this.minutes = +value;
						}
					},
					'm': {
						regex: '[0-9]|[1-5][0-9]',
						apply: function (value) {
							this.minutes = +value;
						}
					},
					'sss': {
						regex: '[0-9][0-9][0-9]',
						apply: function (value) {
							this.milliseconds = +value;
						}
					},
					'ss': {
						regex: '[0-5][0-9]',
						apply: function (value) {
							this.seconds = +value;
						}
					},
					's': {
						regex: '[0-9]|[1-5][0-9]',
						apply: function (value) {
							this.seconds = +value;
						}
					}
				};

				function createParser(format) {
					var map = [], regex = format.split('');

					angular.forEach(formatCodeToRegex, function (data, code) {
						var index = format.indexOf(code);

						if (index > -1) {
							format = format.split('');

							regex[index] = '(' + data.regex + ')';
							format[index] = '$'; // Custom symbol to define consumed part of format
							for (var i = index + 1, n = index + code.length; i < n; i++) {
								regex[i] = '';
								format[i] = '$';
							}
							format = format.join('');

							map.push({index: index, apply: data.apply});
						}
					});

					return {
						regex: new RegExp('^' + regex.join('') + '$'),
						map: orderByFilter(map, 'index')
					};
				}

				this.parse = function (input, format, baseDate) {
					if (!angular.isString(input) || !format) {
						return input;
					}

					format = $locale.DATETIME_FORMATS[format] || format;
					format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\$&');

					if (!this.parsers[format]) {
						this.parsers[format] = createParser(format);
					}

					var parser = this.parsers[format],
						regex = parser.regex,
						map = parser.map,
						results = input.match(regex);

					if (results && results.length) {
						var fields, dt;
						if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
							fields = {
								year: baseDate.getFullYear(),
								month: baseDate.getMonth(),
								date: baseDate.getDate(),
								hours: baseDate.getHours(),
								minutes: baseDate.getMinutes(),
								seconds: baseDate.getSeconds(),
								milliseconds: baseDate.getMilliseconds()
							};
						} else {
							if (baseDate) {
								$log.warn('dateparser:', 'baseDate is not a valid date');
							}
							fields = {year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0};
						}

						for (var i = 1, n = results.length; i < n; i++) {
							var mapper = map[i - 1];
							if (mapper.apply) {
								mapper.apply.call(fields, results[i]);
							}
						}

						if (isValid(fields.year, fields.month, fields.date)) {
							dt = new Date(fields.year, fields.month, fields.date, fields.hours, fields.minutes, fields.seconds,
								fields.milliseconds || 0);
						}

						return dt;
					}
				};

				// Check if date is valid for specific month (and year for February).
				// Month: 0 = Jan, 1 = Feb, etc
				function isValid(year, month, date) {
					if (date < 1) {
						return false;
					}

					if (month === 1 && date > 28) {
						return date === 29 && ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
					}

					if (month === 3 || month === 5 || month === 8 || month === 10) {
						return date < 31;
					}

					return true;
				}
			}]);

		angular.module('ui.bootstrap.position', [])

		/**
		 * A set of utility methods that can be use to retrieve position of DOM elements.
		 * It is meant to be used where we need to absolute-position DOM elements in
		 * relation to other, existing elements (this is the case for tooltips, popovers,
		 * typeahead suggestions etc.).
		 */
			.factory('$position', ['$document', '$window', function ($document, $window) {

				function getStyle(el, cssprop) {
					if (el.currentStyle) { //IE
						return el.currentStyle[cssprop];
					} else if ($window.getComputedStyle) {
						return $window.getComputedStyle(el)[cssprop];
					}
					// finally try and get inline style
					return el.style[cssprop];
				}

				/**
				 * Checks if a given element is statically positioned
				 * @param element - raw DOM element
				 */
				function isStaticPositioned(element) {
					return (getStyle(element, 'position') || 'static' ) === 'static';
				}

				/**
				 * returns the closest, non-statically positioned parentOffset of a given element
				 * @param element
				 */
				var parentOffsetEl = function (element) {
					var docDomEl = $document[0];
					var offsetParent = element.offsetParent || docDomEl;
					while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent)) {
						offsetParent = offsetParent.offsetParent;
					}
					return offsetParent || docDomEl;
				};

				return {
					/**
					 * Provides read-only equivalent of jQuery's position function:
					 * http://api.jquery.com/position/
					 */
					position: function (element) {
						var elBCR = this.offset(element);
						var offsetParentBCR = {top: 0, left: 0};
						var offsetParentEl = parentOffsetEl(element[0]);
						if (offsetParentEl != $document[0]) {
							offsetParentBCR = this.offset(angular.element(offsetParentEl));
							offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
							offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
						}

						var boundingClientRect = element[0].getBoundingClientRect();
						return {
							width: boundingClientRect.width || element.prop('offsetWidth'),
							height: boundingClientRect.height || element.prop('offsetHeight'),
							top: elBCR.top - offsetParentBCR.top,
							left: elBCR.left - offsetParentBCR.left
						};
					},

					/**
					 * Provides read-only equivalent of jQuery's offset function:
					 * http://api.jquery.com/offset/
					 */
					offset: function (element) {
						var boundingClientRect = element[0].getBoundingClientRect();
						return {
							width: boundingClientRect.width || element.prop('offsetWidth'),
							height: boundingClientRect.height || element.prop('offsetHeight'),
							top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
							left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
						};
					},

					/**
					 * Provides coordinates for the targetEl in relation to hostEl
					 */
					positionElements: function (hostEl, targetEl, positionStr, appendToBody) {

						var positionStrParts = positionStr.split('-');
						var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';

						var hostElPos,
							targetElWidth,
							targetElHeight,
							targetElPos;

						hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);

						targetElWidth = targetEl.prop('offsetWidth');
						targetElHeight = targetEl.prop('offsetHeight');

						var shiftWidth = {
							center: function () {
								return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;
							},
							left: function () {
								return hostElPos.left;
							},
							right: function () {
								return hostElPos.left + hostElPos.width;
							}
						};

						var shiftHeight = {
							center: function () {
								return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;
							},
							top: function () {
								return hostElPos.top;
							},
							bottom: function () {
								return hostElPos.top + hostElPos.height;
							}
						};

						switch (pos0) {
							case 'right':
								targetElPos = {
									top: shiftHeight[pos1](),
									left: shiftWidth[pos0]()
								};
								break;
							case 'left':
								targetElPos = {
									top: shiftHeight[pos1](),
									left: hostElPos.left - targetElWidth
								};
								break;
							case 'bottom':
								targetElPos = {
									top: shiftHeight[pos0](),
									left: shiftWidth[pos1]()
								};
								break;
							default:
								targetElPos = {
									top: hostElPos.top - targetElHeight,
									left: shiftWidth[pos1]()
								};
								break;
						}

						return targetElPos;
					}
				};
			}]);

		angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.position'])

			.constant('datepickerConfig', {
				formatDay: 'dd',
				formatMonth: 'MMMM',
				formatYear: 'yyyy',
				formatDayHeader: 'EEE',
				formatDayTitle: 'MMMM yyyy',
				formatMonthTitle: 'yyyy',
				datepickerMode: 'day',
				minMode: 'day',
				maxMode: 'year',
				showWeeks: true,
				startingDay: 0,
				yearRange: 20,
				minDate: null,
				maxDate: null,
				shortcutPropagation: false
			})

			.controller('DatepickerController', ['$scope', '$attrs', '$parse', '$interpolate', '$log', 'dateFilter', 'datepickerConfig', function ($scope, $attrs, $parse, $interpolate, $log, dateFilter, datepickerConfig) {
				var self = this,
					ngModelCtrl = {$setViewValue: angular.noop}; // nullModelCtrl;

				// Modes chain
				this.modes = ['day', 'month', 'year'];

				// Configuration attributes
				angular.forEach(['formatDay', 'formatMonth', 'formatYear', 'formatDayHeader', 'formatDayTitle', 'formatMonthTitle',
					'minMode', 'maxMode', 'showWeeks', 'startingDay', 'yearRange', 'shortcutPropagation'], function (key, index) {
					self[key] = angular.isDefined($attrs[key]) ? (index < 8 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key])) : datepickerConfig[key];
				});

				// Watchable date attributes
				angular.forEach(['minDate', 'maxDate'], function (key) {
					if ($attrs[key]) {
						$scope.$parent.$watch($parse($attrs[key]), function (value) {
							self[key] = value ? new Date(value) : null;
							self.refreshView();
						});
					} else {
						self[key] = datepickerConfig[key] ? new Date(datepickerConfig[key]) : null;
					}
				});

				$scope.datepickerMode = $scope.datepickerMode || datepickerConfig.datepickerMode;
				$scope.maxMode = self.maxMode;
				$scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);

				if (angular.isDefined($attrs.initDate)) {
					this.activeDate = $scope.$parent.$eval($attrs.initDate) || new Date();
					$scope.$parent.$watch($attrs.initDate, function (initDate) {
						if (initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)) {
							self.activeDate = initDate;
							self.refreshView();
						}
					});
				} else {
					this.activeDate = new Date();
				}

				$scope.isActive = function (dateObject) {
					if (self.compare(dateObject.date, self.activeDate) === 0) {
						$scope.activeDateId = dateObject.uid;
						return true;
					}
					return false;
				};

				this.init = function (ngModelCtrl_) {
					ngModelCtrl = ngModelCtrl_;

					ngModelCtrl.$render = function () {
						self.render();
					};
				};

				this.render = function () {
					if (ngModelCtrl.$viewValue) {
						var date = new Date(ngModelCtrl.$viewValue),
							isValid = !isNaN(date);

						if (isValid) {
							this.activeDate = date;
						} else {
							$log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
						}
					}
					this.refreshView();
				};

				this.refreshView = function () {
					if (this.element) {
						this._refreshView();

						var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
						ngModelCtrl.$setValidity('date-disabled', !date || (this.element && !this.isDisabled(date)));
					}
				};

				this.createDateObject = function (date, format) {
					var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
					return {
						date: date,
						label: dateFilter(date, format),
						selected: model && this.compare(date, model) === 0,
						disabled: this.isDisabled(date),
						current: this.compare(date, new Date()) === 0,
						customClass: this.customClass(date)
					};
				};

				this.isDisabled = function (date) {
					return ((this.minDate && this.compare(date, this.minDate) < 0) || (this.maxDate && this.compare(date, this.maxDate) > 0) || ($attrs.dateDisabled && $scope.dateDisabled({
						date: date,
						mode: $scope.datepickerMode
					})));
				};

				this.customClass = function (date) {
					return $scope.customClass({date: date, mode: $scope.datepickerMode});
				};

				// Split array into smaller arrays
				this.split = function (arr, size) {
					var arrays = [];
					while (arr.length > 0) {
						arrays.push(arr.splice(0, size));
					}
					return arrays;
				};

				// Fix a hard-reprodusible bug with timezones
				// The bug depends on OS, browser, current timezone and current date
				// i.e.
				// var date = new Date(2014, 0, 1);
				// console.log(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours());
				// can result in "2013 11 31 23" because of the bug.
				this.fixTimeZone = function (date) {
					var hours = date.getHours();
					date.setHours(hours === 23 ? hours + 2 : 0);
				};

				$scope.select = function (date) {
					if ($scope.datepickerMode === self.minMode) {
						var dt = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : new Date(0, 0, 0, 0, 0, 0, 0);
						dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
						ngModelCtrl.$setViewValue(dt);
						ngModelCtrl.$render();
					} else {
						self.activeDate = date;
						$scope.datepickerMode = self.modes[self.modes.indexOf($scope.datepickerMode) - 1];
					}
				};

				$scope.move = function (direction) {
					var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
						month = self.activeDate.getMonth() + direction * (self.step.months || 0);
					self.activeDate.setFullYear(year, month, 1);
					self.refreshView();
				};

				$scope.toggleMode = function (direction) {
					direction = direction || 1;

					if (($scope.datepickerMode === self.maxMode && direction === 1) || ($scope.datepickerMode === self.minMode && direction === -1)) {
						return;
					}

					$scope.datepickerMode = self.modes[self.modes.indexOf($scope.datepickerMode) + direction];
				};

				// Key event mapper
				$scope.keys = {
					13: 'enter',
					32: 'space',
					33: 'pageup',
					34: 'pagedown',
					35: 'end',
					36: 'home',
					37: 'left',
					38: 'up',
					39: 'right',
					40: 'down'
				};

				var focusElement = function () {
					self.element[0].focus();
				};

				// Listen for focus requests from popup directive
				$scope.$on('datepicker.focus', focusElement);

				$scope.keydown = function (evt) {
					var key = $scope.keys[evt.which];

					if (!key || evt.shiftKey || evt.altKey) {
						return;
					}

					evt.preventDefault();
					if (!self.shortcutPropagation) {
						evt.stopPropagation();
					}

					if (key === 'enter' || key === 'space') {
						if (self.isDisabled(self.activeDate)) {
							return; // do nothing
						}
						$scope.select(self.activeDate);
						focusElement();
					} else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
						$scope.toggleMode(key === 'up' ? 1 : -1);
						focusElement();
					} else {
						self.handleKeyDown(key, evt);
						self.refreshView();
					}
				};
			}])

			.directive('datepicker', function () {
				return {
					restrict: 'EA',
					replace: true,
					templateUrl: 'template/datepicker/datepicker.html',
					scope: {
						datepickerMode: '=?',
						dateDisabled: '&',
						customClass: '&',
						shortcutPropagation: '&?'
					},
					require: ['datepicker', '?^ngModel'],
					controller: 'DatepickerController',
					link: function (scope, element, attrs, ctrls) {
						var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

						if (ngModelCtrl) {
							datepickerCtrl.init(ngModelCtrl);
						}
					}
				};
			})

			.directive('daypicker', ['dateFilter', function (dateFilter) {
				return {
					restrict: 'EA',
					replace: true,
					templateUrl: 'template/datepicker/day.html',
					require: '^datepicker',
					link: function (scope, element, attrs, ctrl) {
						scope.showWeeks = ctrl.showWeeks;

						ctrl.step = {months: 1};
						ctrl.element = element;

						var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

						function getDaysInMonth(year, month) {
							return ((month === 1) && (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0))) ? 29 : DAYS_IN_MONTH[month];
						}

						function getDates(startDate, n) {
							var dates = new Array(n), current = new Date(startDate), i = 0, date;
							while (i < n) {
								date = new Date(current);
								ctrl.fixTimeZone(date);
								dates[i++] = date;
								current.setDate(current.getDate() + 1);
							}
							return dates;
						}

						ctrl._refreshView = function () {
							var year = ctrl.activeDate.getFullYear(),
								month = ctrl.activeDate.getMonth(),
								firstDayOfMonth = new Date(year, month, 1),
								difference = ctrl.startingDay - firstDayOfMonth.getDay(),
								numDisplayedFromPreviousMonth = (difference > 0) ? 7 - difference : -difference,
								firstDate = new Date(firstDayOfMonth);

							if (numDisplayedFromPreviousMonth > 0) {
								firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
							}

							// 42 is the number of days on a six-month calendar
							var days = getDates(firstDate, 42);
							for (var i = 0; i < 42; i++) {
								days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), {
									secondary: days[i].getMonth() !== month,
									uid: scope.uniqueId + '-' + i
								});
							}

							scope.labels = new Array(7);
							for (var j = 0; j < 7; j++) {
								scope.labels[j] = {
									abbr: dateFilter(days[j].date, ctrl.formatDayHeader),
									full: dateFilter(days[j].date, 'EEEE')
								};
							}

							scope.title = dateFilter(ctrl.activeDate, ctrl.formatDayTitle);
							scope.rows = ctrl.split(days, 7);

							if (scope.showWeeks) {
								scope.weekNumbers = [];
								var thursdayIndex = (4 + 7 - ctrl.startingDay) % 7,
									numWeeks = scope.rows.length;
								for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
									scope.weekNumbers.push(
										getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
								}
							}
						};

						ctrl.compare = function (date1, date2) {
							return (new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate()) );
						};

						function getISO8601WeekNumber(date) {
							var checkDate = new Date(date);
							checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
							var time = checkDate.getTime();
							checkDate.setMonth(0); // Compare with Jan 1
							checkDate.setDate(1);
							return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
						}

						ctrl.handleKeyDown = function (key, evt) {
							var date = ctrl.activeDate.getDate();

							if (key === 'left') {
								date = date - 1;   // up
							} else if (key === 'up') {
								date = date - 7;   // down
							} else if (key === 'right') {
								date = date + 1;   // down
							} else if (key === 'down') {
								date = date + 7;
							} else if (key === 'pageup' || key === 'pagedown') {
								var month = ctrl.activeDate.getMonth() + (key === 'pageup' ? -1 : 1);
								ctrl.activeDate.setMonth(month, 1);
								date = Math.min(getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth()), date);
							} else if (key === 'home') {
								date = 1;
							} else if (key === 'end') {
								date = getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth());
							}
							ctrl.activeDate.setDate(date);
						};

						ctrl.refreshView();
					}
				};
			}])

			.directive('monthpicker', ['dateFilter', function (dateFilter) {
				return {
					restrict: 'EA',
					replace: true,
					templateUrl: 'template/datepicker/month.html',
					require: '^datepicker',
					link: function (scope, element, attrs, ctrl) {
						ctrl.step = {years: 1};
						ctrl.element = element;

						ctrl._refreshView = function () {
							var months = new Array(12),
								year = ctrl.activeDate.getFullYear(),
								date;

							for (var i = 0; i < 12; i++) {
								date = new Date(year, i, 1);
								ctrl.fixTimeZone(date);
								months[i] = angular.extend(ctrl.createDateObject(date, ctrl.formatMonth), {
									uid: scope.uniqueId + '-' + i
								});
							}

							scope.title = dateFilter(ctrl.activeDate, ctrl.formatMonthTitle);
							scope.rows = ctrl.split(months, 3);
						};

						ctrl.compare = function (date1, date2) {
							return new Date(date1.getFullYear(), date1.getMonth()) - new Date(date2.getFullYear(), date2.getMonth());
						};

						ctrl.handleKeyDown = function (key, evt) {
							var date = ctrl.activeDate.getMonth();

							if (key === 'left') {
								date = date - 1;   // up
							} else if (key === 'up') {
								date = date - 3;   // down
							} else if (key === 'right') {
								date = date + 1;   // down
							} else if (key === 'down') {
								date = date + 3;
							} else if (key === 'pageup' || key === 'pagedown') {
								var year = ctrl.activeDate.getFullYear() + (key === 'pageup' ? -1 : 1);
								ctrl.activeDate.setFullYear(year);
							} else if (key === 'home') {
								date = 0;
							} else if (key === 'end') {
								date = 11;
							}
							ctrl.activeDate.setMonth(date);
						};

						ctrl.refreshView();
					}
				};
			}])

			.directive('yearpicker', ['dateFilter', function (dateFilter) {
				return {
					restrict: 'EA',
					replace: true,
					templateUrl: 'template/datepicker/year.html',
					require: '^datepicker',
					link: function (scope, element, attrs, ctrl) {
						var range = ctrl.yearRange;

						ctrl.step = {years: range};
						ctrl.element = element;

						function getStartingYear(year) {
							return parseInt((year - 1) / range, 10) * range + 1;
						}

						ctrl._refreshView = function () {
							var years = new Array(range), date;

							for (var i = 0, start = getStartingYear(ctrl.activeDate.getFullYear()); i < range; i++) {
								date = new Date(start + i, 0, 1);
								ctrl.fixTimeZone(date);
								years[i] = angular.extend(ctrl.createDateObject(date, ctrl.formatYear), {
									uid: scope.uniqueId + '-' + i
								});
							}

							scope.title = [years[0].label, years[range - 1].label].join(' - ');
							scope.rows = ctrl.split(years, 5);
						};

						ctrl.compare = function (date1, date2) {
							return date1.getFullYear() - date2.getFullYear();
						};

						ctrl.handleKeyDown = function (key, evt) {
							var date = ctrl.activeDate.getFullYear();

							if (key === 'left') {
								date = date - 1;   // up
							} else if (key === 'up') {
								date = date - 5;   // down
							} else if (key === 'right') {
								date = date + 1;   // down
							} else if (key === 'down') {
								date = date + 5;
							} else if (key === 'pageup' || key === 'pagedown') {
								date += (key === 'pageup' ? -1 : 1) * ctrl.step.years;
							} else if (key === 'home') {
								date = getStartingYear(ctrl.activeDate.getFullYear());
							} else if (key === 'end') {
								date = getStartingYear(ctrl.activeDate.getFullYear()) + range - 1;
							}
							ctrl.activeDate.setFullYear(date);
						};

						ctrl.refreshView();
					}
				};
			}])

			.constant('datepickerPopupConfig', {
				datepickerPopup: 'yyyy-MM-dd',
				html5Types: {
					date: 'yyyy-MM-dd',
					'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',
					'month': 'yyyy-MM'
				},
				currentText: 'Today',
				clearText: 'Clear',
				closeText: 'Done',
				closeOnDateSelection: true,
				appendToBody: false,
				showButtonBar: true
			})

			.directive('datepickerPopup', ['$compile', '$parse', '$document', '$position', 'dateFilter', 'dateParser', 'datepickerPopupConfig', '$timeout',
				function ($compile, $parse, $document, $position, dateFilter, dateParser, datepickerPopupConfig, $timeout) {
					return {
						restrict: 'EA',
						require: 'ngModel',
						scope: {
							isOpen: '=?',
							currentText: '@',
							clearText: '@',
							closeText: '@',
							dateDisabled: '&',
							customClass: '&'
						},
						link: function (scope, element, attrs, ngModel) {
							var dateFormat,
								closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection,
								appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;

							scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;

							scope.getText = function (key) {
								return scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
							};

							var isHtml5DateInput = false;
							if (datepickerPopupConfig.html5Types[attrs.type]) {
								dateFormat = datepickerPopupConfig.html5Types[attrs.type];
								isHtml5DateInput = true;
							} else {
								dateFormat = attrs.datepickerPopup || datepickerPopupConfig.datepickerPopup;
								attrs.$observe('datepickerPopup', function (value, oldValue) {
									var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
									// Invalidate the $modelValue to ensure that formatters re-run
									// FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764
									if (newDateFormat !== dateFormat) {
										dateFormat = newDateFormat;
										ngModel.$modelValue = null;

										if (!dateFormat) {
											throw new Error('datepickerPopup must have a date format specified.');
										}
									}
								});
							}

							if (!dateFormat) {
								throw new Error('datepickerPopup must have a date format specified.');
							}

							if (isHtml5DateInput && attrs.datepickerPopup) {
								throw new Error('HTML5 date input types do not support custom formats.');
							}

							// popup element used to display calendar
							var popupEl = angular.element('<div datepicker-popup-wrap><div datepicker></div></div>');
							popupEl.attr({
								'ng-model': 'date',
								'ng-change': 'dateSelection(date)'
							});

							function cameltoDash(string) {
								return string.replace(/([A-Z])/g, function ($1) {
									return '-' + $1.toLowerCase();
								});
							}

							// datepicker element
							var datepickerEl = angular.element(popupEl.children()[0]);
							if (isHtml5DateInput) {
								if (attrs.type == 'month') {
									datepickerEl.attr('datepicker-mode', '"month"');
									datepickerEl.attr('min-mode', 'month');
								}
							}

							if (attrs.datepickerOptions) {
								var options = scope.$parent.$eval(attrs.datepickerOptions);
								if (options && options.initDate) {
									scope.initDate = options.initDate;
									datepickerEl.attr('init-date', 'initDate');
									delete options.initDate;
								}
								angular.forEach(options, function (value, option) {
									datepickerEl.attr(cameltoDash(option), value);
								});
							}

							scope.watchData = {};
							angular.forEach(['minDate', 'maxDate', 'datepickerMode', 'initDate', 'shortcutPropagation'], function (key) {
								if (attrs[key]) {
									var getAttribute = $parse(attrs[key]);
									scope.$parent.$watch(getAttribute, function (value) {
										scope.watchData[key] = value;
									});
									datepickerEl.attr(cameltoDash(key), 'watchData.' + key);

									// Propagate changes from datepicker to outside
									if (key === 'datepickerMode') {
										var setAttribute = getAttribute.assign;
										scope.$watch('watchData.' + key, function (value, oldvalue) {
											if (angular.isFunction(setAttribute) && value !== oldvalue) {
												setAttribute(scope.$parent, value);
											}
										});
									}
								}
							});
							if (attrs.dateDisabled) {
								datepickerEl.attr('date-disabled', 'dateDisabled({ date: date, mode: mode })');
							}

							if (attrs.showWeeks) {
								datepickerEl.attr('show-weeks', attrs.showWeeks);
							}

							if (attrs.customClass) {
								datepickerEl.attr('custom-class', 'customClass({ date: date, mode: mode })');
							}

							function parseDate(viewValue) {
								if (angular.isNumber(viewValue)) {
									// presumably timestamp to date object
									viewValue = new Date(viewValue);
								}

								if (!viewValue) {
									return null;
								} else if (angular.isDate(viewValue) && !isNaN(viewValue)) {
									return viewValue;
								} else if (angular.isString(viewValue)) {
									var date = dateParser.parse(viewValue, dateFormat, scope.date);
									if (isNaN(date)) {
										return undefined;
									} else {
										return date;
									}
								} else {
									return undefined;
								}
							}

							function validator(modelValue, viewValue) {
								var value = modelValue || viewValue;

								if (!attrs.ngRequired && !value) {
									return true;
								}

								if (angular.isNumber(value)) {
									value = new Date(value);
								}
								if (!value) {
									return true;
								} else if (angular.isDate(value) && !isNaN(value)) {
									return true;
								} else if (angular.isString(value)) {
									var date = dateParser.parse(value, dateFormat);
									return !isNaN(date);
								} else {
									return false;
								}
							}

							if (!isHtml5DateInput) {
								// Internal API to maintain the correct ng-invalid-[key] class
								ngModel.$$parserName = 'date';
								ngModel.$validators.date = validator;
								ngModel.$parsers.unshift(parseDate);
								ngModel.$formatters.push(function (value) {
									scope.date = value;
									return ngModel.$isEmpty(value) ? value : dateFilter(value, dateFormat);
								});
							}
							else {
								ngModel.$formatters.push(function (value) {
									scope.date = value;
									return value;
								});
							}

							// Inner change
							scope.dateSelection = function (dt) {
								if (angular.isDefined(dt)) {
									scope.date = dt;
								}
								var date = scope.date ? dateFilter(scope.date, dateFormat) : null; // Setting to NULL is necessary for form validators to function
								element.val(date);
								ngModel.$setViewValue(date);

								if (closeOnDateSelection) {
									scope.isOpen = false;
									element[0].focus();
								}
							};

							// Detect changes in the view from the text box
							ngModel.$viewChangeListeners.push(function () {
								scope.date = dateParser.parse(ngModel.$viewValue, dateFormat, scope.date);
							});

							var documentClickBind = function (event) {
								if (scope.isOpen && !element[0].contains(event.target)) {
									scope.$apply(function () {
										scope.isOpen = false;
									});
								}
							};

							var inputKeydownBind = function (evt) {
								if (evt.which === 27 && scope.isOpen) {
									evt.preventDefault();
									evt.stopPropagation();
									scope.$apply(function () {
										scope.isOpen = false;
									});
									element[0].focus();
								} else if (evt.which === 40 && !scope.isOpen) {
									evt.preventDefault();
									evt.stopPropagation();
									scope.$apply(function () {
										scope.isOpen = true;
									});
								}
							};
							element.bind('keydown', inputKeydownBind);

							scope.keydown = function (evt) {
								if (evt.which === 27) {
									scope.isOpen = false;
									element[0].focus();
								}
							};

							scope.$watch('isOpen', function (value) {
								if (value) {
									scope.position = appendToBody ? $position.offset(element) : $position.position(element);
									scope.position.top = scope.position.top + element.prop('offsetHeight');

									$timeout(function () {
										scope.$broadcast('datepicker.focus');
										$document.bind('click', documentClickBind);
									}, 0, false);
								} else {
									$document.unbind('click', documentClickBind);
								}
							});

							scope.select = function (date) {
								if (date === 'today') {
									var today = new Date();
									if (angular.isDate(scope.date)) {
										date = new Date(scope.date);
										date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
									} else {
										date = new Date(today.setHours(0, 0, 0, 0));
									}
								}
								scope.dateSelection(date);
							};

							scope.close = function () {
								scope.isOpen = false;
								element[0].focus();
							};

							var $popup = $compile(popupEl)(scope);
							// Prevent jQuery cache memory leak (template is now redundant after linking)
							popupEl.remove();

							if (appendToBody) {
								$document.find('body').append($popup);
							} else {
								element.after($popup);
							}

							scope.$on('$destroy', function () {
								if (scope.isOpen === true) {
									scope.$apply(function () {
										scope.isOpen = false;
									});
								}

								$popup.remove();
								element.unbind('keydown', inputKeydownBind);
								$document.unbind('click', documentClickBind);
							});
						}
					};
				}])

			.directive('datepickerPopupWrap', function () {
				return {
					restrict: 'EA',
					replace: true,
					transclude: true,
					templateUrl: 'template/datepicker/popup.html'
				};
			});

		angular.module('ui.bootstrap.dropdown', ['ui.bootstrap.position'])

			.constant('dropdownConfig', {
				openClass: 'open'
			})

			.service('dropdownService', ['$document', '$rootScope', function ($document, $rootScope) {
				var openScope = null;

				this.open = function (dropdownScope) {
					if (!openScope) {
						$document.bind('click', closeDropdown);
						$document.bind('keydown', keybindFilter);
					}

					if (openScope && openScope !== dropdownScope) {
						openScope.isOpen = false;
					}

					openScope = dropdownScope;
				};

				this.close = function (dropdownScope) {
					if (openScope === dropdownScope) {
						openScope = null;
						$document.unbind('click', closeDropdown);
						$document.unbind('keydown', keybindFilter);
					}
				};

				var closeDropdown = function (evt) {
					// This method may still be called during the same mouse event that
					// unbound this event handler. So check openScope before proceeding.
					if (!openScope) {
						return;
					}

					if (evt && openScope.getAutoClose() === 'disabled') {
						return;
					}

					var toggleElement = openScope.getToggleElement();
					if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
						return;
					}

					var dropdownElement = openScope.getDropdownElement();
					if (evt && openScope.getAutoClose() === 'outsideClick' &&
						dropdownElement && dropdownElement[0].contains(evt.target)) {
						return;
					}

					openScope.isOpen = false;

					if (!$rootScope.$$phase) {
						openScope.$apply();
					}
				};

				var keybindFilter = function (evt) {
					if (evt.which === 27) {
						openScope.focusToggleElement();
						closeDropdown();
					}
					else if (openScope.isKeynavEnabled() && /(38|40)/.test(evt.which) && openScope.isOpen) {
						evt.preventDefault();
						evt.stopPropagation();
						openScope.focusDropdownEntry(evt.which);
					}
				};
			}])

			.controller('DropdownController', ['$scope', '$attrs', '$parse', 'dropdownConfig', 'dropdownService', '$animate', '$position', '$document', '$compile', '$templateRequest', function ($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate, $position, $document, $compile, $templateRequest) {
				var self = this,
					scope = $scope.$new(), // create a child scope so we are not polluting original one
					templateScope,
					openClass = dropdownConfig.openClass,
					getIsOpen,
					setIsOpen = angular.noop,
					toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,
					appendToBody = false,
					keynavEnabled = false,
					selectedOption = null;

				this.init = function (element) {
					self.$element = element;

					if ($attrs.isOpen) {
						getIsOpen = $parse($attrs.isOpen);
						setIsOpen = getIsOpen.assign;

						$scope.$watch(getIsOpen, function (value) {
							scope.isOpen = !!value;
						});
					}

					appendToBody = angular.isDefined($attrs.dropdownAppendToBody);
					keynavEnabled = angular.isDefined($attrs.keyboardNav);

					if (appendToBody && self.dropdownMenu) {
						$document.find('body').append(self.dropdownMenu);
						element.on('$destroy', function handleDestroyEvent() {
							self.dropdownMenu.remove();
						});
					}
				};

				this.toggle = function (open) {
					return scope.isOpen = arguments.length ? !!open : !scope.isOpen;
				};

				// Allow other directives to watch status
				this.isOpen = function () {
					return scope.isOpen;
				};

				scope.getToggleElement = function () {
					return self.toggleElement;
				};

				scope.getAutoClose = function () {
					return $attrs.autoClose || 'always'; //or 'outsideClick' or 'disabled'
				};

				scope.getElement = function () {
					return self.$element;
				};

				scope.isKeynavEnabled = function () {
					return keynavEnabled;
				};

				scope.focusDropdownEntry = function (keyCode) {
					var elems = self.dropdownMenu ? //If append to body is used.
						(angular.element(self.dropdownMenu).find('a')) :
						(angular.element(self.$element).find('ul').eq(0).find('a'));

					switch (keyCode) {
						case (40):
						{
							if (!angular.isNumber(self.selectedOption)) {
								self.selectedOption = 0;
							} else {
								self.selectedOption = (self.selectedOption === elems.length - 1 ?
									self.selectedOption :
								self.selectedOption + 1);
							}
							break;
						}
						case (38):
						{
							if (!angular.isNumber(self.selectedOption)) {
								return;
							} else {
								self.selectedOption = (self.selectedOption === 0 ?
									0 :
								self.selectedOption - 1);
							}
							break;
						}
					}
					elems[self.selectedOption].focus();
				};

				scope.getDropdownElement = function () {
					return self.dropdownMenu;
				};

				scope.focusToggleElement = function () {
					if (self.toggleElement) {
						self.toggleElement[0].focus();
					}
				};

				scope.$watch('isOpen', function (isOpen, wasOpen) {
					if (appendToBody && self.dropdownMenu) {
						var pos = $position.positionElements(self.$element, self.dropdownMenu, 'bottom-left', true);
						var css = {
							top: pos.top + 'px',
							display: isOpen ? 'block' : 'none'
						};

						var rightalign = self.dropdownMenu.hasClass('dropdown-menu-right');
						if (!rightalign) {
							css.left = pos.left + 'px';
							css.right = 'auto';
						} else {
							css.left = 'auto';
							css.right = (window.innerWidth - (pos.left + self.$element.prop('offsetWidth'))) + 'px';
						}

						self.dropdownMenu.css(css);
					}

					$animate[isOpen ? 'addClass' : 'removeClass'](self.$element, openClass).then(function () {
						if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
							toggleInvoker($scope, {open: !!isOpen});
						}
					});

					if (isOpen) {
						if (self.dropdownMenuTemplateUrl) {
							$templateRequest(self.dropdownMenuTemplateUrl).then(function (tplContent) {
								templateScope = scope.$new();
								$compile(tplContent.trim())(templateScope, function (dropdownElement) {
									var newEl = dropdownElement;
									self.dropdownMenu.replaceWith(newEl);
									self.dropdownMenu = newEl;
								});
							});
						}

						scope.focusToggleElement();
						dropdownService.open(scope);
					} else {
						if (self.dropdownMenuTemplateUrl) {
							if (templateScope) {
								templateScope.$destroy();
							}
							var newEl = angular.element('<ul class="dropdown-menu"></ul>');
							self.dropdownMenu.replaceWith(newEl);
							self.dropdownMenu = newEl;
						}

						dropdownService.close(scope);
						self.selectedOption = null;
					}

					if (angular.isFunction(setIsOpen)) {
						setIsOpen($scope, isOpen);
					}
				});

				$scope.$on('$locationChangeSuccess', function () {
					if (scope.getAutoClose() !== 'disabled') {
						scope.isOpen = false;
					}
				});

				$scope.$on('$destroy', function () {
					scope.$destroy();
				});
			}])

			.directive('dropdown', function () {
				return {
					controller: 'DropdownController',
					link: function (scope, element, attrs, dropdownCtrl) {
						dropdownCtrl.init(element);
						element.addClass('dropdown');
					}
				};
			})

			.directive('dropdownMenu', function () {
				return {
					restrict: 'AC',
					require: '?^dropdown',
					link: function (scope, element, attrs, dropdownCtrl) {
						if (!dropdownCtrl) {
							return;
						}
						var tplUrl = attrs.templateUrl;
						if (tplUrl) {
							dropdownCtrl.dropdownMenuTemplateUrl = tplUrl;
						}
						if (!dropdownCtrl.dropdownMenu) {
							dropdownCtrl.dropdownMenu = element;
						}
					}
				};
			})

			.directive('keyboardNav', function () {
				return {
					restrict: 'A',
					require: '?^dropdown',
					link: function (scope, element, attrs, dropdownCtrl) {

						element.bind('keydown', function (e) {

							if ([38, 40].indexOf(e.which) !== -1) {

								e.preventDefault();
								e.stopPropagation();

								var elems = angular.element(element).find('a');

								switch (e.keyCode) {
									case (40):
									{ // Down
										if (!angular.isNumber(dropdownCtrl.selectedOption)) {
											dropdownCtrl.selectedOption = 0;
										} else {
											dropdownCtrl.selectedOption = (dropdownCtrl.selectedOption === elems.length - 1 ? dropdownCtrl.selectedOption : dropdownCtrl.selectedOption + 1);
										}

									}
										break;
									case (38):
									{ // Up
										dropdownCtrl.selectedOption = (dropdownCtrl.selectedOption === 0 ? 0 : dropdownCtrl.selectedOption - 1);
									}
										break;
								}
								elems[dropdownCtrl.selectedOption].focus();
							}
						});
					}

				};
			})

			.directive('dropdownToggle', function () {
				return {
					require: '?^dropdown',
					link: function (scope, element, attrs, dropdownCtrl) {
						if (!dropdownCtrl) {
							return;
						}

						element.addClass('dropdown-toggle');

						dropdownCtrl.toggleElement = element;

						var toggleDropdown = function (event) {
							event.preventDefault();

							if (!element.hasClass('disabled') && !attrs.disabled) {
								scope.$apply(function () {
									dropdownCtrl.toggle();
								});
							}
						};

						element.bind('click', toggleDropdown);

						// WAI-ARIA
						element.attr({'aria-haspopup': true, 'aria-expanded': false});
						scope.$watch(dropdownCtrl.isOpen, function (isOpen) {
							element.attr('aria-expanded', !!isOpen);
						});

						scope.$on('$destroy', function () {
							element.unbind('click', toggleDropdown);
						});
					}
				};
			});

		angular.module('ui.bootstrap.modal', [])

		/**
		 * A helper, internal data structure that acts as a map but also allows getting / removing
		 * elements in the LIFO order
		 */
			.factory('$$stackedMap', function () {
				return {
					createNew: function () {
						var stack = [];

						return {
							add: function (key, value) {
								stack.push({
									key: key,
									value: value
								});
							},
							get: function (key) {
								for (var i = 0; i < stack.length; i++) {
									if (key == stack[i].key) {
										return stack[i];
									}
								}
							},
							keys: function () {
								var keys = [];
								for (var i = 0; i < stack.length; i++) {
									keys.push(stack[i].key);
								}
								return keys;
							},
							top: function () {
								return stack[stack.length - 1];
							},
							remove: function (key) {
								var idx = -1;
								for (var i = 0; i < stack.length; i++) {
									if (key == stack[i].key) {
										idx = i;
										break;
									}
								}
								return stack.splice(idx, 1)[0];
							},
							removeTop: function () {
								return stack.splice(stack.length - 1, 1)[0];
							},
							length: function () {
								return stack.length;
							}
						};
					}
				};
			})

		/**
		 * A helper directive for the $modal service. It creates a backdrop element.
		 */
			.directive('modalBackdrop', [
				'$animate', '$modalStack',
				function ($animate, $modalStack) {
					return {
						restrict: 'EA',
						replace: true,
						templateUrl: 'template/modal/backdrop.html',
						compile: function (tElement, tAttrs) {
							tElement.addClass(tAttrs.backdropClass);
							return linkFn;
						}
					};

					function linkFn(scope, element, attrs) {
						if (attrs.modalInClass) {
							$animate.addClass(element, attrs.modalInClass);

							scope.$on($modalStack.NOW_CLOSING_EVENT, function (e, setIsAsync) {
								var done = setIsAsync();
								$animate.removeClass(element, attrs.modalInClass).then(done);
							});
						}
					}
				}])

			.directive('modalWindow', [
				'$modalStack', '$q', '$animate',
				function ($modalStack, $q, $animate) {
					return {
						restrict: 'EA',
						scope: {
							index: '@'
						},
						replace: true,
						transclude: true,
						templateUrl: function (tElement, tAttrs) {
							return tAttrs.templateUrl || 'template/modal/window.html';
						},
						link: function (scope, element, attrs) {
							element.addClass(attrs.windowClass || '');
							scope.size = attrs.size;

							scope.close = function (evt) {
								var modal = $modalStack.getTop();
								if (modal && modal.value.backdrop && modal.value.backdrop != 'static' && (evt.target === evt.currentTarget)) {
									evt.preventDefault();
									evt.stopPropagation();
									$modalStack.dismiss(modal.key, 'backdrop click');
								}
							};

							// This property is only added to the scope for the purpose of detecting when this directive is rendered.
							// We can detect that by using this property in the template associated with this directive and then use
							// {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.
							scope.$isRendered = true;

							// Deferred object that will be resolved when this modal is render.
							var modalRenderDeferObj = $q.defer();
							// Observe function will be called on next digest cycle after compilation, ensuring that the DOM is ready.
							// In order to use this way of finding whether DOM is ready, we need to observe a scope property used in modal's template.
							attrs.$observe('modalRender', function (value) {
								if (value == 'true') {
									modalRenderDeferObj.resolve();
								}
							});

							modalRenderDeferObj.promise.then(function () {
								if (attrs.modalInClass) {
									$animate.addClass(element, attrs.modalInClass);

									scope.$on($modalStack.NOW_CLOSING_EVENT, function (e, setIsAsync) {
										var done = setIsAsync();
										$animate.removeClass(element, attrs.modalInClass).then(done);
									});
								}

								var inputsWithAutofocus = element[0].querySelectorAll('[autofocus]');
								/**
								 * Auto-focusing of a freshly-opened modal element causes any child elements
								 * with the autofocus attribute to lose focus. This is an issue on touch
								 * based devices which will show and then hide the onscreen keyboard.
								 * Attempts to refocus the autofocus element via JavaScript will not reopen
								 * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
								 * the modal element if the modal does not contain an autofocus element.
								 */
								if (inputsWithAutofocus.length) {
									inputsWithAutofocus[0].focus();
								} else {
									element[0].focus();
								}

								// Notify {@link $modalStack} that modal is rendered.
								var modal = $modalStack.getTop();
								if (modal) {
									$modalStack.modalRendered(modal.key);
								}
							});
						}
					};
				}])

			.directive('modalAnimationClass', [
				function () {
					return {
						compile: function (tElement, tAttrs) {
							if (tAttrs.modalAnimation) {
								tElement.addClass(tAttrs.modalAnimationClass);
							}
						}
					};
				}])

			.directive('modalTransclude', function () {
				return {
					link: function ($scope, $element, $attrs, controller, $transclude) {
						$transclude($scope.$parent, function (clone) {
							$element.empty();
							$element.append(clone);
						});
					}
				};
			})

			.factory('$modalStack', [
				'$animate', '$timeout', '$document', '$compile', '$rootScope',
				'$q',
				'$$stackedMap',
				function ($animate, $timeout, $document, $compile, $rootScope,
						  $q,
						  $$stackedMap) {

					var OPENED_MODAL_CLASS = 'modal-open';

					var backdropDomEl, backdropScope;
					var openedWindows = $$stackedMap.createNew();
					var $modalStack = {
						NOW_CLOSING_EVENT: 'modal.stack.now-closing'
					};

					//Modal focus behavior
					var focusableElementList;
					var focusIndex = 0;
					var tababbleSelector = 'a[href], area[href], input:not([disabled]), ' +
						'button:not([disabled]),select:not([disabled]), textarea:not([disabled]), ' +
						'iframe, object, embed, *[tabindex], *[contenteditable=true]';

					function backdropIndex() {
						var topBackdropIndex = -1;
						var opened = openedWindows.keys();
						for (var i = 0; i < opened.length; i++) {
							if (openedWindows.get(opened[i]).value.backdrop) {
								topBackdropIndex = i;
							}
						}
						return topBackdropIndex;
					}

					$rootScope.$watch(backdropIndex, function (newBackdropIndex) {
						if (backdropScope) {
							backdropScope.index = newBackdropIndex;
						}
					});

					function removeModalWindow(modalInstance, elementToReceiveFocus) {

						var body = $document.find('body').eq(0);
						var modalWindow = openedWindows.get(modalInstance).value;

						//clean up the stack
						openedWindows.remove(modalInstance);

						removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function () {
							body.toggleClass(OPENED_MODAL_CLASS, openedWindows.length() > 0);
						});
						checkRemoveBackdrop();

						//move focus to specified element if available, or else to body
						if (elementToReceiveFocus && elementToReceiveFocus.focus) {
							elementToReceiveFocus.focus();
						} else {
							body.focus();
						}
					}

					function checkRemoveBackdrop() {
						//remove backdrop if no longer needed
						if (backdropDomEl && backdropIndex() == -1) {
							var backdropScopeRef = backdropScope;
							removeAfterAnimate(backdropDomEl, backdropScope, function () {
								backdropScopeRef = null;
							});
							backdropDomEl = undefined;
							backdropScope = undefined;
						}
					}

					function removeAfterAnimate(domEl, scope, done) {
						var asyncDeferred;
						var asyncPromise = null;
						var setIsAsync = function () {
							if (!asyncDeferred) {
								asyncDeferred = $q.defer();
								asyncPromise = asyncDeferred.promise;
							}

							return function asyncDone() {
								asyncDeferred.resolve();
							};
						};
						scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);

						// Note that it's intentional that asyncPromise might be null.
						// That's when setIsAsync has not been called during the
						// NOW_CLOSING_EVENT broadcast.
						return $q.when(asyncPromise).then(afterAnimating);

						function afterAnimating() {
							if (afterAnimating.done) {
								return;
							}
							afterAnimating.done = true;

							$animate.leave(domEl);
							scope.$destroy();
							if (done) {
								done();
							}
						}
					}

					$document.bind('keydown', function (evt) {
						var modal = openedWindows.top();
						if (modal && modal.value.keyboard) {
							switch (evt.which) {
								case 27:
								{
									evt.preventDefault();
									$rootScope.$apply(function () {
										$modalStack.dismiss(modal.key, 'escape key press');
									});
									break;
								}
								case 9:
								{
									$modalStack.loadFocusElementList(modal);
									var focusChanged = false;
									if (evt.shiftKey) {
										if ($modalStack.isFocusInFirstItem(evt)) {
											focusChanged = $modalStack.focusLastFocusableElement();
										}
									} else {
										if ($modalStack.isFocusInLastItem(evt)) {
											focusChanged = $modalStack.focusFirstFocusableElement();
										}
									}

									if (focusChanged) {
										evt.preventDefault();
										evt.stopPropagation();
									}
									break;
								}
							}
						}
					});

					$modalStack.open = function (modalInstance, modal) {

						var modalOpener = $document[0].activeElement;

						openedWindows.add(modalInstance, {
							deferred: modal.deferred,
							renderDeferred: modal.renderDeferred,
							modalScope: modal.scope,
							backdrop: modal.backdrop,
							keyboard: modal.keyboard
						});

						var body = $document.find('body').eq(0),
							currBackdropIndex = backdropIndex();

						if (currBackdropIndex >= 0 && !backdropDomEl) {
							backdropScope = $rootScope.$new(true);
							backdropScope.index = currBackdropIndex;
							var angularBackgroundDomEl = angular.element('<div modal-backdrop="modal-backdrop"></div>');
							angularBackgroundDomEl.attr('backdrop-class', modal.backdropClass);
							if (modal.animation) {
								angularBackgroundDomEl.attr('modal-animation', 'true');
							}
							backdropDomEl = $compile(angularBackgroundDomEl)(backdropScope);
							body.append(backdropDomEl);
						}

						var angularDomEl = angular.element('<div modal-window="modal-window"></div>');
						angularDomEl.attr({
							'template-url': modal.windowTemplateUrl,
							'window-class': modal.windowClass,
							'size': modal.size,
							'index': openedWindows.length() - 1,
							'animate': 'animate'
						}).html(modal.content);
						if (modal.animation) {
							angularDomEl.attr('modal-animation', 'true');
						}

						var modalDomEl = $compile(angularDomEl)(modal.scope);
						openedWindows.top().value.modalDomEl = modalDomEl;
						openedWindows.top().value.modalOpener = modalOpener;
						body.append(modalDomEl);
						body.addClass(OPENED_MODAL_CLASS);
						$modalStack.clearFocusListCache();
					};

					function broadcastClosing(modalWindow, resultOrReason, closing) {
						return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented;
					}

					$modalStack.close = function (modalInstance, result) {
						var modalWindow = openedWindows.get(modalInstance);
						if (modalWindow && broadcastClosing(modalWindow, result, true)) {
							modalWindow.value.deferred.resolve(result);
							removeModalWindow(modalInstance, modalWindow.value.modalOpener);
							return true;
						}
						return !modalWindow;
					};

					$modalStack.dismiss = function (modalInstance, reason) {
						var modalWindow = openedWindows.get(modalInstance);
						if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
							modalWindow.value.deferred.reject(reason);
							removeModalWindow(modalInstance, modalWindow.value.modalOpener);
							return true;
						}
						return !modalWindow;
					};

					$modalStack.dismissAll = function (reason) {
						var topModal = this.getTop();
						while (topModal && this.dismiss(topModal.key, reason)) {
							topModal = this.getTop();
						}
					};

					$modalStack.getTop = function () {
						return openedWindows.top();
					};

					$modalStack.modalRendered = function (modalInstance) {
						var modalWindow = openedWindows.get(modalInstance);
						if (modalWindow) {
							modalWindow.value.renderDeferred.resolve();
						}
					};

					$modalStack.focusFirstFocusableElement = function () {
						if (focusableElementList.length > 0) {
							focusableElementList[0].focus();
							return true;
						}
						return false;
					};
					$modalStack.focusLastFocusableElement = function () {
						if (focusableElementList.length > 0) {
							focusableElementList[focusableElementList.length - 1].focus();
							return true;
						}
						return false;
					};

					$modalStack.isFocusInFirstItem = function (evt) {
						if (focusableElementList.length > 0) {
							return (evt.target || evt.srcElement) == focusableElementList[0];
						}
						return false;
					};

					$modalStack.isFocusInLastItem = function (evt) {
						if (focusableElementList.length > 0) {
							return (evt.target || evt.srcElement) == focusableElementList[focusableElementList.length - 1];
						}
						return false;
					};

					$modalStack.clearFocusListCache = function () {
						focusableElementList = [];
						focusIndex = 0;
					};

					$modalStack.loadFocusElementList = function (modalWindow) {
						if (focusableElementList === undefined || !focusableElementList.length0) {
							if (modalWindow) {
								var modalDomE1 = modalWindow.value.modalDomEl;
								if (modalDomE1 && modalDomE1.length) {
									focusableElementList = modalDomE1[0].querySelectorAll(tababbleSelector);
								}
							}
						}
					};

					return $modalStack;
				}])

			.provider('$modal', function () {

				var $modalProvider = {
					options: {
						animation: true,
						backdrop: true, //can also be false or 'static'
						keyboard: true
					},
					$get: ['$injector', '$rootScope', '$q', '$templateRequest', '$controller', '$modalStack',
						function ($injector, $rootScope, $q, $templateRequest, $controller, $modalStack) {

							var $modal = {};

							function getTemplatePromise(options) {
								return options.template ? $q.when(options.template) :
									$templateRequest(angular.isFunction(options.templateUrl) ? (options.templateUrl)() : options.templateUrl);
							}

							function getResolvePromises(resolves) {
								var promisesArr = [];
								angular.forEach(resolves, function (value) {
									if (angular.isFunction(value) || angular.isArray(value)) {
										promisesArr.push($q.when($injector.invoke(value)));
									}
								});
								return promisesArr;
							}

							$modal.open = function (modalOptions) {

								var modalResultDeferred = $q.defer();
								var modalOpenedDeferred = $q.defer();
								var modalRenderDeferred = $q.defer();

								//prepare an instance of a modal to be injected into controllers and returned to a caller
								var modalInstance = {
									result: modalResultDeferred.promise,
									opened: modalOpenedDeferred.promise,
									rendered: modalRenderDeferred.promise,
									close: function (result) {
										return $modalStack.close(modalInstance, result);
									},
									dismiss: function (reason) {
										return $modalStack.dismiss(modalInstance, reason);
									}
								};

								//merge and clean up options
								modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
								modalOptions.resolve = modalOptions.resolve || {};

								//verify options
								if (!modalOptions.template && !modalOptions.templateUrl) {
									throw new Error('One of template or templateUrl options is required.');
								}

								var templateAndResolvePromise =
									$q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));


								templateAndResolvePromise.then(function resolveSuccess(tplAndVars) {

									var modalScope = (modalOptions.scope || $rootScope).$new();
									modalScope.$close = modalInstance.close;
									modalScope.$dismiss = modalInstance.dismiss;

									var ctrlInstance, ctrlLocals = {};
									var resolveIter = 1;

									//controllers
									if (modalOptions.controller) {
										ctrlLocals.$scope = modalScope;
										ctrlLocals.$modalInstance = modalInstance;
										angular.forEach(modalOptions.resolve, function (value, key) {
											ctrlLocals[key] = tplAndVars[resolveIter++];
										});

										ctrlInstance = $controller(modalOptions.controller, ctrlLocals);
										if (modalOptions.controllerAs) {
											if (modalOptions.bindToController) {
												angular.extend(ctrlInstance, modalScope);
											}

											modalScope[modalOptions.controllerAs] = ctrlInstance;
										}
									}

									$modalStack.open(modalInstance, {
										scope: modalScope,
										deferred: modalResultDeferred,
										renderDeferred: modalRenderDeferred,
										content: tplAndVars[0],
										animation: modalOptions.animation,
										backdrop: modalOptions.backdrop,
										keyboard: modalOptions.keyboard,
										backdropClass: modalOptions.backdropClass,
										windowClass: modalOptions.windowClass,
										windowTemplateUrl: modalOptions.windowTemplateUrl,
										size: modalOptions.size
									});

								}, function resolveError(reason) {
									modalResultDeferred.reject(reason);
								});

								templateAndResolvePromise.then(function () {
									modalOpenedDeferred.resolve(true);
								}, function (reason) {
									modalOpenedDeferred.reject(reason);
								});

								return modalInstance;
							};

							return $modal;
						}]
				};

				return $modalProvider;
			});

		angular.module('ui.bootstrap.pagination', [])
			.controller('PaginationController', ['$scope', '$attrs', '$parse', function ($scope, $attrs, $parse) {
				var self = this,
					ngModelCtrl = {$setViewValue: angular.noop}, // nullModelCtrl
					setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;

				this.init = function (ngModelCtrl_, config) {
					ngModelCtrl = ngModelCtrl_;
					this.config = config;

					ngModelCtrl.$render = function () {
						self.render();
					};

					if ($attrs.itemsPerPage) {
						$scope.$parent.$watch($parse($attrs.itemsPerPage), function (value) {
							self.itemsPerPage = parseInt(value, 10);
							$scope.totalPages = self.calculateTotalPages();
						});
					} else {
						this.itemsPerPage = config.itemsPerPage;
					}

					$scope.$watch('totalItems', function () {
						$scope.totalPages = self.calculateTotalPages();
					});

					$scope.$watch('totalPages', function (value) {
						setNumPages($scope.$parent, value); // Readonly variable

						if ($scope.page > value) {
							$scope.selectPage(value);
						} else {
							ngModelCtrl.$render();
						}
					});
				};

				this.calculateTotalPages = function () {
					var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / this.itemsPerPage);
					return Math.max(totalPages || 0, 1);
				};

				this.render = function () {
					$scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1;
				};

				$scope.selectPage = function (page, evt) {
					var clickAllowed = !$scope.ngDisabled || !evt;
					if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
						if (evt && evt.target) {
							evt.target.blur();
						}
						ngModelCtrl.$setViewValue(page);
						ngModelCtrl.$render();
					}
				};

				$scope.getText = function (key) {
					return $scope[key + 'Text'] || self.config[key + 'Text'];
				};
				$scope.noPrevious = function () {
					return $scope.page === 1;
				};
				$scope.noNext = function () {
					return $scope.page === $scope.totalPages;
				};
			}])

			.constant('paginationConfig', {
				itemsPerPage: 10,
				boundaryLinks: false,
				directionLinks: true,
				firstText: 'First',
				previousText: 'Previous',
				nextText: 'Next',
				lastText: 'Last',
				rotate: true
			})

			.directive('pagination', ['$parse', 'paginationConfig', function ($parse, paginationConfig) {
				return {
					restrict: 'EA',
					scope: {
						totalItems: '=',
						firstText: '@',
						previousText: '@',
						nextText: '@',
						lastText: '@',
						ngDisabled: '='
					},
					require: ['pagination', '?ngModel'],
					controller: 'PaginationController',
					templateUrl: 'template/pagination/pagination.html',
					replace: true,
					link: function (scope, element, attrs, ctrls) {
						var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

						if (!ngModelCtrl) {
							return; // do nothing if no ng-model
						}

						// Setup configuration parameters
						var maxSize = angular.isDefined(attrs.maxSize) ? scope.$parent.$eval(attrs.maxSize) : paginationConfig.maxSize,
							rotate = angular.isDefined(attrs.rotate) ? scope.$parent.$eval(attrs.rotate) : paginationConfig.rotate;
						scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : paginationConfig.boundaryLinks;
						scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : paginationConfig.directionLinks;

						paginationCtrl.init(ngModelCtrl, paginationConfig);

						if (attrs.maxSize) {
							scope.$parent.$watch($parse(attrs.maxSize), function (value) {
								maxSize = parseInt(value, 10);
								paginationCtrl.render();
							});
						}

						// Create page object used in template
						function makePage(number, text, isActive) {
							return {
								number: number,
								text: text,
								active: isActive
							};
						}

						function getPages(currentPage, totalPages) {
							var pages = [];

							// Default page limits
							var startPage = 1, endPage = totalPages;
							var isMaxSized = ( angular.isDefined(maxSize) && maxSize < totalPages );

							// recompute if maxSize
							if (isMaxSized) {
								if (rotate) {
									// Current page is displayed in the middle of the visible ones
									startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
									endPage = startPage + maxSize - 1;

									// Adjust if limit is exceeded
									if (endPage > totalPages) {
										endPage = totalPages;
										startPage = endPage - maxSize + 1;
									}
								} else {
									// Visible pages are paginated with maxSize
									startPage = ((Math.ceil(currentPage / maxSize) - 1) * maxSize) + 1;

									// Adjust last page if limit is exceeded
									endPage = Math.min(startPage + maxSize - 1, totalPages);
								}
							}

							// Add page number links
							for (var number = startPage; number <= endPage; number++) {
								var page = makePage(number, number, number === currentPage);
								pages.push(page);
							}

							// Add links to move between page sets
							if (isMaxSized && !rotate) {
								if (startPage > 1) {
									var previousPageSet = makePage(startPage - 1, '...', false);
									pages.unshift(previousPageSet);
								}

								if (endPage < totalPages) {
									var nextPageSet = makePage(endPage + 1, '...', false);
									pages.push(nextPageSet);
								}
							}

							return pages;
						}

						var originalRender = paginationCtrl.render;
						paginationCtrl.render = function () {
							originalRender();
							if (scope.page > 0 && scope.page <= scope.totalPages) {
								scope.pages = getPages(scope.page, scope.totalPages);
							}
						};
					}
				};
			}])

			.constant('pagerConfig', {
				itemsPerPage: 10,
				previousText: '« Previous',
				nextText: 'Next »',
				align: true
			})

			.directive('pager', ['pagerConfig', function (pagerConfig) {
				return {
					restrict: 'EA',
					scope: {
						totalItems: '=',
						previousText: '@',
						nextText: '@'
					},
					require: ['pager', '?ngModel'],
					controller: 'PaginationController',
					templateUrl: 'template/pagination/pager.html',
					replace: true,
					link: function (scope, element, attrs, ctrls) {
						var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

						if (!ngModelCtrl) {
							return; // do nothing if no ng-model
						}

						scope.align = angular.isDefined(attrs.align) ? scope.$parent.$eval(attrs.align) : pagerConfig.align;
						paginationCtrl.init(ngModelCtrl, pagerConfig);
					}
				};
			}]);

		/**
		 * The following features are still outstanding: animation as a
		 * function, placement as a function, inside, support for more triggers than
		 * just mouse enter/leave, html tooltips, and selector delegation.
		 */
		angular.module('ui.bootstrap.tooltip', ['ui.bootstrap.position', 'ui.bootstrap.bindHtml'])

		/**
		 * The $tooltip service creates tooltip- and popover-like directives as well as
		 * houses global options for them.
		 */
			.provider('$tooltip', function () {
				// The default options tooltip and popover.
				var defaultOptions = {
					placement: 'top',
					animation: true,
					popupDelay: 0,
					useContentExp: false
				};

				// Default hide triggers for each show trigger
				var triggerMap = {
					'mouseenter': 'mouseleave',
					'click': 'click',
					'focus': 'blur'
				};

				// The options specified to the provider globally.
				var globalOptions = {};

				/**
				 * `options({})` allows global configuration of all tooltips in the
				 * application.
				 *
				 *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
	   *     // place tooltips left instead of top by default
	   *     $tooltipProvider.options( { placement: 'left' } );
	   *   });
				 */
				this.options = function (value) {
					angular.extend(globalOptions, value);
				};

				/**
				 * This allows you to extend the set of trigger mappings available. E.g.:
				 *
				 *   $tooltipProvider.setTriggers( 'openTrigger': 'closeTrigger' );
				 */
				this.setTriggers = function setTriggers(triggers) {
					angular.extend(triggerMap, triggers);
				};

				/**
				 * This is a helper function for translating camel-case to snake-case.
				 */
				function snake_case(name) {
					var regexp = /[A-Z]/g;
					var separator = '-';
					return name.replace(regexp, function (letter, pos) {
						return (pos ? separator : '') + letter.toLowerCase();
					});
				}

				/**
				 * Returns the actual instance of the $tooltip service.
				 * TODO support multiple triggers
				 */
				this.$get = ['$window', '$compile', '$timeout', '$document', '$position', '$interpolate', function ($window, $compile, $timeout, $document, $position, $interpolate) {
					return function $tooltip(type, prefix, defaultTriggerShow, options) {
						options = angular.extend({}, defaultOptions, globalOptions, options);

						/**
						 * Returns an object of show and hide triggers.
						 *
						 * If a trigger is supplied,
						 * it is used to show the tooltip; otherwise, it will use the `trigger`
						 * option passed to the `$tooltipProvider.options` method; else it will
						 * default to the trigger supplied to this directive factory.
						 *
						 * The hide trigger is based on the show trigger. If the `trigger` option
						 * was passed to the `$tooltipProvider.options` method, it will use the
						 * mapped trigger from `triggerMap` or the passed trigger if the map is
						 * undefined; otherwise, it uses the `triggerMap` value of the show
						 * trigger; else it will just use the show trigger.
						 */
						function getTriggers(trigger) {
							var show = trigger || options.trigger || defaultTriggerShow;
							var hide = triggerMap[show] || show;
							return {
								show: show,
								hide: hide
							};
						}

						var directiveName = snake_case(type);

						var startSym = $interpolate.startSymbol();
						var endSym = $interpolate.endSymbol();
						var template =
							'<div ' + directiveName + '-popup ' +
							'title="' + startSym + 'title' + endSym + '" ' +
							(options.useContentExp ?
								'content-exp="contentExp()" ' :
							'content="' + startSym + 'content' + endSym + '" ') +
							'placement="' + startSym + 'placement' + endSym + '" ' +
							'popup-class="' + startSym + 'popupClass' + endSym + '" ' +
							'animation="animation" ' +
							'is-open="isOpen"' +
							'origin-scope="origScope" ' +
							'>' +
							'</div>';

						return {
							restrict: 'EA',
							compile: function (tElem, tAttrs) {
								var tooltipLinker = $compile(template);

								return function link(scope, element, attrs, tooltipCtrl) {
									var tooltip;
									var tooltipLinkedScope;
									var transitionTimeout;
									var popupTimeout;
									var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
									var triggers = getTriggers(undefined);
									var hasEnableExp = angular.isDefined(attrs[prefix + 'Enable']);
									var ttScope = scope.$new(true);

									var positionTooltip = function () {
										if (!tooltip) {
											return;
										}

										var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
										ttPosition.top += 'px';
										ttPosition.left += 'px';

										// Now set the calculated positioning.
										tooltip.css(ttPosition);
									};

									var positionTooltipAsync = function () {
										$timeout(positionTooltip, 0, false);
									};

									// Set up the correct scope to allow transclusion later
									ttScope.origScope = scope;

									// By default, the tooltip is not open.
									// TODO add ability to start tooltip opened
									ttScope.isOpen = false;

									function toggleTooltipBind() {
										if (!ttScope.isOpen) {
											showTooltipBind();
										} else {
											hideTooltipBind();
										}
									}

									// Show the tooltip with delay if specified, otherwise show it immediately
									function showTooltipBind() {
										if (hasEnableExp && !scope.$eval(attrs[prefix + 'Enable'])) {
											return;
										}

										prepareTooltip();

										if (ttScope.popupDelay) {
											// Do nothing if the tooltip was already scheduled to pop-up.
											// This happens if show is triggered multiple times before any hide is triggered.
											if (!popupTimeout) {
												popupTimeout = $timeout(show, ttScope.popupDelay, false);
												popupTimeout.then(function (reposition) {
													reposition();
												});
											}
										} else {
											show()();
										}
									}

									function hideTooltipBind() {
										scope.$apply(function () {
											hide();
										});
									}

									// Show the tooltip popup element.
									function show() {

										popupTimeout = null;

										// If there is a pending remove transition, we must cancel it, lest the
										// tooltip be mysteriously removed.
										if (transitionTimeout) {
											$timeout.cancel(transitionTimeout);
											transitionTimeout = null;
										}

										// Don't show empty tooltips.
										if (!(options.useContentExp ? ttScope.contentExp() : ttScope.content)) {
											return angular.noop;
										}

										createTooltip();

										// Set the initial positioning.
										tooltip.css({top: 0, left: 0, display: 'block'});
										ttScope.$digest();

										positionTooltip();

										// And show the tooltip.
										ttScope.isOpen = true;
										ttScope.$apply(); // digest required as $apply is not called

										// Return positioning function as promise callback for correct
										// positioning after draw.
										return positionTooltip;
									}

									// Hide the tooltip popup element.
									function hide() {
										// First things first: we don't show it anymore.
										ttScope.isOpen = false;

										//if tooltip is going to be shown after delay, we must cancel this
										$timeout.cancel(popupTimeout);
										popupTimeout = null;

										// And now we remove it from the DOM. However, if we have animation, we
										// need to wait for it to expire beforehand.
										// FIXME: this is a placeholder for a port of the transitions library.
										if (ttScope.animation) {
											if (!transitionTimeout) {
												transitionTimeout = $timeout(removeTooltip, 500);
											}
										} else {
											removeTooltip();
										}
									}

									function createTooltip() {
										// There can only be one tooltip element per directive shown at once.
										if (tooltip) {
											removeTooltip();
										}
										tooltipLinkedScope = ttScope.$new();
										tooltip = tooltipLinker(tooltipLinkedScope, function (tooltip) {
											if (appendToBody) {
												$document.find('body').append(tooltip);
											} else {
												element.after(tooltip);
											}
										});

										if (options.useContentExp) {
											tooltipLinkedScope.$watch('contentExp()', function (val) {
												positionTooltipAsync();
												if (!val && ttScope.isOpen) {
													hide();
												}
											});
										}
									}

									function removeTooltip() {
										transitionTimeout = null;
										if (tooltip) {
											tooltip.remove();
											tooltip = null;
										}
										if (tooltipLinkedScope) {
											tooltipLinkedScope.$destroy();
											tooltipLinkedScope = null;
										}
									}

									function prepareTooltip() {
										prepPopupClass();
										prepPlacement();
										prepPopupDelay();
									}

									ttScope.contentExp = function () {
										return scope.$eval(attrs[type]);
									};

									/**
									 * Observe the relevant attributes.
									 */
									if (!options.useContentExp) {
										attrs.$observe(type, function (val) {
											ttScope.content = val;
											positionTooltipAsync();

											if (!val && ttScope.isOpen) {
												hide();
											}
										});
									}

									attrs.$observe('disabled', function (val) {
										if (val && ttScope.isOpen) {
											hide();
										}
									});

									attrs.$observe(prefix + 'Title', function (val) {
										ttScope.title = val;
										positionTooltipAsync();
									});

									attrs.$observe(prefix + 'Placement', function () {
										if (ttScope.isOpen) {
											$timeout(function () {
												prepPlacement();
												show()();
											}, 0, false);
										}
									});

									function prepPopupClass() {
										ttScope.popupClass = attrs[prefix + 'Class'];
									}

									function prepPlacement() {
										var val = attrs[prefix + 'Placement'];
										ttScope.placement = angular.isDefined(val) ? val : options.placement;
									}

									function prepPopupDelay() {
										var val = attrs[prefix + 'PopupDelay'];
										var delay = parseInt(val, 10);
										ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay;
									}

									var unregisterTriggers = function () {
										element.unbind(triggers.show, showTooltipBind);
										element.unbind(triggers.hide, hideTooltipBind);
									};

									function prepTriggers() {
										var val = attrs[prefix + 'Trigger'];
										unregisterTriggers();

										triggers = getTriggers(val);

										if (triggers.show === triggers.hide) {
											element.bind(triggers.show, toggleTooltipBind);
										} else {
											element.bind(triggers.show, showTooltipBind);
											element.bind(triggers.hide, hideTooltipBind);
										}
									}

									prepTriggers();

									var animation = scope.$eval(attrs[prefix + 'Animation']);
									ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

									var appendToBodyVal = scope.$eval(attrs[prefix + 'AppendToBody']);
									appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

									// if a tooltip is attached to <body> we need to remove it on
									// location change as its parent scope will probably not be destroyed
									// by the change.
									if (appendToBody) {
										scope.$on('$locationChangeSuccess', function closeTooltipOnLocationChangeSuccess() {
											if (ttScope.isOpen) {
												hide();
											}
										});
									}

									// Make sure tooltip is destroyed and removed.
									scope.$on('$destroy', function onDestroyTooltip() {
										$timeout.cancel(transitionTimeout);
										$timeout.cancel(popupTimeout);
										unregisterTriggers();
										removeTooltip();
										ttScope = null;
									});
								};
							}
						};
					};
				}];
			})

			// This is mostly ngInclude code but with a custom scope
			.directive('tooltipTemplateTransclude', [
				'$animate', '$sce', '$compile', '$templateRequest',
				function ($animate, $sce, $compile, $templateRequest) {
					return {
						link: function (scope, elem, attrs) {
							var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);

							var changeCounter = 0,
								currentScope,
								previousElement,
								currentElement;

							var cleanupLastIncludeContent = function () {
								if (previousElement) {
									previousElement.remove();
									previousElement = null;
								}
								if (currentScope) {
									currentScope.$destroy();
									currentScope = null;
								}
								if (currentElement) {
									$animate.leave(currentElement).then(function () {
										previousElement = null;
									});
									previousElement = currentElement;
									currentElement = null;
								}
							};

							scope.$watch($sce.parseAsResourceUrl(attrs.tooltipTemplateTransclude), function (src) {
								var thisChangeId = ++changeCounter;

								if (src) {
									//set the 2nd param to true to ignore the template request error so that the inner
									//contents and scope can be cleaned up.
									$templateRequest(src, true).then(function (response) {
										if (thisChangeId !== changeCounter) {
											return;
										}
										var newScope = origScope.$new();
										var template = response;

										var clone = $compile(template)(newScope, function (clone) {
											cleanupLastIncludeContent();
											$animate.enter(clone, elem);
										});

										currentScope = newScope;
										currentElement = clone;

										currentScope.$emit('$includeContentLoaded', src);
									}, function () {
										if (thisChangeId === changeCounter) {
											cleanupLastIncludeContent();
											scope.$emit('$includeContentError', src);
										}
									});
									scope.$emit('$includeContentRequested', src);
								} else {
									cleanupLastIncludeContent();
								}
							});

							scope.$on('$destroy', cleanupLastIncludeContent);
						}
					};
				}])

		/**
		 * Note that it's intentional that these classes are *not* applied through $animate.
		 * They must not be animated as they're expected to be present on the tooltip on
		 * initialization.
		 */
			.directive('tooltipClasses', function () {
				return {
					restrict: 'A',
					link: function (scope, element, attrs) {
						if (scope.placement) {
							element.addClass(scope.placement);
						}
						if (scope.popupClass) {
							element.addClass(scope.popupClass);
						}
						if (scope.animation()) {
							element.addClass(attrs.tooltipAnimationClass);
						}
					}
				};
			})

			.directive('tooltipPopup', function () {
				return {
					restrict: 'EA',
					replace: true,
					scope: {content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&'},
					templateUrl: 'template/tooltip/tooltip-popup.html'
				};
			})

			.directive('tooltip', ['$tooltip', function ($tooltip) {
				return $tooltip('tooltip', 'tooltip', 'mouseenter');
			}])

			.directive('tooltipTemplatePopup', function () {
				return {
					restrict: 'EA',
					replace: true,
					scope: {
						contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',
						originScope: '&'
					},
					templateUrl: 'template/tooltip/tooltip-template-popup.html'
				};
			})

			.directive('tooltipTemplate', ['$tooltip', function ($tooltip) {
				return $tooltip('tooltipTemplate', 'tooltip', 'mouseenter', {
					useContentExp: true
				});
			}])

			.directive('tooltipHtmlPopup', function () {
				return {
					restrict: 'EA',
					replace: true,
					scope: {contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&'},
					templateUrl: 'template/tooltip/tooltip-html-popup.html'
				};
			})

			.directive('tooltipHtml', ['$tooltip', function ($tooltip) {
				return $tooltip('tooltipHtml', 'tooltip', 'mouseenter', {
					useContentExp: true
				});
			}])

			/*
			 Deprecated
			 */
			.directive('tooltipHtmlUnsafePopup', function () {
				return {
					restrict: 'EA',
					replace: true,
					scope: {content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&'},
					templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'
				};
			})

			.value('tooltipHtmlUnsafeSuppressDeprecated', false)
			.directive('tooltipHtmlUnsafe', [
				'$tooltip', 'tooltipHtmlUnsafeSuppressDeprecated', '$log',
				function ($tooltip, tooltipHtmlUnsafeSuppressDeprecated, $log) {
					if (!tooltipHtmlUnsafeSuppressDeprecated) {
						$log.warn('tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead.');
					}
					return $tooltip('tooltipHtmlUnsafe', 'tooltip', 'mouseenter');
				}]);

		/**
		 * The following features are still outstanding: popup delay, animation as a
		 * function, placement as a function, inside, support for more triggers than
		 * just mouse enter/leave, and selector delegatation.
		 */
		angular.module('ui.bootstrap.popover', ['ui.bootstrap.tooltip'])

			.directive('popoverTemplatePopup', function () {
				return {
					restrict: 'EA',
					replace: true,
					scope: {
						title: '@', contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',
						originScope: '&'
					},
					templateUrl: 'template/popover/popover-template.html'
				};
			})

			.directive('popoverTemplate', ['$tooltip', function ($tooltip) {
				return $tooltip('popoverTemplate', 'popover', 'click', {
					useContentExp: true
				});
			}])

			.directive('popoverHtmlPopup', function () {
				return {
					restrict: 'EA',
					replace: true,
					scope: {contentExp: '&', title: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&'},
					templateUrl: 'template/popover/popover-html.html'
				};
			})

			.directive('popoverHtml', ['$tooltip', function ($tooltip) {
				return $tooltip('popoverHtml', 'popover', 'click', {
					useContentExp: true
				});
			}])

			.directive('popoverPopup', function () {
				return {
					restrict: 'EA',
					replace: true,
					scope: {title: '@', content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&'},
					templateUrl: 'template/popover/popover.html'
				};
			})

			.directive('popover', ['$tooltip', function ($tooltip) {
				return $tooltip('popover', 'popover', 'click');
			}]);

		angular.module('ui.bootstrap.progressbar', [])

			.constant('progressConfig', {
				animate: true,
				max: 100
			})

			.controller('ProgressController', ['$scope', '$attrs', 'progressConfig', function ($scope, $attrs, progressConfig) {
				var self = this,
					animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

				this.bars = [];
				$scope.max = angular.isDefined($scope.max) ? $scope.max : progressConfig.max;

				this.addBar = function (bar, element) {
					if (!animate) {
						element.css({'transition': 'none'});
					}

					this.bars.push(bar);

					bar.max = $scope.max;

					bar.$watch('value', function (value) {
						bar.recalculatePercentage();
					});

					bar.recalculatePercentage = function () {
						bar.percent = +(100 * bar.value / bar.max).toFixed(2);

						var totalPercentage = 0;
						self.bars.forEach(function (bar) {
							totalPercentage += bar.percent;
						});

						if (totalPercentage > 100) {
							bar.percent -= totalPercentage - 100;
						}
					};

					bar.$on('$destroy', function () {
						element = null;
						self.removeBar(bar);
					});
				};

				this.removeBar = function (bar) {
					this.bars.splice(this.bars.indexOf(bar), 1);
				};

				$scope.$watch('max', function (max) {
					self.bars.forEach(function (bar) {
						bar.max = $scope.max;
						bar.recalculatePercentage();
					});
				});
			}])

			.directive('progress', function () {
				return {
					restrict: 'EA',
					replace: true,
					transclude: true,
					controller: 'ProgressController',
					require: 'progress',
					scope: {
						max: '=?'
					},
					templateUrl: 'template/progressbar/progress.html'
				};
			})

			.directive('bar', function () {
				return {
					restrict: 'EA',
					replace: true,
					transclude: true,
					require: '^progress',
					scope: {
						value: '=',
						type: '@'
					},
					templateUrl: 'template/progressbar/bar.html',
					link: function (scope, element, attrs, progressCtrl) {
						progressCtrl.addBar(scope, element);
					}
				};
			})

			.directive('progressbar', function () {
				return {
					restrict: 'EA',
					replace: true,
					transclude: true,
					controller: 'ProgressController',
					scope: {
						value: '=',
						max: '=?',
						type: '@'
					},
					templateUrl: 'template/progressbar/progressbar.html',
					link: function (scope, element, attrs, progressCtrl) {
						progressCtrl.addBar(scope, angular.element(element.children()[0]));
					}
				};
			});

		angular.module('ui.bootstrap.rating', [])

			.constant('ratingConfig', {
				max: 5,
				stateOn: null,
				stateOff: null,
				titles: ['one', 'two', 'three', 'four', 'five']
			})

			.controller('RatingController', ['$scope', '$attrs', 'ratingConfig', function ($scope, $attrs, ratingConfig) {
				var ngModelCtrl = {$setViewValue: angular.noop};

				this.init = function (ngModelCtrl_) {
					ngModelCtrl = ngModelCtrl_;
					ngModelCtrl.$render = this.render;

					ngModelCtrl.$formatters.push(function (value) {
						if (angular.isNumber(value) && value << 0 !== value) {
							value = Math.round(value);
						}
						return value;
					});

					this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
					this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
					var tmpTitles = angular.isDefined($attrs.titles) ? $scope.$parent.$eval($attrs.titles) : ratingConfig.titles;
					this.titles = angular.isArray(tmpTitles) && tmpTitles.length > 0 ?
						tmpTitles : ratingConfig.titles;

					var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) :
						new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
					$scope.range = this.buildTemplateObjects(ratingStates);
				};

				this.buildTemplateObjects = function (states) {
					for (var i = 0, n = states.length; i < n; i++) {
						states[i] = angular.extend({index: i}, {
							stateOn: this.stateOn,
							stateOff: this.stateOff,
							title: this.getTitle(i)
						}, states[i]);
					}
					return states;
				};

				this.getTitle = function (index) {
					if (index >= this.titles.length) {
						return index + 1;
					} else {
						return this.titles[index];
					}
				};

				$scope.rate = function (value) {
					if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
						ngModelCtrl.$setViewValue(ngModelCtrl.$viewValue === value ? 0 : value);
						ngModelCtrl.$render();
					}
				};

				$scope.enter = function (value) {
					if (!$scope.readonly) {
						$scope.value = value;
					}
					$scope.onHover({value: value});
				};

				$scope.reset = function () {
					$scope.value = ngModelCtrl.$viewValue;
					$scope.onLeave();
				};

				$scope.onKeydown = function (evt) {
					if (/(37|38|39|40)/.test(evt.which)) {
						evt.preventDefault();
						evt.stopPropagation();
						$scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1));
					}
				};

				this.render = function () {
					$scope.value = ngModelCtrl.$viewValue;
				};
			}])

			.directive('rating', function () {
				return {
					restrict: 'EA',
					require: ['rating', 'ngModel'],
					scope: {
						readonly: '=?',
						onHover: '&',
						onLeave: '&'
					},
					controller: 'RatingController',
					templateUrl: 'template/rating/rating.html',
					replace: true,
					link: function (scope, element, attrs, ctrls) {
						var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
						ratingCtrl.init(ngModelCtrl);
					}
				};
			});


		/**
		 * @ngdoc overview
		 * @name ui.bootstrap.tabs
		 *
		 * @description
		 * AngularJS version of the tabs directive.
		 */

		angular.module('ui.bootstrap.tabs', [])

			.controller('TabsetController', ['$scope', function TabsetCtrl($scope) {
				var ctrl = this,
					tabs = ctrl.tabs = $scope.tabs = [];

				ctrl.select = function (selectedTab) {
					angular.forEach(tabs, function (tab) {
						if (tab.active && tab !== selectedTab) {
							tab.active = false;
							tab.onDeselect();
						}
					});
					selectedTab.active = true;
					selectedTab.onSelect();
				};

				ctrl.addTab = function addTab(tab) {
					tabs.push(tab);
					// we can't run the select function on the first tab
					// since that would select it twice
					if (tabs.length === 1 && tab.active !== false) {
						tab.active = true;
					} else if (tab.active) {
						ctrl.select(tab);
					}
					else {
						tab.active = false;
					}
				};

				ctrl.removeTab = function removeTab(tab) {
					var index = tabs.indexOf(tab);
					//Select a new tab if the tab to be removed is selected and not destroyed
					if (tab.active && tabs.length > 1 && !destroyed) {
						//If this is the last tab, select the previous tab. else, the next tab.
						var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;
						ctrl.select(tabs[newActiveIndex]);
					}
					tabs.splice(index, 1);
				};

				var destroyed;
				$scope.$on('$destroy', function () {
					destroyed = true;
				});
			}])

		/**
		 * @ngdoc directive
		 * @name ui.bootstrap.tabs.directive:tabset
		 * @restrict EA
		 *
		 * @description
		 * Tabset is the outer container for the tabs directive
		 *
		 * @param {boolean=} vertical Whether or not to use vertical styling for the tabs.
		 * @param {boolean=} justified Whether or not to use justified styling for the tabs.
		 *
		 * @example
		 <example module="ui.bootstrap">
		 <file name="index.html">
		 <tabset>
		 <tab heading="Tab 1"><b>First</b> Content!</tab>
		 <tab heading="Tab 2"><i>Second</i> Content!</tab>
		 </tabset>
		 <hr />
		 <tabset vertical="true">
		 <tab heading="Vertical Tab 1"><b>First</b> Vertical Content!</tab>
		 <tab heading="Vertical Tab 2"><i>Second</i> Vertical Content!</tab>
		 </tabset>
		 <tabset justified="true">
		 <tab heading="Justified Tab 1"><b>First</b> Justified Content!</tab>
		 <tab heading="Justified Tab 2"><i>Second</i> Justified Content!</tab>
		 </tabset>
		 </file>
		 </example>
		 */
			.directive('tabset', function () {
				return {
					restrict: 'EA',
					transclude: true,
					replace: true,
					scope: {
						type: '@'
					},
					controller: 'TabsetController',
					templateUrl: 'template/tabs/tabset.html',
					link: function (scope, element, attrs) {
						scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
						scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;
					}
				};
			})

		/**
		 * @ngdoc directive
		 * @name ui.bootstrap.tabs.directive:tab
		 * @restrict EA
		 *
		 * @param {string=} heading The visible heading, or title, of the tab. Set HTML headings with {@link ui.bootstrap.tabs.directive:tabHeading tabHeading}.
		 * @param {string=} select An expression to evaluate when the tab is selected.
		 * @param {boolean=} active A binding, telling whether or not this tab is selected.
		 * @param {boolean=} disabled A binding, telling whether or not this tab is disabled.
		 *
		 * @description
		 * Creates a tab with a heading and content. Must be placed within a {@link ui.bootstrap.tabs.directive:tabset tabset}.
		 *
		 * @example
		 <example module="ui.bootstrap">
		 <file name="index.html">
		 <div ng-controller="TabsDemoCtrl">
		 <button class="btn btn-small" ng-click="items[0].active = true">
		 Select item 1, using active binding
		 </button>
		 <button class="btn btn-small" ng-click="items[1].disabled = !items[1].disabled">
		 Enable/disable item 2, using disabled binding
		 </button>
		 <br />
		 <tabset>
		 <tab heading="Tab 1">First Tab</tab>
		 <tab select="alertMe()">
		 <tab-heading><i class="icon-bell"></i> Alert me!</tab-heading>
		 Second Tab, with alert callback and html heading!
		 </tab>
		 <tab ng-repeat="item in items"
		 heading="{{item.title}}"
		 disabled="item.disabled"
		 active="item.active">
		 {{item.content}}
		 </tab>
		 </tabset>
		 </div>
		 </file>
		 <file name="script.js">
		 function TabsDemoCtrl($scope) {
	      $scope.items = [
	        { title:"Dynamic Title 1", content:"Dynamic Item 0" },
	        { title:"Dynamic Title 2", content:"Dynamic Item 1", disabled: true }
	      ];
	
	      $scope.alertMe = function() {
	        setTimeout(function() {
	          alert("You've selected the alert tab!");
	        });
	      };
	    };
		 </file>
		 </example>
		 */

		/**
		 * @ngdoc directive
		 * @name ui.bootstrap.tabs.directive:tabHeading
		 * @restrict EA
		 *
		 * @description
		 * Creates an HTML heading for a {@link ui.bootstrap.tabs.directive:tab tab}. Must be placed as a child of a tab element.
		 *
		 * @example
		 <example module="ui.bootstrap">
		 <file name="index.html">
		 <tabset>
		 <tab>
		 <tab-heading><b>HTML</b> in my titles?!</tab-heading>
		 And some content, too!
		 </tab>
		 <tab>
		 <tab-heading><i class="icon-heart"></i> Icon heading?!?</tab-heading>
		 That's right.
		 </tab>
		 </tabset>
		 </file>
		 </example>
		 */
			.directive('tab', ['$parse', '$log', function ($parse, $log) {
				return {
					require: '^tabset',
					restrict: 'EA',
					replace: true,
					templateUrl: 'template/tabs/tab.html',
					transclude: true,
					scope: {
						active: '=?',
						heading: '@',
						onSelect: '&select', //This callback is called in contentHeadingTransclude
						//once it inserts the tab's content into the dom
						onDeselect: '&deselect'
					},
					controller: function () {
						//Empty controller so other directives can require being 'under' a tab
					},
					link: function (scope, elm, attrs, tabsetCtrl, transclude) {
						scope.$watch('active', function (active) {
							if (active) {
								tabsetCtrl.select(scope);
							}
						});

						scope.disabled = false;
						if (attrs.disable) {
							scope.$parent.$watch($parse(attrs.disable), function (value) {
								scope.disabled = !!value;
							});
						}

						// Deprecation support of "disabled" parameter
						// fix(tab): IE9 disabled attr renders grey text on enabled tab #2677
						// This code is duplicated from the lines above to make it easy to remove once
						// the feature has been completely deprecated
						if (attrs.disabled) {
							$log.warn('Use of "disabled" attribute has been deprecated, please use "disable"');
							scope.$parent.$watch($parse(attrs.disabled), function (value) {
								scope.disabled = !!value;
							});
						}

						scope.select = function () {
							if (!scope.disabled) {
								scope.active = true;
							}
						};

						tabsetCtrl.addTab(scope);
						scope.$on('$destroy', function () {
							tabsetCtrl.removeTab(scope);
						});

						//We need to transclude later, once the content container is ready.
						//when this link happens, we're inside a tab heading.
						scope.$transcludeFn = transclude;
					}
				};
			}])

			.directive('tabHeadingTransclude', [function () {
				return {
					restrict: 'A',
					require: '^tab',
					link: function (scope, elm, attrs, tabCtrl) {
						scope.$watch('headingElement', function updateHeadingElement(heading) {
							if (heading) {
								elm.html('');
								elm.append(heading);
							}
						});
					}
				};
			}])

			.directive('tabContentTransclude', function () {
				return {
					restrict: 'A',
					require: '^tabset',
					link: function (scope, elm, attrs) {
						var tab = scope.$eval(attrs.tabContentTransclude);

						//Now our tab is ready to be transcluded: both the tab heading area
						//and the tab content area are loaded.  Transclude 'em both.
						tab.$transcludeFn(tab.$parent, function (contents) {
							angular.forEach(contents, function (node) {
								if (isTabHeading(node)) {
									//Let tabHeadingTransclude know.
									tab.headingElement = node;
								} else {
									elm.append(node);
								}
							});
						});
					}
				};
				function isTabHeading(node) {
					return node.tagName && (
							node.hasAttribute('tab-heading') ||
							node.hasAttribute('data-tab-heading') ||
							node.tagName.toLowerCase() === 'tab-heading' ||
							node.tagName.toLowerCase() === 'data-tab-heading'
						);
				}
			})

		;

		angular.module('ui.bootstrap.timepicker', [])

			.constant('timepickerConfig', {
				hourStep: 1,
				minuteStep: 1,
				showMeridian: true,
				meridians: null,
				readonlyInput: false,
				mousewheel: true,
				arrowkeys: true,
				showSpinners: true
			})

			.controller('TimepickerController', ['$scope', '$attrs', '$parse', '$log', '$locale', 'timepickerConfig', function ($scope, $attrs, $parse, $log, $locale, timepickerConfig) {
				var selected = new Date(),
					ngModelCtrl = {$setViewValue: angular.noop}, // nullModelCtrl
					meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS;

				this.init = function (ngModelCtrl_, inputs) {
					ngModelCtrl = ngModelCtrl_;
					ngModelCtrl.$render = this.render;

					ngModelCtrl.$formatters.unshift(function (modelValue) {
						return modelValue ? new Date(modelValue) : null;
					});

					var hoursInputEl = inputs.eq(0),
						minutesInputEl = inputs.eq(1);

					var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;
					if (mousewheel) {
						this.setupMousewheelEvents(hoursInputEl, minutesInputEl);
					}

					var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
					if (arrowkeys) {
						this.setupArrowkeyEvents(hoursInputEl, minutesInputEl);
					}

					$scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
					this.setupInputEvents(hoursInputEl, minutesInputEl);
				};

				var hourStep = timepickerConfig.hourStep;
				if ($attrs.hourStep) {
					$scope.$parent.$watch($parse($attrs.hourStep), function (value) {
						hourStep = parseInt(value, 10);
					});
				}

				var minuteStep = timepickerConfig.minuteStep;
				if ($attrs.minuteStep) {
					$scope.$parent.$watch($parse($attrs.minuteStep), function (value) {
						minuteStep = parseInt(value, 10);
					});
				}

				// 12H / 24H mode
				$scope.showMeridian = timepickerConfig.showMeridian;
				if ($attrs.showMeridian) {
					$scope.$parent.$watch($parse($attrs.showMeridian), function (value) {
						$scope.showMeridian = !!value;

						if (ngModelCtrl.$error.time) {
							// Evaluate from template
							var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
							if (angular.isDefined(hours) && angular.isDefined(minutes)) {
								selected.setHours(hours);
								refresh();
							}
						} else {
							updateTemplate();
						}
					});
				}

				// Get $scope.hours in 24H mode if valid
				function getHoursFromTemplate() {
					var hours = parseInt($scope.hours, 10);
					var valid = ( $scope.showMeridian ) ? (hours > 0 && hours < 13) : (hours >= 0 && hours < 24);
					if (!valid) {
						return undefined;
					}

					if ($scope.showMeridian) {
						if (hours === 12) {
							hours = 0;
						}
						if ($scope.meridian === meridians[1]) {
							hours = hours + 12;
						}
					}
					return hours;
				}

				function getMinutesFromTemplate() {
					var minutes = parseInt($scope.minutes, 10);
					return ( minutes >= 0 && minutes < 60 ) ? minutes : undefined;
				}

				function pad(value) {
					return ( angular.isDefined(value) && value.toString().length < 2 ) ? '0' + value : value.toString();
				}

				// Respond on mousewheel spin
				this.setupMousewheelEvents = function (hoursInputEl, minutesInputEl) {
					var isScrollingUp = function (e) {
						if (e.originalEvent) {
							e = e.originalEvent;
						}
						//pick correct delta variable depending on event
						var delta = (e.wheelDelta) ? e.wheelDelta : -e.deltaY;
						return (e.detail || delta > 0);
					};

					hoursInputEl.bind('mousewheel wheel', function (e) {
						$scope.$apply((isScrollingUp(e)) ? $scope.incrementHours() : $scope.decrementHours());
						e.preventDefault();
					});

					minutesInputEl.bind('mousewheel wheel', function (e) {
						$scope.$apply((isScrollingUp(e)) ? $scope.incrementMinutes() : $scope.decrementMinutes());
						e.preventDefault();
					});

				};

				// Respond on up/down arrowkeys
				this.setupArrowkeyEvents = function (hoursInputEl, minutesInputEl) {
					hoursInputEl.bind('keydown', function (e) {
						if (e.which === 38) { // up
							e.preventDefault();
							$scope.incrementHours();
							$scope.$apply();
						}
						else if (e.which === 40) { // down
							e.preventDefault();
							$scope.decrementHours();
							$scope.$apply();
						}
					});

					minutesInputEl.bind('keydown', function (e) {
						if (e.which === 38) { // up
							e.preventDefault();
							$scope.incrementMinutes();
							$scope.$apply();
						}
						else if (e.which === 40) { // down
							e.preventDefault();
							$scope.decrementMinutes();
							$scope.$apply();
						}
					});
				};

				this.setupInputEvents = function (hoursInputEl, minutesInputEl) {
					if ($scope.readonlyInput) {
						$scope.updateHours = angular.noop;
						$scope.updateMinutes = angular.noop;
						return;
					}

					var invalidate = function (invalidHours, invalidMinutes) {
						ngModelCtrl.$setViewValue(null);
						ngModelCtrl.$setValidity('time', false);
						if (angular.isDefined(invalidHours)) {
							$scope.invalidHours = invalidHours;
						}
						if (angular.isDefined(invalidMinutes)) {
							$scope.invalidMinutes = invalidMinutes;
						}
					};

					$scope.updateHours = function () {
						var hours = getHoursFromTemplate();

						if (angular.isDefined(hours)) {
							selected.setHours(hours);
							refresh('h');
						} else {
							invalidate(true);
						}
					};

					hoursInputEl.bind('blur', function (e) {
						if (!$scope.invalidHours && $scope.hours < 10) {
							$scope.$apply(function () {
								$scope.hours = pad($scope.hours);
							});
						}
					});

					$scope.updateMinutes = function () {
						var minutes = getMinutesFromTemplate();

						if (angular.isDefined(minutes)) {
							selected.setMinutes(minutes);
							refresh('m');
						} else {
							invalidate(undefined, true);
						}
					};

					minutesInputEl.bind('blur', function (e) {
						if (!$scope.invalidMinutes && $scope.minutes < 10) {
							$scope.$apply(function () {
								$scope.minutes = pad($scope.minutes);
							});
						}
					});

				};

				this.render = function () {
					var date = ngModelCtrl.$viewValue;

					if (isNaN(date)) {
						ngModelCtrl.$setValidity('time', false);
						$log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
					} else {
						if (date) {
							selected = date;
						}
						makeValid();
						updateTemplate();
					}
				};

				// Call internally when we know that model is valid.
				function refresh(keyboardChange) {
					makeValid();
					ngModelCtrl.$setViewValue(new Date(selected));
					updateTemplate(keyboardChange);
				}

				function makeValid() {
					ngModelCtrl.$setValidity('time', true);
					$scope.invalidHours = false;
					$scope.invalidMinutes = false;
				}

				function updateTemplate(keyboardChange) {
					var hours = selected.getHours(), minutes = selected.getMinutes();

					if ($scope.showMeridian) {
						hours = ( hours === 0 || hours === 12 ) ? 12 : hours % 12; // Convert 24 to 12 hour system
					}

					$scope.hours = keyboardChange === 'h' ? hours : pad(hours);
					if (keyboardChange !== 'm') {
						$scope.minutes = pad(minutes);
					}
					$scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
				}

				function addMinutes(minutes) {
					var dt = new Date(selected.getTime() + minutes * 60000);
					selected.setHours(dt.getHours(), dt.getMinutes());
					refresh();
				}

				$scope.showSpinners = angular.isDefined($attrs.showSpinners) ?
					$scope.$parent.$eval($attrs.showSpinners) : timepickerConfig.showSpinners;

				$scope.incrementHours = function () {
					addMinutes(hourStep * 60);
				};
				$scope.decrementHours = function () {
					addMinutes(-hourStep * 60);
				};
				$scope.incrementMinutes = function () {
					addMinutes(minuteStep);
				};
				$scope.decrementMinutes = function () {
					addMinutes(-minuteStep);
				};
				$scope.toggleMeridian = function () {
					addMinutes(12 * 60 * (( selected.getHours() < 12 ) ? 1 : -1));
				};
			}])

			.directive('timepicker', function () {
				return {
					restrict: 'EA',
					require: ['timepicker', '?^ngModel'],
					controller: 'TimepickerController',
					replace: true,
					scope: {},
					templateUrl: 'template/timepicker/timepicker.html',
					link: function (scope, element, attrs, ctrls) {
						var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

						if (ngModelCtrl) {
							timepickerCtrl.init(ngModelCtrl, element.find('input'));
						}
					}
				};
			});

		angular.module('ui.bootstrap.transition', [])

			.value('$transitionSuppressDeprecated', false)
		/**
		 * $transition service provides a consistent interface to trigger CSS 3 transitions and to be informed when they complete.
		 * @param  {DOMElement} element  The DOMElement that will be animated.
		 * @param  {string|object|function} trigger  The thing that will cause the transition to start:
		 *   - As a string, it represents the css class to be added to the element.
		 *   - As an object, it represents a hash of style attributes to be applied to the element.
		 *   - As a function, it represents a function to be called that will cause the transition to occur.
		 * @return {Promise}  A promise that is resolved when the transition finishes.
		 */
			.factory('$transition', [
				'$q', '$timeout', '$rootScope', '$log', '$transitionSuppressDeprecated',
				function ($q, $timeout, $rootScope, $log, $transitionSuppressDeprecated) {

					if (!$transitionSuppressDeprecated) {
						$log.warn('$transition is now deprecated. Use $animate from ngAnimate instead.');
					}

					var $transition = function (element, trigger, options) {
						options = options || {};
						var deferred = $q.defer();
						var endEventName = $transition[options.animation ? 'animationEndEventName' : 'transitionEndEventName'];

						var transitionEndHandler = function (event) {
							$rootScope.$apply(function () {
								element.unbind(endEventName, transitionEndHandler);
								deferred.resolve(element);
							});
						};

						if (endEventName) {
							element.bind(endEventName, transitionEndHandler);
						}

						// Wrap in a timeout to allow the browser time to update the DOM before the transition is to occur
						$timeout(function () {
							if (angular.isString(trigger)) {
								element.addClass(trigger);
							} else if (angular.isFunction(trigger)) {
								trigger(element);
							} else if (angular.isObject(trigger)) {
								element.css(trigger);
							}
							//If browser does not support transitions, instantly resolve
							if (!endEventName) {
								deferred.resolve(element);
							}
						});

						// Add our custom cancel function to the promise that is returned
						// We can call this if we are about to run a new transition, which we know will prevent this transition from ending,
						// i.e. it will therefore never raise a transitionEnd event for that transition
						deferred.promise.cancel = function () {
							if (endEventName) {
								element.unbind(endEventName, transitionEndHandler);
							}
							deferred.reject('Transition cancelled');
						};

						return deferred.promise;
					};

					// Work out the name of the transitionEnd event
					var transElement = document.createElement('trans');
					var transitionEndEventNames = {
						'WebkitTransition': 'webkitTransitionEnd',
						'MozTransition': 'transitionend',
						'OTransition': 'oTransitionEnd',
						'transition': 'transitionend'
					};
					var animationEndEventNames = {
						'WebkitTransition': 'webkitAnimationEnd',
						'MozTransition': 'animationend',
						'OTransition': 'oAnimationEnd',
						'transition': 'animationend'
					};

					function findEndEventName(endEventNames) {
						for (var name in endEventNames) {
							if (transElement.style[name] !== undefined) {
								return endEventNames[name];
							}
						}
					}

					$transition.transitionEndEventName = findEndEventName(transitionEndEventNames);
					$transition.animationEndEventName = findEndEventName(animationEndEventNames);
					return $transition;
				}]);

		angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.position', 'ui.bootstrap.bindHtml'])

		/**
		 * A helper service that can parse typeahead's syntax (string provided by users)
		 * Extracted to a separate service for ease of unit testing
		 */
			.factory('typeaheadParser', ['$parse', function ($parse) {

				//                      00000111000000000000022200000000000000003333333333333330000000000044000
				var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;

				return {
					parse: function (input) {

						var match = input.match(TYPEAHEAD_REGEXP);
						if (!match) {
							throw new Error(
								'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
								' but got "' + input + '".');
						}

						return {
							itemName: match[3],
							source: $parse(match[4]),
							viewMapper: $parse(match[2] || match[1]),
							modelMapper: $parse(match[1])
						};
					}
				};
			}])

			.directive('typeahead', ['$compile', '$parse', '$q', '$timeout', '$document', '$window', '$rootScope', '$position', 'typeaheadParser',
				function ($compile, $parse, $q, $timeout, $document, $window, $rootScope, $position, typeaheadParser) {

					var HOT_KEYS = [9, 13, 27, 38, 40];
					var eventDebounceTime = 200;

					return {
						require: 'ngModel',
						link: function (originalScope, element, attrs, modelCtrl) {

							//SUPPORTED ATTRIBUTES (OPTIONS)

							//minimal no of characters that needs to be entered before typeahead kicks-in
							var minLength = originalScope.$eval(attrs.typeaheadMinLength);
							if (!minLength && minLength !== 0) {
								minLength = 1;
							}

							//minimal wait time after last character typed before typeahead kicks-in
							var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

							//should it restrict model values to the ones selected from the popup only?
							var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;

							//binding to a variable that indicates if matches are being retrieved asynchronously
							var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

							//a callback executed when a match is selected
							var onSelectCallback = $parse(attrs.typeaheadOnSelect);

							//should it select highlighted popup value when losing focus?
							var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur) ? originalScope.$eval(attrs.typeaheadSelectOnBlur) : false;

							//binding to a variable that indicates if there were no results after the query is completed
							var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop;

							var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

							var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

							var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

							//If input matches an item of the list exactly, select it automatically
							var selectOnExact = attrs.typeaheadSelectOnExact ? originalScope.$eval(attrs.typeaheadSelectOnExact) : false;

							//INTERNAL VARIABLES

							//model setter executed upon match selection
							var $setModelValue = $parse(attrs.ngModel).assign;

							//expressions used by typeahead
							var parserResult = typeaheadParser.parse(attrs.typeahead);

							var hasFocus;

							//Used to avoid bug in iOS webview where iOS keyboard does not fire
							//mousedown & mouseup events
							//Issue #3699
							var selected;

							//create a child scope for the typeahead directive so we are not polluting original scope
							//with typeahead-specific data (matches, query etc.)
							var scope = originalScope.$new();
							originalScope.$on('$destroy', function () {
								scope.$destroy();
							});

							// WAI-ARIA
							var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
							element.attr({
								'aria-autocomplete': 'list',
								'aria-expanded': false,
								'aria-owns': popupId
							});

							//pop-up element used to display matches
							var popUpEl = angular.element('<div typeahead-popup></div>');
							popUpEl.attr({
								id: popupId,
								matches: 'matches',
								active: 'activeIdx',
								select: 'select(activeIdx)',
								'move-in-progress': 'moveInProgress',
								query: 'query',
								position: 'position'
							});
							//custom item template
							if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
								popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
							}

							var resetMatches = function () {
								scope.matches = [];
								scope.activeIdx = -1;
								element.attr('aria-expanded', false);
							};

							var getMatchId = function (index) {
								return popupId + '-option-' + index;
							};

							// Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
							// This attribute is added or removed automatically when the `activeIdx` changes.
							scope.$watch('activeIdx', function (index) {
								if (index < 0) {
									element.removeAttr('aria-activedescendant');
								} else {
									element.attr('aria-activedescendant', getMatchId(index));
								}
							});

							var inputIsExactMatch = function (inputValue, index) {

								if (scope.matches.length > index && inputValue) {
									return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase();
								}

								return false;
							};

							var getMatchesAsync = function (inputValue) {

								var locals = {$viewValue: inputValue};
								isLoadingSetter(originalScope, true);
								isNoResultsSetter(originalScope, false);
								$q.when(parserResult.source(originalScope, locals)).then(function (matches) {

									//it might happen that several async queries were in progress if a user were typing fast
									//but we are interested only in responses that correspond to the current view value
									var onCurrentRequest = (inputValue === modelCtrl.$viewValue);
									if (onCurrentRequest && hasFocus) {
										if (matches && matches.length > 0) {

											scope.activeIdx = focusFirst ? 0 : -1;
											isNoResultsSetter(originalScope, false);
											scope.matches.length = 0;

											//transform labels
											for (var i = 0; i < matches.length; i++) {
												locals[parserResult.itemName] = matches[i];
												scope.matches.push({
													id: getMatchId(i),
													label: parserResult.viewMapper(scope, locals),
													model: matches[i]
												});
											}

											scope.query = inputValue;
											//position pop-up with matches - we need to re-calculate its position each time we are opening a window
											//with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
											//due to other elements being rendered
											recalculatePosition();

											element.attr('aria-expanded', true);

											//Select the single remaining option if user input matches
											if (selectOnExact && scope.matches.length === 1 && inputIsExactMatch(inputValue, 0)) {
												scope.select(0);
											}
										} else {
											resetMatches();
											isNoResultsSetter(originalScope, true);
										}
									}
									if (onCurrentRequest) {
										isLoadingSetter(originalScope, false);
									}
								}, function () {
									resetMatches();
									isLoadingSetter(originalScope, false);
									isNoResultsSetter(originalScope, true);
								});
							};

							// bind events only if appendToBody params exist - performance feature
							if (appendToBody) {
								angular.element($window).bind('resize', fireRecalculating);
								$document.find('body').bind('scroll', fireRecalculating);
							}

							// Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later
							var timeoutEventPromise;

							// Default progress type
							scope.moveInProgress = false;

							function fireRecalculating() {
								if (!scope.moveInProgress) {
									scope.moveInProgress = true;
									scope.$digest();
								}

								// Cancel previous timeout
								if (timeoutEventPromise) {
									$timeout.cancel(timeoutEventPromise);
								}

								// Debounced executing recalculate after events fired
								timeoutEventPromise = $timeout(function () {
									// if popup is visible
									if (scope.matches.length) {
										recalculatePosition();
									}

									scope.moveInProgress = false;
									scope.$digest();
								}, eventDebounceTime);
							}

							// recalculate actual position and set new values to scope
							// after digest loop is popup in right position
							function recalculatePosition() {
								scope.position = appendToBody ? $position.offset(element) : $position.position(element);
								scope.position.top += element.prop('offsetHeight');
							}

							resetMatches();

							//we need to propagate user's query so we can higlight matches
							scope.query = undefined;

							//Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later
							var timeoutPromise;

							var scheduleSearchWithTimeout = function (inputValue) {
								timeoutPromise = $timeout(function () {
									getMatchesAsync(inputValue);
								}, waitTime);
							};

							var cancelPreviousTimeout = function () {
								if (timeoutPromise) {
									$timeout.cancel(timeoutPromise);
								}
							};

							//plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
							//$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
							modelCtrl.$parsers.unshift(function (inputValue) {

								hasFocus = true;

								if (minLength === 0 || inputValue && inputValue.length >= minLength) {
									if (waitTime > 0) {
										cancelPreviousTimeout();
										scheduleSearchWithTimeout(inputValue);
									} else {
										getMatchesAsync(inputValue);
									}
								} else {
									isLoadingSetter(originalScope, false);
									cancelPreviousTimeout();
									resetMatches();
								}

								if (isEditable) {
									return inputValue;
								} else {
									if (!inputValue) {
										// Reset in case user had typed something previously.
										modelCtrl.$setValidity('editable', true);
										return inputValue;
									} else {
										modelCtrl.$setValidity('editable', false);
										return undefined;
									}
								}
							});

							modelCtrl.$formatters.push(function (modelValue) {

								var candidateViewValue, emptyViewValue;
								var locals = {};

								// The validity may be set to false via $parsers (see above) if
								// the model is restricted to selected values. If the model
								// is set manually it is considered to be valid.
								if (!isEditable) {
									modelCtrl.$setValidity('editable', true);
								}

								if (inputFormatter) {

									locals.$model = modelValue;
									return inputFormatter(originalScope, locals);

								} else {

									//it might happen that we don't have enough info to properly render input value
									//we need to check for this situation and simply return model value if we can't apply custom formatting
									locals[parserResult.itemName] = modelValue;
									candidateViewValue = parserResult.viewMapper(originalScope, locals);
									locals[parserResult.itemName] = undefined;
									emptyViewValue = parserResult.viewMapper(originalScope, locals);

									return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;
								}
							});

							scope.select = function (activeIdx) {
								//called from within the $digest() cycle
								var locals = {};
								var model, item;

								selected = true;
								locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
								model = parserResult.modelMapper(originalScope, locals);
								$setModelValue(originalScope, model);
								modelCtrl.$setValidity('editable', true);
								modelCtrl.$setValidity('parse', true);

								onSelectCallback(originalScope, {
									$item: item,
									$model: model,
									$label: parserResult.viewMapper(originalScope, locals)
								});

								resetMatches();

								//return focus to the input element if a match was selected via a mouse click event
								// use timeout to avoid $rootScope:inprog error
								$timeout(function () {
									element[0].focus();
								}, 0, false);
							};

							//bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
							element.bind('keydown', function (evt) {

								//typeahead is open and an "interesting" key was pressed
								if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
									return;
								}

								// if there's nothing selected (i.e. focusFirst) and enter or tab is hit, clear the results
								if (scope.activeIdx === -1 && (evt.which === 9 || evt.which === 13)) {
									resetMatches();
									scope.$digest();
									return;
								}

								evt.preventDefault();

								if (evt.which === 40) {
									scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
									scope.$digest();

								} else if (evt.which === 38) {
									scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
									scope.$digest();

								} else if (evt.which === 13 || evt.which === 9) {
									scope.$apply(function () {
										scope.select(scope.activeIdx);
									});

								} else if (evt.which === 27) {
									evt.stopPropagation();

									resetMatches();
									scope.$digest();
								}
							});

							element.bind('blur', function () {
								if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
									selected = true;
									scope.$apply(function () {
										scope.select(scope.activeIdx);
									});
								}
								hasFocus = false;
								selected = false;
							});

							// Keep reference to click handler to unbind it.
							var dismissClickHandler = function (evt) {
								// Issue #3973
								// Firefox treats right click as a click on document
								if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
									resetMatches();
									if (!$rootScope.$$phase) {
										scope.$digest();
									}
								}
							};

							$document.bind('click', dismissClickHandler);

							originalScope.$on('$destroy', function () {
								$document.unbind('click', dismissClickHandler);
								if (appendToBody) {
									$popup.remove();
								}
								// Prevent jQuery cache memory leak
								popUpEl.remove();
							});

							var $popup = $compile(popUpEl)(scope);

							if (appendToBody) {
								$document.find('body').append($popup);
							} else {
								element.after($popup);
							}
						}
					};

				}])

			.directive('typeaheadPopup', function () {
				return {
					restrict: 'EA',
					scope: {
						matches: '=',
						query: '=',
						active: '=',
						position: '&',
						moveInProgress: '=',
						select: '&'
					},
					replace: true,
					templateUrl: 'template/typeahead/typeahead-popup.html',
					link: function (scope, element, attrs) {

						scope.templateUrl = attrs.templateUrl;

						scope.isOpen = function () {
							return scope.matches.length > 0;
						};

						scope.isActive = function (matchIdx) {
							return scope.active == matchIdx;
						};

						scope.selectActive = function (matchIdx) {
							scope.active = matchIdx;
						};

						scope.selectMatch = function (activeIdx) {
							scope.select({activeIdx: activeIdx});
						};
					}
				};
			})

			.directive('typeaheadMatch', ['$templateRequest', '$compile', '$parse', function ($templateRequest, $compile, $parse) {
				return {
					restrict: 'EA',
					scope: {
						index: '=',
						match: '=',
						query: '='
					},
					link: function (scope, element, attrs) {
						var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'template/typeahead/typeahead-match.html';
						$templateRequest(tplUrl).then(function (tplContent) {
							$compile(tplContent.trim())(scope, function (clonedElement) {
								element.replaceWith(clonedElement);
							});
						});
					}
				};
			}])

			.filter('typeaheadHighlight', function () {

				function escapeRegexp(queryToEscape) {
					return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
				}

				return function (matchItem, query) {
					return query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem;
				};
			});

		angular.module("template/accordion/accordion-group.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/accordion/accordion-group.html",
				"<div class=\"panel panel-default\">\n" +
				"  <div class=\"panel-heading\">\n" +
				"    <h4 class=\"panel-title\">\n" +
				"      <a href=\"#\" tabindex=\"0\" class=\"accordion-toggle\" ng-click=\"$event.preventDefault(); toggleOpen()\" accordion-transclude=\"heading\"><span ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
				"    </h4>\n" +
				"  </div>\n" +
				"  <div class=\"panel-collapse collapse\" collapse=\"!isOpen\">\n" +
				"	  <div class=\"panel-body\" ng-transclude></div>\n" +
				"  </div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/accordion/accordion.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/accordion/accordion.html",
				"<div class=\"panel-group\" ng-transclude></div>");
		}]);

		angular.module("template/alert/alert.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/alert/alert.html",
				"<div class=\"alert\" ng-class=\"['alert-' + (type || 'warning'), closeable ? 'alert-dismissible' : null]\" role=\"alert\">\n" +
				"    <button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close($event)\">\n" +
				"        <span aria-hidden=\"true\">&times;</span>\n" +
				"        <span class=\"sr-only\">Close</span>\n" +
				"    </button>\n" +
				"    <div ng-transclude></div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/carousel/carousel.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/carousel/carousel.html",
				"<div ng-mouseenter=\"pause()\" ng-mouseleave=\"play()\" class=\"carousel\" ng-swipe-right=\"prev()\" ng-swipe-left=\"next()\">\n" +
				"    <ol class=\"carousel-indicators\" ng-show=\"slides.length > 1\">\n" +
				"        <li ng-repeat=\"slide in slides | orderBy:'index' track by $index\" ng-class=\"{active: isActive(slide)}\" ng-click=\"select(slide)\"></li>\n" +
				"    </ol>\n" +
				"    <div class=\"carousel-inner\" ng-transclude></div>\n" +
				"    <a class=\"left carousel-control\" ng-click=\"prev()\" ng-show=\"slides.length > 1\"><span class=\"glyphicon glyphicon-chevron-left\"></span></a>\n" +
				"    <a class=\"right carousel-control\" ng-click=\"next()\" ng-show=\"slides.length > 1\"><span class=\"glyphicon glyphicon-chevron-right\"></span></a>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/carousel/slide.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/carousel/slide.html",
				"<div ng-class=\"{\n" +
				"    'active': active\n" +
				"  }\" class=\"item text-center\" ng-transclude></div>\n" +
				"");
		}]);

		angular.module("template/datepicker/datepicker.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/datepicker/datepicker.html",
				"<div ng-switch=\"datepickerMode\" role=\"application\" ng-keydown=\"keydown($event)\">\n" +
				"  <daypicker ng-switch-when=\"day\" tabindex=\"0\"></daypicker>\n" +
				"  <monthpicker ng-switch-when=\"month\" tabindex=\"0\"></monthpicker>\n" +
				"  <yearpicker ng-switch-when=\"year\" tabindex=\"0\"></yearpicker>\n" +
				"</div>");
		}]);

		angular.module("template/datepicker/day.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/datepicker/day.html",
				"<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
				"  <thead>\n" +
				"    <tr>\n" +
				"      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
				"      <th colspan=\"{{::5 + showWeeks}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
				"      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
				"    </tr>\n" +
				"    <tr>\n" +
				"      <th ng-if=\"showWeeks\" class=\"text-center\"></th>\n" +
				"      <th ng-repeat=\"label in ::labels track by $index\" class=\"text-center\"><small aria-label=\"{{::label.full}}\">{{::label.abbr}}</small></th>\n" +
				"    </tr>\n" +
				"  </thead>\n" +
				"  <tbody>\n" +
				"    <tr ng-repeat=\"row in rows track by $index\">\n" +
				"      <td ng-if=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
				"      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{::dt.uid}}\" ng-class=\"::dt.customClass\">\n" +
				"        <button type=\"button\" style=\"min-width:100%;\" class=\"btn btn-default btn-sm\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"::{'text-muted': dt.secondary, 'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
				"      </td>\n" +
				"    </tr>\n" +
				"  </tbody>\n" +
				"</table>\n" +
				"");
		}]);

		angular.module("template/datepicker/month.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/datepicker/month.html",
				"<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
				"  <thead>\n" +
				"    <tr>\n" +
				"      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
				"      <th><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
				"      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
				"    </tr>\n" +
				"  </thead>\n" +
				"  <tbody>\n" +
				"    <tr ng-repeat=\"row in rows track by $index\">\n" +
				"      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{::dt.uid}}\" ng-class=\"::dt.customClass\">\n" +
				"        <button type=\"button\" style=\"min-width:100%;\" class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
				"      </td>\n" +
				"    </tr>\n" +
				"  </tbody>\n" +
				"</table>\n" +
				"");
		}]);

		angular.module("template/datepicker/popup.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/datepicker/popup.html",
				"<ul class=\"dropdown-menu\" ng-if=\"isOpen\" style=\"display: block\" ng-style=\"{top: position.top+'px', left: position.left+'px'}\" ng-keydown=\"keydown($event)\" ng-click=\"$event.stopPropagation()\">\n" +
				"	<li ng-transclude></li>\n" +
				"	<li ng-if=\"showButtonBar\" style=\"padding:10px 9px 2px\">\n" +
				"		<span class=\"btn-group pull-left\">\n" +
				"			<button type=\"button\" class=\"btn btn-sm btn-info\" ng-click=\"select('today')\">{{ getText('current') }}</button>\n" +
				"			<button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"select(null)\">{{ getText('clear') }}</button>\n" +
				"		</span>\n" +
				"		<button type=\"button\" class=\"btn btn-sm btn-success pull-right\" ng-click=\"close()\">{{ getText('close') }}</button>\n" +
				"	</li>\n" +
				"</ul>\n" +
				"");
		}]);

		angular.module("template/datepicker/year.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/datepicker/year.html",
				"<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
				"  <thead>\n" +
				"    <tr>\n" +
				"      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
				"      <th colspan=\"3\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
				"      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
				"    </tr>\n" +
				"  </thead>\n" +
				"  <tbody>\n" +
				"    <tr ng-repeat=\"row in rows track by $index\">\n" +
				"      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{::dt.uid}}\">\n" +
				"        <button type=\"button\" style=\"min-width:100%;\" class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
				"      </td>\n" +
				"    </tr>\n" +
				"  </tbody>\n" +
				"</table>\n" +
				"");
		}]);

		angular.module("template/modal/backdrop.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/modal/backdrop.html",
				"<div class=\"modal-backdrop\"\n" +
				"     modal-animation-class=\"fade\"\n" +
				"     modal-in-class=\"in\"\n" +
				"     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" +
				"></div>\n" +
				"");
		}]);

		angular.module("template/modal/window.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/modal/window.html",
				"<div modal-render=\"{{$isRendered}}\" tabindex=\"-1\" role=\"dialog\" class=\"modal\"\n" +
				"    modal-animation-class=\"fade\"\n" +
				"    modal-in-class=\"in\"\n" +
				"	ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\" ng-click=\"close($event)\">\n" +
				"    <div class=\"modal-dialog\" ng-class=\"size ? 'modal-' + size : ''\"><div class=\"modal-content\" modal-transclude></div></div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/pagination/pager.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/pagination/pager.html",
				"<ul class=\"pager\">\n" +
				"  <li ng-class=\"{disabled: noPrevious(), previous: align}\"><a href ng-click=\"selectPage(page - 1, $event)\">{{::getText('previous')}}</a></li>\n" +
				"  <li ng-class=\"{disabled: noNext(), next: align}\"><a href ng-click=\"selectPage(page + 1, $event)\">{{::getText('next')}}</a></li>\n" +
				"</ul>");
		}]);

		angular.module("template/pagination/pagination.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/pagination/pagination.html",
				"<ul class=\"pagination\">\n" +
				"  <li ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\"><a href ng-click=\"selectPage(1, $event)\">{{::getText('first')}}</a></li>\n" +
				"  <li ng-if=\"::directionLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\"><a href ng-click=\"selectPage(page - 1, $event)\">{{::getText('previous')}}</a></li>\n" +
				"  <li ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page.active,disabled: ngDisabled&&!page.active}\"><a href ng-click=\"selectPage(page.number, $event)\">{{page.text}}</a></li>\n" +
				"  <li ng-if=\"::directionLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\"><a href ng-click=\"selectPage(page + 1, $event)\">{{::getText('next')}}</a></li>\n" +
				"  <li ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\"><a href ng-click=\"selectPage(totalPages, $event)\">{{::getText('last')}}</a></li>\n" +
				"</ul>\n" +
				"");
		}]);

		angular.module("template/tooltip/tooltip-html-popup.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/tooltip/tooltip-html-popup.html",
				"<div class=\"tooltip\"\n" +
				"  tooltip-animation-class=\"fade\"\n" +
				"  tooltip-classes\n" +
				"  ng-class=\"{ in: isOpen() }\">\n" +
				"  <div class=\"tooltip-arrow\"></div>\n" +
				"  <div class=\"tooltip-inner\" ng-bind-html=\"contentExp()\"></div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/tooltip/tooltip-html-unsafe-popup.html",
				"<div class=\"tooltip\"\n" +
				"  tooltip-animation-class=\"fade\"\n" +
				"  tooltip-classes\n" +
				"  ng-class=\"{ in: isOpen() }\">\n" +
				"  <div class=\"tooltip-arrow\"></div>\n" +
				"  <div class=\"tooltip-inner\" bind-html-unsafe=\"content\"></div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/tooltip/tooltip-popup.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/tooltip/tooltip-popup.html",
				"<div class=\"tooltip\"\n" +
				"  tooltip-animation-class=\"fade\"\n" +
				"  tooltip-classes\n" +
				"  ng-class=\"{ in: isOpen() }\">\n" +
				"  <div class=\"tooltip-arrow\"></div>\n" +
				"  <div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/tooltip/tooltip-template-popup.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/tooltip/tooltip-template-popup.html",
				"<div class=\"tooltip\"\n" +
				"  tooltip-animation-class=\"fade\"\n" +
				"  tooltip-classes\n" +
				"  ng-class=\"{ in: isOpen() }\">\n" +
				"  <div class=\"tooltip-arrow\"></div>\n" +
				"  <div class=\"tooltip-inner\"\n" +
				"    tooltip-template-transclude=\"contentExp()\"\n" +
				"    tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/popover/popover-html.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/popover/popover-html.html",
				"<div class=\"popover\"\n" +
				"  tooltip-animation-class=\"fade\"\n" +
				"  tooltip-classes\n" +
				"  ng-class=\"{ in: isOpen() }\">\n" +
				"  <div class=\"arrow\"></div>\n" +
				"\n" +
				"  <div class=\"popover-inner\">\n" +
				"      <h3 class=\"popover-title\" ng-bind=\"title\" ng-if=\"title\"></h3>\n" +
				"      <div class=\"popover-content\" ng-bind-html=\"contentExp()\"></div>\n" +
				"  </div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/popover/popover-template.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/popover/popover-template.html",
				"<div class=\"popover\"\n" +
				"  tooltip-animation-class=\"fade\"\n" +
				"  tooltip-classes\n" +
				"  ng-class=\"{ in: isOpen() }\">\n" +
				"  <div class=\"arrow\"></div>\n" +
				"\n" +
				"  <div class=\"popover-inner\">\n" +
				"      <h3 class=\"popover-title\" ng-bind=\"title\" ng-if=\"title\"></h3>\n" +
				"      <div class=\"popover-content\"\n" +
				"        tooltip-template-transclude=\"contentExp()\"\n" +
				"        tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
				"  </div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/popover/popover.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/popover/popover.html",
				"<div class=\"popover\"\n" +
				"  tooltip-animation-class=\"fade\"\n" +
				"  tooltip-classes\n" +
				"  ng-class=\"{ in: isOpen() }\">\n" +
				"  <div class=\"arrow\"></div>\n" +
				"\n" +
				"  <div class=\"popover-inner\">\n" +
				"      <h3 class=\"popover-title\" ng-bind=\"title\" ng-if=\"title\"></h3>\n" +
				"      <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
				"  </div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/progressbar/bar.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/progressbar/bar.html",
				"<div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" ng-transclude></div>\n" +
				"");
		}]);

		angular.module("template/progressbar/progress.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/progressbar/progress.html",
				"<div class=\"progress\" ng-transclude></div>");
		}]);

		angular.module("template/progressbar/progressbar.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/progressbar/progressbar.html",
				"<div class=\"progress\">\n" +
				"  <div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" ng-transclude></div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/rating/rating.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/rating/rating.html",
				"<span ng-mouseleave=\"reset()\" ng-keydown=\"onKeydown($event)\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" aria-valuemax=\"{{range.length}}\" aria-valuenow=\"{{value}}\">\n" +
				"    <i ng-repeat=\"r in range track by $index\" ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" class=\"glyphicon\" ng-class=\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\" ng-attr-title=\"{{r.title}}\" >\n" +
				"        <span class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" +
				"    </i>\n" +
				"</span>\n" +
				"");
		}]);

		angular.module("template/tabs/tab.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/tabs/tab.html",
				"<li ng-class=\"{active: active, disabled: disabled}\">\n" +
				"  <a href=\"#\" ng-click=\"$event.preventDefault(); select()\" tab-heading-transclude>{{heading}}</a>\n" +
				"</li>\n" +
				"");
		}]);

		angular.module("template/tabs/tabset.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/tabs/tabset.html",
				"<div>\n" +
				"  <ul class=\"nav nav-{{type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
				"  <div class=\"tab-content\">\n" +
				"    <div class=\"tab-pane\" \n" +
				"         ng-repeat=\"tab in tabs\" \n" +
				"         ng-class=\"{active: tab.active}\"\n" +
				"         tab-content-transclude=\"tab\">\n" +
				"    </div>\n" +
				"  </div>\n" +
				"</div>\n" +
				"");
		}]);

		angular.module("template/timepicker/timepicker.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/timepicker/timepicker.html",
				"<table>\n" +
				"  <tbody>\n" +
				"    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
				"      <td><a ng-click=\"incrementHours()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
				"      <td>&nbsp;</td>\n" +
				"      <td><a ng-click=\"incrementMinutes()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
				"      <td ng-show=\"showMeridian\"></td>\n" +
				"    </tr>\n" +
				"    <tr>\n" +
				"      <td class=\"form-group\" ng-class=\"{'has-error': invalidHours}\">\n" +
				"        <input style=\"width:50px;\" type=\"text\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\">\n" +
				"      </td>\n" +
				"      <td>:</td>\n" +
				"      <td class=\"form-group\" ng-class=\"{'has-error': invalidMinutes}\">\n" +
				"        <input style=\"width:50px;\" type=\"text\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\">\n" +
				"      </td>\n" +
				"      <td ng-show=\"showMeridian\"><button type=\"button\" class=\"btn btn-default text-center\" ng-click=\"toggleMeridian()\">{{meridian}}</button></td>\n" +
				"    </tr>\n" +
				"    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
				"      <td><a ng-click=\"decrementHours()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
				"      <td>&nbsp;</td>\n" +
				"      <td><a ng-click=\"decrementMinutes()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
				"      <td ng-show=\"showMeridian\"></td>\n" +
				"    </tr>\n" +
				"  </tbody>\n" +
				"</table>\n" +
				"");
		}]);

		angular.module("template/typeahead/typeahead-match.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/typeahead/typeahead-match.html",
				"<a href=\"#\" ng-click=\"$event.preventDefault()\" tabindex=\"-1\" bind-html-unsafe=\"match.label | typeaheadHighlight:query\"></a>\n" +
				"");
		}]);

		angular.module("template/typeahead/typeahead-popup.html", []).run(["$templateCache", function ($templateCache) {
			$templateCache.put("template/typeahead/typeahead-popup.html",
				"<ul class=\"dropdown-menu\" ng-show=\"isOpen() && !moveInProgress\" ng-style=\"{top: position().top+'px', left: position().left+'px'}\" style=\"display: block;\" role=\"listbox\" aria-hidden=\"{{!isOpen()}}\">\n" +
				"    <li ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index)\" role=\"option\" id=\"{{::match.id}}\">\n" +
				"        <div typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></div>\n" +
				"    </li>\n" +
				"</ul>\n" +
				"");
		}]);
		!angular.$$csp() && angular.element(document).find('head').prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>');

		/***/
	},
	/* 425 */
	/***/ function (module, exports) {

		/**
		 * An Angular module that gives you access to the browsers local storage
		 * @version v0.2.2 - 2015-05-29
		 * @link https://github.com/grevory/angular-local-storage
		 * @author grevory <greg@gregpike.ca>
		 * @license MIT License, http://www.opensource.org/licenses/MIT
		 */
		(function (window, angular, undefined) {
			/*jshint globalstrict:true*/
			'use strict';

			var isDefined = angular.isDefined,
				isUndefined = angular.isUndefined,
				isNumber = angular.isNumber,
				isObject = angular.isObject,
				isArray = angular.isArray,
				extend = angular.extend,
				toJson = angular.toJson;
			var angularLocalStorage = angular.module('LocalStorageModule', []);

			angularLocalStorage.provider('localStorageService', function () {

				// You should set a prefix to avoid overwriting any local storage variables from the rest of your app
				// e.g. localStorageServiceProvider.setPrefix('yourAppName');
				// With provider you can use config as this:
				// myApp.config(function (localStorageServiceProvider) {
				//    localStorageServiceProvider.prefix = 'yourAppName';
				// });
				this.prefix = 'ls';

				// You could change web storage type localstorage or sessionStorage
				this.storageType = 'localStorage';

				// Cookie options (usually in case of fallback)
				// expiry = Number of days before cookies expire // 0 = Does not expire
				// path = The web path the cookie represents
				this.cookie = {
					expiry: 30,
					path: '/'
				};

				// Send signals for each of the following actions?
				this.notify = {
					setItem: true,
					removeItem: false
				};

				// Setter for the prefix
				this.setPrefix = function (prefix) {
					this.prefix = prefix;
					return this;
				};

				// Setter for the storageType
				this.setStorageType = function (storageType) {
					this.storageType = storageType;
					return this;
				};

				// Setter for cookie config
				this.setStorageCookie = function (exp, path) {
					this.cookie.expiry = exp;
					this.cookie.path = path;
					return this;
				};

				// Setter for cookie domain
				this.setStorageCookieDomain = function (domain) {
					this.cookie.domain = domain;
					return this;
				};

				// Setter for notification config
				// itemSet & itemRemove should be booleans
				this.setNotify = function (itemSet, itemRemove) {
					this.notify = {
						setItem: itemSet,
						removeItem: itemRemove
					};
					return this;
				};

				this.$get = ['$rootScope', '$window', '$document', '$parse', function ($rootScope, $window, $document, $parse) {
					var self = this;
					var prefix = self.prefix;
					var cookie = self.cookie;
					var notify = self.notify;
					var storageType = self.storageType;
					var webStorage;

					// When Angular's $document is not available
					if (!$document) {
						$document = document;
					} else if ($document[0]) {
						$document = $document[0];
					}

					// If there is a prefix set in the config lets use that with an appended period for readability
					if (prefix.substr(-1) !== '.') {
						prefix = !!prefix ? prefix + '.' : '';
					}
					var deriveQualifiedKey = function (key) {
						return prefix + key;
					};
					// Checks the browser to see if local storage is supported
					var browserSupportsLocalStorage = (function () {
						try {
							var supported = (storageType in $window && $window[storageType] !== null);

							// When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage
							// is available, but trying to call .setItem throws an exception.
							//
							// "QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage
							// that exceeded the quota."
							var key = deriveQualifiedKey('__' + Math.round(Math.random() * 1e7));
							if (supported) {
								webStorage = $window[storageType];
								webStorage.setItem(key, '');
								webStorage.removeItem(key);
							}

							return supported;
						} catch (e) {
							storageType = 'cookie';
							$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
							return false;
						}
					}());

					// Directly adds a value to local storage
					// If local storage is not available in the browser use cookies
					// Example use: localStorageService.add('library','angular');
					var addToLocalStorage = function (key, value) {
						// Let's convert undefined values to null to get the value consistent
						if (isUndefined(value)) {
							value = null;
						} else {
							value = toJson(value);
						}

						// If this browser does not support local storage use cookies
						if (!browserSupportsLocalStorage || self.storageType === 'cookie') {
							if (!browserSupportsLocalStorage) {
								$rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
							}

							if (notify.setItem) {
								$rootScope.$broadcast('LocalStorageModule.notification.setitem', {
									key: key,
									newvalue: value,
									storageType: 'cookie'
								});
							}
							return addToCookies(key, value);
						}

						try {
							if (webStorage) {
								webStorage.setItem(deriveQualifiedKey(key), value)
							}
							;
							if (notify.setItem) {
								$rootScope.$broadcast('LocalStorageModule.notification.setitem', {
									key: key,
									newvalue: value,
									storageType: self.storageType
								});
							}
						} catch (e) {
							$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
							return addToCookies(key, value);
						}
						return true;
					};

					// Directly get a value from local storage
					// Example use: localStorageService.get('library'); // returns 'angular'
					var getFromLocalStorage = function (key) {

						if (!browserSupportsLocalStorage || self.storageType === 'cookie') {
							if (!browserSupportsLocalStorage) {
								$rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
							}

							return getFromCookies(key);
						}

						var item = webStorage ? webStorage.getItem(deriveQualifiedKey(key)) : null;
						// angular.toJson will convert null to 'null', so a proper conversion is needed
						// FIXME not a perfect solution, since a valid 'null' string can't be stored
						if (!item || item === 'null') {
							return null;
						}

						try {
							return JSON.parse(item);
						} catch (e) {
							return item;
						}
					};

					// Remove an item from local storage
					// Example use: localStorageService.remove('library'); // removes the key/value pair of library='angular'
					var removeFromLocalStorage = function () {
						var i, key;
						for (i = 0; i < arguments.length; i++) {
							key = arguments[i];
							if (!browserSupportsLocalStorage || self.storageType === 'cookie') {
								if (!browserSupportsLocalStorage) {
									$rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
								}

								if (notify.removeItem) {
									$rootScope.$broadcast('LocalStorageModule.notification.removeitem', {
										key: key,
										storageType: 'cookie'
									});
								}
								removeFromCookies(key);
							}
							else {
								try {
									webStorage.removeItem(deriveQualifiedKey(key));
									if (notify.removeItem) {
										$rootScope.$broadcast('LocalStorageModule.notification.removeitem', {
											key: key,
											storageType: self.storageType
										});
									}
								} catch (e) {
									$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
									removeFromCookies(key);
								}
							}
						}
					};

					// Return array of keys for local storage
					// Example use: var keys = localStorageService.keys()
					var getKeysForLocalStorage = function () {

						if (!browserSupportsLocalStorage) {
							$rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
							return false;
						}

						var prefixLength = prefix.length;
						var keys = [];
						for (var key in webStorage) {
							// Only return keys that are for this app
							if (key.substr(0, prefixLength) === prefix) {
								try {
									keys.push(key.substr(prefixLength));
								} catch (e) {
									$rootScope.$broadcast('LocalStorageModule.notification.error', e.Description);
									return [];
								}
							}
						}
						return keys;
					};

					// Remove all data for this app from local storage
					// Also optionally takes a regular expression string and removes the matching key-value pairs
					// Example use: localStorageService.clearAll();
					// Should be used mostly for development purposes
					var clearAllFromLocalStorage = function (regularExpression) {

						// Setting both regular expressions independently
						// Empty strings result in catchall RegExp
						var prefixRegex = !!prefix ? new RegExp('^' + prefix) : new RegExp();
						var testRegex = !!regularExpression ? new RegExp(regularExpression) : new RegExp();

						if (!browserSupportsLocalStorage || self.storageType === 'cookie') {
							if (!browserSupportsLocalStorage) {
								$rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
							}
							return clearAllFromCookies();
						}

						var prefixLength = prefix.length;

						for (var key in webStorage) {
							// Only remove items that are for this app and match the regular expression
							if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) {
								try {
									removeFromLocalStorage(key.substr(prefixLength));
								} catch (e) {
									$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
									return clearAllFromCookies();
								}
							}
						}
						return true;
					};

					// Checks the browser to see if cookies are supported
					var browserSupportsCookies = (function () {
						try {
							return $window.navigator.cookieEnabled ||
								("cookie" in $document && ($document.cookie.length > 0 ||
								($document.cookie = "test").indexOf.call($document.cookie, "test") > -1));
						} catch (e) {
							$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
							return false;
						}
					}());

					// Directly adds a value to cookies
					// Typically used as a fallback is local storage is not available in the browser
					// Example use: localStorageService.cookie.add('library','angular');
					var addToCookies = function (key, value, daysToExpiry) {

						if (isUndefined(value)) {
							return false;
						} else if (isArray(value) || isObject(value)) {
							value = toJson(value);
						}

						if (!browserSupportsCookies) {
							$rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');
							return false;
						}

						try {
							var expiry = '',
								expiryDate = new Date(),
								cookieDomain = '';

							if (value === null) {
								// Mark that the cookie has expired one day ago
								expiryDate.setTime(expiryDate.getTime() + (-1 * 24 * 60 * 60 * 1000));
								expiry = "; expires=" + expiryDate.toGMTString();
								value = '';
							} else if (isNumber(daysToExpiry) && daysToExpiry !== 0) {
								expiryDate.setTime(expiryDate.getTime() + (daysToExpiry * 24 * 60 * 60 * 1000));
								expiry = "; expires=" + expiryDate.toGMTString();
							} else if (cookie.expiry !== 0) {
								expiryDate.setTime(expiryDate.getTime() + (cookie.expiry * 24 * 60 * 60 * 1000));
								expiry = "; expires=" + expiryDate.toGMTString();
							}
							if (!!key) {
								var cookiePath = "; path=" + cookie.path;
								if (cookie.domain) {
									cookieDomain = "; domain=" + cookie.domain;
								}
								$document.cookie = deriveQualifiedKey(key) + "=" + encodeURIComponent(value) + expiry + cookiePath + cookieDomain;
							}
						} catch (e) {
							$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
							return false;
						}
						return true;
					};

					// Directly get a value from a cookie
					// Example use: localStorageService.cookie.get('library'); // returns 'angular'
					var getFromCookies = function (key) {
						if (!browserSupportsCookies) {
							$rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');
							return false;
						}

						var cookies = $document.cookie && $document.cookie.split(';') || [];
						for (var i = 0; i < cookies.length; i++) {
							var thisCookie = cookies[i];
							while (thisCookie.charAt(0) === ' ') {
								thisCookie = thisCookie.substring(1, thisCookie.length);
							}
							if (thisCookie.indexOf(deriveQualifiedKey(key) + '=') === 0) {
								var storedValues = decodeURIComponent(thisCookie.substring(prefix.length + key.length + 1, thisCookie.length))
								try {
									return JSON.parse(storedValues);
								} catch (e) {
									return storedValues
								}
							}
						}
						return null;
					};

					var removeFromCookies = function (key) {
						addToCookies(key, null);
					};

					var clearAllFromCookies = function () {
						var thisCookie = null, thisKey = null;
						var prefixLength = prefix.length;
						var cookies = $document.cookie.split(';');
						for (var i = 0; i < cookies.length; i++) {
							thisCookie = cookies[i];

							while (thisCookie.charAt(0) === ' ') {
								thisCookie = thisCookie.substring(1, thisCookie.length);
							}

							var key = thisCookie.substring(prefixLength, thisCookie.indexOf('='));
							removeFromCookies(key);
						}
					};

					var getStorageType = function () {
						return storageType;
					};

					// Add a listener on scope variable to save its changes to local storage
					// Return a function which when called cancels binding
					var bindToScope = function (scope, key, def, lsKey) {
						lsKey = lsKey || key;
						var value = getFromLocalStorage(lsKey);

						if (value === null && isDefined(def)) {
							value = def;
						} else if (isObject(value) && isObject(def)) {
							value = extend(def, value);
						}

						$parse(key).assign(scope, value);

						return scope.$watch(key, function (newVal) {
							addToLocalStorage(lsKey, newVal);
						}, isObject(scope[key]));
					};

					// Return localStorageService.length
					// ignore keys that not owned
					var lengthOfLocalStorage = function () {
						var count = 0;
						var storage = $window[storageType];
						for (var i = 0; i < storage.length; i++) {
							if (storage.key(i).indexOf(prefix) === 0) {
								count++;
							}
						}
						return count;
					};

					return {
						isSupported: browserSupportsLocalStorage,
						getStorageType: getStorageType,
						set: addToLocalStorage,
						add: addToLocalStorage, //DEPRECATED
						get: getFromLocalStorage,
						keys: getKeysForLocalStorage,
						remove: removeFromLocalStorage,
						clearAll: clearAllFromLocalStorage,
						bind: bindToScope,
						deriveKey: deriveQualifiedKey,
						length: lengthOfLocalStorage,
						cookie: {
							isSupported: browserSupportsCookies,
							set: addToCookies,
							add: addToCookies, //DEPRECATED
							get: getFromCookies,
							remove: removeFromCookies,
							clearAll: clearAllFromCookies
						}
					};
				}];
			});
		})(window, window.angular);

		/***/
	},
	/* 426 */
	/***/ function (module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// # ngReact
		// ### Use React Components inside of your Angular applications
		//
		// Composed of
		// - reactComponent (generic directive for delegating off to React Components)
		// - reactDirective (factory for creating specific directives that correspond to reactComponent directives)


		(function (root, factory) {
			if (typeof module !== 'undefined' && module.exports) {
				// CommonJS
				module.exports = factory(__webpack_require__(427), __webpack_require__(242));
			} else if (true) {
				// AMD
				!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(427), __webpack_require__(242)], __WEBPACK_AMD_DEFINE_RESULT__ = function (react, angular) {
					return (root.ngReact = factory(react, angular));
				}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			} else {
				// Global Variables
				root.ngReact = factory(root.React, root.angular);
			}
		}(this, function ngReact(React, angular) {
			'use strict';

			// get a react component from name (components can be an angular injectable e.g. value, factory or
			// available on window
			function getReactComponent(name, $injector) {
				// if name is a function assume it is component and return it
				if (angular.isFunction(name)) {
					return name;
				}

				// a React component name must be specified
				if (!name) {
					throw new Error('ReactComponent name attribute must be specified');
				}

				// ensure the specified React component is accessible, and fail fast if it's not
				var reactComponent;
				try {
					reactComponent = $injector.get(name);
				} catch (e) {
				}

				if (!reactComponent) {
					try {
						reactComponent = name.split('.').reduce(function (current, namePart) {
							return current[namePart];
						}, window);
					} catch (e) {
					}
				}

				if (!reactComponent) {
					throw Error('Cannot find react component ' + name);
				}

				return reactComponent;
			}

			// wraps a function with scope.$apply, if already applied just return
			function applied(fn, scope) {
				if (fn.wrappedInApply) {
					return fn;
				}
				var wrapped = function () {
					var args = arguments;
					return scope.$apply(function () {
						return fn.apply(null, args);
					});
				};
				wrapped.wrappedInApply = true;
				return wrapped;
			}

			// wraps all functions on obj in scope.$apply
			function applyFunctions(obj, scope) {
				return Object.keys(obj || {}).reduce(function (prev, key) {
					var value = obj[key];
					// wrap functions in a function that ensures they are scope.$applied
					// ensures that when function is called from a React component
					// the Angular digest cycle is run
					prev[key] = angular.isFunction(value) ? applied(value, scope) : value;
					return prev;
				}, {});
			}

			/**
			 *
			 * @param watchDepth (value of HTML watch-depth attribute)
			 * @param scope (angular scope)
			 *
			 * Uses the watchDepth attribute to determine how to watch props on scope.
			 * If watchDepth attribute is NOT reference or collection, watchDepth defaults to deep watching by value
			 */
			function watchProps(watchDepth, scope, watchExpressions, listener) {
				if (watchDepth === 'collection' && angular.isFunction(scope.$watchCollection)) {
					watchExpressions.forEach(function (expr) {
						scope.$watchCollection(expr, listener);
					});
				}
				else if (watchDepth === 'reference') {
					if (angular.isFunction(scope.$watchGroup)) {
						scope.$watchGroup(watchExpressions, listener);
					}
					else {
						watchExpressions.forEach(function (expr) {
							scope.$watch(expr, listener);
						});
					}
				}
				else {
					//default watchDepth to value if not reference or collection
					watchExpressions.forEach(function (expr) {
						scope.$watch(expr, listener, true);
					});
				}
			}

			// render React component, with scope[attrs.props] being passed in as the component props
			function renderComponent(component, props, $timeout, elem) {
				$timeout(function () {
					React.render(React.createElement(component, props), elem[0]);
				});
			}

			// # reactComponent
			// Directive that allows React components to be used in Angular templates.
			//
			// Usage:
			//     <react-component name="Hello" props="name"/>
			//
			// This requires that there exists an injectable or globally available 'Hello' React component.
			// The 'props' attribute is optional and is passed to the component.
			//
			// The following would would create and register the component:
			//
			//     /** @jsx React.DOM */
			//     var module = angular.module('ace.react.components');
			//     module.value('Hello', React.createClass({
			//         render: function() {
			//             return <div>Hello {this.props.name}</div>;
			//         }
			//     }));
			//
			var reactComponent = function ($timeout, $injector) {
				return {
					restrict: 'E',
					replace: true,
					link: function (scope, elem, attrs) {
						var reactComponent = getReactComponent(attrs.name, $injector);

						var renderMyComponent = function () {
							var scopeProps = scope.$eval(attrs.props);
							var props = applyFunctions(scopeProps, scope);

							renderComponent(reactComponent, props, $timeout, elem);
						};

						// If there are props, re-render when they change
						attrs.props ?
							watchProps(attrs.watchDepth, scope, [attrs.props], renderMyComponent) :
							renderMyComponent();

						// cleanup when scope is destroyed
						scope.$on('$destroy', function () {
							React.unmountComponentAtNode(elem[0]);
						});
					}
				};
			};

			// # reactDirective
			// Factory function to create directives for React components.
			//
			// With a component like this:
			//
			//     /** @jsx React.DOM */
			//     var module = angular.module('ace.react.components');
			//     module.value('Hello', React.createClass({
			//         render: function() {
			//             return <div>Hello {this.props.name}</div>;
			//         }
			//     }));
			//
			// A directive can be created and registered with:
			//
			//     module.directive('hello', function(reactDirective) {
			//         return reactDirective('Hello', ['name']);
			//     });
			//
			// Where the first argument is the injectable or globally accessible name of the React component
			// and the second argument is an array of property names to be watched and passed to the React component
			// as props.
			//
			// This directive can then be used like this:
			//
			//     <hello name="name"/>
			//
			var reactDirective = function ($timeout, $injector) {
				return function (reactComponentName, propNames, conf) {
					var directive = {
						restrict: 'E',
						replace: true,
						link: function (scope, elem, attrs) {
							var reactComponent = getReactComponent(reactComponentName, $injector);

							// if propNames is not defined, fall back to use the React component's propTypes if present
							propNames = propNames || Object.keys(reactComponent.propTypes || {});

							// for each of the properties, get their scope value and set it to scope.props
							var renderMyComponent = function () {
								var props = {};
								propNames.forEach(function (propName) {
									props[propName] = scope.$eval(attrs[propName]);
								});
								renderComponent(reactComponent, applyFunctions(props, scope), $timeout, elem);
							};

							// watch each property name and trigger an update whenever something changes,
							// to update scope.props with new values
							var propExpressions = propNames.map(function (k) {
								return attrs[k];
							});

							watchProps(attrs.watchDepth, scope, propExpressions, renderMyComponent);

							renderMyComponent();

							// cleanup when scope is destroyed
							scope.$on('$destroy', function () {
								React.unmountComponentAtNode(elem[0]);
							});
						}
					};
					return angular.extend(directive, conf);
				};
			};

			// create the end module without any dependencies, including reactComponent and reactDirective
			return angular.module('react', [])
				.directive('reactComponent', ['$timeout', '$injector', reactComponent])
				.factory('reactDirective', ['$timeout', '$injector', reactDirective]);
		}));


		/***/
	},
	/* 427 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(274);


		/***/
	},
	/* 428 */
	/***/ function (module, exports, __webpack_require__) {

		__webpack_require__(429);
		__webpack_require__(437);


		/***/
	},
	/* 429 */
	/***/ function (module, exports, __webpack_require__) {

		// style-loader: Adds some css to the DOM by adding a <style> tag
		var dispose = __webpack_require__(430)
			// The css code:
		(__webpack_require__(431));
		// Hot Module Replacement
		if (false) {
			module.hot.accept();
			module.hot.dispose(dispose);
		}

		/***/
	},
	/* 430 */
	/***/ function (module, exports, __webpack_require__) {

		/*
		 MIT License http://www.opensource.org/licenses/mit-license.php
		 Author Tobias Koppers @sokra
		 */
		module.exports = function addStyle(cssCode) {
			if (true) {
				if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
			}
			var styleElement = document.createElement("style");
			styleElement.type = "text/css";
			var head = document.getElementsByTagName("head")[0];
			head.appendChild(styleElement);
			if (styleElement.styleSheet) {
				styleElement.styleSheet.cssText = cssCode;
			} else {
				styleElement.appendChild(document.createTextNode(cssCode));
			}
			return function () {
				head.removeChild(styleElement);
			};
		}


		/***/
	},
	/* 431 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports =
			"/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\nhtml {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\nbody {\n  margin: 0;\n}\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  vertical-align: baseline;\n}\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n[hidden],\ntemplate {\n  display: none;\n}\na {\n  background-color: transparent;\n}\na:active,\na:hover {\n  outline: 0;\n}\nabbr[title] {\n  border-bottom: 1px dotted;\n}\nb,\nstrong {\n  font-weight: bold;\n}\ndfn {\n  font-style: italic;\n}\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\nmark {\n  background: #ff0;\n  color: #000;\n}\nsmall {\n  font-size: 80%;\n}\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\nsup {\n  top: -0.5em;\n}\nsub {\n  bottom: -0.25em;\n}\nimg {\n  border: 0;\n}\nsvg:not(:root) {\n  overflow: hidden;\n}\nfigure {\n  margin: 1em 40px;\n}\nhr {\n  box-sizing: content-box;\n  height: 0;\n}\npre {\n  overflow: auto;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\nbutton {\n  overflow: visible;\n}\nbutton,\nselect {\n  text-transform: none;\n}\nbutton,\nhtml input[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button;\n  cursor: pointer;\n}\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\ninput {\n  line-height: normal;\n}\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n  box-sizing: content-box;\n}\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\nlegend {\n  border: 0;\n  padding: 0;\n}\ntextarea {\n  overflow: auto;\n}\noptgroup {\n  font-weight: bold;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\ntd,\nth {\n  padding: 0;\n}\n/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */\n@media print {\n  *,\n  *:before,\n  *:after {\n    background: transparent !important;\n    color: #000 !important;\n    box-shadow: none !important;\n    text-shadow: none !important;\n  }\n  a,\n  a:visited {\n    text-decoration: underline;\n  }\n  a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n  abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n  a[href^=\"#\"]:after,\n  a[href^=\"javascript:\"]:after {\n    content: \"\";\n  }\n  pre,\n  blockquote {\n    border: 1px solid #999;\n    page-break-inside: avoid;\n  }\n  thead {\n    display: table-header-group;\n  }\n  tr,\n  img {\n    page-break-inside: avoid;\n  }\n  img {\n    max-width: 100% !important;\n  }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3;\n  }\n  h2,\n  h3 {\n    page-break-after: avoid;\n  }\n  .navbar {\n    display: none;\n  }\n  .btn > .caret,\n  .dropup > .btn > .caret {\n    border-top-color: #000 !important;\n  }\n  .label {\n    border: 1px solid #000;\n  }\n  .table {\n    border-collapse: collapse !important;\n  }\n  .table td,\n  .table th {\n    background-color: #fff !important;\n  }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #ddd !important;\n  }\n}\n* {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n*:before,\n*:after {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nhtml {\n  font-size: 10px;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.428571429;\n  color: #333333;\n  background-color: #ffffff;\n}\ninput,\nbutton,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\na {\n  color: #337ab7;\n  text-decoration: none;\n}\na:hover,\na:focus {\n  color: #23527c;\n  text-decoration: underline;\n}\na:focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\nfigure {\n  margin: 0;\n}\nimg {\n  vertical-align: middle;\n}\n.img-responsive,\n.thumbnail > img,\n.thumbnail a > img,\n.carousel-inner > .item > img,\n.carousel-inner > .item > a > img {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n.img-rounded {\n  border-radius: 6px;\n}\n.img-thumbnail {\n  padding: 4px;\n  line-height: 1.428571429;\n  background-color: #ffffff;\n  border: 1px solid #dddddd;\n  border-radius: 4px;\n  -webkit-transition: all 0.2s ease-in-out;\n  -o-transition: all 0.2s ease-in-out;\n  transition: all 0.2s ease-in-out;\n  display: inline-block;\n  max-width: 100%;\n  height: auto;\n}\n.img-circle {\n  border-radius: 50%;\n}\nhr {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 0;\n  border-top: 1px solid #eeeeee;\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n.sr-only-focusable:active,\n.sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\n[role=\"button\"] {\n  cursor: pointer;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\n.h1,\n.h2,\n.h3,\n.h4,\n.h5,\n.h6 {\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.1;\n  color: inherit;\n}\nh1 small,\nh2 small,\nh3 small,\nh4 small,\nh5 small,\nh6 small,\n.h1 small,\n.h2 small,\n.h3 small,\n.h4 small,\n.h5 small,\n.h6 small,\nh1 .small,\nh2 .small,\nh3 .small,\nh4 .small,\nh5 .small,\nh6 .small,\n.h1 .small,\n.h2 .small,\n.h3 .small,\n.h4 .small,\n.h5 .small,\n.h6 .small {\n  font-weight: normal;\n  line-height: 1;\n  color: #777777;\n}\nh1,\n.h1,\nh2,\n.h2,\nh3,\n.h3 {\n  margin-top: 20px;\n  margin-bottom: 10px;\n}\nh1 small,\n.h1 small,\nh2 small,\n.h2 small,\nh3 small,\n.h3 small,\nh1 .small,\n.h1 .small,\nh2 .small,\n.h2 .small,\nh3 .small,\n.h3 .small {\n  font-size: 65%;\n}\nh4,\n.h4,\nh5,\n.h5,\nh6,\n.h6 {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\nh4 small,\n.h4 small,\nh5 small,\n.h5 small,\nh6 small,\n.h6 small,\nh4 .small,\n.h4 .small,\nh5 .small,\n.h5 .small,\nh6 .small,\n.h6 .small {\n  font-size: 75%;\n}\nh1,\n.h1 {\n  font-size: 36px;\n}\nh2,\n.h2 {\n  font-size: 30px;\n}\nh3,\n.h3 {\n  font-size: 24px;\n}\nh4,\n.h4 {\n  font-size: 18px;\n}\nh5,\n.h5 {\n  font-size: 14px;\n}\nh6,\n.h6 {\n  font-size: 12px;\n}\np {\n  margin: 0 0 10px;\n}\n.lead {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 1.4;\n}\n@media (min-width: 768px) {\n  .lead {\n    font-size: 21px;\n  }\n}\nsmall,\n.small {\n  font-size: 85%;\n}\nmark,\n.mark {\n  background-color: #fcf8e3;\n  padding: .2em;\n}\n.text-left {\n  text-align: left;\n}\n.text-right {\n  text-align: right;\n}\n.text-center {\n  text-align: center;\n}\n.text-justify {\n  text-align: justify;\n}\n.text-nowrap {\n  white-space: nowrap;\n}\n.text-lowercase {\n  text-transform: lowercase;\n}\n.text-uppercase {\n  text-transform: uppercase;\n}\n.text-capitalize {\n  text-transform: capitalize;\n}\n.text-muted {\n  color: #777777;\n}\n.text-primary {\n  color: #337ab7;\n}\na.text-primary:hover,\na.text-primary:focus {\n  color: #286090;\n}\n.text-success {\n  color: #3c763d;\n}\na.text-success:hover,\na.text-success:focus {\n  color: #2b542c;\n}\n.text-info {\n  color: #31708f;\n}\na.text-info:hover,\na.text-info:focus {\n  color: #245269;\n}\n.text-warning {\n  color: #8a6d3b;\n}\na.text-warning:hover,\na.text-warning:focus {\n  color: #66512c;\n}\n.text-danger {\n  color: #a94442;\n}\na.text-danger:hover,\na.text-danger:focus {\n  color: #843534;\n}\n.bg-primary {\n  color: #fff;\n  background-color: #337ab7;\n}\na.bg-primary:hover,\na.bg-primary:focus {\n  background-color: #286090;\n}\n.bg-success {\n  background-color: #dff0d8;\n}\na.bg-success:hover,\na.bg-success:focus {\n  background-color: #c1e2b3;\n}\n.bg-info {\n  background-color: #d9edf7;\n}\na.bg-info:hover,\na.bg-info:focus {\n  background-color: #afd9ee;\n}\n.bg-warning {\n  background-color: #fcf8e3;\n}\na.bg-warning:hover,\na.bg-warning:focus {\n  background-color: #f7ecb5;\n}\n.bg-danger {\n  background-color: #f2dede;\n}\na.bg-danger:hover,\na.bg-danger:focus {\n  background-color: #e4b9b9;\n}\n.page-header {\n  padding-bottom: 9px;\n  margin: 40px 0 20px;\n  border-bottom: 1px solid #eeeeee;\n}\nul,\nol {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\nul ul,\nol ul,\nul ol,\nol ol {\n  margin-bottom: 0;\n}\n.list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n.list-inline {\n  padding-left: 0;\n  list-style: none;\n  margin-left: -5px;\n}\n.list-inline > li {\n  display: inline-block;\n  padding-left: 5px;\n  padding-right: 5px;\n}\ndl {\n  margin-top: 0;\n  margin-bottom: 20px;\n}\ndt,\ndd {\n  line-height: 1.428571429;\n}\ndt {\n  font-weight: bold;\n}\ndd {\n  margin-left: 0;\n}\n@media (min-width: 768px) {\n  .dl-horizontal dt {\n    float: left;\n    width: 160px;\n    clear: left;\n    text-align: right;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  .dl-horizontal dd {\n    margin-left: 180px;\n  }\n}\nabbr[title],\nabbr[data-original-title] {\n  cursor: help;\n  border-bottom: 1px dotted #777777;\n}\n.initialism {\n  font-size: 90%;\n  text-transform: uppercase;\n}\nblockquote {\n  padding: 10px 20px;\n  margin: 0 0 20px;\n  font-size: 17.5px;\n  border-left: 5px solid #eeeeee;\n}\nblockquote p:last-child,\nblockquote ul:last-child,\nblockquote ol:last-child {\n  margin-bottom: 0;\n}\nblockquote footer,\nblockquote small,\nblockquote .small {\n  display: block;\n  font-size: 80%;\n  line-height: 1.428571429;\n  color: #777777;\n}\nblockquote footer:before,\nblockquote small:before,\nblockquote .small:before {\n  content: '\\2014 \\00A0';\n}\n.blockquote-reverse,\nblockquote.pull-right {\n  padding-right: 15px;\n  padding-left: 0;\n  border-right: 5px solid #eeeeee;\n  border-left: 0;\n  text-align: right;\n}\n.blockquote-reverse footer:before,\nblockquote.pull-right footer:before,\n.blockquote-reverse small:before,\nblockquote.pull-right small:before,\n.blockquote-reverse .small:before,\nblockquote.pull-right .small:before {\n  content: '';\n}\n.blockquote-reverse footer:after,\nblockquote.pull-right footer:after,\n.blockquote-reverse small:after,\nblockquote.pull-right small:after,\n.blockquote-reverse .small:after,\nblockquote.pull-right .small:after {\n  content: '\\00A0 \\2014';\n}\naddress {\n  margin-bottom: 20px;\n  font-style: normal;\n  line-height: 1.428571429;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}\ncode {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  border-radius: 4px;\n}\nkbd {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #ffffff;\n  background-color: #333333;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.25);\n}\nkbd kbd {\n  padding: 0;\n  font-size: 100%;\n  font-weight: bold;\n  box-shadow: none;\n}\npre {\n  display: block;\n  padding: 9.5px;\n  margin: 0 0 10px;\n  font-size: 13px;\n  line-height: 1.428571429;\n  word-break: break-all;\n  word-wrap: break-word;\n  color: #333333;\n  background-color: #f5f5f5;\n  border: 1px solid #cccccc;\n  border-radius: 4px;\n}\npre code {\n  padding: 0;\n  font-size: inherit;\n  color: inherit;\n  white-space: pre-wrap;\n  background-color: transparent;\n  border-radius: 0;\n}\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll;\n}\n.container {\n  margin-right: auto;\n  margin-left: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n@media (min-width: 768px) {\n  .container {\n    width: 750px;\n  }\n}\n@media (min-width: 992px) {\n  .container {\n    width: 970px;\n  }\n}\n@media (min-width: 1200px) {\n  .container {\n    width: 1170px;\n  }\n}\n.container-fluid {\n  margin-right: auto;\n  margin-left: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n.row {\n  margin-left: -15px;\n  margin-right: -15px;\n}\n.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {\n  position: relative;\n  min-height: 1px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {\n  float: left;\n}\n.col-xs-12 {\n  width: 100%;\n}\n.col-xs-11 {\n  width: 91.66666666666666%;\n}\n.col-xs-10 {\n  width: 83.33333333333334%;\n}\n.col-xs-9 {\n  width: 75%;\n}\n.col-xs-8 {\n  width: 66.66666666666666%;\n}\n.col-xs-7 {\n  width: 58.333333333333336%;\n}\n.col-xs-6 {\n  width: 50%;\n}\n.col-xs-5 {\n  width: 41.66666666666667%;\n}\n.col-xs-4 {\n  width: 33.33333333333333%;\n}\n.col-xs-3 {\n  width: 25%;\n}\n.col-xs-2 {\n  width: 16.666666666666664%;\n}\n.col-xs-1 {\n  width: 8.333333333333332%;\n}\n.col-xs-pull-12 {\n  right: 100%;\n}\n.col-xs-pull-11 {\n  right: 91.66666666666666%;\n}\n.col-xs-pull-10 {\n  right: 83.33333333333334%;\n}\n.col-xs-pull-9 {\n  right: 75%;\n}\n.col-xs-pull-8 {\n  right: 66.66666666666666%;\n}\n.col-xs-pull-7 {\n  right: 58.333333333333336%;\n}\n.col-xs-pull-6 {\n  right: 50%;\n}\n.col-xs-pull-5 {\n  right: 41.66666666666667%;\n}\n.col-xs-pull-4 {\n  right: 33.33333333333333%;\n}\n.col-xs-pull-3 {\n  right: 25%;\n}\n.col-xs-pull-2 {\n  right: 16.666666666666664%;\n}\n.col-xs-pull-1 {\n  right: 8.333333333333332%;\n}\n.col-xs-pull-0 {\n  right: auto;\n}\n.col-xs-push-12 {\n  left: 100%;\n}\n.col-xs-push-11 {\n  left: 91.66666666666666%;\n}\n.col-xs-push-10 {\n  left: 83.33333333333334%;\n}\n.col-xs-push-9 {\n  left: 75%;\n}\n.col-xs-push-8 {\n  left: 66.66666666666666%;\n}\n.col-xs-push-7 {\n  left: 58.333333333333336%;\n}\n.col-xs-push-6 {\n  left: 50%;\n}\n.col-xs-push-5 {\n  left: 41.66666666666667%;\n}\n.col-xs-push-4 {\n  left: 33.33333333333333%;\n}\n.col-xs-push-3 {\n  left: 25%;\n}\n.col-xs-push-2 {\n  left: 16.666666666666664%;\n}\n.col-xs-push-1 {\n  left: 8.333333333333332%;\n}\n.col-xs-push-0 {\n  left: auto;\n}\n.col-xs-offset-12 {\n  margin-left: 100%;\n}\n.col-xs-offset-11 {\n  margin-left: 91.66666666666666%;\n}\n.col-xs-offset-10 {\n  margin-left: 83.33333333333334%;\n}\n.col-xs-offset-9 {\n  margin-left: 75%;\n}\n.col-xs-offset-8 {\n  margin-left: 66.66666666666666%;\n}\n.col-xs-offset-7 {\n  margin-left: 58.333333333333336%;\n}\n.col-xs-offset-6 {\n  margin-left: 50%;\n}\n.col-xs-offset-5 {\n  margin-left: 41.66666666666667%;\n}\n.col-xs-offset-4 {\n  margin-left: 33.33333333333333%;\n}\n.col-xs-offset-3 {\n  margin-left: 25%;\n}\n.col-xs-offset-2 {\n  margin-left: 16.666666666666664%;\n}\n.col-xs-offset-1 {\n  margin-left: 8.333333333333332%;\n}\n.col-xs-offset-0 {\n  margin-left: 0%;\n}\n@media (min-width: 768px) {\n  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {\n    float: left;\n  }\n  .col-sm-12 {\n    width: 100%;\n  }\n  .col-sm-11 {\n    width: 91.66666666666666%;\n  }\n  .col-sm-10 {\n    width: 83.33333333333334%;\n  }\n  .col-sm-9 {\n    width: 75%;\n  }\n  .col-sm-8 {\n    width: 66.66666666666666%;\n  }\n  .col-sm-7 {\n    width: 58.333333333333336%;\n  }\n  .col-sm-6 {\n    width: 50%;\n  }\n  .col-sm-5 {\n    width: 41.66666666666667%;\n  }\n  .col-sm-4 {\n    width: 33.33333333333333%;\n  }\n  .col-sm-3 {\n    width: 25%;\n  }\n  .col-sm-2 {\n    width: 16.666666666666664%;\n  }\n  .col-sm-1 {\n    width: 8.333333333333332%;\n  }\n  .col-sm-pull-12 {\n    right: 100%;\n  }\n  .col-sm-pull-11 {\n    right: 91.66666666666666%;\n  }\n  .col-sm-pull-10 {\n    right: 83.33333333333334%;\n  }\n  .col-sm-pull-9 {\n    right: 75%;\n  }\n  .col-sm-pull-8 {\n    right: 66.66666666666666%;\n  }\n  .col-sm-pull-7 {\n    right: 58.333333333333336%;\n  }\n  .col-sm-pull-6 {\n    right: 50%;\n  }\n  .col-sm-pull-5 {\n    right: 41.66666666666667%;\n  }\n  .col-sm-pull-4 {\n    right: 33.33333333333333%;\n  }\n  .col-sm-pull-3 {\n    right: 25%;\n  }\n  .col-sm-pull-2 {\n    right: 16.666666666666664%;\n  }\n  .col-sm-pull-1 {\n    right: 8.333333333333332%;\n  }\n  .col-sm-pull-0 {\n    right: auto;\n  }\n  .col-sm-push-12 {\n    left: 100%;\n  }\n  .col-sm-push-11 {\n    left: 91.66666666666666%;\n  }\n  .col-sm-push-10 {\n    left: 83.33333333333334%;\n  }\n  .col-sm-push-9 {\n    left: 75%;\n  }\n  .col-sm-push-8 {\n    left: 66.66666666666666%;\n  }\n  .col-sm-push-7 {\n    left: 58.333333333333336%;\n  }\n  .col-sm-push-6 {\n    left: 50%;\n  }\n  .col-sm-push-5 {\n    left: 41.66666666666667%;\n  }\n  .col-sm-push-4 {\n    left: 33.33333333333333%;\n  }\n  .col-sm-push-3 {\n    left: 25%;\n  }\n  .col-sm-push-2 {\n    left: 16.666666666666664%;\n  }\n  .col-sm-push-1 {\n    left: 8.333333333333332%;\n  }\n  .col-sm-push-0 {\n    left: auto;\n  }\n  .col-sm-offset-12 {\n    margin-left: 100%;\n  }\n  .col-sm-offset-11 {\n    margin-left: 91.66666666666666%;\n  }\n  .col-sm-offset-10 {\n    margin-left: 83.33333333333334%;\n  }\n  .col-sm-offset-9 {\n    margin-left: 75%;\n  }\n  .col-sm-offset-8 {\n    margin-left: 66.66666666666666%;\n  }\n  .col-sm-offset-7 {\n    margin-left: 58.333333333333336%;\n  }\n  .col-sm-offset-6 {\n    margin-left: 50%;\n  }\n  .col-sm-offset-5 {\n    margin-left: 41.66666666666667%;\n  }\n  .col-sm-offset-4 {\n    margin-left: 33.33333333333333%;\n  }\n  .col-sm-offset-3 {\n    margin-left: 25%;\n  }\n  .col-sm-offset-2 {\n    margin-left: 16.666666666666664%;\n  }\n  .col-sm-offset-1 {\n    margin-left: 8.333333333333332%;\n  }\n  .col-sm-offset-0 {\n    margin-left: 0%;\n  }\n}\n@media (min-width: 992px) {\n  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {\n    float: left;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n  .col-md-11 {\n    width: 91.66666666666666%;\n  }\n  .col-md-10 {\n    width: 83.33333333333334%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-8 {\n    width: 66.66666666666666%;\n  }\n  .col-md-7 {\n    width: 58.333333333333336%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-5 {\n    width: 41.66666666666667%;\n  }\n  .col-md-4 {\n    width: 33.33333333333333%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-2 {\n    width: 16.666666666666664%;\n  }\n  .col-md-1 {\n    width: 8.333333333333332%;\n  }\n  .col-md-pull-12 {\n    right: 100%;\n  }\n  .col-md-pull-11 {\n    right: 91.66666666666666%;\n  }\n  .col-md-pull-10 {\n    right: 83.33333333333334%;\n  }\n  .col-md-pull-9 {\n    right: 75%;\n  }\n  .col-md-pull-8 {\n    right: 66.66666666666666%;\n  }\n  .col-md-pull-7 {\n    right: 58.333333333333336%;\n  }\n  .col-md-pull-6 {\n    right: 50%;\n  }\n  .col-md-pull-5 {\n    right: 41.66666666666667%;\n  }\n  .col-md-pull-4 {\n    right: 33.33333333333333%;\n  }\n  .col-md-pull-3 {\n    right: 25%;\n  }\n  .col-md-pull-2 {\n    right: 16.666666666666664%;\n  }\n  .col-md-pull-1 {\n    right: 8.333333333333332%;\n  }\n  .col-md-pull-0 {\n    right: auto;\n  }\n  .col-md-push-12 {\n    left: 100%;\n  }\n  .col-md-push-11 {\n    left: 91.66666666666666%;\n  }\n  .col-md-push-10 {\n    left: 83.33333333333334%;\n  }\n  .col-md-push-9 {\n    left: 75%;\n  }\n  .col-md-push-8 {\n    left: 66.66666666666666%;\n  }\n  .col-md-push-7 {\n    left: 58.333333333333336%;\n  }\n  .col-md-push-6 {\n    left: 50%;\n  }\n  .col-md-push-5 {\n    left: 41.66666666666667%;\n  }\n  .col-md-push-4 {\n    left: 33.33333333333333%;\n  }\n  .col-md-push-3 {\n    left: 25%;\n  }\n  .col-md-push-2 {\n    left: 16.666666666666664%;\n  }\n  .col-md-push-1 {\n    left: 8.333333333333332%;\n  }\n  .col-md-push-0 {\n    left: auto;\n  }\n  .col-md-offset-12 {\n    margin-left: 100%;\n  }\n  .col-md-offset-11 {\n    margin-left: 91.66666666666666%;\n  }\n  .col-md-offset-10 {\n    margin-left: 83.33333333333334%;\n  }\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n  .col-md-offset-8 {\n    margin-left: 66.66666666666666%;\n  }\n  .col-md-offset-7 {\n    margin-left: 58.333333333333336%;\n  }\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n  .col-md-offset-5 {\n    margin-left: 41.66666666666667%;\n  }\n  .col-md-offset-4 {\n    margin-left: 33.33333333333333%;\n  }\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n  .col-md-offset-2 {\n    margin-left: 16.666666666666664%;\n  }\n  .col-md-offset-1 {\n    margin-left: 8.333333333333332%;\n  }\n  .col-md-offset-0 {\n    margin-left: 0%;\n  }\n}\n@media (min-width: 1200px) {\n  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {\n    float: left;\n  }\n  .col-lg-12 {\n    width: 100%;\n  }\n  .col-lg-11 {\n    width: 91.66666666666666%;\n  }\n  .col-lg-10 {\n    width: 83.33333333333334%;\n  }\n  .col-lg-9 {\n    width: 75%;\n  }\n  .col-lg-8 {\n    width: 66.66666666666666%;\n  }\n  .col-lg-7 {\n    width: 58.333333333333336%;\n  }\n  .col-lg-6 {\n    width: 50%;\n  }\n  .col-lg-5 {\n    width: 41.66666666666667%;\n  }\n  .col-lg-4 {\n    width: 33.33333333333333%;\n  }\n  .col-lg-3 {\n    width: 25%;\n  }\n  .col-lg-2 {\n    width: 16.666666666666664%;\n  }\n  .col-lg-1 {\n    width: 8.333333333333332%;\n  }\n  .col-lg-pull-12 {\n    right: 100%;\n  }\n  .col-lg-pull-11 {\n    right: 91.66666666666666%;\n  }\n  .col-lg-pull-10 {\n    right: 83.33333333333334%;\n  }\n  .col-lg-pull-9 {\n    right: 75%;\n  }\n  .col-lg-pull-8 {\n    right: 66.66666666666666%;\n  }\n  .col-lg-pull-7 {\n    right: 58.333333333333336%;\n  }\n  .col-lg-pull-6 {\n    right: 50%;\n  }\n  .col-lg-pull-5 {\n    right: 41.66666666666667%;\n  }\n  .col-lg-pull-4 {\n    right: 33.33333333333333%;\n  }\n  .col-lg-pull-3 {\n    right: 25%;\n  }\n  .col-lg-pull-2 {\n    right: 16.666666666666664%;\n  }\n  .col-lg-pull-1 {\n    right: 8.333333333333332%;\n  }\n  .col-lg-pull-0 {\n    right: auto;\n  }\n  .col-lg-push-12 {\n    left: 100%;\n  }\n  .col-lg-push-11 {\n    left: 91.66666666666666%;\n  }\n  .col-lg-push-10 {\n    left: 83.33333333333334%;\n  }\n  .col-lg-push-9 {\n    left: 75%;\n  }\n  .col-lg-push-8 {\n    left: 66.66666666666666%;\n  }\n  .col-lg-push-7 {\n    left: 58.333333333333336%;\n  }\n  .col-lg-push-6 {\n    left: 50%;\n  }\n  .col-lg-push-5 {\n    left: 41.66666666666667%;\n  }\n  .col-lg-push-4 {\n    left: 33.33333333333333%;\n  }\n  .col-lg-push-3 {\n    left: 25%;\n  }\n  .col-lg-push-2 {\n    left: 16.666666666666664%;\n  }\n  .col-lg-push-1 {\n    left: 8.333333333333332%;\n  }\n  .col-lg-push-0 {\n    left: auto;\n  }\n  .col-lg-offset-12 {\n    margin-left: 100%;\n  }\n  .col-lg-offset-11 {\n    margin-left: 91.66666666666666%;\n  }\n  .col-lg-offset-10 {\n    margin-left: 83.33333333333334%;\n  }\n  .col-lg-offset-9 {\n    margin-left: 75%;\n  }\n  .col-lg-offset-8 {\n    margin-left: 66.66666666666666%;\n  }\n  .col-lg-offset-7 {\n    margin-left: 58.333333333333336%;\n  }\n  .col-lg-offset-6 {\n    margin-left: 50%;\n  }\n  .col-lg-offset-5 {\n    margin-left: 41.66666666666667%;\n  }\n  .col-lg-offset-4 {\n    margin-left: 33.33333333333333%;\n  }\n  .col-lg-offset-3 {\n    margin-left: 25%;\n  }\n  .col-lg-offset-2 {\n    margin-left: 16.666666666666664%;\n  }\n  .col-lg-offset-1 {\n    margin-left: 8.333333333333332%;\n  }\n  .col-lg-offset-0 {\n    margin-left: 0%;\n  }\n}\ntable {\n  background-color: transparent;\n}\ncaption {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  color: #777777;\n  text-align: left;\n}\nth {\n  text-align: left;\n}\n.table {\n  width: 100%;\n  max-width: 100%;\n  margin-bottom: 20px;\n}\n.table > thead > tr > th,\n.table > tbody > tr > th,\n.table > tfoot > tr > th,\n.table > thead > tr > td,\n.table > tbody > tr > td,\n.table > tfoot > tr > td {\n  padding: 8px;\n  line-height: 1.428571429;\n  vertical-align: top;\n  border-top: 1px solid #dddddd;\n}\n.table > thead > tr > th {\n  vertical-align: bottom;\n  border-bottom: 2px solid #dddddd;\n}\n.table > caption + thead > tr:first-child > th,\n.table > colgroup + thead > tr:first-child > th,\n.table > thead:first-child > tr:first-child > th,\n.table > caption + thead > tr:first-child > td,\n.table > colgroup + thead > tr:first-child > td,\n.table > thead:first-child > tr:first-child > td {\n  border-top: 0;\n}\n.table > tbody + tbody {\n  border-top: 2px solid #dddddd;\n}\n.table .table {\n  background-color: #ffffff;\n}\n.table-condensed > thead > tr > th,\n.table-condensed > tbody > tr > th,\n.table-condensed > tfoot > tr > th,\n.table-condensed > thead > tr > td,\n.table-condensed > tbody > tr > td,\n.table-condensed > tfoot > tr > td {\n  padding: 5px;\n}\n.table-bordered {\n  border: 1px solid #dddddd;\n}\n.table-bordered > thead > tr > th,\n.table-bordered > tbody > tr > th,\n.table-bordered > tfoot > tr > th,\n.table-bordered > thead > tr > td,\n.table-bordered > tbody > tr > td,\n.table-bordered > tfoot > tr > td {\n  border: 1px solid #dddddd;\n}\n.table-bordered > thead > tr > th,\n.table-bordered > thead > tr > td {\n  border-bottom-width: 2px;\n}\n.table-striped > tbody > tr:nth-of-type(odd) {\n  background-color: #f9f9f9;\n}\n.table-hover > tbody > tr:hover {\n  background-color: #f5f5f5;\n}\ntable col[class*=\"col-\"] {\n  position: static;\n  float: none;\n  display: table-column;\n}\ntable td[class*=\"col-\"],\ntable th[class*=\"col-\"] {\n  position: static;\n  float: none;\n  display: table-cell;\n}\n.table > thead > tr > td.active,\n.table > tbody > tr > td.active,\n.table > tfoot > tr > td.active,\n.table > thead > tr > th.active,\n.table > tbody > tr > th.active,\n.table > tfoot > tr > th.active,\n.table > thead > tr.active > td,\n.table > tbody > tr.active > td,\n.table > tfoot > tr.active > td,\n.table > thead > tr.active > th,\n.table > tbody > tr.active > th,\n.table > tfoot > tr.active > th {\n  background-color: #f5f5f5;\n}\n.table-hover > tbody > tr > td.active:hover,\n.table-hover > tbody > tr > th.active:hover,\n.table-hover > tbody > tr.active:hover > td,\n.table-hover > tbody > tr:hover > .active,\n.table-hover > tbody > tr.active:hover > th {\n  background-color: #e8e8e8;\n}\n.table > thead > tr > td.success,\n.table > tbody > tr > td.success,\n.table > tfoot > tr > td.success,\n.table > thead > tr > th.success,\n.table > tbody > tr > th.success,\n.table > tfoot > tr > th.success,\n.table > thead > tr.success > td,\n.table > tbody > tr.success > td,\n.table > tfoot > tr.success > td,\n.table > thead > tr.success > th,\n.table > tbody > tr.success > th,\n.table > tfoot > tr.success > th {\n  background-color: #dff0d8;\n}\n.table-hover > tbody > tr > td.success:hover,\n.table-hover > tbody > tr > th.success:hover,\n.table-hover > tbody > tr.success:hover > td,\n.table-hover > tbody > tr:hover > .success,\n.table-hover > tbody > tr.success:hover > th {\n  background-color: #d0e9c6;\n}\n.table > thead > tr > td.info,\n.table > tbody > tr > td.info,\n.table > tfoot > tr > td.info,\n.table > thead > tr > th.info,\n.table > tbody > tr > th.info,\n.table > tfoot > tr > th.info,\n.table > thead > tr.info > td,\n.table > tbody > tr.info > td,\n.table > tfoot > tr.info > td,\n.table > thead > tr.info > th,\n.table > tbody > tr.info > th,\n.table > tfoot > tr.info > th {\n  background-color: #d9edf7;\n}\n.table-hover > tbody > tr > td.info:hover,\n.table-hover > tbody > tr > th.info:hover,\n.table-hover > tbody > tr.info:hover > td,\n.table-hover > tbody > tr:hover > .info,\n.table-hover > tbody > tr.info:hover > th {\n  background-color: #c4e3f3;\n}\n.table > thead > tr > td.warning,\n.table > tbody > tr > td.warning,\n.table > tfoot > tr > td.warning,\n.table > thead > tr > th.warning,\n.table > tbody > tr > th.warning,\n.table > tfoot > tr > th.warning,\n.table > thead > tr.warning > td,\n.table > tbody > tr.warning > td,\n.table > tfoot > tr.warning > td,\n.table > thead > tr.warning > th,\n.table > tbody > tr.warning > th,\n.table > tfoot > tr.warning > th {\n  background-color: #fcf8e3;\n}\n.table-hover > tbody > tr > td.warning:hover,\n.table-hover > tbody > tr > th.warning:hover,\n.table-hover > tbody > tr.warning:hover > td,\n.table-hover > tbody > tr:hover > .warning,\n.table-hover > tbody > tr.warning:hover > th {\n  background-color: #faf2cc;\n}\n.table > thead > tr > td.danger,\n.table > tbody > tr > td.danger,\n.table > tfoot > tr > td.danger,\n.table > thead > tr > th.danger,\n.table > tbody > tr > th.danger,\n.table > tfoot > tr > th.danger,\n.table > thead > tr.danger > td,\n.table > tbody > tr.danger > td,\n.table > tfoot > tr.danger > td,\n.table > thead > tr.danger > th,\n.table > tbody > tr.danger > th,\n.table > tfoot > tr.danger > th {\n  background-color: #f2dede;\n}\n.table-hover > tbody > tr > td.danger:hover,\n.table-hover > tbody > tr > th.danger:hover,\n.table-hover > tbody > tr.danger:hover > td,\n.table-hover > tbody > tr:hover > .danger,\n.table-hover > tbody > tr.danger:hover > th {\n  background-color: #ebcccc;\n}\n.table-responsive {\n  overflow-x: auto;\n  min-height: 0.01%;\n}\n@media screen and (max-width: 767px) {\n  .table-responsive {\n    width: 100%;\n    margin-bottom: 15px;\n    overflow-y: hidden;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n    border: 1px solid #dddddd;\n  }\n  .table-responsive > .table {\n    margin-bottom: 0;\n  }\n  .table-responsive > .table > thead > tr > th,\n  .table-responsive > .table > tbody > tr > th,\n  .table-responsive > .table > tfoot > tr > th,\n  .table-responsive > .table > thead > tr > td,\n  .table-responsive > .table > tbody > tr > td,\n  .table-responsive > .table > tfoot > tr > td {\n    white-space: nowrap;\n  }\n  .table-responsive > .table-bordered {\n    border: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:first-child,\n  .table-responsive > .table-bordered > tbody > tr > th:first-child,\n  .table-responsive > .table-bordered > tfoot > tr > th:first-child,\n  .table-responsive > .table-bordered > thead > tr > td:first-child,\n  .table-responsive > .table-bordered > tbody > tr > td:first-child,\n  .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n    border-left: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:last-child,\n  .table-responsive > .table-bordered > tbody > tr > th:last-child,\n  .table-responsive > .table-bordered > tfoot > tr > th:last-child,\n  .table-responsive > .table-bordered > thead > tr > td:last-child,\n  .table-responsive > .table-bordered > tbody > tr > td:last-child,\n  .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n    border-right: 0;\n  }\n  .table-responsive > .table-bordered > tbody > tr:last-child > th,\n  .table-responsive > .table-bordered > tfoot > tr:last-child > th,\n  .table-responsive > .table-bordered > tbody > tr:last-child > td,\n  .table-responsive > .table-bordered > tfoot > tr:last-child > td {\n    border-bottom: 0;\n  }\n}\nfieldset {\n  padding: 0;\n  margin: 0;\n  border: 0;\n  min-width: 0;\n}\nlegend {\n  display: block;\n  width: 100%;\n  padding: 0;\n  margin-bottom: 20px;\n  font-size: 21px;\n  line-height: inherit;\n  color: #333333;\n  border: 0;\n  border-bottom: 1px solid #e5e5e5;\n}\nlabel {\n  display: inline-block;\n  max-width: 100%;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\ninput[type=\"search\"] {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\ninput[type=\"radio\"],\ninput[type=\"checkbox\"] {\n  margin: 4px 0 0;\n  margin-top: 1px \\9;\n  line-height: normal;\n}\ninput[type=\"file\"] {\n  display: block;\n}\ninput[type=\"range\"] {\n  display: block;\n  width: 100%;\n}\nselect[multiple],\nselect[size] {\n  height: auto;\n}\ninput[type=\"file\"]:focus,\ninput[type=\"radio\"]:focus,\ninput[type=\"checkbox\"]:focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\noutput {\n  display: block;\n  padding-top: 7px;\n  font-size: 14px;\n  line-height: 1.428571429;\n  color: #555555;\n}\n.form-control {\n  display: block;\n  width: 100%;\n  height: 34px;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.428571429;\n  color: #555555;\n  background-color: #ffffff;\n  background-image: none;\n  border: 1px solid #cccccc;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  -webkit-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n  -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n}\n.form-control:focus {\n  border-color: #66afe9;\n  outline: 0;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, 0.6);\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, 0.6);\n}\n.form-control::-moz-placeholder {\n  color: #999999;\n  opacity: 1;\n}\n.form-control:-ms-input-placeholder {\n  color: #999999;\n}\n.form-control::-webkit-input-placeholder {\n  color: #999999;\n}\n.form-control[disabled],\n.form-control[readonly],\nfieldset[disabled] .form-control {\n  background-color: #eeeeee;\n  opacity: 1;\n}\n.form-control[disabled],\nfieldset[disabled] .form-control {\n  cursor: not-allowed;\n}\ntextarea.form-control {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-appearance: none;\n}\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\n  input[type=\"date\"].form-control,\n  input[type=\"time\"].form-control,\n  input[type=\"datetime-local\"].form-control,\n  input[type=\"month\"].form-control {\n    line-height: 34px;\n  }\n  input[type=\"date\"].input-sm,\n  input[type=\"time\"].input-sm,\n  input[type=\"datetime-local\"].input-sm,\n  input[type=\"month\"].input-sm,\n  .input-group-sm input[type=\"date\"],\n  .input-group-sm input[type=\"time\"],\n  .input-group-sm input[type=\"datetime-local\"],\n  .input-group-sm input[type=\"month\"] {\n    line-height: 30px;\n  }\n  input[type=\"date\"].input-lg,\n  input[type=\"time\"].input-lg,\n  input[type=\"datetime-local\"].input-lg,\n  input[type=\"month\"].input-lg,\n  .input-group-lg input[type=\"date\"],\n  .input-group-lg input[type=\"time\"],\n  .input-group-lg input[type=\"datetime-local\"],\n  .input-group-lg input[type=\"month\"] {\n    line-height: 46px;\n  }\n}\n.form-group {\n  margin-bottom: 15px;\n}\n.radio,\n.checkbox {\n  position: relative;\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.radio label,\n.checkbox label {\n  min-height: 20px;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: normal;\n  cursor: pointer;\n}\n.radio input[type=\"radio\"],\n.radio-inline input[type=\"radio\"],\n.checkbox input[type=\"checkbox\"],\n.checkbox-inline input[type=\"checkbox\"] {\n  position: absolute;\n  margin-left: -20px;\n  margin-top: 4px \\9;\n}\n.radio + .radio,\n.checkbox + .checkbox {\n  margin-top: -5px;\n}\n.radio-inline,\n.checkbox-inline {\n  position: relative;\n  display: inline-block;\n  padding-left: 20px;\n  margin-bottom: 0;\n  vertical-align: middle;\n  font-weight: normal;\n  cursor: pointer;\n}\n.radio-inline + .radio-inline,\n.checkbox-inline + .checkbox-inline {\n  margin-top: 0;\n  margin-left: 10px;\n}\ninput[type=\"radio\"][disabled],\ninput[type=\"checkbox\"][disabled],\ninput[type=\"radio\"].disabled,\ninput[type=\"checkbox\"].disabled,\nfieldset[disabled] input[type=\"radio\"],\nfieldset[disabled] input[type=\"checkbox\"] {\n  cursor: not-allowed;\n}\n.radio-inline.disabled,\n.checkbox-inline.disabled,\nfieldset[disabled] .radio-inline,\nfieldset[disabled] .checkbox-inline {\n  cursor: not-allowed;\n}\n.radio.disabled label,\n.checkbox.disabled label,\nfieldset[disabled] .radio label,\nfieldset[disabled] .checkbox label {\n  cursor: not-allowed;\n}\n.form-control-static {\n  padding-top: 7px;\n  padding-bottom: 7px;\n  margin-bottom: 0;\n  min-height: 34px;\n}\n.form-control-static.input-lg,\n.form-control-static.input-sm {\n  padding-left: 0;\n  padding-right: 0;\n}\n.input-sm {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-sm {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-sm,\nselect[multiple].input-sm {\n  height: auto;\n}\n.form-group-sm .form-control {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.form-group-sm select.form-control {\n  height: 30px;\n  line-height: 30px;\n}\n.form-group-sm textarea.form-control,\n.form-group-sm select[multiple].form-control {\n  height: auto;\n}\n.form-group-sm .form-control-static {\n  height: 30px;\n  min-height: 32px;\n  padding: 6px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.input-lg {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-lg {\n  height: 46px;\n  line-height: 46px;\n}\ntextarea.input-lg,\nselect[multiple].input-lg {\n  height: auto;\n}\n.form-group-lg .form-control {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.form-group-lg select.form-control {\n  height: 46px;\n  line-height: 46px;\n}\n.form-group-lg textarea.form-control,\n.form-group-lg select[multiple].form-control {\n  height: auto;\n}\n.form-group-lg .form-control-static {\n  height: 46px;\n  min-height: 38px;\n  padding: 11px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.has-feedback {\n  position: relative;\n}\n.has-feedback .form-control {\n  padding-right: 42.5px;\n}\n.form-control-feedback {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 2;\n  display: block;\n  width: 34px;\n  height: 34px;\n  line-height: 34px;\n  text-align: center;\n  pointer-events: none;\n}\n.input-lg + .form-control-feedback,\n.input-group-lg + .form-control-feedback,\n.form-group-lg .form-control + .form-control-feedback {\n  width: 46px;\n  height: 46px;\n  line-height: 46px;\n}\n.input-sm + .form-control-feedback,\n.input-group-sm + .form-control-feedback,\n.form-group-sm .form-control + .form-control-feedback {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n}\n.has-success .help-block,\n.has-success .control-label,\n.has-success .radio,\n.has-success .checkbox,\n.has-success .radio-inline,\n.has-success .checkbox-inline,\n.has-success.radio label,\n.has-success.checkbox label,\n.has-success.radio-inline label,\n.has-success.checkbox-inline label {\n  color: #3c763d;\n}\n.has-success .form-control {\n  border-color: #3c763d;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.has-success .form-control:focus {\n  border-color: #2b542c;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #67b168;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #67b168;\n}\n.has-success .input-group-addon {\n  color: #3c763d;\n  border-color: #3c763d;\n  background-color: #dff0d8;\n}\n.has-success .form-control-feedback {\n  color: #3c763d;\n}\n.has-warning .help-block,\n.has-warning .control-label,\n.has-warning .radio,\n.has-warning .checkbox,\n.has-warning .radio-inline,\n.has-warning .checkbox-inline,\n.has-warning.radio label,\n.has-warning.checkbox label,\n.has-warning.radio-inline label,\n.has-warning.checkbox-inline label {\n  color: #8a6d3b;\n}\n.has-warning .form-control {\n  border-color: #8a6d3b;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.has-warning .form-control:focus {\n  border-color: #66512c;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #c0a16b;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #c0a16b;\n}\n.has-warning .input-group-addon {\n  color: #8a6d3b;\n  border-color: #8a6d3b;\n  background-color: #fcf8e3;\n}\n.has-warning .form-control-feedback {\n  color: #8a6d3b;\n}\n.has-error .help-block,\n.has-error .control-label,\n.has-error .radio,\n.has-error .checkbox,\n.has-error .radio-inline,\n.has-error .checkbox-inline,\n.has-error.radio label,\n.has-error.checkbox label,\n.has-error.radio-inline label,\n.has-error.checkbox-inline label {\n  color: #a94442;\n}\n.has-error .form-control {\n  border-color: #a94442;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.has-error .form-control:focus {\n  border-color: #843534;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #ce8483;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #ce8483;\n}\n.has-error .input-group-addon {\n  color: #a94442;\n  border-color: #a94442;\n  background-color: #f2dede;\n}\n.has-error .form-control-feedback {\n  color: #a94442;\n}\n.has-feedback label ~ .form-control-feedback {\n  top: 25px;\n}\n.has-feedback label.sr-only ~ .form-control-feedback {\n  top: 0;\n}\n.help-block {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  color: #737373;\n}\n@media (min-width: 768px) {\n  .form-inline .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .form-inline .form-control-static {\n    display: inline-block;\n  }\n  .form-inline .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .form-inline .input-group .input-group-addon,\n  .form-inline .input-group .input-group-btn,\n  .form-inline .input-group .form-control {\n    width: auto;\n  }\n  .form-inline .input-group > .form-control {\n    width: 100%;\n  }\n  .form-inline .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio,\n  .form-inline .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio label,\n  .form-inline .checkbox label {\n    padding-left: 0;\n  }\n  .form-inline .radio input[type=\"radio\"],\n  .form-inline .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .form-inline .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n.form-horizontal .radio,\n.form-horizontal .checkbox,\n.form-horizontal .radio-inline,\n.form-horizontal .checkbox-inline {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-top: 7px;\n}\n.form-horizontal .radio,\n.form-horizontal .checkbox {\n  min-height: 27px;\n}\n.form-horizontal .form-group {\n  margin-left: -15px;\n  margin-right: -15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .control-label {\n    text-align: right;\n    margin-bottom: 0;\n    padding-top: 7px;\n  }\n}\n.form-horizontal .has-feedback .form-control-feedback {\n  right: 15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-lg .control-label {\n    padding-top: 14.333333px;\n    font-size: 18px;\n  }\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-sm .control-label {\n    padding-top: 6px;\n    font-size: 12px;\n  }\n}\n.btn {\n  display: inline-block;\n  margin-bottom: 0;\n  font-weight: normal;\n  text-align: center;\n  vertical-align: middle;\n  touch-action: manipulation;\n  cursor: pointer;\n  background-image: none;\n  border: 1px solid transparent;\n  white-space: nowrap;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.428571429;\n  border-radius: 4px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.btn:focus,\n.btn:active:focus,\n.btn.active:focus,\n.btn.focus,\n.btn:active.focus,\n.btn.active.focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n.btn:hover,\n.btn:focus,\n.btn.focus {\n  color: #333333;\n  text-decoration: none;\n}\n.btn:active,\n.btn.active {\n  outline: 0;\n  background-image: none;\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n}\n.btn.disabled,\n.btn[disabled],\nfieldset[disabled] .btn {\n  cursor: not-allowed;\n  opacity: 0.65;\n  filter: alpha(opacity=65);\n  -webkit-box-shadow: none;\n  box-shadow: none;\n}\na.btn.disabled,\nfieldset[disabled] a.btn {\n  pointer-events: none;\n}\n.btn-default {\n  color: #333333;\n  background-color: #ffffff;\n  border-color: #cccccc;\n}\n.btn-default:focus,\n.btn-default.focus {\n  color: #333333;\n  background-color: #e6e6e6;\n  border-color: #8c8c8c;\n}\n.btn-default:hover {\n  color: #333333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n.btn-default:active,\n.btn-default.active,\n.open > .dropdown-toggle.btn-default {\n  color: #333333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n.btn-default:active:hover,\n.btn-default.active:hover,\n.open > .dropdown-toggle.btn-default:hover,\n.btn-default:active:focus,\n.btn-default.active:focus,\n.open > .dropdown-toggle.btn-default:focus,\n.btn-default:active.focus,\n.btn-default.active.focus,\n.open > .dropdown-toggle.btn-default.focus {\n  color: #333333;\n  background-color: #d4d4d4;\n  border-color: #8c8c8c;\n}\n.btn-default:active,\n.btn-default.active,\n.open > .dropdown-toggle.btn-default {\n  background-image: none;\n}\n.btn-default.disabled,\n.btn-default[disabled],\nfieldset[disabled] .btn-default,\n.btn-default.disabled:hover,\n.btn-default[disabled]:hover,\nfieldset[disabled] .btn-default:hover,\n.btn-default.disabled:focus,\n.btn-default[disabled]:focus,\nfieldset[disabled] .btn-default:focus,\n.btn-default.disabled.focus,\n.btn-default[disabled].focus,\nfieldset[disabled] .btn-default.focus,\n.btn-default.disabled:active,\n.btn-default[disabled]:active,\nfieldset[disabled] .btn-default:active,\n.btn-default.disabled.active,\n.btn-default[disabled].active,\nfieldset[disabled] .btn-default.active {\n  background-color: #ffffff;\n  border-color: #cccccc;\n}\n.btn-default .badge {\n  color: #ffffff;\n  background-color: #333333;\n}\n.btn-primary {\n  color: #ffffff;\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n.btn-primary:focus,\n.btn-primary.focus {\n  color: #ffffff;\n  background-color: #286090;\n  border-color: #122b40;\n}\n.btn-primary:hover {\n  color: #ffffff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n.btn-primary:active,\n.btn-primary.active,\n.open > .dropdown-toggle.btn-primary {\n  color: #ffffff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n.btn-primary:active:hover,\n.btn-primary.active:hover,\n.open > .dropdown-toggle.btn-primary:hover,\n.btn-primary:active:focus,\n.btn-primary.active:focus,\n.open > .dropdown-toggle.btn-primary:focus,\n.btn-primary:active.focus,\n.btn-primary.active.focus,\n.open > .dropdown-toggle.btn-primary.focus {\n  color: #ffffff;\n  background-color: #204d74;\n  border-color: #122b40;\n}\n.btn-primary:active,\n.btn-primary.active,\n.open > .dropdown-toggle.btn-primary {\n  background-image: none;\n}\n.btn-primary.disabled,\n.btn-primary[disabled],\nfieldset[disabled] .btn-primary,\n.btn-primary.disabled:hover,\n.btn-primary[disabled]:hover,\nfieldset[disabled] .btn-primary:hover,\n.btn-primary.disabled:focus,\n.btn-primary[disabled]:focus,\nfieldset[disabled] .btn-primary:focus,\n.btn-primary.disabled.focus,\n.btn-primary[disabled].focus,\nfieldset[disabled] .btn-primary.focus,\n.btn-primary.disabled:active,\n.btn-primary[disabled]:active,\nfieldset[disabled] .btn-primary:active,\n.btn-primary.disabled.active,\n.btn-primary[disabled].active,\nfieldset[disabled] .btn-primary.active {\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n.btn-primary .badge {\n  color: #337ab7;\n  background-color: #ffffff;\n}\n.btn-success {\n  color: #ffffff;\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-success:focus,\n.btn-success.focus {\n  color: #ffffff;\n  background-color: #449d44;\n  border-color: #255625;\n}\n.btn-success:hover {\n  color: #ffffff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n.btn-success:active,\n.btn-success.active,\n.open > .dropdown-toggle.btn-success {\n  color: #ffffff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n.btn-success:active:hover,\n.btn-success.active:hover,\n.open > .dropdown-toggle.btn-success:hover,\n.btn-success:active:focus,\n.btn-success.active:focus,\n.open > .dropdown-toggle.btn-success:focus,\n.btn-success:active.focus,\n.btn-success.active.focus,\n.open > .dropdown-toggle.btn-success.focus {\n  color: #ffffff;\n  background-color: #398439;\n  border-color: #255625;\n}\n.btn-success:active,\n.btn-success.active,\n.open > .dropdown-toggle.btn-success {\n  background-image: none;\n}\n.btn-success.disabled,\n.btn-success[disabled],\nfieldset[disabled] .btn-success,\n.btn-success.disabled:hover,\n.btn-success[disabled]:hover,\nfieldset[disabled] .btn-success:hover,\n.btn-success.disabled:focus,\n.btn-success[disabled]:focus,\nfieldset[disabled] .btn-success:focus,\n.btn-success.disabled.focus,\n.btn-success[disabled].focus,\nfieldset[disabled] .btn-success.focus,\n.btn-success.disabled:active,\n.btn-success[disabled]:active,\nfieldset[disabled] .btn-success:active,\n.btn-success.disabled.active,\n.btn-success[disabled].active,\nfieldset[disabled] .btn-success.active {\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-success .badge {\n  color: #5cb85c;\n  background-color: #ffffff;\n}\n.btn-info {\n  color: #ffffff;\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n.btn-info:focus,\n.btn-info.focus {\n  color: #ffffff;\n  background-color: #31b0d5;\n  border-color: #1b6d85;\n}\n.btn-info:hover {\n  color: #ffffff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n.btn-info:active,\n.btn-info.active,\n.open > .dropdown-toggle.btn-info {\n  color: #ffffff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n.btn-info:active:hover,\n.btn-info.active:hover,\n.open > .dropdown-toggle.btn-info:hover,\n.btn-info:active:focus,\n.btn-info.active:focus,\n.open > .dropdown-toggle.btn-info:focus,\n.btn-info:active.focus,\n.btn-info.active.focus,\n.open > .dropdown-toggle.btn-info.focus {\n  color: #ffffff;\n  background-color: #269abc;\n  border-color: #1b6d85;\n}\n.btn-info:active,\n.btn-info.active,\n.open > .dropdown-toggle.btn-info {\n  background-image: none;\n}\n.btn-info.disabled,\n.btn-info[disabled],\nfieldset[disabled] .btn-info,\n.btn-info.disabled:hover,\n.btn-info[disabled]:hover,\nfieldset[disabled] .btn-info:hover,\n.btn-info.disabled:focus,\n.btn-info[disabled]:focus,\nfieldset[disabled] .btn-info:focus,\n.btn-info.disabled.focus,\n.btn-info[disabled].focus,\nfieldset[disabled] .btn-info.focus,\n.btn-info.disabled:active,\n.btn-info[disabled]:active,\nfieldset[disabled] .btn-info:active,\n.btn-info.disabled.active,\n.btn-info[disabled].active,\nfieldset[disabled] .btn-info.active {\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n.btn-info .badge {\n  color: #5bc0de;\n  background-color: #ffffff;\n}\n.btn-warning {\n  color: #ffffff;\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n.btn-warning:focus,\n.btn-warning.focus {\n  color: #ffffff;\n  background-color: #ec971f;\n  border-color: #985f0d;\n}\n.btn-warning:hover {\n  color: #ffffff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n.btn-warning:active,\n.btn-warning.active,\n.open > .dropdown-toggle.btn-warning {\n  color: #ffffff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n.btn-warning:active:hover,\n.btn-warning.active:hover,\n.open > .dropdown-toggle.btn-warning:hover,\n.btn-warning:active:focus,\n.btn-warning.active:focus,\n.open > .dropdown-toggle.btn-warning:focus,\n.btn-warning:active.focus,\n.btn-warning.active.focus,\n.open > .dropdown-toggle.btn-warning.focus {\n  color: #ffffff;\n  background-color: #d58512;\n  border-color: #985f0d;\n}\n.btn-warning:active,\n.btn-warning.active,\n.open > .dropdown-toggle.btn-warning {\n  background-image: none;\n}\n.btn-warning.disabled,\n.btn-warning[disabled],\nfieldset[disabled] .btn-warning,\n.btn-warning.disabled:hover,\n.btn-warning[disabled]:hover,\nfieldset[disabled] .btn-warning:hover,\n.btn-warning.disabled:focus,\n.btn-warning[disabled]:focus,\nfieldset[disabled] .btn-warning:focus,\n.btn-warning.disabled.focus,\n.btn-warning[disabled].focus,\nfieldset[disabled] .btn-warning.focus,\n.btn-warning.disabled:active,\n.btn-warning[disabled]:active,\nfieldset[disabled] .btn-warning:active,\n.btn-warning.disabled.active,\n.btn-warning[disabled].active,\nfieldset[disabled] .btn-warning.active {\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n.btn-warning .badge {\n  color: #f0ad4e;\n  background-color: #ffffff;\n}\n.btn-danger {\n  color: #ffffff;\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n.btn-danger:focus,\n.btn-danger.focus {\n  color: #ffffff;\n  background-color: #c9302c;\n  border-color: #761c19;\n}\n.btn-danger:hover {\n  color: #ffffff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n.btn-danger:active,\n.btn-danger.active,\n.open > .dropdown-toggle.btn-danger {\n  color: #ffffff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n.btn-danger:active:hover,\n.btn-danger.active:hover,\n.open > .dropdown-toggle.btn-danger:hover,\n.btn-danger:active:focus,\n.btn-danger.active:focus,\n.open > .dropdown-toggle.btn-danger:focus,\n.btn-danger:active.focus,\n.btn-danger.active.focus,\n.open > .dropdown-toggle.btn-danger.focus {\n  color: #ffffff;\n  background-color: #ac2925;\n  border-color: #761c19;\n}\n.btn-danger:active,\n.btn-danger.active,\n.open > .dropdown-toggle.btn-danger {\n  background-image: none;\n}\n.btn-danger.disabled,\n.btn-danger[disabled],\nfieldset[disabled] .btn-danger,\n.btn-danger.disabled:hover,\n.btn-danger[disabled]:hover,\nfieldset[disabled] .btn-danger:hover,\n.btn-danger.disabled:focus,\n.btn-danger[disabled]:focus,\nfieldset[disabled] .btn-danger:focus,\n.btn-danger.disabled.focus,\n.btn-danger[disabled].focus,\nfieldset[disabled] .btn-danger.focus,\n.btn-danger.disabled:active,\n.btn-danger[disabled]:active,\nfieldset[disabled] .btn-danger:active,\n.btn-danger.disabled.active,\n.btn-danger[disabled].active,\nfieldset[disabled] .btn-danger.active {\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n.btn-danger .badge {\n  color: #d9534f;\n  background-color: #ffffff;\n}\n.btn-link {\n  color: #337ab7;\n  font-weight: normal;\n  border-radius: 0;\n}\n.btn-link,\n.btn-link:active,\n.btn-link.active,\n.btn-link[disabled],\nfieldset[disabled] .btn-link {\n  background-color: transparent;\n  -webkit-box-shadow: none;\n  box-shadow: none;\n}\n.btn-link,\n.btn-link:hover,\n.btn-link:focus,\n.btn-link:active {\n  border-color: transparent;\n}\n.btn-link:hover,\n.btn-link:focus {\n  color: #23527c;\n  text-decoration: underline;\n  background-color: transparent;\n}\n.btn-link[disabled]:hover,\nfieldset[disabled] .btn-link:hover,\n.btn-link[disabled]:focus,\nfieldset[disabled] .btn-link:focus {\n  color: #777777;\n  text-decoration: none;\n}\n.btn-lg,\n.btn-group-lg > .btn {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.btn-sm,\n.btn-group-sm > .btn {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-xs,\n.btn-group-xs > .btn {\n  padding: 1px 5px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-block {\n  display: block;\n  width: 100%;\n}\n.btn-block + .btn-block {\n  margin-top: 5px;\n}\ninput[type=\"submit\"].btn-block,\ninput[type=\"reset\"].btn-block,\ninput[type=\"button\"].btn-block {\n  width: 100%;\n}\n.fade {\n  opacity: 0;\n  -webkit-transition: opacity 0.15s linear;\n  -o-transition: opacity 0.15s linear;\n  transition: opacity 0.15s linear;\n}\n.fade.in {\n  opacity: 1;\n}\n.collapse {\n  display: none;\n}\n.collapse.in {\n  display: block;\n}\ntr.collapse.in {\n  display: table-row;\n}\ntbody.collapse.in {\n  display: table-row-group;\n}\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  -webkit-transition-property: height, visibility;\n  transition-property: height, visibility;\n  -webkit-transition-duration: 0.35s;\n  transition-duration: 0.35s;\n  -webkit-transition-timing-function: ease;\n  transition-timing-function: ease;\n}\n@font-face {\n  font-family: 'Glyphicons Halflings';\n  src: url(" + __webpack_require__(433) + ");\n  src: url(" + __webpack_require__(433) + "?#iefix) format('embedded-opentype'), url(" + __webpack_require__(434) + ") format('woff2'), url(" + __webpack_require__(432) + ") format('woff'), url(" + __webpack_require__(435) + ") format('truetype'), url(" + __webpack_require__(436) + "#glyphicons_halflingsregular) format('svg');\n}\n.glyphicon {\n  position: relative;\n  top: 1px;\n  display: inline-block;\n  font-family: 'Glyphicons Halflings';\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.glyphicon-asterisk:before {\n  content: \"\\2a\";\n}\n.glyphicon-plus:before {\n  content: \"\\2b\";\n}\n.glyphicon-euro:before,\n.glyphicon-eur:before {\n  content: \"\\20ac\";\n}\n.glyphicon-minus:before {\n  content: \"\\2212\";\n}\n.glyphicon-cloud:before {\n  content: \"\\2601\";\n}\n.glyphicon-envelope:before {\n  content: \"\\2709\";\n}\n.glyphicon-pencil:before {\n  content: \"\\270f\";\n}\n.glyphicon-glass:before {\n  content: \"\\e001\";\n}\n.glyphicon-music:before {\n  content: \"\\e002\";\n}\n.glyphicon-search:before {\n  content: \"\\e003\";\n}\n.glyphicon-heart:before {\n  content: \"\\e005\";\n}\n.glyphicon-star:before {\n  content: \"\\e006\";\n}\n.glyphicon-star-empty:before {\n  content: \"\\e007\";\n}\n.glyphicon-user:before {\n  content: \"\\e008\";\n}\n.glyphicon-film:before {\n  content: \"\\e009\";\n}\n.glyphicon-th-large:before {\n  content: \"\\e010\";\n}\n.glyphicon-th:before {\n  content: \"\\e011\";\n}\n.glyphicon-th-list:before {\n  content: \"\\e012\";\n}\n.glyphicon-ok:before {\n  content: \"\\e013\";\n}\n.glyphicon-remove:before {\n  content: \"\\e014\";\n}\n.glyphicon-zoom-in:before {\n  content: \"\\e015\";\n}\n.glyphicon-zoom-out:before {\n  content: \"\\e016\";\n}\n.glyphicon-off:before {\n  content: \"\\e017\";\n}\n.glyphicon-signal:before {\n  content: \"\\e018\";\n}\n.glyphicon-cog:before {\n  content: \"\\e019\";\n}\n.glyphicon-trash:before {\n  content: \"\\e020\";\n}\n.glyphicon-home:before {\n  content: \"\\e021\";\n}\n.glyphicon-file:before {\n  content: \"\\e022\";\n}\n.glyphicon-time:before {\n  content: \"\\e023\";\n}\n.glyphicon-road:before {\n  content: \"\\e024\";\n}\n.glyphicon-download-alt:before {\n  content: \"\\e025\";\n}\n.glyphicon-download:before {\n  content: \"\\e026\";\n}\n.glyphicon-upload:before {\n  content: \"\\e027\";\n}\n.glyphicon-inbox:before {\n  content: \"\\e028\";\n}\n.glyphicon-play-circle:before {\n  content: \"\\e029\";\n}\n.glyphicon-repeat:before {\n  content: \"\\e030\";\n}\n.glyphicon-refresh:before {\n  content: \"\\e031\";\n}\n.glyphicon-list-alt:before {\n  content: \"\\e032\";\n}\n.glyphicon-lock:before {\n  content: \"\\e033\";\n}\n.glyphicon-flag:before {\n  content: \"\\e034\";\n}\n.glyphicon-headphones:before {\n  content: \"\\e035\";\n}\n.glyphicon-volume-off:before {\n  content: \"\\e036\";\n}\n.glyphicon-volume-down:before {\n  content: \"\\e037\";\n}\n.glyphicon-volume-up:before {\n  content: \"\\e038\";\n}\n.glyphicon-qrcode:before {\n  content: \"\\e039\";\n}\n.glyphicon-barcode:before {\n  content: \"\\e040\";\n}\n.glyphicon-tag:before {\n  content: \"\\e041\";\n}\n.glyphicon-tags:before {\n  content: \"\\e042\";\n}\n.glyphicon-book:before {\n  content: \"\\e043\";\n}\n.glyphicon-bookmark:before {\n  content: \"\\e044\";\n}\n.glyphicon-print:before {\n  content: \"\\e045\";\n}\n.glyphicon-camera:before {\n  content: \"\\e046\";\n}\n.glyphicon-font:before {\n  content: \"\\e047\";\n}\n.glyphicon-bold:before {\n  content: \"\\e048\";\n}\n.glyphicon-italic:before {\n  content: \"\\e049\";\n}\n.glyphicon-text-height:before {\n  content: \"\\e050\";\n}\n.glyphicon-text-width:before {\n  content: \"\\e051\";\n}\n.glyphicon-align-left:before {\n  content: \"\\e052\";\n}\n.glyphicon-align-center:before {\n  content: \"\\e053\";\n}\n.glyphicon-align-right:before {\n  content: \"\\e054\";\n}\n.glyphicon-align-justify:before {\n  content: \"\\e055\";\n}\n.glyphicon-list:before {\n  content: \"\\e056\";\n}\n.glyphicon-indent-left:before {\n  content: \"\\e057\";\n}\n.glyphicon-indent-right:before {\n  content: \"\\e058\";\n}\n.glyphicon-facetime-video:before {\n  content: \"\\e059\";\n}\n.glyphicon-picture:before {\n  content: \"\\e060\";\n}\n.glyphicon-map-marker:before {\n  content: \"\\e062\";\n}\n.glyphicon-adjust:before {\n  content: \"\\e063\";\n}\n.glyphicon-tint:before {\n  content: \"\\e064\";\n}\n.glyphicon-edit:before {\n  content: \"\\e065\";\n}\n.glyphicon-share:before {\n  content: \"\\e066\";\n}\n.glyphicon-check:before {\n  content: \"\\e067\";\n}\n.glyphicon-move:before {\n  content: \"\\e068\";\n}\n.glyphicon-step-backward:before {\n  content: \"\\e069\";\n}\n.glyphicon-fast-backward:before {\n  content: \"\\e070\";\n}\n.glyphicon-backward:before {\n  content: \"\\e071\";\n}\n.glyphicon-play:before {\n  content: \"\\e072\";\n}\n.glyphicon-pause:before {\n  content: \"\\e073\";\n}\n.glyphicon-stop:before {\n  content: \"\\e074\";\n}\n.glyphicon-forward:before {\n  content: \"\\e075\";\n}\n.glyphicon-fast-forward:before {\n  content: \"\\e076\";\n}\n.glyphicon-step-forward:before {\n  content: \"\\e077\";\n}\n.glyphicon-eject:before {\n  content: \"\\e078\";\n}\n.glyphicon-chevron-left:before {\n  content: \"\\e079\";\n}\n.glyphicon-chevron-right:before {\n  content: \"\\e080\";\n}\n.glyphicon-plus-sign:before {\n  content: \"\\e081\";\n}\n.glyphicon-minus-sign:before {\n  content: \"\\e082\";\n}\n.glyphicon-remove-sign:before {\n  content: \"\\e083\";\n}\n.glyphicon-ok-sign:before {\n  content: \"\\e084\";\n}\n.glyphicon-question-sign:before {\n  content: \"\\e085\";\n}\n.glyphicon-info-sign:before {\n  content: \"\\e086\";\n}\n.glyphicon-screenshot:before {\n  content: \"\\e087\";\n}\n.glyphicon-remove-circle:before {\n  content: \"\\e088\";\n}\n.glyphicon-ok-circle:before {\n  content: \"\\e089\";\n}\n.glyphicon-ban-circle:before {\n  content: \"\\e090\";\n}\n.glyphicon-arrow-left:before {\n  content: \"\\e091\";\n}\n.glyphicon-arrow-right:before {\n  content: \"\\e092\";\n}\n.glyphicon-arrow-up:before {\n  content: \"\\e093\";\n}\n.glyphicon-arrow-down:before {\n  content: \"\\e094\";\n}\n.glyphicon-share-alt:before {\n  content: \"\\e095\";\n}\n.glyphicon-resize-full:before {\n  content: \"\\e096\";\n}\n.glyphicon-resize-small:before {\n  content: \"\\e097\";\n}\n.glyphicon-exclamation-sign:before {\n  content: \"\\e101\";\n}\n.glyphicon-gift:before {\n  content: \"\\e102\";\n}\n.glyphicon-leaf:before {\n  content: \"\\e103\";\n}\n.glyphicon-fire:before {\n  content: \"\\e104\";\n}\n.glyphicon-eye-open:before {\n  content: \"\\e105\";\n}\n.glyphicon-eye-close:before {\n  content: \"\\e106\";\n}\n.glyphicon-warning-sign:before {\n  content: \"\\e107\";\n}\n.glyphicon-plane:before {\n  content: \"\\e108\";\n}\n.glyphicon-calendar:before {\n  content: \"\\e109\";\n}\n.glyphicon-random:before {\n  content: \"\\e110\";\n}\n.glyphicon-comment:before {\n  content: \"\\e111\";\n}\n.glyphicon-magnet:before {\n  content: \"\\e112\";\n}\n.glyphicon-chevron-up:before {\n  content: \"\\e113\";\n}\n.glyphicon-chevron-down:before {\n  content: \"\\e114\";\n}\n.glyphicon-retweet:before {\n  content: \"\\e115\";\n}\n.glyphicon-shopping-cart:before {\n  content: \"\\e116\";\n}\n.glyphicon-folder-close:before {\n  content: \"\\e117\";\n}\n.glyphicon-folder-open:before {\n  content: \"\\e118\";\n}\n.glyphicon-resize-vertical:before {\n  content: \"\\e119\";\n}\n.glyphicon-resize-horizontal:before {\n  content: \"\\e120\";\n}\n.glyphicon-hdd:before {\n  content: \"\\e121\";\n}\n.glyphicon-bullhorn:before {\n  content: \"\\e122\";\n}\n.glyphicon-bell:before {\n  content: \"\\e123\";\n}\n.glyphicon-certificate:before {\n  content: \"\\e124\";\n}\n.glyphicon-thumbs-up:before {\n  content: \"\\e125\";\n}\n.glyphicon-thumbs-down:before {\n  content: \"\\e126\";\n}\n.glyphicon-hand-right:before {\n  content: \"\\e127\";\n}\n.glyphicon-hand-left:before {\n  content: \"\\e128\";\n}\n.glyphicon-hand-up:before {\n  content: \"\\e129\";\n}\n.glyphicon-hand-down:before {\n  content: \"\\e130\";\n}\n.glyphicon-circle-arrow-right:before {\n  content: \"\\e131\";\n}\n.glyphicon-circle-arrow-left:before {\n  content: \"\\e132\";\n}\n.glyphicon-circle-arrow-up:before {\n  content: \"\\e133\";\n}\n.glyphicon-circle-arrow-down:before {\n  content: \"\\e134\";\n}\n.glyphicon-globe:before {\n  content: \"\\e135\";\n}\n.glyphicon-wrench:before {\n  content: \"\\e136\";\n}\n.glyphicon-tasks:before {\n  content: \"\\e137\";\n}\n.glyphicon-filter:before {\n  content: \"\\e138\";\n}\n.glyphicon-briefcase:before {\n  content: \"\\e139\";\n}\n.glyphicon-fullscreen:before {\n  content: \"\\e140\";\n}\n.glyphicon-dashboard:before {\n  content: \"\\e141\";\n}\n.glyphicon-paperclip:before {\n  content: \"\\e142\";\n}\n.glyphicon-heart-empty:before {\n  content: \"\\e143\";\n}\n.glyphicon-link:before {\n  content: \"\\e144\";\n}\n.glyphicon-phone:before {\n  content: \"\\e145\";\n}\n.glyphicon-pushpin:before {\n  content: \"\\e146\";\n}\n.glyphicon-usd:before {\n  content: \"\\e148\";\n}\n.glyphicon-gbp:before {\n  content: \"\\e149\";\n}\n.glyphicon-sort:before {\n  content: \"\\e150\";\n}\n.glyphicon-sort-by-alphabet:before {\n  content: \"\\e151\";\n}\n.glyphicon-sort-by-alphabet-alt:before {\n  content: \"\\e152\";\n}\n.glyphicon-sort-by-order:before {\n  content: \"\\e153\";\n}\n.glyphicon-sort-by-order-alt:before {\n  content: \"\\e154\";\n}\n.glyphicon-sort-by-attributes:before {\n  content: \"\\e155\";\n}\n.glyphicon-sort-by-attributes-alt:before {\n  content: \"\\e156\";\n}\n.glyphicon-unchecked:before {\n  content: \"\\e157\";\n}\n.glyphicon-expand:before {\n  content: \"\\e158\";\n}\n.glyphicon-collapse-down:before {\n  content: \"\\e159\";\n}\n.glyphicon-collapse-up:before {\n  content: \"\\e160\";\n}\n.glyphicon-log-in:before {\n  content: \"\\e161\";\n}\n.glyphicon-flash:before {\n  content: \"\\e162\";\n}\n.glyphicon-log-out:before {\n  content: \"\\e163\";\n}\n.glyphicon-new-window:before {\n  content: \"\\e164\";\n}\n.glyphicon-record:before {\n  content: \"\\e165\";\n}\n.glyphicon-save:before {\n  content: \"\\e166\";\n}\n.glyphicon-open:before {\n  content: \"\\e167\";\n}\n.glyphicon-saved:before {\n  content: \"\\e168\";\n}\n.glyphicon-import:before {\n  content: \"\\e169\";\n}\n.glyphicon-export:before {\n  content: \"\\e170\";\n}\n.glyphicon-send:before {\n  content: \"\\e171\";\n}\n.glyphicon-floppy-disk:before {\n  content: \"\\e172\";\n}\n.glyphicon-floppy-saved:before {\n  content: \"\\e173\";\n}\n.glyphicon-floppy-remove:before {\n  content: \"\\e174\";\n}\n.glyphicon-floppy-save:before {\n  content: \"\\e175\";\n}\n.glyphicon-floppy-open:before {\n  content: \"\\e176\";\n}\n.glyphicon-credit-card:before {\n  content: \"\\e177\";\n}\n.glyphicon-transfer:before {\n  content: \"\\e178\";\n}\n.glyphicon-cutlery:before {\n  content: \"\\e179\";\n}\n.glyphicon-header:before {\n  content: \"\\e180\";\n}\n.glyphicon-compressed:before {\n  content: \"\\e181\";\n}\n.glyphicon-earphone:before {\n  content: \"\\e182\";\n}\n.glyphicon-phone-alt:before {\n  content: \"\\e183\";\n}\n.glyphicon-tower:before {\n  content: \"\\e184\";\n}\n.glyphicon-stats:before {\n  content: \"\\e185\";\n}\n.glyphicon-sd-video:before {\n  content: \"\\e186\";\n}\n.glyphicon-hd-video:before {\n  content: \"\\e187\";\n}\n.glyphicon-subtitles:before {\n  content: \"\\e188\";\n}\n.glyphicon-sound-stereo:before {\n  content: \"\\e189\";\n}\n.glyphicon-sound-dolby:before {\n  content: \"\\e190\";\n}\n.glyphicon-sound-5-1:before {\n  content: \"\\e191\";\n}\n.glyphicon-sound-6-1:before {\n  content: \"\\e192\";\n}\n.glyphicon-sound-7-1:before {\n  content: \"\\e193\";\n}\n.glyphicon-copyright-mark:before {\n  content: \"\\e194\";\n}\n.glyphicon-registration-mark:before {\n  content: \"\\e195\";\n}\n.glyphicon-cloud-download:before {\n  content: \"\\e197\";\n}\n.glyphicon-cloud-upload:before {\n  content: \"\\e198\";\n}\n.glyphicon-tree-conifer:before {\n  content: \"\\e199\";\n}\n.glyphicon-tree-deciduous:before {\n  content: \"\\e200\";\n}\n.glyphicon-cd:before {\n  content: \"\\e201\";\n}\n.glyphicon-save-file:before {\n  content: \"\\e202\";\n}\n.glyphicon-open-file:before {\n  content: \"\\e203\";\n}\n.glyphicon-level-up:before {\n  content: \"\\e204\";\n}\n.glyphicon-copy:before {\n  content: \"\\e205\";\n}\n.glyphicon-paste:before {\n  content: \"\\e206\";\n}\n.glyphicon-alert:before {\n  content: \"\\e209\";\n}\n.glyphicon-equalizer:before {\n  content: \"\\e210\";\n}\n.glyphicon-king:before {\n  content: \"\\e211\";\n}\n.glyphicon-queen:before {\n  content: \"\\e212\";\n}\n.glyphicon-pawn:before {\n  content: \"\\e213\";\n}\n.glyphicon-bishop:before {\n  content: \"\\e214\";\n}\n.glyphicon-knight:before {\n  content: \"\\e215\";\n}\n.glyphicon-baby-formula:before {\n  content: \"\\e216\";\n}\n.glyphicon-tent:before {\n  content: \"\\26fa\";\n}\n.glyphicon-blackboard:before {\n  content: \"\\e218\";\n}\n.glyphicon-bed:before {\n  content: \"\\e219\";\n}\n.glyphicon-apple:before {\n  content: \"\\f8ff\";\n}\n.glyphicon-erase:before {\n  content: \"\\e221\";\n}\n.glyphicon-hourglass:before {\n  content: \"\\231b\";\n}\n.glyphicon-lamp:before {\n  content: \"\\e223\";\n}\n.glyphicon-duplicate:before {\n  content: \"\\e224\";\n}\n.glyphicon-piggy-bank:before {\n  content: \"\\e225\";\n}\n.glyphicon-scissors:before {\n  content: \"\\e226\";\n}\n.glyphicon-bitcoin:before {\n  content: \"\\e227\";\n}\n.glyphicon-btc:before {\n  content: \"\\e227\";\n}\n.glyphicon-xbt:before {\n  content: \"\\e227\";\n}\n.glyphicon-yen:before {\n  content: \"\\00a5\";\n}\n.glyphicon-jpy:before {\n  content: \"\\00a5\";\n}\n.glyphicon-ruble:before {\n  content: \"\\20bd\";\n}\n.glyphicon-rub:before {\n  content: \"\\20bd\";\n}\n.glyphicon-scale:before {\n  content: \"\\e230\";\n}\n.glyphicon-ice-lolly:before {\n  content: \"\\e231\";\n}\n.glyphicon-ice-lolly-tasted:before {\n  content: \"\\e232\";\n}\n.glyphicon-education:before {\n  content: \"\\e233\";\n}\n.glyphicon-option-horizontal:before {\n  content: \"\\e234\";\n}\n.glyphicon-option-vertical:before {\n  content: \"\\e235\";\n}\n.glyphicon-menu-hamburger:before {\n  content: \"\\e236\";\n}\n.glyphicon-modal-window:before {\n  content: \"\\e237\";\n}\n.glyphicon-oil:before {\n  content: \"\\e238\";\n}\n.glyphicon-grain:before {\n  content: \"\\e239\";\n}\n.glyphicon-sunglasses:before {\n  content: \"\\e240\";\n}\n.glyphicon-text-size:before {\n  content: \"\\e241\";\n}\n.glyphicon-text-color:before {\n  content: \"\\e242\";\n}\n.glyphicon-text-background:before {\n  content: \"\\e243\";\n}\n.glyphicon-object-align-top:before {\n  content: \"\\e244\";\n}\n.glyphicon-object-align-bottom:before {\n  content: \"\\e245\";\n}\n.glyphicon-object-align-horizontal:before {\n  content: \"\\e246\";\n}\n.glyphicon-object-align-left:before {\n  content: \"\\e247\";\n}\n.glyphicon-object-align-vertical:before {\n  content: \"\\e248\";\n}\n.glyphicon-object-align-right:before {\n  content: \"\\e249\";\n}\n.glyphicon-triangle-right:before {\n  content: \"\\e250\";\n}\n.glyphicon-triangle-left:before {\n  content: \"\\e251\";\n}\n.glyphicon-triangle-bottom:before {\n  content: \"\\e252\";\n}\n.glyphicon-triangle-top:before {\n  content: \"\\e253\";\n}\n.glyphicon-console:before {\n  content: \"\\e254\";\n}\n.glyphicon-superscript:before {\n  content: \"\\e255\";\n}\n.glyphicon-subscript:before {\n  content: \"\\e256\";\n}\n.glyphicon-menu-left:before {\n  content: \"\\e257\";\n}\n.glyphicon-menu-right:before {\n  content: \"\\e258\";\n}\n.glyphicon-menu-down:before {\n  content: \"\\e259\";\n}\n.glyphicon-menu-up:before {\n  content: \"\\e260\";\n}\n.caret {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 2px;\n  vertical-align: middle;\n  border-top: 4px dashed;\n  border-top: 4px solid \\9;\n  border-right: 4px solid transparent;\n  border-left: 4px solid transparent;\n}\n.dropup,\n.dropdown {\n  position: relative;\n}\n.dropdown-toggle:focus {\n  outline: 0;\n}\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 160px;\n  padding: 5px 0;\n  margin: 2px 0 0;\n  list-style: none;\n  font-size: 14px;\n  text-align: left;\n  background-color: #ffffff;\n  border: 1px solid #cccccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n  background-clip: padding-box;\n}\n.dropdown-menu.pull-right {\n  right: 0;\n  left: auto;\n}\n.dropdown-menu .divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.dropdown-menu > li > a {\n  display: block;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.428571429;\n  color: #333333;\n  white-space: nowrap;\n}\n.dropdown-menu > li > a:hover,\n.dropdown-menu > li > a:focus {\n  text-decoration: none;\n  color: #262626;\n  background-color: #f5f5f5;\n}\n.dropdown-menu > .active > a,\n.dropdown-menu > .active > a:hover,\n.dropdown-menu > .active > a:focus {\n  color: #ffffff;\n  text-decoration: none;\n  outline: 0;\n  background-color: #337ab7;\n}\n.dropdown-menu > .disabled > a,\n.dropdown-menu > .disabled > a:hover,\n.dropdown-menu > .disabled > a:focus {\n  color: #777777;\n}\n.dropdown-menu > .disabled > a:hover,\n.dropdown-menu > .disabled > a:focus {\n  text-decoration: none;\n  background-color: transparent;\n  background-image: none;\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  cursor: not-allowed;\n}\n.open > .dropdown-menu {\n  display: block;\n}\n.open > a {\n  outline: 0;\n}\n.dropdown-menu-right {\n  left: auto;\n  right: 0;\n}\n.dropdown-menu-left {\n  left: 0;\n  right: auto;\n}\n.dropdown-header {\n  display: block;\n  padding: 3px 20px;\n  font-size: 12px;\n  line-height: 1.428571429;\n  color: #777777;\n  white-space: nowrap;\n}\n.dropdown-backdrop {\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  z-index: 990;\n}\n.pull-right > .dropdown-menu {\n  right: 0;\n  left: auto;\n}\n.dropup .caret,\n.navbar-fixed-bottom .dropdown .caret {\n  border-top: 0;\n  border-bottom: 4px dashed;\n  border-bottom: 4px solid \\9;\n  content: \"\";\n}\n.dropup .dropdown-menu,\n.navbar-fixed-bottom .dropdown .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n  margin-bottom: 2px;\n}\n@media (min-width: 768px) {\n  .navbar-right .dropdown-menu {\n    left: auto;\n    right: 0;\n  }\n  .navbar-right .dropdown-menu-left {\n    left: 0;\n    right: auto;\n  }\n}\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n}\n.btn-group > .btn,\n.btn-group-vertical > .btn {\n  position: relative;\n  float: left;\n}\n.btn-group > .btn:hover,\n.btn-group-vertical > .btn:hover,\n.btn-group > .btn:focus,\n.btn-group-vertical > .btn:focus,\n.btn-group > .btn:active,\n.btn-group-vertical > .btn:active,\n.btn-group > .btn.active,\n.btn-group-vertical > .btn.active {\n  z-index: 2;\n}\n.btn-group .btn + .btn,\n.btn-group .btn + .btn-group,\n.btn-group .btn-group + .btn,\n.btn-group .btn-group + .btn-group {\n  margin-left: -1px;\n}\n.btn-toolbar {\n  margin-left: -5px;\n}\n.btn-toolbar .btn,\n.btn-toolbar .btn-group,\n.btn-toolbar .input-group {\n  float: left;\n}\n.btn-toolbar > .btn,\n.btn-toolbar > .btn-group,\n.btn-toolbar > .input-group {\n  margin-left: 5px;\n}\n.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n  border-radius: 0;\n}\n.btn-group > .btn:first-child {\n  margin-left: 0;\n}\n.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n.btn-group > .btn:last-child:not(:first-child),\n.btn-group > .dropdown-toggle:not(:first-child) {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.btn-group > .btn-group {\n  float: left;\n}\n.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child,\n.btn-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.btn-group .dropdown-toggle:active,\n.btn-group.open .dropdown-toggle {\n  outline: 0;\n}\n.btn-group > .btn + .dropdown-toggle {\n  padding-left: 8px;\n  padding-right: 8px;\n}\n.btn-group > .btn-lg + .dropdown-toggle {\n  padding-left: 12px;\n  padding-right: 12px;\n}\n.btn-group.open .dropdown-toggle {\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n}\n.btn-group.open .dropdown-toggle.btn-link {\n  -webkit-box-shadow: none;\n  box-shadow: none;\n}\n.btn .caret {\n  margin-left: 0;\n}\n.btn-lg .caret {\n  border-width: 5px 5px 0;\n  border-bottom-width: 0;\n}\n.dropup .btn-lg .caret {\n  border-width: 0 5px 5px;\n}\n.btn-group-vertical > .btn,\n.btn-group-vertical > .btn-group,\n.btn-group-vertical > .btn-group > .btn {\n  display: block;\n  float: none;\n  width: 100%;\n  max-width: 100%;\n}\n.btn-group-vertical > .btn-group > .btn {\n  float: none;\n}\n.btn-group-vertical > .btn + .btn,\n.btn-group-vertical > .btn + .btn-group,\n.btn-group-vertical > .btn-group + .btn,\n.btn-group-vertical > .btn-group + .btn-group {\n  margin-top: -1px;\n  margin-left: 0;\n}\n.btn-group-vertical > .btn:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.btn-group-vertical > .btn:first-child:not(:last-child) {\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical > .btn:last-child:not(:first-child) {\n  border-bottom-left-radius: 4px;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-child,\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n.btn-group-justified {\n  display: table;\n  width: 100%;\n  table-layout: fixed;\n  border-collapse: separate;\n}\n.btn-group-justified > .btn,\n.btn-group-justified > .btn-group {\n  float: none;\n  display: table-cell;\n  width: 1%;\n}\n.btn-group-justified > .btn-group .btn {\n  width: 100%;\n}\n.btn-group-justified > .btn-group .dropdown-menu {\n  left: auto;\n}\n[data-toggle=\"buttons\"] > .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] > .btn input[type=\"checkbox\"],\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"checkbox\"] {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n.input-group[class*=\"col-\"] {\n  float: none;\n  padding-left: 0;\n  padding-right: 0;\n}\n.input-group .form-control {\n  position: relative;\n  z-index: 2;\n  float: left;\n  width: 100%;\n  margin-bottom: 0;\n}\n.input-group-lg > .form-control,\n.input-group-lg > .input-group-addon,\n.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-group-lg > .form-control,\nselect.input-group-lg > .input-group-addon,\nselect.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  line-height: 46px;\n}\ntextarea.input-group-lg > .form-control,\ntextarea.input-group-lg > .input-group-addon,\ntextarea.input-group-lg > .input-group-btn > .btn,\nselect[multiple].input-group-lg > .form-control,\nselect[multiple].input-group-lg > .input-group-addon,\nselect[multiple].input-group-lg > .input-group-btn > .btn {\n  height: auto;\n}\n.input-group-sm > .form-control,\n.input-group-sm > .input-group-addon,\n.input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-group-sm > .form-control,\nselect.input-group-sm > .input-group-addon,\nselect.input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-group-sm > .form-control,\ntextarea.input-group-sm > .input-group-addon,\ntextarea.input-group-sm > .input-group-btn > .btn,\nselect[multiple].input-group-sm > .form-control,\nselect[multiple].input-group-sm > .input-group-addon,\nselect[multiple].input-group-sm > .input-group-btn > .btn {\n  height: auto;\n}\n.input-group-addon,\n.input-group-btn,\n.input-group .form-control {\n  display: table-cell;\n}\n.input-group-addon:not(:first-child):not(:last-child),\n.input-group-btn:not(:first-child):not(:last-child),\n.input-group .form-control:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.input-group-addon,\n.input-group-btn {\n  width: 1%;\n  white-space: nowrap;\n  vertical-align: middle;\n}\n.input-group-addon {\n  padding: 6px 12px;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 1;\n  color: #555555;\n  text-align: center;\n  background-color: #eeeeee;\n  border: 1px solid #cccccc;\n  border-radius: 4px;\n}\n.input-group-addon.input-sm {\n  padding: 5px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n}\n.input-group-addon.input-lg {\n  padding: 10px 16px;\n  font-size: 18px;\n  border-radius: 6px;\n}\n.input-group-addon input[type=\"radio\"],\n.input-group-addon input[type=\"checkbox\"] {\n  margin-top: 0;\n}\n.input-group .form-control:first-child,\n.input-group-addon:first-child,\n.input-group-btn:first-child > .btn,\n.input-group-btn:first-child > .btn-group > .btn,\n.input-group-btn:first-child > .dropdown-toggle,\n.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),\n.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n.input-group-addon:first-child {\n  border-right: 0;\n}\n.input-group .form-control:last-child,\n.input-group-addon:last-child,\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group > .btn,\n.input-group-btn:last-child > .dropdown-toggle,\n.input-group-btn:first-child > .btn:not(:first-child),\n.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.input-group-addon:last-child {\n  border-left: 0;\n}\n.input-group-btn {\n  position: relative;\n  font-size: 0;\n  white-space: nowrap;\n}\n.input-group-btn > .btn {\n  position: relative;\n}\n.input-group-btn > .btn + .btn {\n  margin-left: -1px;\n}\n.input-group-btn > .btn:hover,\n.input-group-btn > .btn:focus,\n.input-group-btn > .btn:active {\n  z-index: 2;\n}\n.input-group-btn:first-child > .btn,\n.input-group-btn:first-child > .btn-group {\n  margin-right: -1px;\n}\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group {\n  z-index: 2;\n  margin-left: -1px;\n}\n.nav {\n  margin-bottom: 0;\n  padding-left: 0;\n  list-style: none;\n}\n.nav > li {\n  position: relative;\n  display: block;\n}\n.nav > li > a {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n}\n.nav > li > a:hover,\n.nav > li > a:focus {\n  text-decoration: none;\n  background-color: #eeeeee;\n}\n.nav > li.disabled > a {\n  color: #777777;\n}\n.nav > li.disabled > a:hover,\n.nav > li.disabled > a:focus {\n  color: #777777;\n  text-decoration: none;\n  background-color: transparent;\n  cursor: not-allowed;\n}\n.nav .open > a,\n.nav .open > a:hover,\n.nav .open > a:focus {\n  background-color: #eeeeee;\n  border-color: #337ab7;\n}\n.nav .nav-divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.nav > li > a > img {\n  max-width: none;\n}\n.nav-tabs {\n  border-bottom: 1px solid #dddddd;\n}\n.nav-tabs > li {\n  float: left;\n  margin-bottom: -1px;\n}\n.nav-tabs > li > a {\n  margin-right: 2px;\n  line-height: 1.428571429;\n  border: 1px solid transparent;\n  border-radius: 4px 4px 0 0;\n}\n.nav-tabs > li > a:hover {\n  border-color: #eeeeee #eeeeee #dddddd;\n}\n.nav-tabs > li.active > a,\n.nav-tabs > li.active > a:hover,\n.nav-tabs > li.active > a:focus {\n  color: #555555;\n  background-color: #ffffff;\n  border: 1px solid #dddddd;\n  border-bottom-color: transparent;\n  cursor: default;\n}\n.nav-tabs.nav-justified {\n  width: 100%;\n  border-bottom: 0;\n}\n.nav-tabs.nav-justified > li {\n  float: none;\n}\n.nav-tabs.nav-justified > li > a {\n  text-align: center;\n  margin-bottom: 5px;\n}\n.nav-tabs.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-tabs.nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs.nav-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs.nav-justified > .active > a,\n.nav-tabs.nav-justified > .active > a:hover,\n.nav-tabs.nav-justified > .active > a:focus {\n  border: 1px solid #dddddd;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified > li > a {\n    border-bottom: 1px solid #dddddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs.nav-justified > .active > a,\n  .nav-tabs.nav-justified > .active > a:hover,\n  .nav-tabs.nav-justified > .active > a:focus {\n    border-bottom-color: #ffffff;\n  }\n}\n.nav-pills > li {\n  float: left;\n}\n.nav-pills > li > a {\n  border-radius: 4px;\n}\n.nav-pills > li + li {\n  margin-left: 2px;\n}\n.nav-pills > li.active > a,\n.nav-pills > li.active > a:hover,\n.nav-pills > li.active > a:focus {\n  color: #ffffff;\n  background-color: #337ab7;\n}\n.nav-stacked > li {\n  float: none;\n}\n.nav-stacked > li + li {\n  margin-top: 2px;\n  margin-left: 0;\n}\n.nav-justified {\n  width: 100%;\n}\n.nav-justified > li {\n  float: none;\n}\n.nav-justified > li > a {\n  text-align: center;\n  margin-bottom: 5px;\n}\n.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs-justified {\n  border-bottom: 0;\n}\n.nav-tabs-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs-justified > .active > a,\n.nav-tabs-justified > .active > a:hover,\n.nav-tabs-justified > .active > a:focus {\n  border: 1px solid #dddddd;\n}\n@media (min-width: 768px) {\n  .nav-tabs-justified > li > a {\n    border-bottom: 1px solid #dddddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs-justified > .active > a,\n  .nav-tabs-justified > .active > a:hover,\n  .nav-tabs-justified > .active > a:focus {\n    border-bottom-color: #ffffff;\n  }\n}\n.tab-content > .tab-pane {\n  display: none;\n}\n.tab-content > .active {\n  display: block;\n}\n.nav-tabs .dropdown-menu {\n  margin-top: -1px;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n.navbar {\n  position: relative;\n  min-height: 50px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n}\n@media (min-width: 768px) {\n  .navbar {\n    border-radius: 4px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-header {\n    float: left;\n  }\n}\n.navbar-collapse {\n  overflow-x: visible;\n  padding-right: 15px;\n  padding-left: 15px;\n  border-top: 1px solid transparent;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  -webkit-overflow-scrolling: touch;\n}\n.navbar-collapse.in {\n  overflow-y: auto;\n}\n@media (min-width: 768px) {\n  .navbar-collapse {\n    width: auto;\n    border-top: 0;\n    box-shadow: none;\n  }\n  .navbar-collapse.collapse {\n    display: block !important;\n    height: auto !important;\n    padding-bottom: 0;\n    overflow: visible !important;\n  }\n  .navbar-collapse.in {\n    overflow-y: visible;\n  }\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-static-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    padding-left: 0;\n    padding-right: 0;\n  }\n}\n.navbar-fixed-top .navbar-collapse,\n.navbar-fixed-bottom .navbar-collapse {\n  max-height: 340px;\n}\n@media (max-device-width: 480px) and (orientation: landscape) {\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    max-height: 200px;\n  }\n}\n.container > .navbar-header,\n.container-fluid > .navbar-header,\n.container > .navbar-collapse,\n.container-fluid > .navbar-collapse {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  .container > .navbar-header,\n  .container-fluid > .navbar-header,\n  .container > .navbar-collapse,\n  .container-fluid > .navbar-collapse {\n    margin-right: 0;\n    margin-left: 0;\n  }\n}\n.navbar-static-top {\n  z-index: 1000;\n  border-width: 0 0 1px;\n}\n@media (min-width: 768px) {\n  .navbar-static-top {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top,\n.navbar-fixed-bottom {\n  position: fixed;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n}\n@media (min-width: 768px) {\n  .navbar-fixed-top,\n  .navbar-fixed-bottom {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top {\n  top: 0;\n  border-width: 0 0 1px;\n}\n.navbar-fixed-bottom {\n  bottom: 0;\n  margin-bottom: 0;\n  border-width: 1px 0 0;\n}\n.navbar-brand {\n  float: left;\n  padding: 15px 15px;\n  font-size: 18px;\n  line-height: 20px;\n  height: 50px;\n}\n.navbar-brand:hover,\n.navbar-brand:focus {\n  text-decoration: none;\n}\n.navbar-brand > img {\n  display: block;\n}\n@media (min-width: 768px) {\n  .navbar > .container .navbar-brand,\n  .navbar > .container-fluid .navbar-brand {\n    margin-left: -15px;\n  }\n}\n.navbar-toggle {\n  position: relative;\n  float: right;\n  margin-right: 15px;\n  padding: 9px 10px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  background-color: transparent;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.navbar-toggle:focus {\n  outline: 0;\n}\n.navbar-toggle .icon-bar {\n  display: block;\n  width: 22px;\n  height: 2px;\n  border-radius: 1px;\n}\n.navbar-toggle .icon-bar + .icon-bar {\n  margin-top: 4px;\n}\n@media (min-width: 768px) {\n  .navbar-toggle {\n    display: none;\n  }\n}\n.navbar-nav {\n  margin: 7.5px -15px;\n}\n.navbar-nav > li > a {\n  padding-top: 10px;\n  padding-bottom: 10px;\n  line-height: 20px;\n}\n@media (max-width: 767px) {\n  .navbar-nav .open .dropdown-menu {\n    position: static;\n    float: none;\n    width: auto;\n    margin-top: 0;\n    background-color: transparent;\n    border: 0;\n    box-shadow: none;\n  }\n  .navbar-nav .open .dropdown-menu > li > a,\n  .navbar-nav .open .dropdown-menu .dropdown-header {\n    padding: 5px 15px 5px 25px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a {\n    line-height: 20px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-nav .open .dropdown-menu > li > a:focus {\n    background-image: none;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-nav {\n    float: left;\n    margin: 0;\n  }\n  .navbar-nav > li {\n    float: left;\n  }\n  .navbar-nav > li > a {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n}\n.navbar-form {\n  margin-left: -15px;\n  margin-right: -15px;\n  padding: 10px 15px;\n  border-top: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 1px 0 rgba(255, 255, 255, 0.1);\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 1px 0 rgba(255, 255, 255, 0.1);\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n@media (min-width: 768px) {\n  .navbar-form .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control-static {\n    display: inline-block;\n  }\n  .navbar-form .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .navbar-form .input-group .input-group-addon,\n  .navbar-form .input-group .input-group-btn,\n  .navbar-form .input-group .form-control {\n    width: auto;\n  }\n  .navbar-form .input-group > .form-control {\n    width: 100%;\n  }\n  .navbar-form .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio,\n  .navbar-form .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio label,\n  .navbar-form .checkbox label {\n    padding-left: 0;\n  }\n  .navbar-form .radio input[type=\"radio\"],\n  .navbar-form .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .navbar-form .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n@media (max-width: 767px) {\n  .navbar-form .form-group {\n    margin-bottom: 5px;\n  }\n  .navbar-form .form-group:last-child {\n    margin-bottom: 0;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-form {\n    width: auto;\n    border: 0;\n    margin-left: 0;\n    margin-right: 0;\n    padding-top: 0;\n    padding-bottom: 0;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n  }\n}\n.navbar-nav > li > .dropdown-menu {\n  margin-top: 0;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {\n  margin-bottom: 0;\n  border-top-right-radius: 4px;\n  border-top-left-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.navbar-btn {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n.navbar-btn.btn-sm {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.navbar-btn.btn-xs {\n  margin-top: 14px;\n  margin-bottom: 14px;\n}\n.navbar-text {\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n@media (min-width: 768px) {\n  .navbar-text {\n    float: left;\n    margin-left: 15px;\n    margin-right: 15px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-left {\n    float: left !important;\n  }\n  .navbar-right {\n    float: right !important;\n    margin-right: -15px;\n  }\n  .navbar-right ~ .navbar-right {\n    margin-right: 0;\n  }\n}\n.navbar-default {\n  background-color: #f8f8f8;\n  border-color: #e7e7e7;\n}\n.navbar-default .navbar-brand {\n  color: #777777;\n}\n.navbar-default .navbar-brand:hover,\n.navbar-default .navbar-brand:focus {\n  color: #5e5e5e;\n  background-color: transparent;\n}\n.navbar-default .navbar-text {\n  color: #777777;\n}\n.navbar-default .navbar-nav > li > a {\n  color: #777777;\n}\n.navbar-default .navbar-nav > li > a:hover,\n.navbar-default .navbar-nav > li > a:focus {\n  color: #333333;\n  background-color: transparent;\n}\n.navbar-default .navbar-nav > .active > a,\n.navbar-default .navbar-nav > .active > a:hover,\n.navbar-default .navbar-nav > .active > a:focus {\n  color: #555555;\n  background-color: #e7e7e7;\n}\n.navbar-default .navbar-nav > .disabled > a,\n.navbar-default .navbar-nav > .disabled > a:hover,\n.navbar-default .navbar-nav > .disabled > a:focus {\n  color: #cccccc;\n  background-color: transparent;\n}\n.navbar-default .navbar-toggle {\n  border-color: #dddddd;\n}\n.navbar-default .navbar-toggle:hover,\n.navbar-default .navbar-toggle:focus {\n  background-color: #dddddd;\n}\n.navbar-default .navbar-toggle .icon-bar {\n  background-color: #888888;\n}\n.navbar-default .navbar-collapse,\n.navbar-default .navbar-form {\n  border-color: #e7e7e7;\n}\n.navbar-default .navbar-nav > .open > a,\n.navbar-default .navbar-nav > .open > a:hover,\n.navbar-default .navbar-nav > .open > a:focus {\n  background-color: #e7e7e7;\n  color: #555555;\n}\n@media (max-width: 767px) {\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a {\n    color: #777777;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #333333;\n    background-color: transparent;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a,\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #555555;\n    background-color: #e7e7e7;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a,\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus {\n    color: #cccccc;\n    background-color: transparent;\n  }\n}\n.navbar-default .navbar-link {\n  color: #777777;\n}\n.navbar-default .navbar-link:hover {\n  color: #333333;\n}\n.navbar-default .btn-link {\n  color: #777777;\n}\n.navbar-default .btn-link:hover,\n.navbar-default .btn-link:focus {\n  color: #333333;\n}\n.navbar-default .btn-link[disabled]:hover,\nfieldset[disabled] .navbar-default .btn-link:hover,\n.navbar-default .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-default .btn-link:focus {\n  color: #cccccc;\n}\n.navbar-inverse {\n  background-color: #222222;\n  border-color: #080808;\n}\n.navbar-inverse .navbar-brand {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-brand:hover,\n.navbar-inverse .navbar-brand:focus {\n  color: #ffffff;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-text {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-nav > li > a {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-nav > li > a:hover,\n.navbar-inverse .navbar-nav > li > a:focus {\n  color: #ffffff;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-nav > .active > a,\n.navbar-inverse .navbar-nav > .active > a:hover,\n.navbar-inverse .navbar-nav > .active > a:focus {\n  color: #ffffff;\n  background-color: #080808;\n}\n.navbar-inverse .navbar-nav > .disabled > a,\n.navbar-inverse .navbar-nav > .disabled > a:hover,\n.navbar-inverse .navbar-nav > .disabled > a:focus {\n  color: #444444;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-toggle {\n  border-color: #333333;\n}\n.navbar-inverse .navbar-toggle:hover,\n.navbar-inverse .navbar-toggle:focus {\n  background-color: #333333;\n}\n.navbar-inverse .navbar-toggle .icon-bar {\n  background-color: #ffffff;\n}\n.navbar-inverse .navbar-collapse,\n.navbar-inverse .navbar-form {\n  border-color: #101010;\n}\n.navbar-inverse .navbar-nav > .open > a,\n.navbar-inverse .navbar-nav > .open > a:hover,\n.navbar-inverse .navbar-nav > .open > a:focus {\n  background-color: #080808;\n  color: #ffffff;\n}\n@media (max-width: 767px) {\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header {\n    border-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {\n    background-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a {\n    color: #9d9d9d;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #ffffff;\n    background-color: transparent;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #ffffff;\n    background-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus {\n    color: #444444;\n    background-color: transparent;\n  }\n}\n.navbar-inverse .navbar-link {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-link:hover {\n  color: #ffffff;\n}\n.navbar-inverse .btn-link {\n  color: #9d9d9d;\n}\n.navbar-inverse .btn-link:hover,\n.navbar-inverse .btn-link:focus {\n  color: #ffffff;\n}\n.navbar-inverse .btn-link[disabled]:hover,\nfieldset[disabled] .navbar-inverse .btn-link:hover,\n.navbar-inverse .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-inverse .btn-link:focus {\n  color: #444444;\n}\n.breadcrumb {\n  padding: 8px 15px;\n  margin-bottom: 20px;\n  list-style: none;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n.breadcrumb > li {\n  display: inline-block;\n}\n.breadcrumb > li + li:before {\n  content: \"/\\00a0\";\n  padding: 0 5px;\n  color: #cccccc;\n}\n.breadcrumb > .active {\n  color: #777777;\n}\n.pagination {\n  display: inline-block;\n  padding-left: 0;\n  margin: 20px 0;\n  border-radius: 4px;\n}\n.pagination > li {\n  display: inline;\n}\n.pagination > li > a,\n.pagination > li > span {\n  position: relative;\n  float: left;\n  padding: 6px 12px;\n  line-height: 1.428571429;\n  text-decoration: none;\n  color: #337ab7;\n  background-color: #ffffff;\n  border: 1px solid #dddddd;\n  margin-left: -1px;\n}\n.pagination > li:first-child > a,\n.pagination > li:first-child > span {\n  margin-left: 0;\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.pagination > li:last-child > a,\n.pagination > li:last-child > span {\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.pagination > li > a:hover,\n.pagination > li > span:hover,\n.pagination > li > a:focus,\n.pagination > li > span:focus {\n  z-index: 3;\n  color: #23527c;\n  background-color: #eeeeee;\n  border-color: #dddddd;\n}\n.pagination > .active > a,\n.pagination > .active > span,\n.pagination > .active > a:hover,\n.pagination > .active > span:hover,\n.pagination > .active > a:focus,\n.pagination > .active > span:focus {\n  z-index: 2;\n  color: #ffffff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n  cursor: default;\n}\n.pagination > .disabled > span,\n.pagination > .disabled > span:hover,\n.pagination > .disabled > span:focus,\n.pagination > .disabled > a,\n.pagination > .disabled > a:hover,\n.pagination > .disabled > a:focus {\n  color: #777777;\n  background-color: #ffffff;\n  border-color: #dddddd;\n  cursor: not-allowed;\n}\n.pagination-lg > li > a,\n.pagination-lg > li > span {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.pagination-lg > li:first-child > a,\n.pagination-lg > li:first-child > span {\n  border-bottom-left-radius: 6px;\n  border-top-left-radius: 6px;\n}\n.pagination-lg > li:last-child > a,\n.pagination-lg > li:last-child > span {\n  border-bottom-right-radius: 6px;\n  border-top-right-radius: 6px;\n}\n.pagination-sm > li > a,\n.pagination-sm > li > span {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.pagination-sm > li:first-child > a,\n.pagination-sm > li:first-child > span {\n  border-bottom-left-radius: 3px;\n  border-top-left-radius: 3px;\n}\n.pagination-sm > li:last-child > a,\n.pagination-sm > li:last-child > span {\n  border-bottom-right-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.pager {\n  padding-left: 0;\n  margin: 20px 0;\n  list-style: none;\n  text-align: center;\n}\n.pager li {\n  display: inline;\n}\n.pager li > a,\n.pager li > span {\n  display: inline-block;\n  padding: 5px 14px;\n  background-color: #ffffff;\n  border: 1px solid #dddddd;\n  border-radius: 15px;\n}\n.pager li > a:hover,\n.pager li > a:focus {\n  text-decoration: none;\n  background-color: #eeeeee;\n}\n.pager .next > a,\n.pager .next > span {\n  float: right;\n}\n.pager .previous > a,\n.pager .previous > span {\n  float: left;\n}\n.pager .disabled > a,\n.pager .disabled > a:hover,\n.pager .disabled > a:focus,\n.pager .disabled > span {\n  color: #777777;\n  background-color: #ffffff;\n  cursor: not-allowed;\n}\n.label {\n  display: inline;\n  padding: .2em .6em .3em;\n  font-size: 75%;\n  font-weight: bold;\n  line-height: 1;\n  color: #ffffff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: .25em;\n}\na.label:hover,\na.label:focus {\n  color: #ffffff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.label:empty {\n  display: none;\n}\n.btn .label {\n  position: relative;\n  top: -1px;\n}\n.label-default {\n  background-color: #777777;\n}\n.label-default[href]:hover,\n.label-default[href]:focus {\n  background-color: #5e5e5e;\n}\n.label-primary {\n  background-color: #337ab7;\n}\n.label-primary[href]:hover,\n.label-primary[href]:focus {\n  background-color: #286090;\n}\n.label-success {\n  background-color: #5cb85c;\n}\n.label-success[href]:hover,\n.label-success[href]:focus {\n  background-color: #449d44;\n}\n.label-info {\n  background-color: #5bc0de;\n}\n.label-info[href]:hover,\n.label-info[href]:focus {\n  background-color: #31b0d5;\n}\n.label-warning {\n  background-color: #f0ad4e;\n}\n.label-warning[href]:hover,\n.label-warning[href]:focus {\n  background-color: #ec971f;\n}\n.label-danger {\n  background-color: #d9534f;\n}\n.label-danger[href]:hover,\n.label-danger[href]:focus {\n  background-color: #c9302c;\n}\n.badge {\n  display: inline-block;\n  min-width: 10px;\n  padding: 3px 7px;\n  font-size: 12px;\n  font-weight: bold;\n  color: #ffffff;\n  line-height: 1;\n  vertical-align: middle;\n  white-space: nowrap;\n  text-align: center;\n  background-color: #777777;\n  border-radius: 10px;\n}\n.badge:empty {\n  display: none;\n}\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n.btn-xs .badge,\n.btn-group-xs > .btn .badge {\n  top: 0;\n  padding: 1px 5px;\n}\na.badge:hover,\na.badge:focus {\n  color: #ffffff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group-item.active > .badge,\n.nav-pills > .active > a > .badge {\n  color: #337ab7;\n  background-color: #ffffff;\n}\n.list-group-item > .badge {\n  float: right;\n}\n.list-group-item > .badge + .badge {\n  margin-right: 5px;\n}\n.nav-pills > li > a > .badge {\n  margin-left: 3px;\n}\n.jumbotron {\n  padding-top: 30px;\n  padding-bottom: 30px;\n  margin-bottom: 30px;\n  color: inherit;\n  background-color: #eeeeee;\n}\n.jumbotron h1,\n.jumbotron .h1 {\n  color: inherit;\n}\n.jumbotron p {\n  margin-bottom: 15px;\n  font-size: 21px;\n  font-weight: 200;\n}\n.jumbotron > hr {\n  border-top-color: #d5d5d5;\n}\n.container .jumbotron,\n.container-fluid .jumbotron {\n  border-radius: 6px;\n}\n.jumbotron .container {\n  max-width: 100%;\n}\n@media screen and (min-width: 768px) {\n  .jumbotron {\n    padding-top: 48px;\n    padding-bottom: 48px;\n  }\n  .container .jumbotron,\n  .container-fluid .jumbotron {\n    padding-left: 60px;\n    padding-right: 60px;\n  }\n  .jumbotron h1,\n  .jumbotron .h1 {\n    font-size: 63px;\n  }\n}\n.thumbnail {\n  display: block;\n  padding: 4px;\n  margin-bottom: 20px;\n  line-height: 1.428571429;\n  background-color: #ffffff;\n  border: 1px solid #dddddd;\n  border-radius: 4px;\n  -webkit-transition: border 0.2s ease-in-out;\n  -o-transition: border 0.2s ease-in-out;\n  transition: border 0.2s ease-in-out;\n}\n.thumbnail > img,\n.thumbnail a > img {\n  margin-left: auto;\n  margin-right: auto;\n}\na.thumbnail:hover,\na.thumbnail:focus,\na.thumbnail.active {\n  border-color: #337ab7;\n}\n.thumbnail .caption {\n  padding: 9px;\n  color: #333333;\n}\n.alert {\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.alert h4 {\n  margin-top: 0;\n  color: inherit;\n}\n.alert .alert-link {\n  font-weight: bold;\n}\n.alert > p,\n.alert > ul {\n  margin-bottom: 0;\n}\n.alert > p + p {\n  margin-top: 5px;\n}\n.alert-dismissable,\n.alert-dismissible {\n  padding-right: 35px;\n}\n.alert-dismissable .close,\n.alert-dismissible .close {\n  position: relative;\n  top: -2px;\n  right: -21px;\n  color: inherit;\n}\n.alert-success {\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n  color: #3c763d;\n}\n.alert-success hr {\n  border-top-color: #c9e2b3;\n}\n.alert-success .alert-link {\n  color: #2b542c;\n}\n.alert-info {\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n  color: #31708f;\n}\n.alert-info hr {\n  border-top-color: #a6e1ec;\n}\n.alert-info .alert-link {\n  color: #245269;\n}\n.alert-warning {\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n  color: #8a6d3b;\n}\n.alert-warning hr {\n  border-top-color: #f7e1b5;\n}\n.alert-warning .alert-link {\n  color: #66512c;\n}\n.alert-danger {\n  background-color: #f2dede;\n  border-color: #ebccd1;\n  color: #a94442;\n}\n.alert-danger hr {\n  border-top-color: #e4b9c0;\n}\n.alert-danger .alert-link {\n  color: #843534;\n}\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n.progress {\n  overflow: hidden;\n  height: 20px;\n  margin-bottom: 20px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n.progress-bar {\n  float: left;\n  width: 0%;\n  height: 100%;\n  font-size: 12px;\n  line-height: 20px;\n  color: #ffffff;\n  text-align: center;\n  background-color: #337ab7;\n  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);\n  -webkit-transition: width 0.6s ease;\n  -o-transition: width 0.6s ease;\n  transition: width 0.6s ease;\n}\n.progress-striped .progress-bar,\n.progress-bar-striped {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-size: 40px 40px;\n}\n.progress.active .progress-bar,\n.progress-bar.active {\n  -webkit-animation: progress-bar-stripes 2s linear infinite;\n  -o-animation: progress-bar-stripes 2s linear infinite;\n  animation: progress-bar-stripes 2s linear infinite;\n}\n.progress-bar-success {\n  background-color: #5cb85c;\n}\n.progress-striped .progress-bar-success {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.progress-bar-info {\n  background-color: #5bc0de;\n}\n.progress-striped .progress-bar-info {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.progress-bar-warning {\n  background-color: #f0ad4e;\n}\n.progress-striped .progress-bar-warning {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.progress-bar-danger {\n  background-color: #d9534f;\n}\n.progress-striped .progress-bar-danger {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.media {\n  margin-top: 15px;\n}\n.media:first-child {\n  margin-top: 0;\n}\n.media,\n.media-body {\n  zoom: 1;\n  overflow: hidden;\n}\n.media-body {\n  width: 10000px;\n}\n.media-object {\n  display: block;\n}\n.media-object.img-thumbnail {\n  max-width: none;\n}\n.media-right,\n.media > .pull-right {\n  padding-left: 10px;\n}\n.media-left,\n.media > .pull-left {\n  padding-right: 10px;\n}\n.media-left,\n.media-right,\n.media-body {\n  display: table-cell;\n  vertical-align: top;\n}\n.media-middle {\n  vertical-align: middle;\n}\n.media-bottom {\n  vertical-align: bottom;\n}\n.media-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.media-list {\n  padding-left: 0;\n  list-style: none;\n}\n.list-group {\n  margin-bottom: 20px;\n  padding-left: 0;\n}\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n  margin-bottom: -1px;\n  background-color: #ffffff;\n  border: 1px solid #dddddd;\n}\n.list-group-item:first-child {\n  border-top-right-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\na.list-group-item,\nbutton.list-group-item {\n  color: #555555;\n}\na.list-group-item .list-group-item-heading,\nbutton.list-group-item .list-group-item-heading {\n  color: #333333;\n}\na.list-group-item:hover,\nbutton.list-group-item:hover,\na.list-group-item:focus,\nbutton.list-group-item:focus {\n  text-decoration: none;\n  color: #555555;\n  background-color: #f5f5f5;\n}\nbutton.list-group-item {\n  width: 100%;\n  text-align: left;\n}\n.list-group-item.disabled,\n.list-group-item.disabled:hover,\n.list-group-item.disabled:focus {\n  background-color: #eeeeee;\n  color: #777777;\n  cursor: not-allowed;\n}\n.list-group-item.disabled .list-group-item-heading,\n.list-group-item.disabled:hover .list-group-item-heading,\n.list-group-item.disabled:focus .list-group-item-heading {\n  color: inherit;\n}\n.list-group-item.disabled .list-group-item-text,\n.list-group-item.disabled:hover .list-group-item-text,\n.list-group-item.disabled:focus .list-group-item-text {\n  color: #777777;\n}\n.list-group-item.active,\n.list-group-item.active:hover,\n.list-group-item.active:focus {\n  z-index: 2;\n  color: #ffffff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.list-group-item.active .list-group-item-heading,\n.list-group-item.active:hover .list-group-item-heading,\n.list-group-item.active:focus .list-group-item-heading,\n.list-group-item.active .list-group-item-heading > small,\n.list-group-item.active:hover .list-group-item-heading > small,\n.list-group-item.active:focus .list-group-item-heading > small,\n.list-group-item.active .list-group-item-heading > .small,\n.list-group-item.active:hover .list-group-item-heading > .small,\n.list-group-item.active:focus .list-group-item-heading > .small {\n  color: inherit;\n}\n.list-group-item.active .list-group-item-text,\n.list-group-item.active:hover .list-group-item-text,\n.list-group-item.active:focus .list-group-item-text {\n  color: #c7ddef;\n}\n.list-group-item-success {\n  color: #3c763d;\n  background-color: #dff0d8;\n}\na.list-group-item-success,\nbutton.list-group-item-success {\n  color: #3c763d;\n}\na.list-group-item-success .list-group-item-heading,\nbutton.list-group-item-success .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-success:hover,\nbutton.list-group-item-success:hover,\na.list-group-item-success:focus,\nbutton.list-group-item-success:focus {\n  color: #3c763d;\n  background-color: #d0e9c6;\n}\na.list-group-item-success.active,\nbutton.list-group-item-success.active,\na.list-group-item-success.active:hover,\nbutton.list-group-item-success.active:hover,\na.list-group-item-success.active:focus,\nbutton.list-group-item-success.active:focus {\n  color: #fff;\n  background-color: #3c763d;\n  border-color: #3c763d;\n}\n.list-group-item-info {\n  color: #31708f;\n  background-color: #d9edf7;\n}\na.list-group-item-info,\nbutton.list-group-item-info {\n  color: #31708f;\n}\na.list-group-item-info .list-group-item-heading,\nbutton.list-group-item-info .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-info:hover,\nbutton.list-group-item-info:hover,\na.list-group-item-info:focus,\nbutton.list-group-item-info:focus {\n  color: #31708f;\n  background-color: #c4e3f3;\n}\na.list-group-item-info.active,\nbutton.list-group-item-info.active,\na.list-group-item-info.active:hover,\nbutton.list-group-item-info.active:hover,\na.list-group-item-info.active:focus,\nbutton.list-group-item-info.active:focus {\n  color: #fff;\n  background-color: #31708f;\n  border-color: #31708f;\n}\n.list-group-item-warning {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n}\na.list-group-item-warning,\nbutton.list-group-item-warning {\n  color: #8a6d3b;\n}\na.list-group-item-warning .list-group-item-heading,\nbutton.list-group-item-warning .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-warning:hover,\nbutton.list-group-item-warning:hover,\na.list-group-item-warning:focus,\nbutton.list-group-item-warning:focus {\n  color: #8a6d3b;\n  background-color: #faf2cc;\n}\na.list-group-item-warning.active,\nbutton.list-group-item-warning.active,\na.list-group-item-warning.active:hover,\nbutton.list-group-item-warning.active:hover,\na.list-group-item-warning.active:focus,\nbutton.list-group-item-warning.active:focus {\n  color: #fff;\n  background-color: #8a6d3b;\n  border-color: #8a6d3b;\n}\n.list-group-item-danger {\n  color: #a94442;\n  background-color: #f2dede;\n}\na.list-group-item-danger,\nbutton.list-group-item-danger {\n  color: #a94442;\n}\na.list-group-item-danger .list-group-item-heading,\nbutton.list-group-item-danger .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-danger:hover,\nbutton.list-group-item-danger:hover,\na.list-group-item-danger:focus,\nbutton.list-group-item-danger:focus {\n  color: #a94442;\n  background-color: #ebcccc;\n}\na.list-group-item-danger.active,\nbutton.list-group-item-danger.active,\na.list-group-item-danger.active:hover,\nbutton.list-group-item-danger.active:hover,\na.list-group-item-danger.active:focus,\nbutton.list-group-item-danger.active:focus {\n  color: #fff;\n  background-color: #a94442;\n  border-color: #a94442;\n}\n.list-group-item-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.list-group-item-text {\n  margin-bottom: 0;\n  line-height: 1.3;\n}\n.panel {\n  margin-bottom: 20px;\n  background-color: #ffffff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);\n}\n.panel-body {\n  padding: 15px;\n}\n.panel-heading {\n  padding: 10px 15px;\n  border-bottom: 1px solid transparent;\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n}\n.panel-heading > .dropdown .dropdown-toggle {\n  color: inherit;\n}\n.panel-title {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-size: 16px;\n  color: inherit;\n}\n.panel-title > a,\n.panel-title > small,\n.panel-title > .small,\n.panel-title > small > a,\n.panel-title > .small > a {\n  color: inherit;\n}\n.panel-footer {\n  padding: 10px 15px;\n  background-color: #f5f5f5;\n  border-top: 1px solid #dddddd;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .list-group,\n.panel > .panel-collapse > .list-group {\n  margin-bottom: 0;\n}\n.panel > .list-group .list-group-item,\n.panel > .panel-collapse > .list-group .list-group-item {\n  border-width: 1px 0;\n  border-radius: 0;\n}\n.panel > .list-group:first-child .list-group-item:first-child,\n.panel > .panel-collapse > .list-group:first-child .list-group-item:first-child {\n  border-top: 0;\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n}\n.panel > .list-group:last-child .list-group-item:last-child,\n.panel > .panel-collapse > .list-group:last-child .list-group-item:last-child {\n  border-bottom: 0;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:first-child {\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n.panel-heading + .list-group .list-group-item:first-child {\n  border-top-width: 0;\n}\n.list-group + .panel-footer {\n  border-top-width: 0;\n}\n.panel > .table,\n.panel > .table-responsive > .table,\n.panel > .panel-collapse > .table {\n  margin-bottom: 0;\n}\n.panel > .table caption,\n.panel > .table-responsive > .table caption,\n.panel > .panel-collapse > .table caption {\n  padding-left: 15px;\n  padding-right: 15px;\n}\n.panel > .table:first-child,\n.panel > .table-responsive:first-child > .table:first-child {\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child td:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child td:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:first-child,\n.panel > .table:first-child > thead:first-child > tr:first-child th:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child th:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:first-child {\n  border-top-left-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child td:last-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:last-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child td:last-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:last-child,\n.panel > .table:first-child > thead:first-child > tr:first-child th:last-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:last-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child th:last-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:last-child {\n  border-top-right-radius: 3px;\n}\n.panel > .table:last-child,\n.panel > .table-responsive:last-child > .table:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child {\n  border-bottom-left-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child td:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:first-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\n.panel > .table:last-child > tbody:last-child > tr:last-child th:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:first-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:first-child {\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\n.panel > .table:last-child > tbody:last-child > tr:last-child th:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:last-child {\n  border-bottom-right-radius: 3px;\n}\n.panel > .panel-body + .table,\n.panel > .panel-body + .table-responsive,\n.panel > .table + .panel-body,\n.panel > .table-responsive + .panel-body {\n  border-top: 1px solid #dddddd;\n}\n.panel > .table > tbody:first-child > tr:first-child th,\n.panel > .table > tbody:first-child > tr:first-child td {\n  border-top: 0;\n}\n.panel > .table-bordered,\n.panel > .table-responsive > .table-bordered {\n  border: 0;\n}\n.panel > .table-bordered > thead > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > thead > tr > th:first-child,\n.panel > .table-bordered > tbody > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > th:first-child,\n.panel > .table-bordered > tfoot > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:first-child,\n.panel > .table-bordered > thead > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > thead > tr > td:first-child,\n.panel > .table-bordered > tbody > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > td:first-child,\n.panel > .table-bordered > tfoot > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n  border-left: 0;\n}\n.panel > .table-bordered > thead > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > thead > tr > th:last-child,\n.panel > .table-bordered > tbody > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > th:last-child,\n.panel > .table-bordered > tfoot > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:last-child,\n.panel > .table-bordered > thead > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > thead > tr > td:last-child,\n.panel > .table-bordered > tbody > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > td:last-child,\n.panel > .table-bordered > tfoot > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n  border-right: 0;\n}\n.panel > .table-bordered > thead > tr:first-child > td,\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > td,\n.panel > .table-bordered > tbody > tr:first-child > td,\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > td,\n.panel > .table-bordered > thead > tr:first-child > th,\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > th,\n.panel > .table-bordered > tbody > tr:first-child > th,\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > th {\n  border-bottom: 0;\n}\n.panel > .table-bordered > tbody > tr:last-child > td,\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > td,\n.panel > .table-bordered > tfoot > tr:last-child > td,\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > td,\n.panel > .table-bordered > tbody > tr:last-child > th,\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > th,\n.panel > .table-bordered > tfoot > tr:last-child > th,\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > th {\n  border-bottom: 0;\n}\n.panel > .table-responsive {\n  border: 0;\n  margin-bottom: 0;\n}\n.panel-group {\n  margin-bottom: 20px;\n}\n.panel-group .panel {\n  margin-bottom: 0;\n  border-radius: 4px;\n}\n.panel-group .panel + .panel {\n  margin-top: 5px;\n}\n.panel-group .panel-heading {\n  border-bottom: 0;\n}\n.panel-group .panel-heading + .panel-collapse > .panel-body,\n.panel-group .panel-heading + .panel-collapse > .list-group {\n  border-top: 1px solid #dddddd;\n}\n.panel-group .panel-footer {\n  border-top: 0;\n}\n.panel-group .panel-footer + .panel-collapse .panel-body {\n  border-bottom: 1px solid #dddddd;\n}\n.panel-default {\n  border-color: #dddddd;\n}\n.panel-default > .panel-heading {\n  color: #333333;\n  background-color: #f5f5f5;\n  border-color: #dddddd;\n}\n.panel-default > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #dddddd;\n}\n.panel-default > .panel-heading .badge {\n  color: #f5f5f5;\n  background-color: #333333;\n}\n.panel-default > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #dddddd;\n}\n.panel-primary {\n  border-color: #337ab7;\n}\n.panel-primary > .panel-heading {\n  color: #ffffff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.panel-primary > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #337ab7;\n}\n.panel-primary > .panel-heading .badge {\n  color: #337ab7;\n  background-color: #ffffff;\n}\n.panel-primary > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #337ab7;\n}\n.panel-success {\n  border-color: #d6e9c6;\n}\n.panel-success > .panel-heading {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n}\n.panel-success > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #d6e9c6;\n}\n.panel-success > .panel-heading .badge {\n  color: #dff0d8;\n  background-color: #3c763d;\n}\n.panel-success > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #d6e9c6;\n}\n.panel-info {\n  border-color: #bce8f1;\n}\n.panel-info > .panel-heading {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n}\n.panel-info > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #bce8f1;\n}\n.panel-info > .panel-heading .badge {\n  color: #d9edf7;\n  background-color: #31708f;\n}\n.panel-info > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #bce8f1;\n}\n.panel-warning {\n  border-color: #faebcc;\n}\n.panel-warning > .panel-heading {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n}\n.panel-warning > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #faebcc;\n}\n.panel-warning > .panel-heading .badge {\n  color: #fcf8e3;\n  background-color: #8a6d3b;\n}\n.panel-warning > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #faebcc;\n}\n.panel-danger {\n  border-color: #ebccd1;\n}\n.panel-danger > .panel-heading {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #ebccd1;\n}\n.panel-danger > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ebccd1;\n}\n.panel-danger > .panel-heading .badge {\n  color: #f2dede;\n  background-color: #a94442;\n}\n.panel-danger > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ebccd1;\n}\n.well {\n  min-height: 20px;\n  padding: 19px;\n  margin-bottom: 20px;\n  background-color: #f5f5f5;\n  border: 1px solid #e3e3e3;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);\n}\n.well blockquote {\n  border-color: #ddd;\n  border-color: rgba(0, 0, 0, 0.15);\n}\n.well-lg {\n  padding: 24px;\n  border-radius: 6px;\n}\n.well-sm {\n  padding: 9px;\n  border-radius: 3px;\n}\n.close {\n  float: right;\n  font-size: 21px;\n  font-weight: bold;\n  line-height: 1;\n  color: #000000;\n  text-shadow: 0 1px 0 #ffffff;\n  opacity: 0.2;\n  filter: alpha(opacity=20);\n}\n.close:hover,\n.close:focus {\n  color: #000000;\n  text-decoration: none;\n  cursor: pointer;\n  opacity: 0.5;\n  filter: alpha(opacity=50);\n}\nbutton.close {\n  padding: 0;\n  cursor: pointer;\n  background: transparent;\n  border: 0;\n  -webkit-appearance: none;\n}\n.modal-open {\n  overflow: hidden;\n}\n.modal {\n  display: none;\n  overflow: hidden;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1050;\n  -webkit-overflow-scrolling: touch;\n  outline: 0;\n}\n.modal.fade .modal-dialog {\n  -webkit-transform: translate(0, -25%);\n  -ms-transform: translate(0, -25%);\n  -o-transform: translate(0, -25%);\n  transform: translate(0, -25%);\n  -webkit-transition: -webkit-transform 0.3s ease-out;\n  -moz-transition: -moz-transform 0.3s ease-out;\n  -o-transition: -o-transform 0.3s ease-out;\n  transition: transform 0.3s ease-out;\n}\n.modal.in .modal-dialog {\n  -webkit-transform: translate(0, 0);\n  -ms-transform: translate(0, 0);\n  -o-transform: translate(0, 0);\n  transform: translate(0, 0);\n}\n.modal-open .modal {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 10px;\n}\n.modal-content {\n  position: relative;\n  background-color: #ffffff;\n  border: 1px solid #999999;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 6px;\n  -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);\n  box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);\n  background-clip: padding-box;\n  outline: 0;\n}\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #000000;\n}\n.modal-backdrop.fade {\n  opacity: 0;\n  filter: alpha(opacity=0);\n}\n.modal-backdrop.in {\n  opacity: 0.5;\n  filter: alpha(opacity=50);\n}\n.modal-header {\n  padding: 15px;\n  border-bottom: 1px solid #e5e5e5;\n  min-height: 16.428571429px;\n}\n.modal-header .close {\n  margin-top: -2px;\n}\n.modal-title {\n  margin: 0;\n  line-height: 1.428571429;\n}\n.modal-body {\n  position: relative;\n  padding: 15px;\n}\n.modal-footer {\n  padding: 15px;\n  text-align: right;\n  border-top: 1px solid #e5e5e5;\n}\n.modal-footer .btn + .btn {\n  margin-left: 5px;\n  margin-bottom: 0;\n}\n.modal-footer .btn-group .btn + .btn {\n  margin-left: -1px;\n}\n.modal-footer .btn-block + .btn-block {\n  margin-left: 0;\n}\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n@media (min-width: 768px) {\n  .modal-dialog {\n    width: 600px;\n    margin: 30px auto;\n  }\n  .modal-content {\n    -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n  }\n  .modal-sm {\n    width: 300px;\n  }\n}\n@media (min-width: 992px) {\n  .modal-lg {\n    width: 900px;\n  }\n}\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: normal;\n  letter-spacing: normal;\n  line-break: auto;\n  line-height: 1.428571429;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  white-space: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  font-size: 12px;\n  opacity: 0;\n  filter: alpha(opacity=0);\n}\n.tooltip.in {\n  opacity: 0.9;\n  filter: alpha(opacity=90);\n}\n.tooltip.top {\n  margin-top: -3px;\n  padding: 5px 0;\n}\n.tooltip.right {\n  margin-left: 3px;\n  padding: 0 5px;\n}\n.tooltip.bottom {\n  margin-top: 3px;\n  padding: 5px 0;\n}\n.tooltip.left {\n  margin-left: -3px;\n  padding: 0 5px;\n}\n.tooltip-inner {\n  max-width: 200px;\n  padding: 3px 8px;\n  color: #ffffff;\n  text-align: center;\n  background-color: #000000;\n  border-radius: 4px;\n}\n.tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.tooltip.top .tooltip-arrow {\n  bottom: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000000;\n}\n.tooltip.top-left .tooltip-arrow {\n  bottom: 0;\n  right: 5px;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000000;\n}\n.tooltip.top-right .tooltip-arrow {\n  bottom: 0;\n  left: 5px;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000000;\n}\n.tooltip.right .tooltip-arrow {\n  top: 50%;\n  left: 0;\n  margin-top: -5px;\n  border-width: 5px 5px 5px 0;\n  border-right-color: #000000;\n}\n.tooltip.left .tooltip-arrow {\n  top: 50%;\n  right: 0;\n  margin-top: -5px;\n  border-width: 5px 0 5px 5px;\n  border-left-color: #000000;\n}\n.tooltip.bottom .tooltip-arrow {\n  top: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000000;\n}\n.tooltip.bottom-left .tooltip-arrow {\n  top: 0;\n  right: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000000;\n}\n.tooltip.bottom-right .tooltip-arrow {\n  top: 0;\n  left: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000000;\n}\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: none;\n  max-width: 276px;\n  padding: 1px;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: normal;\n  letter-spacing: normal;\n  line-break: auto;\n  line-height: 1.428571429;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  white-space: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  font-size: 14px;\n  background-color: #ffffff;\n  background-clip: padding-box;\n  border: 1px solid #cccccc;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 6px;\n  -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n}\n.popover.top {\n  margin-top: -10px;\n}\n.popover.right {\n  margin-left: 10px;\n}\n.popover.bottom {\n  margin-top: 10px;\n}\n.popover.left {\n  margin-left: -10px;\n}\n.popover-title {\n  margin: 0;\n  padding: 8px 14px;\n  font-size: 14px;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #ebebeb;\n  border-radius: 5px 5px 0 0;\n}\n.popover-content {\n  padding: 9px 14px;\n}\n.popover > .arrow,\n.popover > .arrow:after {\n  position: absolute;\n  display: block;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.popover > .arrow {\n  border-width: 11px;\n}\n.popover > .arrow:after {\n  border-width: 10px;\n  content: \"\";\n}\n.popover.top > .arrow {\n  left: 50%;\n  margin-left: -11px;\n  border-bottom-width: 0;\n  border-top-color: #999999;\n  border-top-color: rgba(0, 0, 0, 0.25);\n  bottom: -11px;\n}\n.popover.top > .arrow:after {\n  content: \" \";\n  bottom: 1px;\n  margin-left: -10px;\n  border-bottom-width: 0;\n  border-top-color: #ffffff;\n}\n.popover.right > .arrow {\n  top: 50%;\n  left: -11px;\n  margin-top: -11px;\n  border-left-width: 0;\n  border-right-color: #999999;\n  border-right-color: rgba(0, 0, 0, 0.25);\n}\n.popover.right > .arrow:after {\n  content: \" \";\n  left: 1px;\n  bottom: -10px;\n  border-left-width: 0;\n  border-right-color: #ffffff;\n}\n.popover.bottom > .arrow {\n  left: 50%;\n  margin-left: -11px;\n  border-top-width: 0;\n  border-bottom-color: #999999;\n  border-bottom-color: rgba(0, 0, 0, 0.25);\n  top: -11px;\n}\n.popover.bottom > .arrow:after {\n  content: \" \";\n  top: 1px;\n  margin-left: -10px;\n  border-top-width: 0;\n  border-bottom-color: #ffffff;\n}\n.popover.left > .arrow {\n  top: 50%;\n  right: -11px;\n  margin-top: -11px;\n  border-right-width: 0;\n  border-left-color: #999999;\n  border-left-color: rgba(0, 0, 0, 0.25);\n}\n.popover.left > .arrow:after {\n  content: \" \";\n  right: 1px;\n  border-right-width: 0;\n  border-left-color: #ffffff;\n  bottom: -10px;\n}\n.carousel {\n  position: relative;\n}\n.carousel-inner {\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n}\n.carousel-inner > .item {\n  display: none;\n  position: relative;\n  -webkit-transition: 0.6s ease-in-out left;\n  -o-transition: 0.6s ease-in-out left;\n  transition: 0.6s ease-in-out left;\n}\n.carousel-inner > .item > img,\n.carousel-inner > .item > a > img {\n  line-height: 1;\n}\n@media all and (transform-3d), (-webkit-transform-3d) {\n  .carousel-inner > .item {\n    -webkit-transition: -webkit-transform 0.6s ease-in-out;\n    -moz-transition: -moz-transform 0.6s ease-in-out;\n    -o-transition: -o-transform 0.6s ease-in-out;\n    transition: transform 0.6s ease-in-out;\n    -webkit-backface-visibility: hidden;\n    -moz-backface-visibility: hidden;\n    backface-visibility: hidden;\n    -webkit-perspective: 1000px;\n    -moz-perspective: 1000px;\n    perspective: 1000px;\n  }\n  .carousel-inner > .item.next,\n  .carousel-inner > .item.active.right {\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n    left: 0;\n  }\n  .carousel-inner > .item.prev,\n  .carousel-inner > .item.active.left {\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n    left: 0;\n  }\n  .carousel-inner > .item.next.left,\n  .carousel-inner > .item.prev.right,\n  .carousel-inner > .item.active {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    left: 0;\n  }\n}\n.carousel-inner > .active,\n.carousel-inner > .next,\n.carousel-inner > .prev {\n  display: block;\n}\n.carousel-inner > .active {\n  left: 0;\n}\n.carousel-inner > .next,\n.carousel-inner > .prev {\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n.carousel-inner > .next {\n  left: 100%;\n}\n.carousel-inner > .prev {\n  left: -100%;\n}\n.carousel-inner > .next.left,\n.carousel-inner > .prev.right {\n  left: 0;\n}\n.carousel-inner > .active.left {\n  left: -100%;\n}\n.carousel-inner > .active.right {\n  left: 100%;\n}\n.carousel-control {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  width: 15%;\n  opacity: 0.5;\n  filter: alpha(opacity=50);\n  font-size: 20px;\n  color: #ffffff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);\n}\n.carousel-control.left {\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);\n  background-image: -o-linear-gradient(left, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);\n}\n.carousel-control.right {\n  left: auto;\n  right: 0;\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);\n  background-image: -o-linear-gradient(left, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);\n}\n.carousel-control:hover,\n.carousel-control:focus {\n  outline: 0;\n  color: #ffffff;\n  text-decoration: none;\n  opacity: 0.9;\n  filter: alpha(opacity=90);\n}\n.carousel-control .icon-prev,\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-left,\n.carousel-control .glyphicon-chevron-right {\n  position: absolute;\n  top: 50%;\n  margin-top: -10px;\n  z-index: 5;\n  display: inline-block;\n}\n.carousel-control .icon-prev,\n.carousel-control .glyphicon-chevron-left {\n  left: 50%;\n  margin-left: -10px;\n}\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-right {\n  right: 50%;\n  margin-right: -10px;\n}\n.carousel-control .icon-prev,\n.carousel-control .icon-next {\n  width: 20px;\n  height: 20px;\n  line-height: 1;\n  font-family: serif;\n}\n.carousel-control .icon-prev:before {\n  content: '\\2039';\n}\n.carousel-control .icon-next:before {\n  content: '\\203a';\n}\n.carousel-indicators {\n  position: absolute;\n  bottom: 10px;\n  left: 50%;\n  z-index: 15;\n  width: 60%;\n  margin-left: -30%;\n  padding-left: 0;\n  list-style: none;\n  text-align: center;\n}\n.carousel-indicators li {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin: 1px;\n  text-indent: -999px;\n  border: 1px solid #ffffff;\n  border-radius: 10px;\n  cursor: pointer;\n  background-color: #000 \\9;\n  background-color: rgba(0, 0, 0, 0);\n}\n.carousel-indicators .active {\n  margin: 0;\n  width: 12px;\n  height: 12px;\n  background-color: #ffffff;\n}\n.carousel-caption {\n  position: absolute;\n  left: 15%;\n  right: 15%;\n  bottom: 20px;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #ffffff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);\n}\n.carousel-caption .btn {\n  text-shadow: none;\n}\n@media screen and (min-width: 768px) {\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-prev,\n  .carousel-control .icon-next {\n    width: 30px;\n    height: 30px;\n    margin-top: -15px;\n    font-size: 30px;\n  }\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .icon-prev {\n    margin-left: -15px;\n  }\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-next {\n    margin-right: -15px;\n  }\n  .carousel-caption {\n    left: 20%;\n    right: 20%;\n    padding-bottom: 30px;\n  }\n  .carousel-indicators {\n    bottom: 20px;\n  }\n}\n.clearfix:before,\n.clearfix:after,\n.dl-horizontal dd:before,\n.dl-horizontal dd:after,\n.container:before,\n.container:after,\n.container-fluid:before,\n.container-fluid:after,\n.row:before,\n.row:after,\n.form-horizontal .form-group:before,\n.form-horizontal .form-group:after,\n.btn-toolbar:before,\n.btn-toolbar:after,\n.btn-group-vertical > .btn-group:before,\n.btn-group-vertical > .btn-group:after,\n.nav:before,\n.nav:after,\n.navbar:before,\n.navbar:after,\n.navbar-header:before,\n.navbar-header:after,\n.navbar-collapse:before,\n.navbar-collapse:after,\n.pager:before,\n.pager:after,\n.panel-body:before,\n.panel-body:after,\n.modal-footer:before,\n.modal-footer:after {\n  content: \" \";\n  display: table;\n}\n.clearfix:after,\n.dl-horizontal dd:after,\n.container:after,\n.container-fluid:after,\n.row:after,\n.form-horizontal .form-group:after,\n.btn-toolbar:after,\n.btn-group-vertical > .btn-group:after,\n.nav:after,\n.navbar:after,\n.navbar-header:after,\n.navbar-collapse:after,\n.pager:after,\n.panel-body:after,\n.modal-footer:after {\n  clear: both;\n}\n.center-block {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n.pull-right {\n  float: right !important;\n}\n.pull-left {\n  float: left !important;\n}\n.hide {\n  display: none !important;\n}\n.show {\n  display: block !important;\n}\n.invisible {\n  visibility: hidden;\n}\n.text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n.hidden {\n  display: none !important;\n}\n.affix {\n  position: fixed;\n}\n@-ms-viewport {\n  width: device-width;\n}\n.visible-xs,\n.visible-sm,\n.visible-md,\n.visible-lg {\n  display: none !important;\n}\n.visible-xs-block,\n.visible-xs-inline,\n.visible-xs-inline-block,\n.visible-sm-block,\n.visible-sm-inline,\n.visible-sm-inline-block,\n.visible-md-block,\n.visible-md-inline,\n.visible-md-inline-block,\n.visible-lg-block,\n.visible-lg-inline,\n.visible-lg-inline-block {\n  display: none !important;\n}\n@media (max-width: 767px) {\n  .visible-xs {\n    display: block !important;\n  }\n  table.visible-xs {\n    display: table !important;\n  }\n  tr.visible-xs {\n    display: table-row !important;\n  }\n  th.visible-xs,\n  td.visible-xs {\n    display: table-cell !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-block {\n    display: block !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline {\n    display: inline !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm {\n    display: block !important;\n  }\n  table.visible-sm {\n    display: table !important;\n  }\n  tr.visible-sm {\n    display: table-row !important;\n  }\n  th.visible-sm,\n  td.visible-sm {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-block {\n    display: block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md {\n    display: block !important;\n  }\n  table.visible-md {\n    display: table !important;\n  }\n  tr.visible-md {\n    display: table-row !important;\n  }\n  th.visible-md,\n  td.visible-md {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-block {\n    display: block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg {\n    display: block !important;\n  }\n  table.visible-lg {\n    display: table !important;\n  }\n  tr.visible-lg {\n    display: table-row !important;\n  }\n  th.visible-lg,\n  td.visible-lg {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-block {\n    display: block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (max-width: 767px) {\n  .hidden-xs {\n    display: none !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .hidden-sm {\n    display: none !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .hidden-md {\n    display: none !important;\n  }\n}\n@media (min-width: 1200px) {\n  .hidden-lg {\n    display: none !important;\n  }\n}\n.visible-print {\n  display: none !important;\n}\n@media print {\n  .visible-print {\n    display: block !important;\n  }\n  table.visible-print {\n    display: table !important;\n  }\n  tr.visible-print {\n    display: table-row !important;\n  }\n  th.visible-print,\n  td.visible-print {\n    display: table-cell !important;\n  }\n}\n.visible-print-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-block {\n    display: block !important;\n  }\n}\n.visible-print-inline {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline {\n    display: inline !important;\n  }\n}\n.visible-print-inline-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline-block {\n    display: inline-block !important;\n  }\n}\n@media print {\n  .hidden-print {\n    display: none !important;\n  }\n}\n";

		/***/
	},
	/* 432 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__.p + "fa2772327f55d8198301fdb8bcfc8158.woff"

		/***/
	},
	/* 433 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__.p + "f4769f9bdb7466be65088239c12046d1.eot"

		/***/
	},
	/* 434 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__.p + "448c34a56d699c29117adc64c43affeb.woff2"

		/***/
	},
	/* 435 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__.p + "e18bbf611f2a2e43afc071aa2f4e1512.ttf"

		/***/
	},
	/* 436 */
	/***/ function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__.p + "89889688147bd7575d6327160d64e760.svg"

		/***/
	},
	/* 437 */
	/***/ function (module, exports, __webpack_require__) {

		__webpack_require__(439);
		__webpack_require__(440);
		__webpack_require__(441);
		__webpack_require__(442);
		__webpack_require__(443);
		__webpack_require__(444);
		__webpack_require__(438);
		__webpack_require__(445);
		__webpack_require__(446);
		__webpack_require__(447);
		__webpack_require__(448);
		__webpack_require__(449);

		/***/
	},
	/* 438 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: modal.js v3.3.5
		 * http://getbootstrap.com/javascript/#modals
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// MODAL CLASS DEFINITION
				// ======================

				var Modal = function (element, options) {
					this.options = options
					this.$body = $(document.body)
					this.$element = $(element)
					this.$dialog = this.$element.find('.modal-dialog')
					this.$backdrop = null
					this.isShown = null
					this.originalBodyPad = null
					this.scrollbarWidth = 0
					this.ignoreBackdropClick = false

					if (this.options.remote) {
						this.$element
							.find('.modal-content')
							.load(this.options.remote, $.proxy(function () {
								this.$element.trigger('loaded.bs.modal')
							}, this))
					}
				}

				Modal.VERSION = '3.3.5'

				Modal.TRANSITION_DURATION = 300
				Modal.BACKDROP_TRANSITION_DURATION = 150

				Modal.DEFAULTS = {
					backdrop: true,
					keyboard: true,
					show: true
				}

				Modal.prototype.toggle = function (_relatedTarget) {
					return this.isShown ? this.hide() : this.show(_relatedTarget)
				}

				Modal.prototype.show = function (_relatedTarget) {
					var that = this
					var e = $.Event('show.bs.modal', {relatedTarget: _relatedTarget})

					this.$element.trigger(e)

					if (this.isShown || e.isDefaultPrevented()) return

					this.isShown = true

					this.checkScrollbar()
					this.setScrollbar()
					this.$body.addClass('modal-open')

					this.escape()
					this.resize()

					this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

					this.$dialog.on('mousedown.dismiss.bs.modal', function () {
						that.$element.one('mouseup.dismiss.bs.modal', function (e) {
							if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
						})
					})

					this.backdrop(function () {
						var transition = $.support.transition && that.$element.hasClass('fade')

						if (!that.$element.parent().length) {
							that.$element.appendTo(that.$body) // don't move modals dom position
						}

						that.$element
							.show()
							.scrollTop(0)

						that.adjustDialog()

						if (transition) {
							that.$element[0].offsetWidth // force reflow
						}

						that.$element.addClass('in')

						that.enforceFocus()

						var e = $.Event('shown.bs.modal', {relatedTarget: _relatedTarget})

						transition ?
							that.$dialog // wait for modal to slide in
								.one('bsTransitionEnd', function () {
									that.$element.trigger('focus').trigger(e)
								})
								.emulateTransitionEnd(Modal.TRANSITION_DURATION) :
							that.$element.trigger('focus').trigger(e)
					})
				}

				Modal.prototype.hide = function (e) {
					if (e) e.preventDefault()

					e = $.Event('hide.bs.modal')

					this.$element.trigger(e)

					if (!this.isShown || e.isDefaultPrevented()) return

					this.isShown = false

					this.escape()
					this.resize()

					$(document).off('focusin.bs.modal')

					this.$element
						.removeClass('in')
						.off('click.dismiss.bs.modal')
						.off('mouseup.dismiss.bs.modal')

					this.$dialog.off('mousedown.dismiss.bs.modal')

					$.support.transition && this.$element.hasClass('fade') ?
						this.$element
							.one('bsTransitionEnd', $.proxy(this.hideModal, this))
							.emulateTransitionEnd(Modal.TRANSITION_DURATION) :
						this.hideModal()
				}

				Modal.prototype.enforceFocus = function () {
					$(document)
						.off('focusin.bs.modal') // guard against infinite focus loop
						.on('focusin.bs.modal', $.proxy(function (e) {
							if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
								this.$element.trigger('focus')
							}
						}, this))
				}

				Modal.prototype.escape = function () {
					if (this.isShown && this.options.keyboard) {
						this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
							e.which == 27 && this.hide()
						}, this))
					} else if (!this.isShown) {
						this.$element.off('keydown.dismiss.bs.modal')
					}
				}

				Modal.prototype.resize = function () {
					if (this.isShown) {
						$(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
					} else {
						$(window).off('resize.bs.modal')
					}
				}

				Modal.prototype.hideModal = function () {
					var that = this
					this.$element.hide()
					this.backdrop(function () {
						that.$body.removeClass('modal-open')
						that.resetAdjustments()
						that.resetScrollbar()
						that.$element.trigger('hidden.bs.modal')
					})
				}

				Modal.prototype.removeBackdrop = function () {
					this.$backdrop && this.$backdrop.remove()
					this.$backdrop = null
				}

				Modal.prototype.backdrop = function (callback) {
					var that = this
					var animate = this.$element.hasClass('fade') ? 'fade' : ''

					if (this.isShown && this.options.backdrop) {
						var doAnimate = $.support.transition && animate

						this.$backdrop = $(document.createElement('div'))
							.addClass('modal-backdrop ' + animate)
							.appendTo(this.$body)

						this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
							if (this.ignoreBackdropClick) {
								this.ignoreBackdropClick = false
								return
							}
							if (e.target !== e.currentTarget) return
							this.options.backdrop == 'static'
								? this.$element[0].focus()
								: this.hide()
						}, this))

						if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

						this.$backdrop.addClass('in')

						if (!callback) return

						doAnimate ?
							this.$backdrop
								.one('bsTransitionEnd', callback)
								.emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
							callback()

					} else if (!this.isShown && this.$backdrop) {
						this.$backdrop.removeClass('in')

						var callbackRemove = function () {
							that.removeBackdrop()
							callback && callback()
						}
						$.support.transition && this.$element.hasClass('fade') ?
							this.$backdrop
								.one('bsTransitionEnd', callbackRemove)
								.emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
							callbackRemove()

					} else if (callback) {
						callback()
					}
				}

				// these following methods are used to handle overflowing modals

				Modal.prototype.handleUpdate = function () {
					this.adjustDialog()
				}

				Modal.prototype.adjustDialog = function () {
					var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

					this.$element.css({
						paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
						paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
					})
				}

				Modal.prototype.resetAdjustments = function () {
					this.$element.css({
						paddingLeft: '',
						paddingRight: ''
					})
				}

				Modal.prototype.checkScrollbar = function () {
					var fullWindowWidth = window.innerWidth
					if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
						var documentElementRect = document.documentElement.getBoundingClientRect()
						fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
					}
					this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
					this.scrollbarWidth = this.measureScrollbar()
				}

				Modal.prototype.setScrollbar = function () {
					var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
					this.originalBodyPad = document.body.style.paddingRight || ''
					if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
				}

				Modal.prototype.resetScrollbar = function () {
					this.$body.css('padding-right', this.originalBodyPad)
				}

				Modal.prototype.measureScrollbar = function () { // thx walsh
					var scrollDiv = document.createElement('div')
					scrollDiv.className = 'modal-scrollbar-measure'
					this.$body.append(scrollDiv)
					var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
					this.$body[0].removeChild(scrollDiv)
					return scrollbarWidth
				}


				// MODAL PLUGIN DEFINITION
				// =======================

				function Plugin(option, _relatedTarget) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.modal')
						var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

						if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
						if (typeof option == 'string') data[option](_relatedTarget)
						else if (options.show) data.show(_relatedTarget)
					})
				}

				var old = $.fn.modal

				$.fn.modal = Plugin
				$.fn.modal.Constructor = Modal


				// MODAL NO CONFLICT
				// =================

				$.fn.modal.noConflict = function () {
					$.fn.modal = old
					return this
				}


				// MODAL DATA-API
				// ==============

				$(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
					var $this = $(this)
					var href = $this.attr('href')
					var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
					var option = $target.data('bs.modal') ? 'toggle' : $.extend({remote: !/#/.test(href) && href}, $target.data(), $this.data())

					if ($this.is('a')) e.preventDefault()

					$target.one('show.bs.modal', function (showEvent) {
						if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
						$target.one('hidden.bs.modal', function () {
							$this.is(':visible') && $this.trigger('focus')
						})
					})
					Plugin.call($target, option, this)
				})

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 439 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: transition.js v3.3.5
		 * http://getbootstrap.com/javascript/#transitions
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
				// ============================================================

				function transitionEnd() {
					var el = document.createElement('bootstrap')

					var transEndEventNames = {
						WebkitTransition: 'webkitTransitionEnd',
						MozTransition: 'transitionend',
						OTransition: 'oTransitionEnd otransitionend',
						transition: 'transitionend'
					}

					for (var name in transEndEventNames) {
						if (el.style[name] !== undefined) {
							return {end: transEndEventNames[name]}
						}
					}

					return false // explicit for ie8 (  ._.)
				}

				// http://blog.alexmaccaw.com/css-transitions
				$.fn.emulateTransitionEnd = function (duration) {
					var called = false
					var $el = this
					$(this).one('bsTransitionEnd', function () {
						called = true
					})
					var callback = function () {
						if (!called) $($el).trigger($.support.transition.end)
					}
					setTimeout(callback, duration)
					return this
				}

				$(function () {
					$.support.transition = transitionEnd()

					if (!$.support.transition) return

					$.event.special.bsTransitionEnd = {
						bindType: $.support.transition.end,
						delegateType: $.support.transition.end,
						handle: function (e) {
							if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
						}
					}
				})

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 440 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: alert.js v3.3.5
		 * http://getbootstrap.com/javascript/#alerts
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// ALERT CLASS DEFINITION
				// ======================

				var dismiss = '[data-dismiss="alert"]'
				var Alert = function (el) {
					$(el).on('click', dismiss, this.close)
				}

				Alert.VERSION = '3.3.5'

				Alert.TRANSITION_DURATION = 150

				Alert.prototype.close = function (e) {
					var $this = $(this)
					var selector = $this.attr('data-target')

					if (!selector) {
						selector = $this.attr('href')
						selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
					}

					var $parent = $(selector)

					if (e) e.preventDefault()

					if (!$parent.length) {
						$parent = $this.closest('.alert')
					}

					$parent.trigger(e = $.Event('close.bs.alert'))

					if (e.isDefaultPrevented()) return

					$parent.removeClass('in')

					function removeElement() {
						// detach from parent, fire event then clean up data
						$parent.detach().trigger('closed.bs.alert').remove()
					}

					$.support.transition && $parent.hasClass('fade') ?
						$parent
							.one('bsTransitionEnd', removeElement)
							.emulateTransitionEnd(Alert.TRANSITION_DURATION) :
						removeElement()
				}


				// ALERT PLUGIN DEFINITION
				// =======================

				function Plugin(option) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.alert')

						if (!data) $this.data('bs.alert', (data = new Alert(this)))
						if (typeof option == 'string') data[option].call($this)
					})
				}

				var old = $.fn.alert

				$.fn.alert = Plugin
				$.fn.alert.Constructor = Alert


				// ALERT NO CONFLICT
				// =================

				$.fn.alert.noConflict = function () {
					$.fn.alert = old
					return this
				}


				// ALERT DATA-API
				// ==============

				$(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 441 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: button.js v3.3.5
		 * http://getbootstrap.com/javascript/#buttons
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// BUTTON PUBLIC CLASS DEFINITION
				// ==============================

				var Button = function (element, options) {
					this.$element = $(element)
					this.options = $.extend({}, Button.DEFAULTS, options)
					this.isLoading = false
				}

				Button.VERSION = '3.3.5'

				Button.DEFAULTS = {
					loadingText: 'loading...'
				}

				Button.prototype.setState = function (state) {
					var d = 'disabled'
					var $el = this.$element
					var val = $el.is('input') ? 'val' : 'html'
					var data = $el.data()

					state += 'Text'

					if (data.resetText == null) $el.data('resetText', $el[val]())

					// push to event loop to allow forms to submit
					setTimeout($.proxy(function () {
						$el[val](data[state] == null ? this.options[state] : data[state])

						if (state == 'loadingText') {
							this.isLoading = true
							$el.addClass(d).attr(d, d)
						} else if (this.isLoading) {
							this.isLoading = false
							$el.removeClass(d).removeAttr(d)
						}
					}, this), 0)
				}

				Button.prototype.toggle = function () {
					var changed = true
					var $parent = this.$element.closest('[data-toggle="buttons"]')

					if ($parent.length) {
						var $input = this.$element.find('input')
						if ($input.prop('type') == 'radio') {
							if ($input.prop('checked')) changed = false
							$parent.find('.active').removeClass('active')
							this.$element.addClass('active')
						} else if ($input.prop('type') == 'checkbox') {
							if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
							this.$element.toggleClass('active')
						}
						$input.prop('checked', this.$element.hasClass('active'))
						if (changed) $input.trigger('change')
					} else {
						this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
						this.$element.toggleClass('active')
					}
				}


				// BUTTON PLUGIN DEFINITION
				// ========================

				function Plugin(option) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.button')
						var options = typeof option == 'object' && option

						if (!data) $this.data('bs.button', (data = new Button(this, options)))

						if (option == 'toggle') data.toggle()
						else if (option) data.setState(option)
					})
				}

				var old = $.fn.button

				$.fn.button = Plugin
				$.fn.button.Constructor = Button


				// BUTTON NO CONFLICT
				// ==================

				$.fn.button.noConflict = function () {
					$.fn.button = old
					return this
				}


				// BUTTON DATA-API
				// ===============

				$(document)
					.on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
						var $btn = $(e.target)
						if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
						Plugin.call($btn, 'toggle')
						if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
					})
					.on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
						$(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
					})

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 442 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: carousel.js v3.3.5
		 * http://getbootstrap.com/javascript/#carousel
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// CAROUSEL CLASS DEFINITION
				// =========================

				var Carousel = function (element, options) {
					this.$element = $(element)
					this.$indicators = this.$element.find('.carousel-indicators')
					this.options = options
					this.paused = null
					this.sliding = null
					this.interval = null
					this.$active = null
					this.$items = null

					this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

					this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
						.on('mouseenter.bs.carousel', $.proxy(this.pause, this))
						.on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
				}

				Carousel.VERSION = '3.3.5'

				Carousel.TRANSITION_DURATION = 600

				Carousel.DEFAULTS = {
					interval: 5000,
					pause: 'hover',
					wrap: true,
					keyboard: true
				}

				Carousel.prototype.keydown = function (e) {
					if (/input|textarea/i.test(e.target.tagName)) return
					switch (e.which) {
						case 37:
							this.prev();
							break
						case 39:
							this.next();
							break
						default:
							return
					}

					e.preventDefault()
				}

				Carousel.prototype.cycle = function (e) {
					e || (this.paused = false)

					this.interval && clearInterval(this.interval)

					this.options.interval
					&& !this.paused
					&& (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

					return this
				}

				Carousel.prototype.getItemIndex = function (item) {
					this.$items = item.parent().children('.item')
					return this.$items.index(item || this.$active)
				}

				Carousel.prototype.getItemForDirection = function (direction, active) {
					var activeIndex = this.getItemIndex(active)
					var willWrap = (direction == 'prev' && activeIndex === 0)
						|| (direction == 'next' && activeIndex == (this.$items.length - 1))
					if (willWrap && !this.options.wrap) return active
					var delta = direction == 'prev' ? -1 : 1
					var itemIndex = (activeIndex + delta) % this.$items.length
					return this.$items.eq(itemIndex)
				}

				Carousel.prototype.to = function (pos) {
					var that = this
					var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

					if (pos > (this.$items.length - 1) || pos < 0) return

					if (this.sliding)       return this.$element.one('slid.bs.carousel', function () {
						that.to(pos)
					}) // yes, "slid"
					if (activeIndex == pos) return this.pause().cycle()

					return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
				}

				Carousel.prototype.pause = function (e) {
					e || (this.paused = true)

					if (this.$element.find('.next, .prev').length && $.support.transition) {
						this.$element.trigger($.support.transition.end)
						this.cycle(true)
					}

					this.interval = clearInterval(this.interval)

					return this
				}

				Carousel.prototype.next = function () {
					if (this.sliding) return
					return this.slide('next')
				}

				Carousel.prototype.prev = function () {
					if (this.sliding) return
					return this.slide('prev')
				}

				Carousel.prototype.slide = function (type, next) {
					var $active = this.$element.find('.item.active')
					var $next = next || this.getItemForDirection(type, $active)
					var isCycling = this.interval
					var direction = type == 'next' ? 'left' : 'right'
					var that = this

					if ($next.hasClass('active')) return (this.sliding = false)

					var relatedTarget = $next[0]
					var slideEvent = $.Event('slide.bs.carousel', {
						relatedTarget: relatedTarget,
						direction: direction
					})
					this.$element.trigger(slideEvent)
					if (slideEvent.isDefaultPrevented()) return

					this.sliding = true

					isCycling && this.pause()

					if (this.$indicators.length) {
						this.$indicators.find('.active').removeClass('active')
						var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
						$nextIndicator && $nextIndicator.addClass('active')
					}

					var slidEvent = $.Event('slid.bs.carousel', {relatedTarget: relatedTarget, direction: direction}) // yes, "slid"
					if ($.support.transition && this.$element.hasClass('slide')) {
						$next.addClass(type)
						$next[0].offsetWidth // force reflow
						$active.addClass(direction)
						$next.addClass(direction)
						$active
							.one('bsTransitionEnd', function () {
								$next.removeClass([type, direction].join(' ')).addClass('active')
								$active.removeClass(['active', direction].join(' '))
								that.sliding = false
								setTimeout(function () {
									that.$element.trigger(slidEvent)
								}, 0)
							})
							.emulateTransitionEnd(Carousel.TRANSITION_DURATION)
					} else {
						$active.removeClass('active')
						$next.addClass('active')
						this.sliding = false
						this.$element.trigger(slidEvent)
					}

					isCycling && this.cycle()

					return this
				}


				// CAROUSEL PLUGIN DEFINITION
				// ==========================

				function Plugin(option) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.carousel')
						var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
						var action = typeof option == 'string' ? option : options.slide

						if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
						if (typeof option == 'number') data.to(option)
						else if (action) data[action]()
						else if (options.interval) data.pause().cycle()
					})
				}

				var old = $.fn.carousel

				$.fn.carousel = Plugin
				$.fn.carousel.Constructor = Carousel


				// CAROUSEL NO CONFLICT
				// ====================

				$.fn.carousel.noConflict = function () {
					$.fn.carousel = old
					return this
				}


				// CAROUSEL DATA-API
				// =================

				var clickHandler = function (e) {
					var href
					var $this = $(this)
					var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
					if (!$target.hasClass('carousel')) return
					var options = $.extend({}, $target.data(), $this.data())
					var slideIndex = $this.attr('data-slide-to')
					if (slideIndex) options.interval = false

					Plugin.call($target, options)

					if (slideIndex) {
						$target.data('bs.carousel').to(slideIndex)
					}

					e.preventDefault()
				}

				$(document)
					.on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
					.on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

				$(window).on('load', function () {
					$('[data-ride="carousel"]').each(function () {
						var $carousel = $(this)
						Plugin.call($carousel, $carousel.data())
					})
				})

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 443 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: collapse.js v3.3.5
		 * http://getbootstrap.com/javascript/#collapse
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// COLLAPSE PUBLIC CLASS DEFINITION
				// ================================

				var Collapse = function (element, options) {
					this.$element = $(element)
					this.options = $.extend({}, Collapse.DEFAULTS, options)
					this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
						'[data-toggle="collapse"][data-target="#' + element.id + '"]')
					this.transitioning = null

					if (this.options.parent) {
						this.$parent = this.getParent()
					} else {
						this.addAriaAndCollapsedClass(this.$element, this.$trigger)
					}

					if (this.options.toggle) this.toggle()
				}

				Collapse.VERSION = '3.3.5'

				Collapse.TRANSITION_DURATION = 350

				Collapse.DEFAULTS = {
					toggle: true
				}

				Collapse.prototype.dimension = function () {
					var hasWidth = this.$element.hasClass('width')
					return hasWidth ? 'width' : 'height'
				}

				Collapse.prototype.show = function () {
					if (this.transitioning || this.$element.hasClass('in')) return

					var activesData
					var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

					if (actives && actives.length) {
						activesData = actives.data('bs.collapse')
						if (activesData && activesData.transitioning) return
					}

					var startEvent = $.Event('show.bs.collapse')
					this.$element.trigger(startEvent)
					if (startEvent.isDefaultPrevented()) return

					if (actives && actives.length) {
						Plugin.call(actives, 'hide')
						activesData || actives.data('bs.collapse', null)
					}

					var dimension = this.dimension()

					this.$element
						.removeClass('collapse')
						.addClass('collapsing')[dimension](0)
						.attr('aria-expanded', true)

					this.$trigger
						.removeClass('collapsed')
						.attr('aria-expanded', true)

					this.transitioning = 1

					var complete = function () {
						this.$element
							.removeClass('collapsing')
							.addClass('collapse in')[dimension]('')
						this.transitioning = 0
						this.$element
							.trigger('shown.bs.collapse')
					}

					if (!$.support.transition) return complete.call(this)

					var scrollSize = $.camelCase(['scroll', dimension].join('-'))

					this.$element
						.one('bsTransitionEnd', $.proxy(complete, this))
						.emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
				}

				Collapse.prototype.hide = function () {
					if (this.transitioning || !this.$element.hasClass('in')) return

					var startEvent = $.Event('hide.bs.collapse')
					this.$element.trigger(startEvent)
					if (startEvent.isDefaultPrevented()) return

					var dimension = this.dimension()

					this.$element[dimension](this.$element[dimension]())[0].offsetHeight

					this.$element
						.addClass('collapsing')
						.removeClass('collapse in')
						.attr('aria-expanded', false)

					this.$trigger
						.addClass('collapsed')
						.attr('aria-expanded', false)

					this.transitioning = 1

					var complete = function () {
						this.transitioning = 0
						this.$element
							.removeClass('collapsing')
							.addClass('collapse')
							.trigger('hidden.bs.collapse')
					}

					if (!$.support.transition) return complete.call(this)

					this.$element
						[dimension](0)
						.one('bsTransitionEnd', $.proxy(complete, this))
						.emulateTransitionEnd(Collapse.TRANSITION_DURATION)
				}

				Collapse.prototype.toggle = function () {
					this[this.$element.hasClass('in') ? 'hide' : 'show']()
				}

				Collapse.prototype.getParent = function () {
					return $(this.options.parent)
						.find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
						.each($.proxy(function (i, element) {
							var $element = $(element)
							this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
						}, this))
						.end()
				}

				Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
					var isOpen = $element.hasClass('in')

					$element.attr('aria-expanded', isOpen)
					$trigger
						.toggleClass('collapsed', !isOpen)
						.attr('aria-expanded', isOpen)
				}

				function getTargetFromTrigger($trigger) {
					var href
					var target = $trigger.attr('data-target')
						|| (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

					return $(target)
				}


				// COLLAPSE PLUGIN DEFINITION
				// ==========================

				function Plugin(option) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.collapse')
						var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

						if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
						if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
						if (typeof option == 'string') data[option]()
					})
				}

				var old = $.fn.collapse

				$.fn.collapse = Plugin
				$.fn.collapse.Constructor = Collapse


				// COLLAPSE NO CONFLICT
				// ====================

				$.fn.collapse.noConflict = function () {
					$.fn.collapse = old
					return this
				}


				// COLLAPSE DATA-API
				// =================

				$(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
					var $this = $(this)

					if (!$this.attr('data-target')) e.preventDefault()

					var $target = getTargetFromTrigger($this)
					var data = $target.data('bs.collapse')
					var option = data ? 'toggle' : $this.data()

					Plugin.call($target, option)
				})

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 444 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: dropdown.js v3.3.5
		 * http://getbootstrap.com/javascript/#dropdowns
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// DROPDOWN CLASS DEFINITION
				// =========================

				var backdrop = '.dropdown-backdrop'
				var toggle = '[data-toggle="dropdown"]'
				var Dropdown = function (element) {
					$(element).on('click.bs.dropdown', this.toggle)
				}

				Dropdown.VERSION = '3.3.5'

				function getParent($this) {
					var selector = $this.attr('data-target')

					if (!selector) {
						selector = $this.attr('href')
						selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
					}

					var $parent = selector && $(selector)

					return $parent && $parent.length ? $parent : $this.parent()
				}

				function clearMenus(e) {
					if (e && e.which === 3) return
					$(backdrop).remove()
					$(toggle).each(function () {
						var $this = $(this)
						var $parent = getParent($this)
						var relatedTarget = {relatedTarget: this}

						if (!$parent.hasClass('open')) return

						if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

						$parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

						if (e.isDefaultPrevented()) return

						$this.attr('aria-expanded', 'false')
						$parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
					})
				}

				Dropdown.prototype.toggle = function (e) {
					var $this = $(this)

					if ($this.is('.disabled, :disabled')) return

					var $parent = getParent($this)
					var isActive = $parent.hasClass('open')

					clearMenus()

					if (!isActive) {
						if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
							// if mobile we use a backdrop because click events don't delegate
							$(document.createElement('div'))
								.addClass('dropdown-backdrop')
								.insertAfter($(this))
								.on('click', clearMenus)
						}

						var relatedTarget = {relatedTarget: this}
						$parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

						if (e.isDefaultPrevented()) return

						$this
							.trigger('focus')
							.attr('aria-expanded', 'true')

						$parent
							.toggleClass('open')
							.trigger('shown.bs.dropdown', relatedTarget)
					}

					return false
				}

				Dropdown.prototype.keydown = function (e) {
					if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

					var $this = $(this)

					e.preventDefault()
					e.stopPropagation()

					if ($this.is('.disabled, :disabled')) return

					var $parent = getParent($this)
					var isActive = $parent.hasClass('open')

					if (!isActive && e.which != 27 || isActive && e.which == 27) {
						if (e.which == 27) $parent.find(toggle).trigger('focus')
						return $this.trigger('click')
					}

					var desc = ' li:not(.disabled):visible a'
					var $items = $parent.find('.dropdown-menu' + desc)

					if (!$items.length) return

					var index = $items.index(e.target)

					if (e.which == 38 && index > 0)                 index--         // up
					if (e.which == 40 && index < $items.length - 1) index++         // down
					if (!~index)                                    index = 0

					$items.eq(index).trigger('focus')
				}


				// DROPDOWN PLUGIN DEFINITION
				// ==========================

				function Plugin(option) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.dropdown')

						if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
						if (typeof option == 'string') data[option].call($this)
					})
				}

				var old = $.fn.dropdown

				$.fn.dropdown = Plugin
				$.fn.dropdown.Constructor = Dropdown


				// DROPDOWN NO CONFLICT
				// ====================

				$.fn.dropdown.noConflict = function () {
					$.fn.dropdown = old
					return this
				}


				// APPLY TO STANDARD DROPDOWN ELEMENTS
				// ===================================

				$(document)
					.on('click.bs.dropdown.data-api', clearMenus)
					.on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
						e.stopPropagation()
					})
					.on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
					.on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
					.on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 445 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: tooltip.js v3.3.5
		 * http://getbootstrap.com/javascript/#tooltip
		 * Inspired by the original jQuery.tipsy by Jason Frame
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// TOOLTIP PUBLIC CLASS DEFINITION
				// ===============================

				var Tooltip = function (element, options) {
					this.type = null
					this.options = null
					this.enabled = null
					this.timeout = null
					this.hoverState = null
					this.$element = null
					this.inState = null

					this.init('tooltip', element, options)
				}

				Tooltip.VERSION = '3.3.5'

				Tooltip.TRANSITION_DURATION = 150

				Tooltip.DEFAULTS = {
					animation: true,
					placement: 'top',
					selector: false,
					template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
					trigger: 'hover focus',
					title: '',
					delay: 0,
					html: false,
					container: false,
					viewport: {
						selector: 'body',
						padding: 0
					}
				}

				Tooltip.prototype.init = function (type, element, options) {
					this.enabled = true
					this.type = type
					this.$element = $(element)
					this.options = this.getOptions(options)
					this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
					this.inState = {click: false, hover: false, focus: false}

					if (this.$element[0] instanceof document.constructor && !this.options.selector) {
						throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
					}

					var triggers = this.options.trigger.split(' ')

					for (var i = triggers.length; i--;) {
						var trigger = triggers[i]

						if (trigger == 'click') {
							this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
						} else if (trigger != 'manual') {
							var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin'
							var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

							this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
							this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
						}
					}

					this.options.selector ?
						(this._options = $.extend({}, this.options, {trigger: 'manual', selector: ''})) :
						this.fixTitle()
				}

				Tooltip.prototype.getDefaults = function () {
					return Tooltip.DEFAULTS
				}

				Tooltip.prototype.getOptions = function (options) {
					options = $.extend({}, this.getDefaults(), this.$element.data(), options)

					if (options.delay && typeof options.delay == 'number') {
						options.delay = {
							show: options.delay,
							hide: options.delay
						}
					}

					return options
				}

				Tooltip.prototype.getDelegateOptions = function () {
					var options = {}
					var defaults = this.getDefaults()

					this._options && $.each(this._options, function (key, value) {
						if (defaults[key] != value) options[key] = value
					})

					return options
				}

				Tooltip.prototype.enter = function (obj) {
					var self = obj instanceof this.constructor ?
						obj : $(obj.currentTarget).data('bs.' + this.type)

					if (!self) {
						self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
						$(obj.currentTarget).data('bs.' + this.type, self)
					}

					if (obj instanceof $.Event) {
						self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
					}

					if (self.tip().hasClass('in') || self.hoverState == 'in') {
						self.hoverState = 'in'
						return
					}

					clearTimeout(self.timeout)

					self.hoverState = 'in'

					if (!self.options.delay || !self.options.delay.show) return self.show()

					self.timeout = setTimeout(function () {
						if (self.hoverState == 'in') self.show()
					}, self.options.delay.show)
				}

				Tooltip.prototype.isInStateTrue = function () {
					for (var key in this.inState) {
						if (this.inState[key]) return true
					}

					return false
				}

				Tooltip.prototype.leave = function (obj) {
					var self = obj instanceof this.constructor ?
						obj : $(obj.currentTarget).data('bs.' + this.type)

					if (!self) {
						self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
						$(obj.currentTarget).data('bs.' + this.type, self)
					}

					if (obj instanceof $.Event) {
						self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
					}

					if (self.isInStateTrue()) return

					clearTimeout(self.timeout)

					self.hoverState = 'out'

					if (!self.options.delay || !self.options.delay.hide) return self.hide()

					self.timeout = setTimeout(function () {
						if (self.hoverState == 'out') self.hide()
					}, self.options.delay.hide)
				}

				Tooltip.prototype.show = function () {
					var e = $.Event('show.bs.' + this.type)

					if (this.hasContent() && this.enabled) {
						this.$element.trigger(e)

						var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
						if (e.isDefaultPrevented() || !inDom) return
						var that = this

						var $tip = this.tip()

						var tipId = this.getUID(this.type)

						this.setContent()
						$tip.attr('id', tipId)
						this.$element.attr('aria-describedby', tipId)

						if (this.options.animation) $tip.addClass('fade')

						var placement = typeof this.options.placement == 'function' ?
							this.options.placement.call(this, $tip[0], this.$element[0]) :
							this.options.placement

						var autoToken = /\s?auto?\s?/i
						var autoPlace = autoToken.test(placement)
						if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

						$tip
							.detach()
							.css({top: 0, left: 0, display: 'block'})
							.addClass(placement)
							.data('bs.' + this.type, this)

						this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
						this.$element.trigger('inserted.bs.' + this.type)

						var pos = this.getPosition()
						var actualWidth = $tip[0].offsetWidth
						var actualHeight = $tip[0].offsetHeight

						if (autoPlace) {
							var orgPlacement = placement
							var viewportDim = this.getPosition(this.$viewport)

							placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' :
								placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' :
									placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' :
										placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' :
											placement

							$tip
								.removeClass(orgPlacement)
								.addClass(placement)
						}

						var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

						this.applyPlacement(calculatedOffset, placement)

						var complete = function () {
							var prevHoverState = that.hoverState
							that.$element.trigger('shown.bs.' + that.type)
							that.hoverState = null

							if (prevHoverState == 'out') that.leave(that)
						}

						$.support.transition && this.$tip.hasClass('fade') ?
							$tip
								.one('bsTransitionEnd', complete)
								.emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
							complete()
					}
				}

				Tooltip.prototype.applyPlacement = function (offset, placement) {
					var $tip = this.tip()
					var width = $tip[0].offsetWidth
					var height = $tip[0].offsetHeight

					// manually read margins because getBoundingClientRect includes difference
					var marginTop = parseInt($tip.css('margin-top'), 10)
					var marginLeft = parseInt($tip.css('margin-left'), 10)

					// we must check for NaN for ie 8/9
					if (isNaN(marginTop))  marginTop = 0
					if (isNaN(marginLeft)) marginLeft = 0

					offset.top += marginTop
					offset.left += marginLeft

					// $.fn.offset doesn't round pixel values
					// so we use setOffset directly with our own function B-0
					$.offset.setOffset($tip[0], $.extend({
						using: function (props) {
							$tip.css({
								top: Math.round(props.top),
								left: Math.round(props.left)
							})
						}
					}, offset), 0)

					$tip.addClass('in')

					// check to see if placing tip in new offset caused the tip to resize itself
					var actualWidth = $tip[0].offsetWidth
					var actualHeight = $tip[0].offsetHeight

					if (placement == 'top' && actualHeight != height) {
						offset.top = offset.top + height - actualHeight
					}

					var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

					if (delta.left) offset.left += delta.left
					else offset.top += delta.top

					var isVertical = /top|bottom/.test(placement)
					var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
					var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

					$tip.offset(offset)
					this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
				}

				Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
					this.arrow()
						.css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
						.css(isVertical ? 'top' : 'left', '')
				}

				Tooltip.prototype.setContent = function () {
					var $tip = this.tip()
					var title = this.getTitle()

					$tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
					$tip.removeClass('fade in top bottom left right')
				}

				Tooltip.prototype.hide = function (callback) {
					var that = this
					var $tip = $(this.$tip)
					var e = $.Event('hide.bs.' + this.type)

					function complete() {
						if (that.hoverState != 'in') $tip.detach()
						that.$element
							.removeAttr('aria-describedby')
							.trigger('hidden.bs.' + that.type)
						callback && callback()
					}

					this.$element.trigger(e)

					if (e.isDefaultPrevented()) return

					$tip.removeClass('in')

					$.support.transition && $tip.hasClass('fade') ?
						$tip
							.one('bsTransitionEnd', complete)
							.emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
						complete()

					this.hoverState = null

					return this
				}

				Tooltip.prototype.fixTitle = function () {
					var $e = this.$element
					if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
						$e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
					}
				}

				Tooltip.prototype.hasContent = function () {
					return this.getTitle()
				}

				Tooltip.prototype.getPosition = function ($element) {
					$element = $element || this.$element

					var el = $element[0]
					var isBody = el.tagName == 'BODY'

					var elRect = el.getBoundingClientRect()
					if (elRect.width == null) {
						// width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
						elRect = $.extend({}, elRect, {
							width: elRect.right - elRect.left,
							height: elRect.bottom - elRect.top
						})
					}
					var elOffset = isBody ? {top: 0, left: 0} : $element.offset()
					var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()}
					var outerDims = isBody ? {width: $(window).width(), height: $(window).height()} : null

					return $.extend({}, elRect, scroll, outerDims, elOffset)
				}

				Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
					return placement == 'bottom' ? {
						top: pos.top + pos.height,
						left: pos.left + pos.width / 2 - actualWidth / 2
					} :
						placement == 'top' ? {
							top: pos.top - actualHeight,
							left: pos.left + pos.width / 2 - actualWidth / 2
						} :
							placement == 'left' ? {
								top: pos.top + pos.height / 2 - actualHeight / 2,
								left: pos.left - actualWidth
							} :
								/* placement == 'right' */ {
								top: pos.top + pos.height / 2 - actualHeight / 2,
								left: pos.left + pos.width
							}

				}

				Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
					var delta = {top: 0, left: 0}
					if (!this.$viewport) return delta

					var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
					var viewportDimensions = this.getPosition(this.$viewport)

					if (/right|left/.test(placement)) {
						var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll
						var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
						if (topEdgeOffset < viewportDimensions.top) { // top overflow
							delta.top = viewportDimensions.top - topEdgeOffset
						} else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
							delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
						}
					} else {
						var leftEdgeOffset = pos.left - viewportPadding
						var rightEdgeOffset = pos.left + viewportPadding + actualWidth
						if (leftEdgeOffset < viewportDimensions.left) { // left overflow
							delta.left = viewportDimensions.left - leftEdgeOffset
						} else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
							delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
						}
					}

					return delta
				}

				Tooltip.prototype.getTitle = function () {
					var title
					var $e = this.$element
					var o = this.options

					title = $e.attr('data-original-title')
						|| (typeof o.title == 'function' ? o.title.call($e[0]) : o.title)

					return title
				}

				Tooltip.prototype.getUID = function (prefix) {
					do prefix += ~~(Math.random() * 1000000)
					while (document.getElementById(prefix))
					return prefix
				}

				Tooltip.prototype.tip = function () {
					if (!this.$tip) {
						this.$tip = $(this.options.template)
						if (this.$tip.length != 1) {
							throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
						}
					}
					return this.$tip
				}

				Tooltip.prototype.arrow = function () {
					return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
				}

				Tooltip.prototype.enable = function () {
					this.enabled = true
				}

				Tooltip.prototype.disable = function () {
					this.enabled = false
				}

				Tooltip.prototype.toggleEnabled = function () {
					this.enabled = !this.enabled
				}

				Tooltip.prototype.toggle = function (e) {
					var self = this
					if (e) {
						self = $(e.currentTarget).data('bs.' + this.type)
						if (!self) {
							self = new this.constructor(e.currentTarget, this.getDelegateOptions())
							$(e.currentTarget).data('bs.' + this.type, self)
						}
					}

					if (e) {
						self.inState.click = !self.inState.click
						if (self.isInStateTrue()) self.enter(self)
						else self.leave(self)
					} else {
						self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
					}
				}

				Tooltip.prototype.destroy = function () {
					var that = this
					clearTimeout(this.timeout)
					this.hide(function () {
						that.$element.off('.' + that.type).removeData('bs.' + that.type)
						if (that.$tip) {
							that.$tip.detach()
						}
						that.$tip = null
						that.$arrow = null
						that.$viewport = null
					})
				}


				// TOOLTIP PLUGIN DEFINITION
				// =========================

				function Plugin(option) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.tooltip')
						var options = typeof option == 'object' && option

						if (!data && /destroy|hide/.test(option)) return
						if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
						if (typeof option == 'string') data[option]()
					})
				}

				var old = $.fn.tooltip

				$.fn.tooltip = Plugin
				$.fn.tooltip.Constructor = Tooltip


				// TOOLTIP NO CONFLICT
				// ===================

				$.fn.tooltip.noConflict = function () {
					$.fn.tooltip = old
					return this
				}

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 446 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: popover.js v3.3.5
		 * http://getbootstrap.com/javascript/#popovers
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// POPOVER PUBLIC CLASS DEFINITION
				// ===============================

				var Popover = function (element, options) {
					this.init('popover', element, options)
				}

				if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

				Popover.VERSION = '3.3.5'

				Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
					placement: 'right',
					trigger: 'click',
					content: '',
					template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
				})


				// NOTE: POPOVER EXTENDS tooltip.js
				// ================================

				Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

				Popover.prototype.constructor = Popover

				Popover.prototype.getDefaults = function () {
					return Popover.DEFAULTS
				}

				Popover.prototype.setContent = function () {
					var $tip = this.tip()
					var title = this.getTitle()
					var content = this.getContent()

					$tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
					$tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
						this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
						](content)

					$tip.removeClass('fade top bottom left right in')

					// IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
					// this manually by checking the contents.
					if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
				}

				Popover.prototype.hasContent = function () {
					return this.getTitle() || this.getContent()
				}

				Popover.prototype.getContent = function () {
					var $e = this.$element
					var o = this.options

					return $e.attr('data-content')
						|| (typeof o.content == 'function' ?
							o.content.call($e[0]) :
							o.content)
				}

				Popover.prototype.arrow = function () {
					return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
				}


				// POPOVER PLUGIN DEFINITION
				// =========================

				function Plugin(option) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.popover')
						var options = typeof option == 'object' && option

						if (!data && /destroy|hide/.test(option)) return
						if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
						if (typeof option == 'string') data[option]()
					})
				}

				var old = $.fn.popover

				$.fn.popover = Plugin
				$.fn.popover.Constructor = Popover


				// POPOVER NO CONFLICT
				// ===================

				$.fn.popover.noConflict = function () {
					$.fn.popover = old
					return this
				}

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 447 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: scrollspy.js v3.3.5
		 * http://getbootstrap.com/javascript/#scrollspy
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// SCROLLSPY CLASS DEFINITION
				// ==========================

				function ScrollSpy(element, options) {
					this.$body = $(document.body)
					this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
					this.options = $.extend({}, ScrollSpy.DEFAULTS, options)
					this.selector = (this.options.target || '') + ' .nav li > a'
					this.offsets = []
					this.targets = []
					this.activeTarget = null
					this.scrollHeight = 0

					this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
					this.refresh()
					this.process()
				}

				ScrollSpy.VERSION = '3.3.5'

				ScrollSpy.DEFAULTS = {
					offset: 10
				}

				ScrollSpy.prototype.getScrollHeight = function () {
					return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
				}

				ScrollSpy.prototype.refresh = function () {
					var that = this
					var offsetMethod = 'offset'
					var offsetBase = 0

					this.offsets = []
					this.targets = []
					this.scrollHeight = this.getScrollHeight()

					if (!$.isWindow(this.$scrollElement[0])) {
						offsetMethod = 'position'
						offsetBase = this.$scrollElement.scrollTop()
					}

					this.$body
						.find(this.selector)
						.map(function () {
							var $el = $(this)
							var href = $el.data('target') || $el.attr('href')
							var $href = /^#./.test(href) && $(href)

							return ($href
								&& $href.length
								&& $href.is(':visible')
								&& [[$href[offsetMethod]().top + offsetBase, href]]) || null
						})
						.sort(function (a, b) {
							return a[0] - b[0]
						})
						.each(function () {
							that.offsets.push(this[0])
							that.targets.push(this[1])
						})
				}

				ScrollSpy.prototype.process = function () {
					var scrollTop = this.$scrollElement.scrollTop() + this.options.offset
					var scrollHeight = this.getScrollHeight()
					var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height()
					var offsets = this.offsets
					var targets = this.targets
					var activeTarget = this.activeTarget
					var i

					if (this.scrollHeight != scrollHeight) {
						this.refresh()
					}

					if (scrollTop >= maxScroll) {
						return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
					}

					if (activeTarget && scrollTop < offsets[0]) {
						this.activeTarget = null
						return this.clear()
					}

					for (i = offsets.length; i--;) {
						activeTarget != targets[i]
						&& scrollTop >= offsets[i]
						&& (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
						&& this.activate(targets[i])
					}
				}

				ScrollSpy.prototype.activate = function (target) {
					this.activeTarget = target

					this.clear()

					var selector = this.selector +
						'[data-target="' + target + '"],' +
						this.selector + '[href="' + target + '"]'

					var active = $(selector)
						.parents('li')
						.addClass('active')

					if (active.parent('.dropdown-menu').length) {
						active = active
							.closest('li.dropdown')
							.addClass('active')
					}

					active.trigger('activate.bs.scrollspy')
				}

				ScrollSpy.prototype.clear = function () {
					$(this.selector)
						.parentsUntil(this.options.target, '.active')
						.removeClass('active')
				}


				// SCROLLSPY PLUGIN DEFINITION
				// ===========================

				function Plugin(option) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.scrollspy')
						var options = typeof option == 'object' && option

						if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
						if (typeof option == 'string') data[option]()
					})
				}

				var old = $.fn.scrollspy

				$.fn.scrollspy = Plugin
				$.fn.scrollspy.Constructor = ScrollSpy


				// SCROLLSPY NO CONFLICT
				// =====================

				$.fn.scrollspy.noConflict = function () {
					$.fn.scrollspy = old
					return this
				}


				// SCROLLSPY DATA-API
				// ==================

				$(window).on('load.bs.scrollspy.data-api', function () {
					$('[data-spy="scroll"]').each(function () {
						var $spy = $(this)
						Plugin.call($spy, $spy.data())
					})
				})

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 448 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: tab.js v3.3.5
		 * http://getbootstrap.com/javascript/#tabs
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// TAB CLASS DEFINITION
				// ====================

				var Tab = function (element) {
					// jscs:disable requireDollarBeforejQueryAssignment
					this.element = $(element)
					// jscs:enable requireDollarBeforejQueryAssignment
				}

				Tab.VERSION = '3.3.5'

				Tab.TRANSITION_DURATION = 150

				Tab.prototype.show = function () {
					var $this = this.element
					var $ul = $this.closest('ul:not(.dropdown-menu)')
					var selector = $this.data('target')

					if (!selector) {
						selector = $this.attr('href')
						selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
					}

					if ($this.parent('li').hasClass('active')) return

					var $previous = $ul.find('.active:last a')
					var hideEvent = $.Event('hide.bs.tab', {
						relatedTarget: $this[0]
					})
					var showEvent = $.Event('show.bs.tab', {
						relatedTarget: $previous[0]
					})

					$previous.trigger(hideEvent)
					$this.trigger(showEvent)

					if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

					var $target = $(selector)

					this.activate($this.closest('li'), $ul)
					this.activate($target, $target.parent(), function () {
						$previous.trigger({
							type: 'hidden.bs.tab',
							relatedTarget: $this[0]
						})
						$this.trigger({
							type: 'shown.bs.tab',
							relatedTarget: $previous[0]
						})
					})
				}

				Tab.prototype.activate = function (element, container, callback) {
					var $active = container.find('> .active')
					var transition = callback
						&& $.support.transition
						&& ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

					function next() {
						$active
							.removeClass('active')
							.find('> .dropdown-menu > .active')
							.removeClass('active')
							.end()
							.find('[data-toggle="tab"]')
							.attr('aria-expanded', false)

						element
							.addClass('active')
							.find('[data-toggle="tab"]')
							.attr('aria-expanded', true)

						if (transition) {
							element[0].offsetWidth // reflow for transition
							element.addClass('in')
						} else {
							element.removeClass('fade')
						}

						if (element.parent('.dropdown-menu').length) {
							element
								.closest('li.dropdown')
								.addClass('active')
								.end()
								.find('[data-toggle="tab"]')
								.attr('aria-expanded', true)
						}

						callback && callback()
					}

					$active.length && transition ?
						$active
							.one('bsTransitionEnd', next)
							.emulateTransitionEnd(Tab.TRANSITION_DURATION) :
						next()

					$active.removeClass('in')
				}


				// TAB PLUGIN DEFINITION
				// =====================

				function Plugin(option) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.tab')

						if (!data) $this.data('bs.tab', (data = new Tab(this)))
						if (typeof option == 'string') data[option]()
					})
				}

				var old = $.fn.tab

				$.fn.tab = Plugin
				$.fn.tab.Constructor = Tab


				// TAB NO CONFLICT
				// ===============

				$.fn.tab.noConflict = function () {
					$.fn.tab = old
					return this
				}


				// TAB DATA-API
				// ============

				var clickHandler = function (e) {
					e.preventDefault()
					Plugin.call($(this), 'show')
				}

				$(document)
					.on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
					.on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 449 */
	/***/ function (module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */
		(function (jQuery) {/* ========================================================================
		 * Bootstrap: affix.js v3.3.5
		 * http://getbootstrap.com/javascript/#affix
		 * ========================================================================
		 * Copyright 2011-2015 Twitter, Inc.
		 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		 * ======================================================================== */


			+function ($) {
				'use strict';

				// AFFIX CLASS DEFINITION
				// ======================

				var Affix = function (element, options) {
					this.options = $.extend({}, Affix.DEFAULTS, options)

					this.$target = $(this.options.target)
						.on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
						.on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this))

					this.$element = $(element)
					this.affixed = null
					this.unpin = null
					this.pinnedOffset = null

					this.checkPosition()
				}

				Affix.VERSION = '3.3.5'

				Affix.RESET = 'affix affix-top affix-bottom'

				Affix.DEFAULTS = {
					offset: 0,
					target: window
				}

				Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
					var scrollTop = this.$target.scrollTop()
					var position = this.$element.offset()
					var targetHeight = this.$target.height()

					if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

					if (this.affixed == 'bottom') {
						if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
						return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
					}

					var initializing = this.affixed == null
					var colliderTop = initializing ? scrollTop : position.top
					var colliderHeight = initializing ? targetHeight : height

					if (offsetTop != null && scrollTop <= offsetTop) return 'top'
					if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

					return false
				}

				Affix.prototype.getPinnedOffset = function () {
					if (this.pinnedOffset) return this.pinnedOffset
					this.$element.removeClass(Affix.RESET).addClass('affix')
					var scrollTop = this.$target.scrollTop()
					var position = this.$element.offset()
					return (this.pinnedOffset = position.top - scrollTop)
				}

				Affix.prototype.checkPositionWithEventLoop = function () {
					setTimeout($.proxy(this.checkPosition, this), 1)
				}

				Affix.prototype.checkPosition = function () {
					if (!this.$element.is(':visible')) return

					var height = this.$element.height()
					var offset = this.options.offset
					var offsetTop = offset.top
					var offsetBottom = offset.bottom
					var scrollHeight = Math.max($(document).height(), $(document.body).height())

					if (typeof offset != 'object')         offsetBottom = offsetTop = offset
					if (typeof offsetTop == 'function')    offsetTop = offset.top(this.$element)
					if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

					var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

					if (this.affixed != affix) {
						if (this.unpin != null) this.$element.css('top', '')

						var affixType = 'affix' + (affix ? '-' + affix : '')
						var e = $.Event(affixType + '.bs.affix')

						this.$element.trigger(e)

						if (e.isDefaultPrevented()) return

						this.affixed = affix
						this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

						this.$element
							.removeClass(Affix.RESET)
							.addClass(affixType)
							.trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
					}

					if (affix == 'bottom') {
						this.$element.offset({
							top: scrollHeight - height - offsetBottom
						})
					}
				}


				// AFFIX PLUGIN DEFINITION
				// =======================

				function Plugin(option) {
					return this.each(function () {
						var $this = $(this)
						var data = $this.data('bs.affix')
						var options = typeof option == 'object' && option

						if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
						if (typeof option == 'string') data[option]()
					})
				}

				var old = $.fn.affix

				$.fn.affix = Plugin
				$.fn.affix.Constructor = Affix


				// AFFIX NO CONFLICT
				// =================

				$.fn.affix.noConflict = function () {
					$.fn.affix = old
					return this
				}


				// AFFIX DATA-API
				// ==============

				$(window).on('load', function () {
					$('[data-spy="affix"]').each(function () {
						var $spy = $(this)
						var data = $spy.data()

						data.offset = data.offset || {}

						if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
						if (data.offsetTop != null) data.offset.top = data.offsetTop

						Plugin.call($spy, data)
					})
				})

			}(jQuery);

			/* WEBPACK VAR INJECTION */
		}.call(exports, __webpack_require__(239)))

		/***/
	},
	/* 450 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Created by dennis on 27/07/2015.
		 */
		'use strict';

		__webpack_require__(451);

		//import './helpers/helpers';
		//import './resources/resources';
		//import './services/services';

		/***/
	},
	/* 451 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';

		var _createDecoratedClass = (function () {
			function defineProperties(target, descriptors, initializers) {
				for (var i = 0; i < descriptors.length; i++) {
					var descriptor = descriptors[i];
					var decorators = descriptor.decorators;
					var key = descriptor.key;
					delete descriptor.key;
					delete descriptor.decorators;
					descriptor.enumerable = descriptor.enumerable || false;
					descriptor.configurable = true;
					if ('value' in descriptor || descriptor.initializer) descriptor.writable = true;
					if (decorators) {
						for (var f = 0; f < decorators.length; f++) {
							var decorator = decorators[f];
							if (typeof decorator === 'function') {
								descriptor = decorator(target, key, descriptor) || descriptor;
							} else {
								throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator);
							}
						}
						if (descriptor.initializer !== undefined) {
							initializers[key] = descriptor;
							continue;
						}
					}
					Object.defineProperty(target, key, descriptor);
				}
			}

			return function (Constructor, protoProps, staticProps, protoInitializers, staticInitializers) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps, protoInitializers);
				if (staticProps) defineProperties(Constructor, staticProps, staticInitializers);
				return Constructor;
			};
		})();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError('Cannot call a class as a function');
			}
		}

		var _annotationsNgDecorator = __webpack_require__(452);

		var Configuration = (function () {
			function Configuration() {
				_classCallCheck(this, Configuration);
			}

			_createDecoratedClass(Configuration, null, [{
				key: 'configFactory',
				decorators: [(0, _annotationsNgDecorator.Inject)('localStorageServiceProvider', '$compileProvider', '$httpProvider', '$urlRouterProvider'), (0, _annotationsNgDecorator.Config)()],
				value: function configFactory(localStorageServiceProvider, $compileProvider, $httpProvider, $urlRouterProvider) {
					localStorageServiceProvider.setPrefix('crm-plugins');
					$compileProvider.debugInfoEnabled(false);
					$httpProvider.useApplyAsync(true);
					$urlRouterProvider.otherwise('/rtdemo');
					$urlRouterProvider.when('/', '/rtdemo');
				}
			}]);

			return Configuration;
		})();

		var OnRun = (function () {
			function OnRun() {
				_classCallCheck(this, OnRun);
			}

			_createDecoratedClass(OnRun, null, [{
				key: 'runFactory',
				decorators: [(0, _annotationsNgDecorator.Inject)('localStorageService', '$rootScope'), (0, _annotationsNgDecorator.Run)()],
				value: function runFactory(localStorageService, $rootScope) {
					localStorageService.clearAll();
					$rootScope.$on('$viewContentLoaded', function (event) {
						//prettyPrint();
					});
				}
			}]);

			return OnRun;
		})();

		/***/
	},
	/* 452 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Created by dennis on 28/07/2015.
		 */

		'use strict';

		Object.defineProperty(exports, '__esModule', {
			value: true
		});

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		var _angular = __webpack_require__(242);

		var _angular2 = _interopRequireDefault(_angular);

		var _mainModule = __webpack_require__(453);

		var _mainModule2 = _interopRequireDefault(_mainModule);

		function Run() {
			return function decorator(target, key, descriptor) {
				_mainModule2['default'].run(descriptor.value);
			};
		}

		function Config() {
			return function decorator(target, key, descriptor) {
				_mainModule2['default'].config(descriptor.value);
			};
		}

		function Service(options) {
			return function decorator(target) {
				if (!options.serviceName) {
					throw new Error('@Service() must contains serviceName property!');
				}
				_mainModule2['default'].service(options.serviceName, target);
			};
		}

		function Filter(filter) {
			return function decorator(target, key, descriptor) {
				if (!filter.filterName) {
					throw new Error('@Filter() must contains filterName property!');
				}
				_mainModule2['default'].filter(filter.filterName, descriptor.value);
			};
		}

		function Inject() {
			for (var _len = arguments.length, dependencies = Array(_len), _key = 0; _key < _len; _key++) {
				dependencies[_key] = arguments[_key];
			}

			return function decorator(target, key, descriptor) {
				// if it's true then we injecting dependencies into function and not Class constructor
				if (descriptor) {
					var fn = descriptor.value;
					fn.$inject = dependencies;
				} else {
					target.$inject = dependencies;
				}
			};
		}

		exports.Inject = Inject;
		exports.Run = Run;
		exports.Config = Config;
		exports.Service = Service;
		exports.Filter = Filter;

		/***/
	},
	/* 453 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Created by dennis on 27/07/2015.
		 */
		'use strict';

		Object.defineProperty(exports, '__esModule', {
			value: true
		});

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		var _angular = __webpack_require__(242);

		var _angular2 = _interopRequireDefault(_angular);

		var crmPlugins = _angular2['default'].module('demoApp', [
			// angular modules
			'ngAnimate', 'ngMessages', 'ui.router', 'react',
			// 3rd party modules
			'LocalStorageModule']);

		exports['default'] = crmPlugins;
		module.exports = exports['default'];

		/***/
	},
	/* 454 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError('Cannot call a class as a function');
			}
		}

		var _mainAppHtml = __webpack_require__(455);

		var _mainAppHtml2 = _interopRequireDefault(_mainAppHtml);

		var _annotationsRouteDecorator = __webpack_require__(456);

		__webpack_require__(457);

		__webpack_require__(459);

		//

		var Routes = (function () {
			function Routes() {
				_classCallCheck(this, _Routes);

				this.date = new Date();
			}

			var _Routes = Routes;
			Routes = (0, _annotationsRouteDecorator.RouteConfig)('app', {
					url: '',
					abstract: true,
					template: _mainAppHtml2['default']
				})(Routes) || Routes;
			return Routes;
		})();

		/***/
	},
	/* 455 */
	/***/ function (module, exports) {

		module.exports = "<header></header>\r\n<main>\r\n    <span class=\"container-fluid\">\r\n        <span class=\"row\">\r\n            <span class=\"col-md-2\">\r\n               <span class=\"row\">\r\n                       <ul class=\"nav nav-list well\">\r\n                           <li class=\"nav-header title\">\r\n                               <span class=\"title-text\" title=\"components demo\">Components</span>\r\n                           </li>\r\n\r\n                           <li class=\"api-list-item expand\">\r\n                               <a class=\"guide\" ui-sref=\".rtdemo\">react demo</a>\r\n                           </li>\r\n\r\n                           <li class=\"api-list-item expand\">\r\n                               <a class=\"guide\" ui-sref=\".viewdemo\">directive demo</a>\r\n                           </li>\r\n\r\n                           <li class=\"api-list-item expand\">\r\n                               <a class=\"guide\" ui-sref=\".viewdemo\">view demo</a>\r\n                           </li>\r\n                       </ul>\r\n               </span>\r\n            </span>\r\n            <span class=\"col-md-9 ui-view-container\">\r\n                 <span ui-view class=\"well1\"></span>\r\n            </span>\r\n        </span>\r\n    </span>\r\n</main>\r\n<footer></footer>"

		/***/
	},
	/* 456 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Created by dennis on 28/07/2015.
		 */

		'use strict';

		Object.defineProperty(exports, '__esModule', {
			value: true
		});

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		var _angular = __webpack_require__(242);

		var _angular2 = _interopRequireDefault(_angular);

		var _mainModule = __webpack_require__(453);

		var _mainModule2 = _interopRequireDefault(_mainModule);

		function RouteConfig(stateName, options) {
			return function decorator(target) {
				_mainModule2['default'].config(['$stateProvider', function ($stateProvider) {
					$stateProvider.state(stateName, Object.assign({
						controller: target,
						controllerAs: 'vm'
					}, options));
				}]);
				_mainModule2['default'].controller(target.name, target);
			};
		}

		exports.RouteConfig = RouteConfig;

		/***/
	},
	/* 457 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError('Cannot call a class as a function');
			}
		}

		var _reactDemoHtml = __webpack_require__(458);

		var _reactDemoHtml2 = _interopRequireDefault(_reactDemoHtml);

		var _annotationsRouteDecorator = __webpack_require__(456);

		//

		var RtDemo = (function () {
			function RtDemo() {
				_classCallCheck(this, _RtDemo);

				this.date = new Date();
			}

			var _RtDemo = RtDemo;
			RtDemo = (0, _annotationsRouteDecorator.RouteConfig)('app.rtdemo', {
					url: '/rtdemo',
					template: _reactDemoHtml2['default']
				})(RtDemo) || RtDemo;
			return RtDemo;
		})();

		/***/
	},
	/* 458 */
	/***/ function (module, exports) {

		module.exports = "<rt-component-demo></rt-component-demo>\r\n\r\n"

		/***/
	},
	/* 459 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError('Cannot call a class as a function');
			}
		}

		var _viewDemoHtml = __webpack_require__(460);

		var _viewDemoHtml2 = _interopRequireDefault(_viewDemoHtml);

		var _annotationsRouteDecorator = __webpack_require__(456);

		//

		var ViewDemo = (function () {
			function ViewDemo() {
				_classCallCheck(this, _ViewDemo);
			}

			var _ViewDemo = ViewDemo;
			ViewDemo = (0, _annotationsRouteDecorator.RouteConfig)('app.viewdemo', {
					url: '/viewdemo',
					template: _viewDemoHtml2['default']
				})(ViewDemo) || ViewDemo;
			return ViewDemo;
		})();

		//nothing here, implement for template logic

		/***/
	},
	/* 460 */
	/***/ function (module, exports) {

		module.exports = "<ng-view-demo></ng-view-demo>"

		/***/
	},
	/* 461 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Created by dennis on 27/07/2015.
		 */
		'use strict';

		__webpack_require__(462);

		__webpack_require__(471);

		/***/
	},
	/* 462 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';

		var _createClass = (function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];
					descriptor.enumerable = descriptor.enumerable || false;
					descriptor.configurable = true;
					if ('value' in descriptor) descriptor.writable = true;
					Object.defineProperty(target, descriptor.key, descriptor);
				}
			}

			return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);
				if (staticProps) defineProperties(Constructor, staticProps);
				return Constructor;
			};
		})();

		var _get = function get(_x, _x2, _x3) {
			var _again = true;
			_function: while (_again) {
				var object = _x, property = _x2, receiver = _x3;
				desc = parent = getter = undefined;
				_again = false;
				if (object === null) object = Function.prototype;
				var desc = Object.getOwnPropertyDescriptor(object, property);
				if (desc === undefined) {
					var parent = Object.getPrototypeOf(object);
					if (parent === null) {
						return undefined;
					} else {
						_x = parent;
						_x2 = property;
						_x3 = receiver;
						_again = true;
						continue _function;
					}
				} else if ('value' in desc) {
					return desc.value;
				} else {
					var getter = desc.get;
					if (getter === undefined) {
						return undefined;
					}
					return getter.call(receiver);
				}
			}
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError('Cannot call a class as a function');
			}
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== 'function' && superClass !== null) {
				throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
			}
			subClass.prototype = Object.create(superClass && superClass.prototype, {
				constructor: {
					value: subClass,
					enumerable: false,
					writable: true,
					configurable: true
				}
			});
			if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		__webpack_require__(463);

		var _annotationsDirectiveDecorator = __webpack_require__(467);

		var _reactAddons = __webpack_require__(247);

		var _reactAddons2 = _interopRequireDefault(_reactAddons);

		var _rtDemoTemplateRt = __webpack_require__(470);

		var _rtDemoTemplateRt2 = _interopRequireDefault(_rtDemoTemplateRt);

		var _coreUtilsAppUtils = __webpack_require__(468);

		var _coreUtilsAppUtils2 = _interopRequireDefault(_coreUtilsAppUtils);

		//

		var RtComponentDemo = (function (_React$Component) {
			_inherits(RtComponentDemo, _React$Component);

			function RtComponentDemo(props) {
				_classCallCheck(this, _RtComponentDemo);

				_get(Object.getPrototypeOf(_RtComponentDemo.prototype), 'constructor', this).call(this, props);
				console.log(_coreUtilsAppUtils2['default'].getService("$window"));
				this.state = {
					items: ['One', 'Two', 'Three']
				};
			}

			_createClass(RtComponentDemo, [{
				key: 'render',
				value: function render() {
					return _rtDemoTemplateRt2['default'].apply(this);
				}
			}]);

			var _RtComponentDemo = RtComponentDemo;
			RtComponentDemo = (0, _annotationsDirectiveDecorator.ReactView)({
					propsToBind: ['demoItems']
				})(RtComponentDemo) || RtComponentDemo;
			return RtComponentDemo;
		})(_reactAddons2['default'].Component);

		/***/
	},
	/* 463 */
	/***/ function (module, exports, __webpack_require__) {

		// style-loader: Adds some css to the DOM by adding a <style> tag

		// load the styles
		var content = __webpack_require__(464);
		if (typeof content === 'string') content = [[module.id, content, '']];
		// add the styles to the DOM
		var update = __webpack_require__(466)(content, {});
		if (content.locals) module.exports = content.locals;
		// Hot Module Replacement
		if (false) {
			// When the styles change, update the <style> tags
			if (!content.locals) {
				module.hot.accept("!!./../../../../../node_modules/css-loader/index.js!./rt-demo.css", function () {
					var newContent = require("!!./../../../../../node_modules/css-loader/index.js!./rt-demo.css");
					if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
					update(newContent);
				});
			}
			// When the module is disposed, remove the <style> tags
			module.hot.dispose(function () {
				update();
			});
		}

		/***/
	},
	/* 464 */
	/***/ function (module, exports, __webpack_require__) {

		exports = module.exports = __webpack_require__(465)();
		// imports


		// module
		exports.push([module.id, "", ""]);

		// exports


		/***/
	},
	/* 465 */
	/***/ function (module, exports) {

		/*
		 MIT License http://www.opensource.org/licenses/mit-license.php
		 Author Tobias Koppers @sokra
		 */
		// css base code, injected by the css-loader
		module.exports = function () {
			var list = [];

			// return the list of modules as css string
			list.toString = function toString() {
				var result = [];
				for (var i = 0; i < this.length; i++) {
					var item = this[i];
					if (item[2]) {
						result.push("@media " + item[2] + "{" + item[1] + "}");
					} else {
						result.push(item[1]);
					}
				}
				return result.join("");
			};

			// import a list of modules into the list
			list.i = function (modules, mediaQuery) {
				if (typeof modules === "string")
					modules = [[null, modules, ""]];
				var alreadyImportedModules = {};
				for (var i = 0; i < this.length; i++) {
					var id = this[i][0];
					if (typeof id === "number")
						alreadyImportedModules[id] = true;
				}
				for (i = 0; i < modules.length; i++) {
					var item = modules[i];
					// skip already imported module
					// this implementation is not 100% perfect for weird media query combinations
					//  when a module is imported multiple times with different media queries.
					//  I hope this will never occur (Hey this way we have smaller bundles)
					if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
						if (mediaQuery && !item[2]) {
							item[2] = mediaQuery;
						} else if (mediaQuery) {
							item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
						}
						list.push(item);
					}
				}
			};
			return list;
		};


		/***/
	},
	/* 466 */
	/***/ function (module, exports, __webpack_require__) {

		/*
		 MIT License http://www.opensource.org/licenses/mit-license.php
		 Author Tobias Koppers @sokra
		 */
		var stylesInDom = {},
			memoize = function (fn) {
				var memo;
				return function () {
					if (typeof memo === "undefined") memo = fn.apply(this, arguments);
					return memo;
				};
			},
			isOldIE = memoize(function () {
				return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
			}),
			getHeadElement = memoize(function () {
				return document.head || document.getElementsByTagName("head")[0];
			}),
			singletonElement = null,
			singletonCounter = 0;

		module.exports = function (list, options) {
			if (true) {
				if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
			}

			options = options || {};
			// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
			// tags it will allow on a page
			if (typeof options.singleton === "undefined") options.singleton = isOldIE();

			var styles = listToStyles(list);
			addStylesToDom(styles, options);

			return function update(newList) {
				var mayRemove = [];
				for (var i = 0; i < styles.length; i++) {
					var item = styles[i];
					var domStyle = stylesInDom[item.id];
					domStyle.refs--;
					mayRemove.push(domStyle);
				}
				if (newList) {
					var newStyles = listToStyles(newList);
					addStylesToDom(newStyles, options);
				}
				for (var i = 0; i < mayRemove.length; i++) {
					var domStyle = mayRemove[i];
					if (domStyle.refs === 0) {
						for (var j = 0; j < domStyle.parts.length; j++)
							domStyle.parts[j]();
						delete stylesInDom[domStyle.id];
					}
				}
			};
		}

		function addStylesToDom(styles, options) {
			for (var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				if (domStyle) {
					domStyle.refs++;
					for (var j = 0; j < domStyle.parts.length; j++) {
						domStyle.parts[j](item.parts[j]);
					}
					for (; j < item.parts.length; j++) {
						domStyle.parts.push(addStyle(item.parts[j], options));
					}
				} else {
					var parts = [];
					for (var j = 0; j < item.parts.length; j++) {
						parts.push(addStyle(item.parts[j], options));
					}
					stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
				}
			}
		}

		function listToStyles(list) {
			var styles = [];
			var newStyles = {};
			for (var i = 0; i < list.length; i++) {
				var item = list[i];
				var id = item[0];
				var css = item[1];
				var media = item[2];
				var sourceMap = item[3];
				var part = {css: css, media: media, sourceMap: sourceMap};
				if (!newStyles[id])
					styles.push(newStyles[id] = {id: id, parts: [part]});
				else
					newStyles[id].parts.push(part);
			}
			return styles;
		}

		function createStyleElement() {
			var styleElement = document.createElement("style");
			var head = getHeadElement();
			styleElement.type = "text/css";
			head.appendChild(styleElement);
			return styleElement;
		}

		function createLinkElement() {
			var linkElement = document.createElement("link");
			var head = getHeadElement();
			linkElement.rel = "stylesheet";
			head.appendChild(linkElement);
			return linkElement;
		}

		function addStyle(obj, options) {
			var styleElement, update, remove;

			if (options.singleton) {
				var styleIndex = singletonCounter++;
				styleElement = singletonElement || (singletonElement = createStyleElement());
				update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
				remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
			} else if (obj.sourceMap &&
				typeof URL === "function" &&
				typeof URL.createObjectURL === "function" &&
				typeof URL.revokeObjectURL === "function" &&
				typeof Blob === "function" &&
				typeof btoa === "function") {
				styleElement = createLinkElement();
				update = updateLink.bind(null, styleElement);
				remove = function () {
					styleElement.parentNode.removeChild(styleElement);
					if (styleElement.href)
						URL.revokeObjectURL(styleElement.href);
				};
			} else {
				styleElement = createStyleElement();
				update = applyToTag.bind(null, styleElement);
				remove = function () {
					styleElement.parentNode.removeChild(styleElement);
				};
			}

			update(obj);

			return function updateStyle(newObj) {
				if (newObj) {
					if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
						return;
					update(obj = newObj);
				} else {
					remove();
				}
			};
		}

		var replaceText = (function () {
			var textStore = [];

			return function (index, replacement) {
				textStore[index] = replacement;
				return textStore.filter(Boolean).join('\n');
			};
		})();

		function applyToSingletonTag(styleElement, index, remove, obj) {
			var css = remove ? "" : obj.css;

			if (styleElement.styleSheet) {
				styleElement.styleSheet.cssText = replaceText(index, css);
			} else {
				var cssNode = document.createTextNode(css);
				var childNodes = styleElement.childNodes;
				if (childNodes[index]) styleElement.removeChild(childNodes[index]);
				if (childNodes.length) {
					styleElement.insertBefore(cssNode, childNodes[index]);
				} else {
					styleElement.appendChild(cssNode);
				}
			}
		}

		function applyToTag(styleElement, obj) {
			var css = obj.css;
			var media = obj.media;
			var sourceMap = obj.sourceMap;

			if (media) {
				styleElement.setAttribute("media", media)
			}

			if (styleElement.styleSheet) {
				styleElement.styleSheet.cssText = css;
			} else {
				while (styleElement.firstChild) {
					styleElement.removeChild(styleElement.firstChild);
				}
				styleElement.appendChild(document.createTextNode(css));
			}
		}

		function updateLink(linkElement, obj) {
			var css = obj.css;
			var media = obj.media;
			var sourceMap = obj.sourceMap;

			if (sourceMap) {
				// http://stackoverflow.com/a/26603875
				css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
			}

			var blob = new Blob([css], {type: "text/css"});

			var oldSrc = linkElement.href;

			linkElement.href = URL.createObjectURL(blob);

			if (oldSrc)
				URL.revokeObjectURL(oldSrc);
		}


		/***/
	},
	/* 467 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Created by dennis on 28/07/2015.
		 */

		'use strict';

		Object.defineProperty(exports, '__esModule', {
			value: true
		});

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		var _angular = __webpack_require__(242);

		var _angular2 = _interopRequireDefault(_angular);

		var _mainModule = __webpack_require__(453);

		var _mainModule2 = _interopRequireDefault(_mainModule);

		var _utilsAppUtils = __webpack_require__(468);

		var _utilsAppUtils2 = _interopRequireDefault(_utilsAppUtils);

		var _utilsModule = __webpack_require__(469);

		var _utilsModule2 = _interopRequireDefault(_utilsModule);

		var _module = new _utilsModule2['default']();

		function Directive(options) {
			return function decorator(target) {
				var directiveName = _utilsAppUtils2['default'].dashCaseToCamelCase(viewOptions.selector) || _utilsAppUtils2['default'].pascalCaseToCamelCase(target.name);
				_mainModule2['default'].directive(directiveName, _module.directiveFactory(target));
			};
		}

		function View(viewOptions) {
			var options = viewOptions;
			var defaults = {
				template: viewOptions.template,
				restrict: 'EA',
				scope: {},
				bindToController: true,
				controllerAs: 'vm'
			};
			return function decorator(target) {
				var directiveName = _utilsAppUtils2['default'].dashCaseToCamelCase(viewOptions.selector) || _utilsAppUtils2['default'].pascalCaseToCamelCase(target.name);
				options = options || (options = {});
				options.bindToController = options.bindToController || options.bind || {};

				_mainModule2['default'].directive(directiveName, function () {
					return Object.assign(defaults, {controller: _module.normalizeConstructor(target)}, options);
				});
			};
		}

		function ReactView(viewOptions) {
			return function decorator(target) {
				var directiveName = _utilsAppUtils2['default'].dashCaseToCamelCase(viewOptions.selector) || _utilsAppUtils2['default'].pascalCaseToCamelCase(target.name);
				ReactDirective.$inject = ['reactDirective'];
				function ReactDirective(reactDirective) {
					return reactDirective(target, viewOptions.propsToBind);
				}

				_mainModule2['default'].directive(_utilsAppUtils2['default'].dashCaseToCamelCase(directiveName), ReactDirective);
			};
		}

		exports.View = View;
		exports.ReactView = ReactView;
		exports.Directive = Directive;

		/***/
	},
	/* 468 */
	/***/ function (module, exports, __webpack_require__) {

		/**
		 * Created by dennis on 28/07/2015.
		 */

		'use strict';

		Object.defineProperty(exports, '__esModule', {
			value: true
		});

		var _createDecoratedClass = (function () {
			function defineProperties(target, descriptors, initializers) {
				for (var i = 0; i < descriptors.length; i++) {
					var descriptor = descriptors[i];
					var decorators = descriptor.decorators;
					var key = descriptor.key;
					delete descriptor.key;
					delete descriptor.decorators;
					descriptor.enumerable = descriptor.enumerable || false;
					descriptor.configurable = true;
					if ('value' in descriptor || descriptor.initializer) descriptor.writable = true;
					if (decorators) {
						for (var f = 0; f < decorators.length; f++) {
							var decorator = decorators[f];
							if (typeof decorator === 'function') {
								descriptor = decorator(target, key, descriptor) || descriptor;
							} else {
								throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator);
							}
						}
						if (descriptor.initializer !== undefined) {
							initializers[key] = descriptor;
							continue;
						}
					}
					Object.defineProperty(target, key, descriptor);
				}
			}

			return function (Constructor, protoProps, staticProps, protoInitializers, staticInitializers) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps, protoInitializers);
				if (staticProps) defineProperties(Constructor, staticProps, staticInitializers);
				return Constructor;
			};
		})();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError('Cannot call a class as a function');
			}
		}

		var _annotationsNgDecorator = __webpack_require__(452);

		var AppUtils = (function () {
			function AppUtils() {
				_classCallCheck(this, AppUtils);
			}

			_createDecoratedClass(AppUtils, null, [{
				key: 'setInjector',
				decorators: [(0, _annotationsNgDecorator.Inject)('$injector'), (0, _annotationsNgDecorator.Run)()],
				value: function setInjector($injector) {
					AppUtils.$injector = $injector;
				}
			}, {
				key: 'pascalCaseToCamelCase',
				value: function pascalCaseToCamelCase(string) {
					if (!string) {
						return '';
					}
					return string.charAt(0).toLowerCase() + string.substring(1);
				}
			}, {
				key: 'dashCaseToCamelCase',
				value: function dashCaseToCamelCase(string) {
					if (!string) {
						return '';
					}
					return string.replace(/-([a-z])/ig, function (all, letter) {
						return letter.toUpperCase();
					});
				}
			}, {
				key: 'getService',
				value: function getService(name) {
					return AppUtils.$injector.get(name);
				}
			}]);

			return AppUtils;
		})();

		exports['default'] = AppUtils;
		module.exports = exports['default'];

		/***/
	},
	/* 469 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, '__esModule', {
			value: true
		});
		var _bind = Function.prototype.bind;

		var _createClass = (function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];
					descriptor.enumerable = descriptor.enumerable || false;
					descriptor.configurable = true;
					if ('value' in descriptor) descriptor.writable = true;
					Object.defineProperty(target, descriptor.key, descriptor);
				}
			}

			return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);
				if (staticProps) defineProperties(Constructor, staticProps);
				return Constructor;
			};
		})();

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError('Cannot call a class as a function');
			}
		}

		var _appUtils = __webpack_require__(468);

		var _appUtils2 = _interopRequireDefault(_appUtils);

		var _annotationsNgDecorator = __webpack_require__(452);

		var Module = (function () {
			function Module() {
				_classCallCheck(this, Module);

				this.annotate = angular.injector().annotate;
			}

			_createClass(Module, [{
				key: 'directiveFactory',
				value: function directiveFactory(constructorFn) {

					constructorFn = this.normalizeConstructor(constructorFn);

					if (!constructorFn.prototype.compile) {
						constructorFn.prototype.compile = function () {
						};
					}

					var originalCompileFn = this.cloneFunction(constructorFn.prototype.compile);
					Module.override(constructorFn.prototype, 'compile', function () {
						return function () {
							originalCompileFn.apply(this, arguments);
							if (constructorFn.prototype.link) {
								return constructorFn.prototype.link.bind(this);
							}
						};
					});

					return this.createFactoryArray(constructorFn);
				}
			}, {
				key: 'normalizeConstructor',
				value: function normalizeConstructor(input) {
					var constructorFn;

					if (angular.isArray(input.constructor)) {
						var injected = input.slice(0, input.length - 1);
						constructorFn = input[input.length - 1];
						constructorFn.$inject = injected;
					} else {
						constructorFn = input;
						constructorFn.$inject = this.annotate(input);
					}

					return constructorFn;
				}
			}, {
				key: 'createFactoryArray',
				value: function createFactoryArray(constructorFn) {
					var args = constructorFn.$inject || [];
					var factoryArray = args.slice(); // create a copy of the array
					factoryArray.push(function () {
						for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
							args[_key] = arguments[_key];
						}

						var instance = new (_bind.apply(constructorFn, [null].concat(args)))();
						for (var key in instance) {
							instance[key] = instance[key];
						}
						return instance;
					});

					return factoryArray;
				}
			}, {
				key: 'cloneFunction',
				value: function cloneFunction(original) {
					return function () {
						return original.apply(this, arguments);
					};
				}
			}], [{
				key: 'override',
				value: function override(object, methodName, callback) {
					object[methodName] = callback(object[methodName]);
				}
			}]);

			return Module;
		})();

		exports['default'] = Module;
		module.exports = exports['default'];

		/***/
	},
	/* 470 */
	/***/ function (module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
		'use strict';

		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(247), __webpack_require__(240)], __WEBPACK_AMD_DEFINE_RESULT__ = function (React, _) {
			'use strict';
			function repeatData1(data, dataIndex) {
				return React.createElement('tr', {'key': dataIndex}, React.createElement('td', {}, data), React.createElement('td', {}, data), React.createElement('td', {}, data));
			}

			return function () {
				return React.createElement('div', {'className': 'container-fluid'}, React.createElement('div', {'className': 'row margin-top-10'}, React.createElement('h2', {}, '\r\n            React example using ', React.createElement('a', {'href': 'https://github.com/davidchang/ngReact'}, 'ngReact'), '\r\n            And ', React.createElement('a', {'href': 'https://github.com/wix/react-templates'}, 'react-templates')), React.createElement('hr', {})), React.createElement('div', {'className': 'row'}, React.createElement('div', {}, '\r\n            Create ngReact directive. by default using Class name as Directive name : \'rt-component-demo\'.\r\n            ', React.createElement('br', {}, '\r\n            Or you can specify selector in ReactView options\r\n        ')), React.createElement('pre', {'className': 'prettyprint'}, React.createElement('code', {}, '\r\nimport \'./style/rt-demo.css\'\r\nimport ', '{ReactView}', ' from \'annotations/directive-decorator\';\r\nimport React from \'react/addons\';\r\nimport template from \'./rt-demo-template.rt\'; //using react template loader\r\nimport AppUtils from \'../../core/utils/app-utils\';\r\n\r\n//you may add selector:\'favorite-selector\'\r\n@ReactView(', '{\n    propsToBind: [\'demoItems\']\n}', ')\r\n\r\nclass RtComponentDemo extends React.Component ', '{\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [\'One\', \'Two\', \'Three\']\n        }\n    }\n\n    render() {\n        return template.apply(this);\n    }\n}'))), React.createElement('div', {'className': 'row'}, React.createElement('div', {}, '\r\n            React Template Sample:\r\n        '), React.createElement('pre', {'className': 'prettyprint lang-html'}, '\r\n\r\n<div className="container-fluid">\r\n    <div className="row margin-top-10">\r\n        <table className="table">\r\n            <thead>\r\n            <tr>\r\n                <th>\r\n                    <span className="contact-label" data-translate>\r\n                       Title one\r\n                    </span>\r\n                </th>\r\n                <th>\r\n                    <span className="contact-label" data-translate>\r\n                       Title two\r\n                    </span>\r\n                </th>\r\n                <th>\r\n                    <span className="contact-label" data-translate>\r\n                       Title three\r\n                    </span>\r\n                </th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr rt-repeat="data in this.state.items" key=', '{dataIndex}', '>\r\n                <td>', '{data}', '</td>\r\n                <td>', '{data}', '</td>\r\n                <td>', '{data}', '</td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>\r\n\r\n        ')), React.createElement('div', {'className': 'row'}, React.createElement('div', {}, '\r\n            Rendered Directive:\r\n        '), React.createElement('pre', {}, React.createElement('div', {'className': 'container-fluid'}, React.createElement('div', {'className': 'row margin-top-10'}, React.createElement('table', {'className': 'table'}, React.createElement('thead', {}, React.createElement('tr', {}, React.createElement('th', {}, React.createElement('span', {
					'className': 'contact-label',
					'data-translate': true
				}, '\r\n                           Title one\r\n                        ')), React.createElement('th', {}, React.createElement('span', {
					'className': 'contact-label',
					'data-translate': true
				}, '\r\n                           Title two\r\n                        ')), React.createElement('th', {}, React.createElement('span', {
					'className': 'contact-label',
					'data-translate': true
				}, '\r\n                           Title three\r\n                        ')))), React.createElement.apply(this, ['tbody', {}, _.map(this.state.items, repeatData1.bind(this))])))))));
			};
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

		/***/
	},
	/* 471 */
	/***/ function (module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, '__esModule', {
			value: true
		});

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {'default': obj};
		}

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError('Cannot call a class as a function');
			}
		}

		__webpack_require__(472);

		var _viewDemoHtml = __webpack_require__(474);

		var _viewDemoHtml2 = _interopRequireDefault(_viewDemoHtml);

		var _annotationsDirectiveDecorator = __webpack_require__(467);

		//

		var NgViewDemo = (function () {
			function NgViewDemo($window) {
				_classCallCheck(this, _NgViewDemo);

				this.$window = $window;
				this.items = ['One', 'Two', 'Three'];
			}

			var _NgViewDemo = NgViewDemo;
			NgViewDemo = (0, _annotationsDirectiveDecorator.View)({
					selector: 'ng-view-demo',
					template: _viewDemoHtml2['default']
				})(NgViewDemo) || NgViewDemo;
			return NgViewDemo;
		})();

		exports['default'] = NgViewDemo;
		module.exports = exports['default'];

		/***/
	},
	/* 472 */
	/***/ function (module, exports, __webpack_require__) {

		// style-loader: Adds some css to the DOM by adding a <style> tag

		// load the styles
		var content = __webpack_require__(473);
		if (typeof content === 'string') content = [[module.id, content, '']];
		// add the styles to the DOM
		var update = __webpack_require__(466)(content, {});
		if (content.locals) module.exports = content.locals;
		// Hot Module Replacement
		if (false) {
			// When the styles change, update the <style> tags
			if (!content.locals) {
				module.hot.accept("!!./../../../../../node_modules/css-loader/index.js!./view-demo.css", function () {
					var newContent = require("!!./../../../../../node_modules/css-loader/index.js!./view-demo.css");
					if (typeof newContent === 'string') newContent = [[module.id, newContent, '']];
					update(newContent);
				});
			}
			// When the module is disposed, remove the <style> tags
			module.hot.dispose(function () {
				update();
			});
		}

		/***/
	},
	/* 473 */
	/***/ function (module, exports, __webpack_require__) {

		exports = module.exports = __webpack_require__(465)();
		// imports


		// module
		exports.push([module.id, "", ""]);

		// exports


		/***/
	},
	/* 474 */
	/***/ function (module, exports) {

		module.exports = "<div class=\"container-fluid\">\r\n    <div class=\"row margin-top-10\">\r\n        <h2>\r\n            Angular View simple example.\r\n        </h2>\r\n        <hr>\r\n    </div>\r\n    <div class=\"row\">\r\n        This is regular angular directive that using: <span class=\"color-text\">bindToController</span> and <span\r\n            class=\"color-text\">controllerAs</span> syntax\r\n        <br>\r\n        The class will be the controller and exposed as vm object on the scope.\r\n        <hr>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div>\r\n            Create View directive. by default using Class name as Directive name : 'ng-view-demo'\r\n            <br>\r\n            Or you can specify selector in View options\r\n        </div>\r\n            <pre class=\"prettyprint\">\r\nimport   './style/view-demo.css'\r\nimport template from './view-demo.html';\r\nimport {View} from 'annotations/directive-decorator';\r\n\r\n@View({\r\n    selector: 'ng-view-demo',\r\n    template: template\r\n})\r\n//\r\nclass NgViewDemo {\r\n    constructor($window) {\r\n        this.$window = $window;//service injected\r\n        this.items = ['One', 'Two', 'Three'];//using the object for  directive state\r\n    }\r\n}\r\n\r\nexport default NgViewDemo\r\n\r\n         </pre>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div>\r\n            Template Sample:\r\n        </div>\r\n        <pre class=\"prettyprint\">\r\n&lt;div class=\"container-fluid\"&gt;\r\n    &lt;div class=\"row margin-top-10\"&gt;\r\n        &lt;table class=\"table\"&gt;\r\n            &lt;thead&gt;\r\n            &lt;tr&gt;\r\n                &lt;th&gt;\r\n                    &lt;span class=\"contact-label\" data-translate&gt;\r\n                       Title one\r\n                    &lt;/span&gt;\r\n                &lt;/th&gt;\r\n                &lt;th&gt;\r\n                    &lt;span class=\"contact-label\" data-translate&gt;\r\n                       Title two\r\n                    &lt;/span&gt;\r\n                &lt;/th&gt;\r\n                &lt;th&gt;\r\n                    &lt;span class=\"contact-label\" data-translate&gt;\r\n                       Title three\r\n                    &lt;/span&gt;\r\n                &lt;/th&gt;\r\n            &lt;/tr&gt;\r\n            &lt;/thead&gt;\r\n            &lt;tbody&gt;\r\n            &lt;tr ng-repeat=\"item in vm.items\"&gt;\r\n                &lt;td&gt;{{'{{item}\\}'}}&lt;/td&gt;\r\n                &lt;td&gt;{{'{{item}\\}'}}&lt;/td&gt;\r\n                &lt;td&gt;{{'{{item}\\}'}}&lt;/td&gt;\r\n            &lt;/tr&gt;\r\n            &lt;/tbody&gt;\r\n        &lt;/table&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n        </pre>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div>\r\n            Rendered Directive:\r\n        </div>\r\n        <pre>\r\n           <table class=\"table\">\r\n               <thead>\r\n               <tr>\r\n                   <th>\r\n                    <span class=\"contact-label\" data-translate>\r\n                       Title one\r\n                    </span>\r\n                   </th>\r\n                   <th>\r\n                    <span class=\"contact-label\" data-translate>\r\n                       Title two\r\n                    </span>\r\n                   </th>\r\n                   <th>\r\n                    <span class=\"contact-label\" data-translate>\r\n                       Title three\r\n                    </span>\r\n                   </th>\r\n               </tr>\r\n               </thead>\r\n               <tbody>\r\n               <tr ng-repeat=\"item in vm.items\">\r\n                   <td>{{item}}</td>\r\n                   <td>{{item}}</td>\r\n                   <td>{{item}}</td>\r\n               </tr>\r\n               </tbody>\r\n           </table>\r\n         </pre>\r\n    </div>\r\n</div>\r\n"

		/***/
	}
	/******/]);
//# sourceMappingURL=demoApp.bundle.js.map